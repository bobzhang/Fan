(* -*- Mode:caml; -*- *)

#use "topfind";;
#require "batteries";;
#directory "+compiler-libs";;

let _ = begin
  Hashtbl.replace Toploop.directive_table "useo"
    (Toploop.Directive_string (fun file ->
      BatRef.protect Toploop.parse_use_file Parse.use_file
        (fun _ -> ignore(Toploop.use_file Format.std_formatter file))))
      (* let old = !Toploop.parse_use_file in *)
      (* let () = Toploop.parse_use_file:=Parse.use_file in *)
      (* let () = try *)
      (*   ignore(Toploop.use_file Format.std_formatter file) *)
      (* with *)
      (*   exn -> begin Toploop.parse_use_file := old; raise exn end in *)
      (* (\* Toploop.parse_use_file := old) *\)) *)
end
open Format;;
let print_ocaml_loc (fmt:formatter)(loc:Location.t) = ();;
#install_printer print_ocaml_loc;;

#directory "_build";;
#directory "_build/src";;
(* #directory "_build/cold" ;; *)
#load_rec "FanLoc.cmo";;
#load_rec "FanBasic.cmo";;
#load_rec "Query.cmo";;
let fmt = std_formatter
(* let _ = Clflags.noprompt := true;; *)

let _loc = FanLoc.ghost;;
let _ = begin
  Hashtbl.replace Toploop.directive_table "pwd"
    (Toploop.Directive_none (fun () -> prerr_endline (Sys.getcwd ())))
end

let (|-) f g x = g (f x );;

let interface_of_string =
  Lexing.from_string |- Parse.interface;;
let implementation_of_string =
  Lexing.from_string |- Parse.implementation;;

let tg_dp () =
  Clflags.dump_parsetree := not !Clflags.dump_parsetree ;;
let pp =fprintf
let f = std_formatter;;
(* consult Topdirs for more utlities *)
#load_rec "FanLexUtil.cmo";;
#load_rec "FanTop.cma";;
#load_rec "OAstPrint.cmo";;

open FanTop;;
open FanTop.P;;
open FanSig;;
open LibUtil;;
open FanUtil;;
open Stream;;
open Grammar;;
open Structure;;
open OAstPrint;;
Toploop.print_out_value := loose#out_value;;
Toploop.print_out_type := loose#out_type;;

Toploop.print_out_class_type := loose#class_type;;
Toploop.print_out_module_type := loose#module_type;;
Toploop.print_out_sig_item := loose#sig_item;;
Toploop.print_out_signature := loose#signature;;
Toploop.print_out_phrase := loose#phrase;;
#install_printer Gram.dump;;

let print_tree = Grammar.Print.dump#tree;; 
#install_printer print_tree;;
(* #useo "./test/test_fan.ml";; *)
(* #load_rec "FanTop.cma";; *)
open Syntax;;

let t e s = Gram.parse_string e FanLoc.string_loc s;;
