(* -*- Mode:caml; -*- *)

#use "topfind";;
#require "unix";;
(* #require "batteries";; *)
open Format;;
#directory "+compiler-libs";;
#directory "_build";;
#directory "_build/src";;
(* #directory "_build/cold" ;; *)
#load_rec "FanLoc.cmo";;
#load_rec "FanBasic.cmo";;
#load_rec "Query.cmo";;
(* consult Topdirs for more utlities *)
#load_rec "FanLexUtil.cmo";;
#load_rec "FanTop.cma";;
#load_rec "OAstPrint.cmo";;

let fmt = std_formatter
(* let _ = Clflags.noprompt := true;; *)

let _loc = FanLoc.ghost;;

let (|-) f g x = g (f x );;

let _ = begin
  Hashtbl.replace Toploop.directive_table "useo"
    (Toploop.Directive_string (fun file ->
      LibUtil.Ref.protect Toploop.parse_use_file Parse.use_file
        (fun _ -> ignore(Toploop.use_file Format.std_formatter file))))
      (* let old = !Toploop.parse_use_file in *)
      (* let () = Toploop.parse_use_file:=Parse.use_file in *)
      (* let () = try *)
      (*   ignore(Toploop.use_file Format.std_formatter file) *)
      (* with *)
      (*   exn -> begin Toploop.parse_use_file := old; raise exn end in *)
      (* (\* Toploop.parse_use_file := old) *\)) *)
end



let interface_of_string =
  Lexing.from_string |- Parse.interface;;
let implementation_of_string =
  Lexing.from_string |- Parse.implementation;;

let tg_dp () =
  Clflags.dump_parsetree := not !Clflags.dump_parsetree ;;
let pp =fprintf
let f = std_formatter;;
open Fan;;
open FanTop;;
(* open FanSig;; *)
open LibUtil;;
open FanUtil;;
open Stream;;
open Grammar;;
open Structure;;
open OAstPrint;;
Toploop.print_out_value := loose#out_value;;
Toploop.print_out_type := loose#out_type;;

Toploop.print_out_class_type := loose#class_type;;
Toploop.print_out_module_type := loose#module_type;;
Toploop.print_out_sig_item := loose#sig_item;;
Toploop.print_out_signature := loose#signature;;
Toploop.print_out_phrase := loose#phrase;;
let print_ocaml_loc (fmt:formatter)(loc:Location.t) = ();;


let print_tree = Grammar.Print.dump#tree;; 

(* #useo "./test/test_fan.ml";; *)
(* #load_rec "FanTop.cma";; *)
open Syntax;;

let t e s = Gram.parse_string e  s;;
(* open Lib;; *)
module L = Lib;;
open L.Meta;;

(* let anti_filter = L.Expr.antiquot_expander *)
(*     ~parse_patt:AntiquotSyntax.parse_patt *)
(*     ~parse_expr:AntiquotSyntax.parse_expr;; *)

let normal () = begin
  Toploop.parse_toplevel_phrase := Parse.toplevel_phrase
end;;

let _ = begin
  Hashtbl.replace Toploop.directive_table "pwd"
    (Toploop.Directive_none (fun () -> prerr_endline (Sys.getcwd ())));
  Hashtbl.replace Toploop.directive_table "normal"
    (Toploop.Directive_none (fun () -> normal ()))
end
;;
AstQuotation.default:="expr";;
let env = !Toploop.toplevel_env;;
#install_printer print_tree;;
#install_printer Gram.dump;;
#install_printer print_ocaml_loc;;

(* #install_printer FanBasic.p_expr;; *)
(* #load_rec "Gen.cmo";; *)

(* #default_quotation "str";;
   FIXME nto supported 
*)
open ParserLex;;
AstQuotation.set_default "str";;
module O = Obj;;

