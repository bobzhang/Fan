(* let generate_fibs = with exp fun *)
(*   [ {:exp|$int:x|} -> *)
(*     let j = int_of_string x in *)
(*     let res = zfold_left ~until:j ~acc:{||} (fun acc i -> {| $acc; print_int (FIB $`int:i) |}) in *)
(*     {:exp| $seq:res |} *)
(*     (\* Array.map (fun i -> {|print_int (FIB $`int:i) |} ) *\) *)
(*     (\* {:exp| for _j = 0 to $int:x do print_int (FIB _j) done |} *\) *)
(*   | e -> e ]; *)

(* register_macro ("GFIB", generate_fibs);     *)

(*
  #filter "macro";;
  GFIB 10;
(* let u x = *)
  [FIB 13;
  FIB 13;
  FIB x]
  ;
(*
  {:exp| [FIB 13; FIB 13; FIB x ] |}
 *)

 *)
  
