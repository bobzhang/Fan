#+STARTUP: indent
#+STARTUP: overview
#+TAGS: details(d) ideas(i) attention(t) trick(k)
#+TAGS:  { bad(1) good(2) awesome(3) } question(q)
#+SEQ_TODO: TODO(T) WAIT(W) | DONE(D!) CANCELED(C@) 
#+COLUMNS: %10ITEM  %10PRIORITY %15TODO %65TAGS

# * shortcut                                                           :awesome:
#   Shift+Table : display overview
#   C-c C-c : smart update 
#   Table : cycle display
#   C-c {C-f C-b} the same level 
#   c-c {C-n c-p} 跨级 c-c c-u 上级
#   M-left 将当前项升高一级 M-right (M-up M-down 将当前分支上下移动
#   [[链接地址] [链接名称]]
#   C-c \ 搜索标签 (a+b) (a-b 有a 没b) (a|b) (C-c C-c查询视图中退出)
#   C-c C-o -- open link at point
#   C-c C-t [T] todo 
#   <s 

* parsing
** lexer.ml lexer.mll
generated code from
** location.ml

** longident.ml
#+begin_src ocaml
type t =
    Lident of string
  | Ldot of t * string
  | Lapply of t * t
(* mainly for module applicaton , it can not be flattened*)
#+end_src
** parsing.ml parser.mly
wrap Parser
%start implementation interface toplevel_phrase use_file any_longident

** printast.ml
#+BEGIN_SRC ocaml
val interface : formatter -> signature_item list -> unit;;
val implementation : formatter -> structure_item list -> unit;;
val top_phrase : formatter -> toplevel_phrase -> unit;;
#+END_SRC
** syntaxerr.ml
#+BEGIN_SRC ocaml
val report_error: formatter -> error -> unit
#+END_SRC
** asttypes some constant information

** parsetree
#+BEGIN_SRC ocaml
(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* $Id: parsetree.mli 12511 2012-05-30 13:29:48Z lefessan $ *)

(* Abstract syntax tree produced by parsing *)

open Asttypes

(* Type expressions for the core language *)

type core_type =
  { ptyp_desc: core_type_desc;
    ptyp_loc: Location.t }

and core_type_desc =
    Ptyp_any
  | Ptyp_var of string
  | Ptyp_arrow of label * core_type * core_type
  | Ptyp_tuple of core_type list
  | Ptyp_constr of Longident.t loc * core_type list
  | Ptyp_object of core_field_type list
  | Ptyp_class of Longident.t loc * core_type list * label list
  | Ptyp_alias of core_type * string
  | Ptyp_variant of row_field list * bool * label list option
  | Ptyp_poly of string list * core_type
  | Ptyp_package of package_type


and package_type = Longident.t loc * (Longident.t loc * core_type) list

and core_field_type =
  { pfield_desc: core_field_desc;
    pfield_loc: Location.t }

and core_field_desc =
    Pfield of string * core_type
  | Pfield_var

and row_field =
    Rtag of label * bool * core_type list
  | Rinherit of core_type

(* Type expressions for the class language *)

type 'a class_infos =
  { pci_virt: virtual_flag;
    pci_params: string loc list * Location.t;
    pci_name: string loc;
    pci_expr: 'a;
    pci_variance: (bool * bool) list;
    pci_loc: Location.t }

(* Value expressions for the core language *)

type pattern =
  { ppat_desc: pattern_desc;
    ppat_loc: Location.t }

and pattern_desc =
    Ppat_any
  | Ppat_var of string loc
  | Ppat_alias of pattern * string loc
  | Ppat_constant of constant
  | Ppat_tuple of pattern list
  | Ppat_construct of Longident.t loc * pattern option * bool
  | Ppat_variant of label * pattern option
  | Ppat_record of (Longident.t loc * pattern) list * closed_flag
  | Ppat_array of pattern list
  | Ppat_or of pattern * pattern
  | Ppat_constraint of pattern * core_type
  | Ppat_type of Longident.t loc
  | Ppat_lazy of pattern
  | Ppat_unpack of string loc

type expression =
  { pexp_desc: expression_desc;
    pexp_loc: Location.t }

and expression_desc =
    Pexp_ident of Longident.t loc
  | Pexp_constant of constant
  | Pexp_let of rec_flag * (pattern * expression) list * expression
  | Pexp_function of label * expression option * (pattern * expression) list
  | Pexp_apply of expression * (label * expression) list
  | Pexp_match of expression * (pattern * expression) list
  | Pexp_try of expression * (pattern * expression) list
  | Pexp_tuple of expression list
  | Pexp_construct of Longident.t loc * expression option * bool
  | Pexp_variant of label * expression option
  | Pexp_record of (Longident.t loc * expression) list * expression option
  | Pexp_field of expression * Longident.t loc
  | Pexp_setfield of expression * Longident.t loc * expression
  | Pexp_array of expression list
  | Pexp_ifthenelse of expression * expression * expression option
  | Pexp_sequence of expression * expression
  | Pexp_while of expression * expression
  | Pexp_for of string loc *  expression * expression * direction_flag * expression
  | Pexp_constraint of expression * core_type option * core_type option
  | Pexp_when of expression * expression
  | Pexp_send of expression * string
  | Pexp_new of Longident.t loc
  | Pexp_setinstvar of string loc * expression
  | Pexp_override of (string loc * expression) list
  | Pexp_letmodule of string loc * module_expr * expression
  | Pexp_assert of expression
  | Pexp_assertfalse
  | Pexp_lazy of expression
  | Pexp_poly of expression * core_type option
  | Pexp_object of class_structure
  | Pexp_newtype of string * expression
  | Pexp_pack of module_expr
  | Pexp_open of Longident.t loc * expression

(* Value descriptions *)

and value_description =
  { pval_type: core_type;
    pval_prim: string list;
    pval_loc : Location.t
    }

(* Type declarations *)

and type_declaration =
  { ptype_params: string loc option list;
    ptype_cstrs: (core_type * core_type * Location.t) list;
    ptype_kind: type_kind;
    ptype_private: private_flag;
    ptype_manifest: core_type option;
    ptype_variance: (bool * bool) list;
    ptype_loc: Location.t }

and type_kind =
    Ptype_abstract
  | Ptype_variant of
      (string loc * core_type list * core_type option * Location.t) list
  | Ptype_record of
      (string loc * mutable_flag * core_type * Location.t) list

and exception_declaration = core_type list

(* Type expressions for the class language *)

and class_type =
  { pcty_desc: class_type_desc;
    pcty_loc: Location.t }

and class_type_desc =
    Pcty_constr of Longident.t loc * core_type list
  | Pcty_signature of class_signature
  | Pcty_fun of label * core_type * class_type

and class_signature = {
    pcsig_self : core_type;
    pcsig_fields : class_type_field list;
    pcsig_loc : Location.t;
  }

and class_type_field = {
    pctf_desc : class_type_field_desc;
    pctf_loc : Location.t;
  }

and class_type_field_desc =
    Pctf_inher of class_type
  | Pctf_val of (string * mutable_flag * virtual_flag * core_type)
  | Pctf_virt  of (string * private_flag * core_type)
  | Pctf_meth  of (string * private_flag * core_type)
  | Pctf_cstr  of (core_type * core_type)

and class_description = class_type class_infos

and class_type_declaration = class_type class_infos

(* Value expressions for the class language *)

and class_expr =
  { pcl_desc: class_expr_desc;
    pcl_loc: Location.t }

and class_expr_desc =
    Pcl_constr of Longident.t loc * core_type list
  | Pcl_structure of class_structure
  | Pcl_fun of label * expression option * pattern * class_expr
  | Pcl_apply of class_expr * (label * expression) list
  | Pcl_let of rec_flag * (pattern * expression) list * class_expr
  | Pcl_constraint of class_expr * class_type

and class_structure = {
    pcstr_pat : pattern;
    pcstr_fields :  class_field list;
  }

and class_field = {
    pcf_desc : class_field_desc;
    pcf_loc : Location.t;
  }

and class_field_desc =
    Pcf_inher of override_flag * class_expr * string option
  | Pcf_valvirt of (string loc * mutable_flag * core_type)
  | Pcf_val of (string loc * mutable_flag * override_flag * expression)
  | Pcf_virt  of (string loc * private_flag * core_type)
  | Pcf_meth of (string loc * private_flag *override_flag * expression)
  | Pcf_constr  of (core_type * core_type)
  | Pcf_init  of expression

and class_declaration = class_expr class_infos

(* Type expressions for the module language *)

and module_type =
  { pmty_desc: module_type_desc;
    pmty_loc: Location.t }

and module_type_desc =
    Pmty_ident of Longident.t loc
  | Pmty_signature of signature
  | Pmty_functor of string loc * module_type * module_type
  | Pmty_with of module_type * (Longident.t loc * with_constraint) list
  | Pmty_typeof of module_expr

and signature = signature_item list

and signature_item =
  { psig_desc: signature_item_desc;
    psig_loc: Location.t }

and signature_item_desc =
    Psig_value of string loc * value_description
  | Psig_type of (string loc * type_declaration) list
  | Psig_exception of string loc * exception_declaration
  | Psig_module of string loc * module_type
  | Psig_recmodule of (string loc * module_type) list
  | Psig_modtype of string loc * modtype_declaration
  | Psig_open of Longident.t loc
  | Psig_include of module_type
  | Psig_class of class_description list
  | Psig_class_type of class_type_declaration list

and modtype_declaration =
    Pmodtype_abstract
  | Pmodtype_manifest of module_type

and with_constraint =
    Pwith_type of type_declaration
  | Pwith_module of Longident.t loc
  | Pwith_typesubst of type_declaration
  | Pwith_modsubst of Longident.t loc

(* Value expressions for the module language *)

and module_expr =
  { pmod_desc: module_expr_desc;
    pmod_loc: Location.t }

and module_expr_desc =
    Pmod_ident of Longident.t loc
  | Pmod_structure of structure
  | Pmod_functor of string loc * module_type * module_expr
  | Pmod_apply of module_expr * module_expr
  | Pmod_constraint of module_expr * module_type
  | Pmod_unpack of expression

and structure = structure_item list

and structure_item =
  { pstr_desc: structure_item_desc;
    pstr_loc: Location.t }

and structure_item_desc =
    Pstr_eval of expression
  | Pstr_value of rec_flag * (pattern * expression) list
  | Pstr_primitive of string loc * value_description
  | Pstr_type of (string loc * type_declaration) list
  | Pstr_exception of string loc * exception_declaration
  | Pstr_exn_rebind of string loc * Longident.t loc
  | Pstr_module of string loc * module_expr
  | Pstr_recmodule of (string loc * module_type * module_expr) list
  | Pstr_modtype of string loc * module_type
  | Pstr_open of Longident.t loc
  | Pstr_class of class_declaration list
  | Pstr_class_type of class_type_declaration list
  | Pstr_include of module_expr

(* Toplevel phrases *)

type toplevel_phrase =
    Ptop_def of structure
  | Ptop_dir of string * directive_argument

and directive_argument =
    Pdir_none
  | Pdir_string of string
  | Pdir_int of int
  | Pdir_ident of Longident.t
  | Pdir_bool of bool
#+END_SRC

* typing

* ocamlcommon
#+BEGIN_SRC shell-script
Unit name: Misc
Unit name: Tbl
Unit name: Config
Unit name: Clflags
Unit name: Terminfo
Unit name: Ccomp
Unit name: Warnings
Unit name: Consistbl   #Util
Unit name: Location    #Parsing
Unit name: Longident   
Unit name: Syntaxerr   
Unit name: Parser      
Unit name: Lexer       
Unit name: Parse       
Unit name: Printast    #Parsing
Unit name: Ident       #Typing
Unit name: Path
Unit name: Primitive
Unit name: Types
Unit name: Btype
Unit name: Oprint
Unit name: Subst
Unit name: Predef
Unit name: Datarepr
Unit name: Cmi_format
Unit name: Env
Unit name: Typedtree
Unit name: Printtyped
Unit name: Ctype
Unit name: Printtyp
Unit name: Includeclass
Unit name: Mtype
Unit name: Includecore
Unit name: Includemod
Unit name: Typetexp     
Unit name: Parmatch    
Unit name: Cmt_format
Unit name: Stypes
Unit name: Typecore
Unit name: Typedecl
Unit name: Typeclass
Unit name: Typemod        #Typing
Unit name: Lambda         #bytecomp
Unit name: Printlambda
Unit name: Typeopt
Unit name: Switch
Unit name: Matching
Unit name: Translobj
Unit name: Translcore
Unit name: Translclass
Unit name: Translmod
Unit name: Simplif
Unit name: Runtimedef
Unit name: Pparse         #driver
Unit name: Main_args

#+END_SRC
* ocamlbytecomp
#+BEGIN_SRC shell-script
Unit name: Meta
Unit name: Instruct
Unit name: Bytegen
Unit name: Printinstr
Unit name: Opcodes
Unit name: Emitcode
Unit name: Bytesections
Unit name: Dll
Unit name: Symtable
Unit name: Bytelink
Unit name: Bytelibrarian
Unit name: Bytepackager
Unit name: Errors
Unit name: Compile
#+END_SRC
* ocamloptcomp
#+BEGIN_SRC shell-script
Unit name: Arch
Unit name: Debuginfo
Unit name: Cmm
Unit name: Printcmm
Unit name: Reg
Unit name: Mach
Unit name: Proc
Unit name: Clambda
Unit name: Printclambda
Unit name: Compilenv
Unit name: Closure
Unit name: Cmmgen
Unit name: Printmach
Unit name: Selectgen
Unit name: Selection
Unit name: Comballoc
Unit name: Liveness
Unit name: Spill
Unit name: Split
Unit name: Interf
Unit name: Coloring
Unit name: Reloadgen
Unit name: Reload
Unit name: Printlinear
Unit name: Linearize
Unit name: Schedgen
Unit name: Scheduling
Unit name: Emitaux
Unit name: Emit
Unit name: Asmgen
Unit name: Asmlink
Unit name: Asmlibrarian
Unit name: Asmpackager
Unit name: Opterrors
Unit name: Optcompile
#+END_SRC
* ocamltoplevel
#+BEGIN_SRC shell-script
Unit name: Genprintval
Unit name: Toploop
Unit name: Trace
Unit name: Topdirs
Unit name: Topmain
#+END_SRC
* Makefile
boot/ocamlrun boot/ocamlc -nostdlib -I boot  -o ocamlopt \
          compilerlibs/ocamlcommon.cma compilerlibs/ocamloptcomp.cma driver/optmain.cmo
boot/ocamlrun boot/ocamlc -nostdlib -I boot  -o ocamlc \
           compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma driver/main.cmo

* dyp parser
** examples
#+BEGIN_SRC tuareg (* calc_parser *)

%start main
%relation pi<pt<pp
%layout [' ' '\t']

%parser
main: expr "\n" {$1}
expr:
  | ['0'-'9']+      { int_of_string $1 } pi
  | "-" expr(=pi)            { -$2 }     pi
  | "(" expr ")"             { $2 }      pi
  | expr(<=pp) "+" expr(<pp) { $1 + $3 } pp
  | expr(<=pp) "-" expr(<pp) { $1 - $3 } pp
  | expr(<=pt) "*" expr(<pt) { $1 * $3 } pt
  | expr(<=pt) "/" expr(<pt) { $1 / $3 } pt

#+END_SRC

#+BEGIN_SRC tuareg (* expr.dyp *)

#define INFIX(op,p) expr(<=p) #op expr(<p) { $1 op $3 } p
expr:
  | ['0'-'9']+     { int_of_string $1 }  pi
  | "-" expr(=pi)            { -$2 }     pi
  | "(" expr ")"             { $2 }      pi
  | INFIX(+,pp)
  | INFIX(-,pp)
  | INFIX(*,pt)
  | INFIX(/,pt)
#+END_SRC

#+BEGIN_SRC tuareg
%start main
%relation pi<pt<pp
%layout [' ' '\t']
%parser
main: expr "\n" { $1 }
#include "expr.dyp"
#+END_SRC

You must specify the dependencies via myocambuild 


** modules

*** Argument command line parsing

*** Priority_by_relation

*** Automaton [Priority_by_relation]

*** Insert_linenum
mll
*** dyplex [Automaton]
*** Dyp [Dyplex]
*** dypgen_parser [Dyp]
Bootstrapped by dypgen_parser.dyp
*** dypgen_lexer
by ocamllex
*** dypgen
[Parse_tree Dypgen_parser Dypgen_lexer Extract_type Insert_linenum]
driver
*** Dypgen_parser.cma
Unit name: Priority_by_relation
Unit name: Automaton
Unit name: Dyplex
Unit name: Dyp
Unit name: Dypgen_parser
*** Dypgen_lexer.cma
Unit name: Priority_by_relation
Unit name: Automaton
Unit name: Dyplex
Unit name: Dyp
Unit name: Dypgen_parser
Unit name: Dypgen_lexer


* GLR parser
 

** LR(LALR and SLR)
** Features
*** Self extensible
 An action can add new rules to the current grammar.
 The modifications can be local. The new grammar is
 valid _only_ for a well delimited section of the parsed
 input.
*** global and local immutable data
The user actions can access it and return it modified.
Modifications of local data are preserved when travelling
from right to left in a rule or when when going down the
parse tree.
(usage: type-checking at parsing time)
The local data may contain the environment that associates
a type to each variable while the global data would contain
the substitution over types that's usually produced
by unification.

*** pattern match for symbols in rhs
This allows guarded reductions and to bind
names to the arguments of actions.

*** Early actions
semantic actions performed before the end of a rule

*** lexer generator
extensible
regular expressions can be written directly on the
right hand sides of grammar rules.

*** a non terminal can accept the empty sequence
writing no symbol before the opening curly
brace of the action 

*** *, + , ? available for non-terminals and nested rules
*** layout
a regex discarded by the lexer

** Lexer generator
#+BEGIN_SRC tuareg

?global_data:global_data_type ->
?local_data:local_data_type ->
obj Dyp.dyplexbuf -> (ast_type * string ) list

('token,'obj,'global_data,'local_data,'lexbuf)
parser_pilot -> string -> 'obj dyplexbuf
#+END_SRC

ast_type is the type of values yielded
by the non-terminal main. The list contains one
couple for each interpretation of the input string.

#+BEGIN_SRC tuareg
'"' -> STRING {
   Buffer.clear Lex_string.string_buf;
   Lex_string.string (Dyp.std_lexbuf lexbuf);
   Buffer.contents Lex_string.string_buf;
}
#+END_SRC

when combined with grammar. Its semantics is string.

nt: "hello" "world"
The variable $1 has the value "hello", $2 the value
"world". *Any layout character* can be matched between.

The matches that are not expected, taking into account what has
been parsed so far, are discarded.

Among those which are expected the longest are selected,

then those belonging to the most recent lexer (if the lexer has been
extended),

then the one generated by the higher regular expression in the
precedence order.

The order in which the regular expression appear in the file is their
precedence order.

The precedence of regular expression in rhs of grammar rule is
unspecified but lower than that of the regular expression defined
in the section [main lexer = ] except for those that are just a
string: thy are of higher precedence instead.

The lexer can be extended when new gramar rules containing regular
expressions are introduced.

In this case the precedence of these new regular expressions follows
the same rule.

The precedence of regular expressions that match layout characters is
lower than that of other regular expressions(including those match
less characters) and is left unspecified.

#+BEGIN_SRC tuareg
let dypgen_choose_token = `all
~choose_token:`all
#+END_SRC

The grammer below can not parse "b"
#+BEGIN_SRC tuareg
{let dypgen_choose_token=`all}
%start main
%lexer
main lexer = ['a'-'z']+ -> ID
%parser
main: | 'a'? d {"ab"} | ID 'c' {"id"}
d: 'b' {}
#+END_SRC
solution:
#+BEGIN_SRC tuareg
main: | ["a"]? d {"ab"} | ID 'c' {"id"}
#+END_SRC
This grammar can parse "ab" not "b".

When you use external generator, then entry should be:
#+BEGIN_SRC tuareg lexer type 
?global_data:global_data_type ->
?local_data:local_data_type ->
(lexbuf -> token) -> lexbuf_type -> (ast_type * string ) list 
#+END_SRC

If you write a regular expression in a rhs then dypgen
will assume that you use dypgen as lexer generator too.
** ambiguities
*** Relation
each time a reduction by a rule happens, the corresponding
parse-tree is yielded with a value which is called a
priority.

*** merge functions
which parse-tree to keep when a given part
of the input is reduced to the same non terminal
by two different ways.

*** Dyp.Giveup
  give up a reduction with a rule

Dyp.DontShift
  
** nested rule 
** syntax

 %token <int> INT
 %relation pi<pt<pp
 %layout [' ' '\t']

 %start main 
 %% /* or %parser %lexer */

 %lexer
 main lexer =
 [' ' '\t'] ->
 ['0' - '9'] -> INT {int_of_string (Dyp.lexeme lexbuf)}
 "+" -> PLUS
 %parser
 main: expr EOL {$1}

 
