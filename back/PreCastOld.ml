
(* let plugin (module Id:Sig.Id) (module Maker:Sig.PLUGIN) = *)
(*   declare_dyn_module Id.name (fun _ -> let module M = Maker (struct end) in ()) *)

(* (\* let syntax_plugin (module Id:Sig.Id) (module Maker:Sig.SyntaxPlugin) = *\) *)
(* (\*   declare_dyn_module Id.name (fun _ -> let module M = Maker Syntax in ()) *\) *)
    
    
(* (\* (\\* let syntax_extension (module Id:Sig.Id) (module Maker:Sig.SyntaxExtension) = *\\) *\) *)
(* (\* (\\*   declare_dyn_module Id.name (fun _ -> let module M = Maker Syntax in ()) *\\) *\) *)

(* (\* (\\* let printer_plugin (module Id:Sig.Id) (module Maker:Sig.PrinterPlugin) = *\\) *\) *)
(* (\* (\\*   declare_dyn_module Id.name *\\) *\) *)
(* (\* (\\*     (fun _ -> let module M = Maker Syntax in *\\) *\) *)
(* (\* (\\*     register_printer M.print_implem M.print_interf) *\\) *\) *)
(* let enable_null_printer () = *)
(*   let module Id = struct *)
(*     let name = "Printers.Null" *)
(*     let version = Sys.ocaml_version *)
(*   end in  *)
(*   let module P = struct *)
(*     let print_interf ?input_file:(_) ?output_file:(_) _ = () *)
(*     let print_implem ?input_file:(_)  ?output_file:(_)  _ = () *)
(*   end in *)
(*   replace_printer (module Id) (module P);; *)

(* let enable_auto isatty  = *)
(*   if isatty () then *)
(*     enable_ocaml_printer () *)
(*   else *)
(*     enable_dump_ocaml_ast_printer ();; *)
(* let enable_ocaml_printer () = begin *)
(*   let module Id = struct *)
(*     let name = "Printers.OCaml" *)
(*     let version = Sys.ocaml_version *)
(*   end in  *)
(*   let module P = struct *)
(*     let print_implem ?input_file:(_)  ?output_file ast = *)
(*       let pt = *)
(*         match ast with *)
(*         |None -> [] | Some ast ->  Ast2pt.stru ast in *)
(*       FanUtil.with_open_out_file output_file *)
(*         (fun oc -> *)
(*           let fmt = Format.formatter_of_out_channel oc in *)
(*           let () = AstPrint.structure fmt pt in  *)
(*           pp_print_flush fmt ();) *)
(*     let print_interf ?input_file:(_)  ?output_file ast = *)
(*       let pt = *)
(*         match ast with *)
(*         |None -> [] *)
(*         | Some ast -> Ast2pt.sigi ast in *)
(*       FanUtil.with_open_out_file output_file *)
(*         (fun oc -> *)
(*           let fmt = Format.formatter_of_out_channel oc in *)
(*           let () = AstPrint.signature fmt pt in *)
(*           pp_print_flush fmt ();) *)
(*   end in  *)
(*   replace_printer (module Id) (module P); *)
(*   (\* FIXME can be simplified *\) *)
(* end *)

(* let enable_dump_ocaml_ast_printer () = *)
(*   let module Id : Sig.Id = struct *)
(*     let name = "DumpOCamlAst" *)
(*     let version = Sys.ocaml_version *)
(*   end in  *)
(*   let module P = struct  *)
(*     let print_interf ?(input_file = "-") ?output_file ast = *)
(*       let pt = *)
(*         match ast with *)
(*         |None -> [] *)
(*         |Some ast -> Ast2pt.sigi ast in *)
(*       FanUtil.(with_open_out_file *)
(*                  output_file *)
(*                  (dump_pt *)
(*                     FanConfig.ocaml_ast_intf_magic_number input_file pt)) *)
(*     let print_implem ?(input_file = "-") ?output_file ast = *)
(*       let pt = *)
(*         match ast with *)
(*         |None -> []   *)
(*         |Some ast -> Ast2pt.stru ast in *)
(*       FanUtil.(with_open_out_file *)
(*                  output_file *)
(*                  (dump_pt FanConfig.ocaml_ast_impl_magic_number input_file pt)) *)
(*   end in  *)
(*   replace_printer (module Id) (module P) *)

(* let enable_dump_ast_printer () = *)
(*   let module Id = struct *)
(*     let name = "DumFanAst" *)
(*     let version = Sys.ocaml_version *)
(*   end in  *)
(*   let module P = struct  *)
(*     let print_interf ?input_file:(_)  ?output_file ast = *)
(*       FanUtil.(with_open_out_file output_file *)
(*                  (dump_ast FanConfig.intf_magic_number ast)) *)
(*     let print_implem ?input_file:(_) ?output_file ast = *)
(*       FanUtil.(with_open_out_file output_file *)
(*                  (dump_ast FanConfig.impl_magic_number ast)) *)
(*   end in  *)
(*   replace_printer (module Id) (module P);; *)
