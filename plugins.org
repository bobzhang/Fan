#+OPTIONS: toc:nil html-postamble:nil html-preamble:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="stylesheets/styles.css" />
#+TITLE: Fan's plugins
#+OPTIONS: ^:{}
#+OPTIONS: toc:nil


* A native example

  Suppose we want a new syntax for expressions,

  #+BEGIN_SRC ocaml
    (matches  <pattern>) or
    (matches <pattern> when <expr>),
  #+END_SRC
  that desugars into a
  test function returning a boolean:

  #+BEGIN_SRC ocaml
    (function
        |<pattern> when <expr> -> true
        | _ -> false)
  #+END_SRC

  Then we could create a file [[file:code/testq.ml][testq]]

  First, we need to create a new entry  =p= for this DDSL 

  #+INCLUDE:"./code/testq.ml" src ocaml :lines "2-3"

  After that we write the grammar for the new DDSL 

  #+INCLUDE:"./code/testq.ml" src ocaml :lines "4-8"

  Then we start to register the new DDSL 
  
  #+INCLUDE:"./code/testq.ml" src ocaml :lines "10-12"

  Yes, we are finished, we register a language named q, in the
  namespace Tutorial.

  To compile the file

  #+BEGIN_SRC sh
    ocamlc -pp 'fan.native' testq.ml
  #+END_SRC
  

** Test on the fly

   we can eval the code on the fly without installing the plugins
   using the preprocessor =fanX.byte=

   As follows:

   #+INCLUDE:"./code/langQ.ml" src ocaml :lines "1-22"

   To compile the file, you only need to switch from the preprocessor
   fan.byte to fanX.byte 

   #+BEGIN_SRC sh
     ocamlc -pp 'fanX.byte '  langQ.ml && ./a.out
   #+END_SRC
