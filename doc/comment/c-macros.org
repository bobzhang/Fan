#+STARTUP: indent
#+STARTUP: overview
#+TAGS: details(d) ideas(i) attention(t) trick(k)
#+TAGS:  { bad(1) good(2) awesome(3) } question(q)
#+SEQ_TODO: TODO(T) WAIT(W) | DONE(D!) CANCELED(C@) 
#+COLUMNS: %10ITEM  %10PRIORITY %15TODO %65TAGS

# * shortcut                                                           :awesome:
#   Shift+Table : display overview
#   C-c C-c : smart update 
#   Table : cycle display
#   C-c {C-f C-b} the same level 
#   c-c {C-n c-p} 跨级 c-c c-u 上级
#   M-left 将当前项升高一级 M-right (M-up M-down 将当前分支上下移动
#   [[链接地址] [链接名称]]
#   C-c \ 搜索标签 (a+b) (a-b 有a 没b) (a|b) (C-c C-c查询视图中退出)
#   C-c C-o -- open link at point
#   C-c C-t [T] todo 
#   <s 


C macros



* Token replacement
#+BEGIN_SRC c
#define SWAP(a, b)  do { a ^= b; b ^= a; a ^= b; } while ( 0 )
#+END_SRC

The token replacement is not enough.
* Pasting Tokens
#+BEGIN_SRC c
#define BUILD_FIELD(field) my_struct.inner_struct.union_a.##field
#+END_SRC

* String-izing Tokens
#+BEGIN_SRC c
#define PRINT_TOKEN(token) printf(#token " is %d", token)
#+END_SRC

#+BEGIN_SRC c
#define X 10
int main()
{
  double a = 1e-X; // Wrong 
  return 0;
}

#define E(X) 1e-##X
int main()
{
  double a = E(10); // expands to 1e-10
  return 0;
}


#+END_SRC
* [[http://multi-core-dump.blogspot.com/2010/11/interesting-use-of-c-macros-polymorphic.html][examples]]
not turing complete
http://www.ioccc.org/2001/herrmann1.hint


http://stackoverflow.com/questions/894167/functional-programming-in-c-with-macro-higher-order-function-generators
#+BEGIN_SRC c
#define MAKE_FOREACH(TYPE)\
void foreach_##TYPE (TYPE[n] array, int n, void(*f)(TYPE)) {\
  for(int i = 0; i < n; i++) {\
    f(array[i]);\
  }\
}

#define MAKE_MAP(TYPE, RTYPE)\
RTYPE* map_##TYPE (TYPE[n] array, int n, RTYPE(*f)(TYPE)) {\
  RTYPE* result = (RTYPE*)malloc(sizeof(RTYPE)*n);\
  for(int i = 0; i < n; i++) {\
    result[i]=f(array[i]);\
  }\
}

#define MAKE_MAP(TYPE, RTYPE, ...)\
RTYPE* map_##TYPE (TYPE[n] array, int n, RTYPE(*f)(TYPE, __VA_ARGS__), __VA_ARGS__)
/*this would work for the declaration (because just the types would be enough)
but the  parameter names are missing :-s*/ \
{\
  RTYPE* result = (RTYPE*)malloc(sizeof(RTYPE)*n);\
  for(int i = 0; i < n; i++) {\
    result[i]=f(array[i], /*here the names of the parameters, in order*/);\
  }\
}
#+END_SRC


[[/usr/include/sys/queue.h][queue]]

#+BEGIN_SRC c
#define STR(x)   #x
#define XSTR(x)  STR(x)
#define A 3 
int
main(int argc, char *argv[]){
  printf(XSTR(A));
  printf(STR(A));
  return 0;
}

//
int
main(int argc, char *argv[]){
  printf("3");
  printf("A");
  return 0;
}

#+END_SRC
* Managing highly repetitive code and documentation in Java
[[http://stackoverflow.com/questions/2337170/managing-highly-repetitive-code-and-documentation-in-java][java repetitive code]]



* Haskell repetive code
[[http://stackoverflow.com/questions/2690455/how-do-i-do-automatic-data-serialization-of-data-objects-in-haskell][Reptive]]

