#+SEQ_TODO: TODO(T) WAIT(W) | DONE(D!) CANCELED(C@) 
#+STARTUP: overview
#+COLUMNS: %10ITEM  %10PRIORITY %15TODO %65TAGS

#+OPTIONS: toc:4 ^:{} num:nil creator:nil author:nil
#+OPTIONS: author:nil timestamp:nil d:nil
#+STYLE: <link rel="stylesheet" type="text/css" href="../css/style.css">


Grammars


Grammars are tricky, so I recorded some modifications I made in case
some bugs happenend here.



* sig item
  
** sig_items

  #+BEGIN_SRC ocaml
    [ [ `ANTIQUOT (""|"sigi"|"anti"|"list" as n) s ->
       <:sig_item< $(anti:mk_anti n ~c:"sig_item" s) >>
      | `ANTIQUOT (""|"sigi"|"anti"|"list" as n) s; semi; sg = SELF ->
         <:sig_item< $(anti:mk_anti n ~c:"sig_item" s); $sg >>
      | l = LIST0 [ sg = sig_item; semi -> sg ] -> Ast.sgSem_of_list l
    ] ]
  #+END_SRC  

** sig_item

  #+BEGIN_SRC ocaml
    [ "top"
    [ `ANTIQUOT (""|"sigi"|"anti"|"list" as n) s ->
      <:sig_item< $(anti:mk_anti ~c:"sig_item" n s) >>
    | `QUOTATION x -> Quotation.expand _loc x DynAst.sig_item_tag
    | "exception"; t = constructor_declaration ->
       <:sig_item< exception $t >>
    | "external"; i = a_LIDENT; ":"; t = ctyp; "="; sl = string_list ->
       <:sig_item< external $i : $t = $sl >>
    | "include"; mt = module_type -> <:sig_item< include $mt >>
    | "module"; i = a_UIDENT; mt = module_declaration ->
       <:sig_item< module $i : $mt >>
    | "module"; "rec"; mb = module_rec_declaration ->
       <:sig_item< module rec $mb >>
    | "module"; "type"; i = a_ident; "="; mt = module_type ->
       <:sig_item< module type $i = $mt >>
    | "module"; "type"; i = a_ident ->
       <:sig_item< module type $i >>
    | "open"; i = module_longident -> <:sig_item< open $i >>
    | "type"; t = type_declaration ->
       <:sig_item< type $t >>
    | value_val; i = a_LIDENT; ":"; t = ctyp ->
       <:sig_item< value $i : $t >>
    | "class"; cd = class_description ->
       <:sig_item< class $cd >>
    | "class"; "type"; ctd = class_type_declaration ->
       <:sig_item< class type $ctd >> ] ]  
  #+END_SRC
** sig_items
  #+BEGIN_SRC ocaml
    [ [ `ANTIQUOT (""|"sigi"|"anti"|"list" as n) s ->
       <:sig_item< $(anti:mk_anti n ~c:"sig_item" s) >>
    | `ANTIQUOT (""|"sigi"|"anti"|"list" as n) s; semi; sg = SELF ->
       <:sig_item< $(anti:mk_anti n ~c:"sig_item" s); $sg >>
    | l = LIST0 [ sg = sig_item; semi -> sg ] -> Ast.sgSem_of_list l
    ] ]  
  #+END_SRC

** class_sig_item

  #+BEGIN_SRC ocaml
    [ [ `ANTIQUOT (""|"csg"|"anti"|"list" as n) s ->
        <:class_sig_item< $(anti:mk_anti ~c:"class_sig_item" n s) >>
      | `QUOTATION x -> Quotation.expand _loc x DynAst.class_sig_item_tag
      | "inherit"; cs = class_type ->
         <:class_sig_item< inherit $cs >>
      | value_val; mf = opt_mutable; mv = opt_virtual;
        l = label; ":"; t = ctyp ->
         <:class_sig_item< value $mutable:mf $virtual:mv $l : $t >>
      | "method"; "virtual"; pf = opt_private; l = label; ":"; t = poly_type ->
         <:class_sig_item< method virtual $private:pf $l : $t >>
      | "method"; pf = opt_private; l = label; ":"; t = poly_type ->
         <:class_sig_item< method $private:pf $l : $t >>
      | "method"; pf = opt_private; "virtual"; l = label; ":"; t = poly_type ->
         <:class_sig_item< method virtual $private:pf $l : $t >>
      | type_constraint; t1 = ctyp; "="; t2 = ctyp ->
         <:class_sig_item< type $t1 = $t2 >> ] ]
      
  #+END_SRC

** interf
  #+BEGIN_SRC ocaml
    [ [ "#"; n = a_LIDENT; dp = opt_expr; semi ->
        ([ <:sig_item< # $n $dp >> ], stopped_at _loc)
      | si = sig_item; semi; (sil, stopped) = SELF -> ([si :: sil], stopped)
      | `EOI -> ([], None) ] ]
      
  #+END_SRC

** sig_item_quot

  #+BEGIN_SRC ocaml
    [ [ "#"; n = a_LIDENT; dp = opt_expr -> <:sig_item< # $n $dp >>
      | sg1 = sig_item; semi; sg2 = SELF ->
        match sg2 with
       [ <:sig_item<>> -> sg1
       | _ -> <:sig_item< $sg1; $sg2 >> ]
        | sg = sig_item -> sg
        | -> <:sig_item<>>
      ]]  
  #+END_SRC

** class_sig_item_quot

  #+BEGIN_SRC ocaml
    [ [ x1 = class_sig_item; semi; x2 = SELF ->
        match x2 with
        [ <:class_sig_item<>> -> x1
        | _ -> <:class_sig_item< $x1; $x2 >> ]
        | x = class_sig_item -> x
        | -> <:class_sig_item<>> ] ]
  #+END_SRC


  #+BEGIN_SRC ocaml
    add_quotation "class_sig_item"
                  class_sig_item_quot ME.meta_class_sig_item MP.meta_class_sig_item
  #+END_SRC  


* str item

** implem

   #+BEGIN_SRC ocaml
     [ [ "#"; n = a_LIDENT; dp = opt_expr; semi ->
         ([ <:str_item< # $n $dp >> ], stopped_at _loc)
       | si = str_item; semi; (sil, stopped) = SELF -> ([si :: sil], stopped)
       | `EOI -> ([], None)
     ] ]   
   #+END_SRC

** str_item

   #+BEGIN_SRC ocaml
     [ "top"
       [ "exception"; t = constructor_declaration ->
          <:str_item< exception $t >>
       | "exception"; t = constructor_declaration; "="; i = type_longident ->
          <:str_item< exception $t = $i >>
       | "external"; i = a_LIDENT; ":"; t = ctyp; "="; sl = string_list ->
          <:str_item< external $i : $t = $sl >>
       | "include"; me = module_expr -> <:str_item< include $me >>
       | "module"; i = a_UIDENT; mb = module_binding0 ->
          <:str_item< module $i = $mb >>
       | "module"; "rec"; mb = module_binding ->
          <:str_item< module rec $mb >>
       | "module"; "type"; i = a_ident; "="; mt = module_type ->
          <:str_item< module type $i = $mt >>
       | "open"; i = module_longident -> <:str_item< open $i >>
       | "type"; td = type_declaration ->
          <:str_item< type $td >>
       | value_let; r = opt_rec; bi = binding ->
          <:str_item< value $rec:r $bi >>
       | "class"; cd = class_declaration ->
          <:str_item< class $cd >>
       | "class"; "type"; ctd = class_type_declaration ->
         <:str_item< class type $ctd >>
       | `ANTIQUOT (""|"stri"|"anti"|"list" as n) s ->
         <:str_item< $(anti:mk_anti ~c:"str_item" n s) >>
               (*
                   first, it gives "mk_anti ~c:"str_item" n s" , and then through
                   the meta operation, it gets
                   (Ast.StAnt (_loc, ( (mk_anti ~c:"str_item" n s) )))
                  *)
       | `QUOTATION x -> Quotation.expand _loc x DynAst.str_item_tag
       | e = expr -> <:str_item< $exp:e >>
         (* this entry makes <:str_item< let $rec:r $bi in $x >> parsable *)
       ] ]   
   #+END_SRC
** str_items

   #+BEGIN_SRC ocaml
     [ [ `ANTIQUOT (""|"stri"|"anti"|"list" as n) s ->
         <:str_item< $(anti:mk_anti n ~c:"str_item" s) >>
       | `ANTIQUOT (""|"stri"|"anti"|"list" as n) s; semi; st = SELF ->
          <:str_item< $(anti:mk_anti n ~c:"str_item" s); $st >>
       | l = LIST0 [ st = str_item; semi -> st ] -> Ast.stSem_of_list l
     ] ]   
   #+END_SRC
   it was used in

   #+BEGIN_SRC ocaml
        | "struct"; st = str_items; "end" ->
            <:module_expr< struct $st end >>   
   #+END_SRC
** class_str_item

   #+BEGIN_SRC ocaml
     [ LA
       [ `ANTIQUOT (""|"cst"|"anti"|"list" as n) s ->
         <:class_str_item< $(anti:mk_anti ~c:"class_str_item" n s) >>
       | `QUOTATION x -> Quotation.expand _loc x DynAst.class_str_item_tag
       | "inherit"; o = opt_override; ce = class_expr; pb = opt_as_lident ->
          <:class_str_item< inherit $override:o $ce as $pb >>
       | o = value_val_opt_override; mf = opt_mutable; lab = label; e = cvalue_binding
               ->
         <:class_str_item< value $override:o $mutable:mf $lab = $e >>
       | o = value_val_opt_override; mf = opt_mutable; "virtual"; l = label; ":";  t = poly_type ->
                 if o <> <:override_flag<>> then
                   raise (Stream.Error "override (!) is incompatible with virtual")
                 else
                   <:class_str_item< value virtual $mutable:mf $l : $t >>
       | o = value_val_opt_override; "virtual"; mf = opt_mutable; l = label; ":"; t = poly_type ->
                 if o <> <:override_flag<>> then
                   raise (Stream.Error "override (!) is incompatible with virtual")
                 else
                   <:class_str_item< value virtual $mutable:mf $l : $t >>
       | o = method_opt_override; "virtual"; pf = opt_private; l = label; ":"; t = poly_type ->
                 if o <> <:override_flag<>> then
                   raise (Stream.Error "override (!) is incompatible with virtual")
                 else
                   <:class_str_item< method virtual $private:pf $l : $t >>
       | o = method_opt_override; pf = opt_private; l = label; topt = opt_polyt; e = fun_binding ->
                 <:class_str_item< method $override:o $private:pf $l : $topt = $e >>
       | o = method_opt_override; pf = opt_private; "virtual"; l = label; ":"; t = poly_type ->
                 if o <> <:override_flag<>> then
                   raise (Stream.Error "override (!) is incompatible with virtual")
                 else
                   <:class_str_item< method virtual $private:pf $l : $t >>
       | type_constraint; t1 = ctyp; "="; t2 = ctyp ->
               <:class_str_item< type $t1 = $t2 >>
       | "initializer"; se = expr -> <:class_str_item< initializer $se >> ] ]   
   #+END_SRC
   


** str_item_quot

   #+BEGIN_SRC ocaml
     [ [ "#"; n = a_LIDENT; dp = opt_expr -> <:str_item< # $n $dp >>
     | st1 = str_item; semi; st2 = SELF ->
        match st2 with
        [ <:str_item<>> -> st1
        | _ -> <:str_item< $st1; $st2 >> ]
        | st = str_item -> st
     | -> <:str_item<>> ] ]   
   #+END_SRC


* semi
  either ";;" or ";" or nil



* syntax difference
  
** lexing
   '\''
   '''

** module
   let x = 42 ;;
   value x = 42;

   let x = 42 in x + 7 ;;
   let x = 42 in x + 7 ;

   val x:int;;
   value x: int;

   (* signatures, abstract module types*)
   module type MT;;
   module type MT='a;

   type t = Set.Make(M).t;;
   type t = (Set.Make M).t;

   module M = Mod.Make (M1) (M2);;
   module M = Mod.Make M1 M2;
   
** expression and patterns
   e1;e2;e3;e4
   do {e1;e2;e3;e4}

   while e1 do
     e1;e2;e3
   done

   while e1 do{
     e1;e2;e3
   }
   
   for i = e1 to e2 do
     e1;e2;e3
   done

   for i = e1 to e2 do{
     e1;e2;e3
   }

   1,2
   (1,2)

   x::y
   [x::y]

   [x;y;z]
   [x;y;z]

   x::y::z::t
   [x;y;z::t]

   {e with field = a}
   {(e) with field = a}

   {field = fun a -> e}
   {field a = e}

   syntactic irrefutable pattern 

   function no longer exists, only "fun"

   match e with p1  -> e1 | p2 -> e2
   match e with [p1 -> e1 | p2 -> e2]
   (if there is only one case and if the
   pattern is irrefutable, the brackets
   are not required, hey optinoal, is a good
   idea, when you writing quotations, you be
   cautious, when you write code outside,
   you don't add them
   )

   fun x -> x
   fun x -> x

   fun {foo=(y,_)} -> y
   fun {foo=(y,_)} -> y

   let f (x::y) = ..
   let f = fun [ [x::y] -> ]

   x.f <- y
   x.f := y

   x:=!x + y  =FIXEd=
   x.val := x.val + y

   if a then b
   if a then b else ()

   a or b & c
   a || b && c

   no more "begin end" construction

   function Some a as b , c ->
   fun [((Some a as b), c) -> ]

   function Some a as b ->
   fun [Some a as b -> ]

   int list
   list int

   ('a,bool) Hashtbl.t
   Hashtbl.t 'a bool

   type 'a foo = 'a list list
   type foo 'a = list (list 'a)

   type 'a foo
   type foo 'a = 'b

   
   type bar
   type bar = 'a

   int * bool
   (int * bool)

   type t = A of i | B
   type t =  [A of i | B]

   type t = C of t1 * t2
   type t = [C of t1 and t2 ]

   C(x,y)
   C x y

   type t = D of (t1*t2)
   type t = [D of (t1 * t2)]

   D (x,y)
   D (x,y)

   true && false
   True && False

   type t = {mutable x:t1}
   type t = {x:mutable t1}

   type 'a t = 'a option =
      None
     | Some of 'a
   type t 'a = option 'a ==
     [None
     |Some of 'a]
   
   type t = {f:'a. 'a list}
   type t = {f: ! 'a.  list 'a}

   [< '1; '2; s; '3>]
   [: `1; `2 ; s; `3 :]

   parser
   [< 'Foo >] -> e
   | [< p=f >] -> f |

   parser
   [ [: `Foo :] -> e
   | [: p = f :] -> f ] |

   parser [: `x :] -> x

** objects
   class ['a,'b] point =
   class point ['a,'b] =

   class c = [int] color
   classs c = color [int]

   (* class signature *)
   class c : int -> point
   class c : [int] -> point 
   
   the keywords "virtual" and "private"
   must be in order in revised syntax

   object val x = 3 end
   object value x =  3; end

   object constraint 'a = int end
   object type 'a = int; end


** labels and variants

   val x: num:int -> bool
   value x : ~num:int -> bool

   type t = [`On | `Off]
   type t = [ = `On | `Off]
   

   
** assignmetns

   #+BEGIN_SRC ocaml
     a.(2)<-3;;
     Ptop_def
       [
         structure_item (//toplevel//[2,6+-6]..//toplevel//[2,6+2]) ghost
           Pstr_eval
           expression (//toplevel//[2,6+-6]..//toplevel//[2,6+2])
             Pexp_apply
             expression (//toplevel//[2,6+-6]..//toplevel//[2,6+2]) ghost
               Pexp_ident "Array.set"
             [
               <label> ""
                 expression (//toplevel//[2,6+-6]..//toplevel//[2,6+-5])
                   Pexp_ident "a"
               <label> ""
                 expression (//toplevel//[2,6+-3]..//toplevel//[2,6+-2])
                   Pexp_constant Const_int 2
               <label> ""
                 expression (//toplevel//[2,6+1]..//toplevel//[2,6+2])
                   Pexp_constant Const_int 3
             ]
       ]
   #+END_SRC


   #+BEGIN_SRC ocaml
     v.x<-2;;
     Ptop_def
       [
         structure_item (//toplevel//[2,6+-6]..//toplevel//[2,6+0]) ghost
           Pstr_eval
           expression (//toplevel//[2,6+-6]..//toplevel//[2,6+0])
             Pexp_setfield
             expression (//toplevel//[2,6+-6]..//toplevel//[2,6+-5])
               Pexp_ident "v"
             "x"
             expression (//toplevel//[2,6+-1]..//toplevel//[2,6+0])
               Pexp_constant Const_int 2
       ]
   #+END_SRC

   #+BEGIN_SRC ocaml
a.[1] <- 'a';;
Ptop_def
  [
    structure_item (//toplevel//[2,6+-6]..//toplevel//[3,14+12]) ghost
      Pstr_eval
      expression (//toplevel//[2,6+-6]..//toplevel//[3,14+12])
        Pexp_sequence
        expression (//toplevel//[2,6+-6]..//toplevel//[2,6+6])
          Pexp_apply
          expression (//toplevel//[2,6+-6]..//toplevel//[2,6+6]) ghost
            Pexp_ident "String.set"
          [
            <label> ""
              expression (//toplevel//[2,6+-6]..//toplevel//[2,6+-5])
                Pexp_ident "a"
            <label> ""
              expression (//toplevel//[2,6+-3]..//toplevel//[2,6+-2])
                Pexp_constant Const_int 1
            <label> ""
              expression (//toplevel//[2,6+3]..//toplevel//[2,6+6])
                Pexp_constant Const_char 61
          ]
        expression (//toplevel//[3,14+0]..//toplevel//[3,14+12])
          Pexp_apply
          expression (//toplevel//[3,14+0]..//toplevel//[3,14+12]) ghost
            Pexp_ident "String.set"
          [
            <label> ""
              expression (//toplevel//[3,14+0]..//toplevel//[3,14+1])
                Pexp_ident "a"
            <label> ""
              expression (//toplevel//[3,14+3]..//toplevel//[3,14+4])
                Pexp_constant Const_int 1
            <label> ""
              expression (//toplevel//[3,14+9]..//toplevel//[3,14+12])
                Pexp_constant Const_char 61
          ]
  ]
   #+END_SRC

** polymorphic syntax 
   file://localhost/Users/bobzhang1988/olibs/htmlman/manual021.html#xhtoc17


* Nil problem

        | "fun"; "["; a = LIST0 match_case0 SEP "|"; "]" ->
            <:expr< fun [ $list:a ] >>

      match_case:
      [ [ "["; l = LIST0 match_case0 SEP "|"; "]" -> Ast.mcOr_of_list l
        | p = ipatt; "->"; e = expr -> <:match_case< $p -> $e >> ] ] |

      type_declaration:
      [ LA
        [ `ANTIQUOT (""|"typ"|"anti" as n) s ->
            <:ctyp< $(anti:mk_anti ~c:"ctyp" n s) >>
        | `ANTIQUOT ("list" as n) s ->
            <:ctyp< $(anti:mk_anti ~c:"ctypand" n s) >>
        | `QUOTATION x -> Quotation.expand _loc x DynAst.ctyp_tag
        | t1 = SELF; "and"; t2 = SELF -> <:ctyp< $t1 and $t2 >>
        | (n, tpl) = type_ident_and_parameters; tk = opt_eq_ctyp;
          cl = LIST0 constrain -> Ast.TyDcl _loc n tpl tk cl ] ]

      type_ident_and_parameters:
      [ [ i = a_LIDENT; tpl = LIST0 optional_type_parameter -> (i, tpl) ] ]


      class_structure:
      [ [ `ANTIQUOT (""|"cst"|"anti"|"list" as n) s ->
            <:class_str_item< $(anti:mk_anti ~c:"class_str_item" n s) >>
        | `ANTIQUOT (""|"cst"|"anti"|"list" as n) s; semi; cst = SELF ->
            <:class_str_item< $(anti:mk_anti ~c:"class_str_item" n s); $cst >>
        | l = LIST0 [ cst = class_str_item; semi -> cst ] -> Ast.crSem_of_list l
      ] ]

      
      class_signature:
      [ [ `ANTIQUOT (""|"csg"|"anti"|"list" as n) s ->
            <:class_sig_item< $(anti:mk_anti ~c:"class_sig_item" n s) >>
        | `ANTIQUOT (""|"csg"|"anti"|"list" as n) s; semi; csg = SELF ->
            <:class_sig_item< $(anti:mk_anti ~c:"class_sig_item" n s); $csg >>
        | l = LIST0 [ csg = class_sig_item; semi -> csg ] ->
            Ast.cgSem_of_list l
      ] ]


      sig_items:
      [ [ `ANTIQUOT (""|"sigi"|"anti"|"list" as n) s ->
            <:sig_item< $(anti:mk_anti n ~c:"sig_item" s) >>
        | `ANTIQUOT (""|"sigi"|"anti"|"list" as n) s; semi; sg = SELF ->
            <:sig_item< $(anti:mk_anti n ~c:"sig_item" s); $sg >> 
        | l = LIST0 [ sg = sig_item; semi -> sg ] -> Ast.sgSem_of_list l
      ] ]


      str_items:
      [ [ `ANTIQUOT (""|"stri"|"anti"|"list" as n) s ->
            <:str_item< $(anti:mk_anti n ~c:"str_item" s) >>
        | `ANTIQUOT (""|"stri"|"anti"|"list" as n) s; semi; st = SELF ->
            <:str_item< $(anti:mk_anti n ~c:"str_item" s); $st >>
        | l = LIST0 [ st = str_item; semi -> st ] -> Ast.stSem_of_list l
      ] ]

      match_case_quot:
      [ [ x = LIST0 match_case0 SEP "|" -> <:match_case< $list:x >>
        | -> <:match_case<>> ] ]


      parser_case_list:
      [ [ "["; pcl = LIST0 parser_case SEP "|"; "]" -> pcl
        | pc = parser_case -> [pc]
      ] ]



* Grammar


** when symbol is UIDENT
   #+BEGIN_SRC ocaml
   EXTEND a:[[STRING]]END
   (extend ( (a : 'a t) ) (
           ((fun ()
               ->
              (None , (
               [(None , None , (
                 [((
                   [(
                    (Stoken
                      (( function | STRING (_) -> (true) | _ -> (false) ),
                       "STRING (_)")) )] ), (
                   (mk_action (
                     fun (__camlp4_0 :
                       token) ->
                      fun (_loc :
                        FanLoc.t) ->
                       (match __camlp4_0 with
                        | STRING (_) -> (() : 'a)
                        | _ -> assert false) )) ))] ))] ))) () ) ))
   #+END_SRC

** when symbol is UIDENT with pattern

   #+BEGIN_SRC ocaml
   EXTEND a:[[x=STRING]] END
   (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [((
                  [(
                   (Stoken
                     (( function | STRING (_) -> (true) | _ -> (false) ),
                      "STRING _")) )] ), (
                  (mk_action (
                    fun (x :
                      token) ->
                     fun (_loc :
                       FanLoc.t) ->
                      (let x = (string_of_token x) in () : 'a) )) ))] ))] )))
            () ) ))

   EXTEND a:[[x=LID]] END
   let _ = (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [((
                  [(
                   (Stoken
                     (( function | LID (_) -> (true) | _ -> (false) ),
                      "LID _")) )] ), (
                  (mk_action (
                    fun (x :
                      token) ->
                     fun (_loc :
                       FanLoc.t) ->
                      (let x = (string_of_token x) in () : 'a) )) ))] ))] )))
            () ) ))
   (* only when you want to do the pattern match, it will add a
   string_of_token there, not-necessary actually*)
   #+END_SRC
** when symbol is LIDENT

   #+BEGIN_SRC ocaml
   EXTEND a:[[x]] END
   (extend ( (a : 'a t) ) (
           ((fun ()
               ->
              (None , (
               [(None , None , (
                 [(( [( (Snterm (obj ( (x : 'x t) ))) )] ), (
                   (mk_action (
                     fun (x : 'x) -> fun (_loc : FanLoc.t) -> (x : 'a) )) ))]
                 ))] ))) () ) ))


    (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [(( [( (Snterm (obj ( (x : 'x t) ))) )] ), (
                  (mk_action ( fun _ -> fun (_loc : FanLoc.t) -> (x : 'a) ))
                  ))] ))] ))) () ) ))

   #+END_SRC
   
** when symbol is LIDENT with pattern
   #+BEGIN_SRC ocaml
   EXTEND a:[[y=x]] END
   (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [(( [( (Snterm (obj ( (x : 'x t) ))) )] ), (
                  (mk_action (
                    fun (y : 'x) -> fun (_loc : FanLoc.t) -> (() : 'a) )) ))]
                ))] ))) () ) ))

   #+END_SRC

** when symbol is pattern

   #+BEGIN_SRC ocaml

   EXTEND a:[[`ID(_,Some x) ->x]] END
   (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [((
                  [(
                   (Stoken
                     (( function | ID (_, Some (_)) -> (true) | _ -> (false)
                      ), "ID (_, Some (_))")) )] ), (
                  (mk_action (
                    fun (__camlp4_0 :
                      token) ->
                     fun (_loc :
                       FanLoc.t) ->
                      (match __camlp4_0 with
                       | ID (_, Some (x)) -> (x : 'a)
                       | _ -> assert false) )) ))] ))] ))) () ) ))
   #+END_SRC

** when symbol is pattern with pattern =should be prohobited=

   #+BEGIN_SRC ocaml
   EXTEND a:[[y=`ID(_,Some x) ->(x,y)]] END

   (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [((
                  [(
                   (Stoken
                     (( function | ID (_, Some (_)) -> (true) | _ -> (false)
                      ), "ID (_, Some (_))")) )] ), (
                  (mk_action (
                    fun (y : token) -> fun (_loc : FanLoc.t) -> ((x, y) : 'a)
                    )) ))] ))] ))) () ) ))
   #+END_SRC

** when symbol is a rule list
   #+BEGIN_SRC ocaml
   EXTEND x:[[a=[b] -> ()]]END
   (extend ( (x : 'x t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [((
                  [(
                   (srules x (
                     [(( [( (Snterm (obj ( (b : 'b t) ))) )] ), (
                       (mk_action (
                         fun (x : 'b) -> fun (_loc : FanLoc.t) -> (x : 'e__1)
                         )) ))] )) )] ), (
                  (mk_action (
                    fun (a : 'e__1) -> fun (_loc : FanLoc.t) -> (() : 'x) ))
                  ))] ))] ))) () ) ))
   #+END_SRC

** special case =UIDENT STRIGN=

   #+BEGIN_SRC ocaml
   EXTEND a:[[A "x" ]] END
   (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [((
                  [(
                   (Stoken
                     (( function | A ("x") -> (true) | _ -> (false) ),
                      "A (\"x\")")) )] ), (
                  (mk_action (
                    fun (__camlp4_0 :
                      token) ->
                     fun (_loc :
                       FanLoc.t) ->
                      (match __camlp4_0 with
                       | A ("x") -> (() : 'a)
                       | _ -> assert false) )) ))] ))] ))) () ) ))
   #+END_SRC
   Compared with pattern directly
   
   #+BEGIN_SRC ocaml
   EXTEND a:[[`A "x"]] END
   (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [((
                  [(
                   (Stoken
                     (( function | A ("x") -> (true) | _ -> (false) ),
                      "A (\"x\")")) )] ), (
                  (mk_action (
                    fun (__camlp4_0 :
                      token) ->
                     fun (_loc :
                       FanLoc.t) ->
                      (match __camlp4_0 with
                       | A ("x") -> (() : 'a)
                       | _ -> assert false) )) ))] ))] ))) () ) ))

   #+END_SRC

** special case =STRING=
   #+BEGIN_SRC ocaml
    EXTEND a:[["x"]]END
    (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [(( [( (Skeyword ("x")) )] ), (
                  (mk_action (
                    fun (x :
                      token) ->
                     fun (_loc : FanLoc.t) -> ((string_of_token x) : 'a) ))
                  ))] ))] ))) () ) ))
   #+END_SRC
** =STRING= with pattern =should be prohibited=

   #+BEGIN_SRC ocaml
   EXTEND a:[[y="x"]] END

   (extend ( (a : 'a t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [(( [( (Skeyword ("x")) )] ), (
                  (mk_action (
                    fun (y : token) -> fun (_loc : FanLoc.t) -> (() : 'a) ))
                  ))] ))] ))) () ) ))

   #+END_SRC

** grammars

   #+BEGIN_SRC ocaml
      EXTEND x:[[ (x,z) = y]] END
      (extend ( (x : 'x t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [(( [( (Snterm (obj ( (y : 'y t) ))) )] ), (
                  (mk_action (
                    fun ((x, z) : 'y) -> fun (_loc : FanLoc.t) -> (() : 'x)
                    )) ))] ))] ))) () ) ))

      EXTEND x:[[x=y]]END
      (extend ( (x : 'x t) ) (
          ((fun ()
              ->
             (None , (
              [(None , None , (
                [(( [( (Snterm (obj ( (y : 'y t) ))) )] ), (
                  (mk_action (
                    fun (x : 'y) -> fun (_loc : FanLoc.t) -> (() : 'x) )) ))]
                ))] ))) () ) ))

   #+END_SRC




* Grammar Analysis

  

** top

   #+BEGIN_EXAMPLE
        suffix: 
        prefix:

          |-"IFDEF"---uident---"THEN"---SELF---else_expr

          |-"IFNDEF"---uident---"THEN"---SELF---else_expr

          |-"DEFINE"---`LIDENT _---"="---SELF---"IN"---SELF
    # introduced by macro parser
    #    expr: Level "top"
    #   [ [ "IFDEF"; uident{i}; "THEN"; expr{e1}; else_expr{e2} ->
    #    | "IFNDEF"; uident{i}; "THEN"; expr{e1}; else_expr{e2} ->
    #    | "DEFINE"; `LIDENT i; "="; expr{def}; "IN"; expr{body} -> ]]


   
          |-"parser"---`UIDENT _---OPT parser_ipatt---parser_case_list

          |-"match"---sequence---"with"-+-"parser"---`UIDENT _---OPT parser_ipatt---parser_case_list
          |                             `-match_case
    # expr: Level "top"
    #   [ [ "parser";  OPT [ `UIDENT(n) -> n]  {name}; OPT parser_ipatt{po}; parser_case_list{pcl}
    #     | "match"; sequence{e}; "with"; "parser";  OPT [`UIDENT(n) -> n ] {name}; OPT parser_ipatt{po};
    #       parser_case_list{pcl}      -> ]]



   
          |-"let"-+-"module"---a_UIDENT---module_binding0---"in"---SELF
          |       |-"open"---module_longident---"in"---SELF
          |       `-opt_rec---binding---"in"---SELF

          |-"fun"-+-"["---LIST0 match_case0 SEP "|"---"]"
          |       `-fun_def
          |-"try"---sequence---"with"---match_case

          |-"if"---SELF---"then"---SELF---"else"---SELF

          |-"do"---do_sequence

          |-"for"---a_LIDENT---"="---sequence---direction_flag---sequence---"do"---do_sequence

          |-"while"---sequence---"do"---do_sequence

          `-"object"---opt_class_self_patt---class_structure---"end"
   
      #  expr: After "top"
      # [ [ "EXTEND"; extend_body{e}; "END" -> e
      #   | "DELETE_RULE"; delete_rule_body{e}; "END" -> e ] ] 

      |  LA
   suffix: 
   prefix:
     |-"EXTEND"---extend_body---"END"
     `-"DELETE_RULE"---delete_rule_body---"END"
   
   | "where" LA
   suffix: `-"where"---opt_rec---let_binding
   prefix: 

      | ":=" NA
   suffix:
     |-":="---SELF---dummy
     `-"<-"---SELF---dummy
   prefix: 

      | "||" RA
   suffix: `-infixop6---SELF
   prefix: 
   | "&&" RA
   suffix: `-infixop5---SELF
   prefix: 
   | "<" LA
   suffix:
     `-infix operator (level 0) (comparison operators, and some others)---SELF
   prefix: 
   | "^" RA
   suffix: `-infix operator (level 1) (start with '^', '@')---SELF
   prefix: 
   | "+" LA
   suffix: `-infix operator (level 2) (start with '+', '-')---SELF
   prefix: 
   | "*" LA
   suffix:
     |-"land"---SELF
     |-"lor"---SELF
     |-"lxor"---SELF
     |-"mod"---SELF
     `-infix operator (level 3) (start with '*', '/', '%')---SELF
   prefix: 
   | "**" RA
   suffix:
     |-"asr"---SELF
     |-"lsl"---SELF
     |-"lsr"---SELF
     `-infix operator (level 4) (start with "**") (right assoc)---SELF
   prefix: 

   | "unary minus" NA
   suffix: 
   prefix: |-"-"---SELF
     `-"-."---SELF
   | "apply" LA
   suffix: `-SELF
   prefix: |-"assert"---SELF
     |-"new"---class_longident
     `-"lazy"---SELF
   | "label" NA
   suffix: 
   prefix:
     |-"~"---a_LIDENT---":"---SELF
     |-`LABEL _---SELF
     |-`OPTLABEL _---SELF
     `-"?"---a_LIDENT---":"---SELF
   | "." LA
   suffix:
     |-"."-+-"("---SELF---")"
     |     |-"["---SELF---"]"
     |     |-"{"---comma_expr---"}"
     |     `-SELF
     `-"#"---label
   prefix: 
   | "~-" NA
   suffix: 
   prefix:
     |-"!"---SELF
     `-prefix operator (start with '!', '?', '~')---SELF


   |  LA
   suffix: 
   prefix:
   `-"`"-+-"IN"
         `-a_ident

   # introduced by macro parser
   # expr: Before "simple"
   #   [ [ "`";  [ "IFDEF" | "IFNDEF" | "THEN" | "ELSE" | "END" | "ENDIF"
   #                  | "DEFINE" | "IN" ]{kwd} 
   #     | "`"; a_ident{s} -> <:expr< ` $s >> ] ] 

      | "simple" LA
   suffix: 
   prefix:

     |-`QUOTATION _
     |-`ANTIQUOT (("exp"|""|"anti"),_)
     |-`ANTIQUOT ("`bool",_)
     |-`ANTIQUOT ("tup",_)
     |-`ANTIQUOT ("seq",_)

     |-"`"---a_ident
     |-"["-+-"]"
     |     `-comprehension_or_sem_expr_for_list---"]"

# introduced by List comprehension
    #  EXTEND Gram
    #   LOCAL: item;
    # expr: Level "simple"
    #   [ [ "["; comprehension_or_sem_expr_for_list{e}; "]"  ] ]  
    # DELETE_RULE Gram expr: "["; x; "::"; expr; "]" END;
   
     |-"[|"-+-"|]"
     |      `-sem_expr---"|]"

     |-"{"-+-"("---SELF---")"---"with"---label_expr_list---"}"
     |     `-label_expr_list---"}"
     |-"{<"-+-">}"
     |      `-field_expr_list---">}"
     |-"begin"-+-"end"
     |         `-sequence---"end"

     |-"("-+-")"
     |     |-"module"---module_expr-+-")"
     |     |                        `-":"---package_type---")"
     |     `-SELF-+-","---comma_expr---")"
     |            |-";"-+-")"
     |            |     `-sequence---")"
     |            |-":"---ctyp-+-")"
     |            |            `-":>"---ctyp---")"
     |            |-":>"---ctyp---")"
     |            `-")"

     |-stream_begin-+-stream_end
     |              `-stream_expr_comp_list---stream_end

     |-a_INT
     |-a_INT32
     |-a_INT64
     |-a_NATIVEINT
     |-a_FLOAT
     |-a_STRING
     |-a_CHAR

     |-TRY module_longident_dot_lparen---sequence---")"
     `-TRY val_longident]

   #+END_EXAMPLE


* improvements

  - detect follow conflicts
    dangling if then else detection(at least gives a warning)

  - add actions to each non-terminal
    like [extend-header]

  - overlapping rules error report
    
  - verbatim copy
    
    now we want to write
    #+BEGIN_SRC ocaml
      qualuid:
        [ `UIDENT x; ".";  SELF{xs} -> {:ident| $uid:x.$xs |}
        | `UIDENT x -> {:ident| $uid:x |} ]
      quallid:
        [ qualuid!
        | `LIDENT x -> {:ident| $lid:x |}]
    #+END_SRC

    instead of 
    #+BEGIN_SRC ocaml
          qualuid:
            [ `UIDENT x; ".";  SELF{xs} -> {:ident| $uid:x.$xs |}
            | `UIDENT x -> {:ident| $uid:x |} ] 
          qualid:
            [ `UIDENT x; ".";  SELF{xs} -> {:ident| $uid:x.$xs |}
            | `UIDENT i -> {:ident| $uid:i |}
            | `LIDENT i -> {:ident| $lid:i |} ]    
    #+END_SRC
    
    
  - semantics copy
  - automatic build patterns?
    cause some problems variable capture?
    and shadowing if you have two non-terminals used in the same rule
  - left refactoring
    LIST1 and itself

  - antiquot

  - our backtracking algorithm 
    WILL  devastate the error message
    The deepest ... to do

  - support peek-k natively


  we did have the need to reuse existing grammars for diffferent
  actions(for example: nonterminals, top_phrase, implem)
  -- two challenges here
     a. typing
     b.

     solution:
     copy the existing grammars only, and associate diffferent
     actions?

  local nonterminals can be optimized aggressively   
* Ast definition
  PaApp is im-precise


* Syntax partial-ordering

* Syntax management
  self-describing syntax
  #+BEGIN_SRC ocaml
    {:file|
     syntax:"blabla";
              
     |}
  #+END_SRC

* location
  http://caml.inria.fr/mantis/view.php?id=5127

  - abstract over location {:$loc| a b |}
  - visualize grammar overshadowing
    patt_as_patt_opt: [   LA suffix:
                            prefix:
                              `-patt---"as"---patt]
    patt is shadowed here






* self-describing syntax

  - built-in knowledge

     # {|
     # syntax: [name1;name2]
     # filter: [filter1;filter2]
     # |}
     # #syntax: [name1;name2]



    #open syntax [name1;name2] (you have to stop here), it will
    change the parser behavior later

     let open syntax [name1] in {
     }

     {:syntax| { load [name1]; unload [name2] ; use_original}
     
     |}; 

     #ppx_filter: [filter1;filter2];
     #fan_filter: [filter1;filter2];
     
     filter is always global, no scope semantics
     
     {:transform.str_item|
     blabla -> bla bla 
     blabla -> bla bla 
     |}

  - enhancing knowledge


  - first step get filter work

http://caml.inria.fr/pub/ml-archives/caml-list/2004/12/b5b79fcd4ea695b8e1e0aff740b07cf3.en.html


* lens
  http://stackoverflow.com/questions/9379626/statically-extend-a-record-ish-data-type-without-indirection-hassle

  http://bugsquash.blogspot.com/2011/11/lenses-in-f.html

  http://twanvl.nl/blog/haskell/overloading-functional-references
  
  Lenses are closed under composition. That is, the sequential
  composition of any two lenses is a lens.


  For each module, it should provide both =apply= and =retract=?


* syntax extension

  recording created non-terminals, keywords,
  and modified existing non-terminals

  keywords count by reference:

  {:syntax-extension|
  
  |};
  


  Without functorizing, we loose the ability to create 2 stand-alone
  suit of parsers?

  But there are some other ways by copy?

  The benefit is obvious: You don't have to write the signatures everywhere


TODO
  1. add conflict detection

  2. clean type specification 
     
  3. merge ...   done
     
     {| let u = 3 |}
     {:expr@loc| let u = 3 |}
     {|$x + $y|} -> {|$x+$y|}


http://stackoverflow.com/questions/7072980/how-do-you-compile-macros-in-a-lisp-compiler


正常的load code 不应该影响编译器的行为的.

http://docs.racket-lang.org/guide/stx-phases.html


* orakuda
https://bitbucket.org/camlspotter/orakuda/src/68da1890e85c?at=default

** fmt

   #+BEGIN_SRC ocaml
     let _ = 
       assert (Cformat.sprintf $%"hello%dworld" 2 = "hello2world");
     
       let x = 1 and y = 2 in 
       assert (Cformat.sprintf $%"%d %${x}d %d %${y}d %d" 3 4 5 = "3 1 4 2 5");
     
       assert (Cformat.sprintf $%"%1.F" 123.456 = "123.");
     ;;
     
     (* people who cannot use the p4 patch *)
     let _ = 
       assert (Cformat.sprintf <:fmt<hello%dworld>> 2 = "hello2world");
     
       let x = 1 and y = 2 in 
       assert (Cformat.sprintf <:fmt<%d %${x}d %d %${y}d %d>> 3 4 5 = "3 1 4 2 5")
     ;;
   #+END_SRC

   #+BEGIN_SRC ocaml
   `{/ let u = 3 in 3 /}
   #+END_SRC
   ` gives an default quotaion name more convenient

   

** cmd
   #+BEGIN_SRC ocaml
     let _ =
       <:qx<ls .>> & function
         | (`Out, `Read s) -> prerr_string ("OUT: " ^ s)
         | (`Err, `Read s) -> prerr_string ("ERR: " ^ s)
         | (`Out, `EOF) -> prerr_endline "OUT: EOF"
         | (`Err, `EOF) -> prerr_endline "ERR: EOF"
     ;;
        
   #+END_SRC

** regexp
   #+BEGIN_SRC ocaml
     
     (* str_item *)
     $/([0-9]+)(?P<x>[a-z]+)|([A-Z]+)/;;
     
     (* CR jfuruse: CamlP4 problem: the following is not parsable. *) 
     (* $/([0-9]+)(?P<x>[a-z]+)|([A-Z]+)/, 1;; *)
     ($/([0-9]+)(?P<x>[a-z]+)|([A-Z]+)/, 1);;
     
     let rex = $/([0-9]+)(?P<x>[a-z]+)|([A-Z]+)/;;
     
     let res =
       match Regexp.exec rex "abc123def456" with
       | None -> assert false
       | Some res ->
           assert (res#_0 = "123def");
           assert (res#_1 = "123");
           assert (res#_2 = "def");
           assert (res#_2 = res#x);
           assert (res#_left = "abc");
           assert (res#_right = "456");
           assert (res#_3 = "");
           assert (res#_last = "def");
           res
     ;;
     
     let rex = <:m<([0-9]+)(?P<x>[a-z]+)|([A-Z]+)>>;;
   #+END_SRC


   
