#+TITLE:     Changes.org
#+AUTHOR:    Hongbo Zhang
#+EMAIL:     hongboz@seas.upenn.edu
#+DATE:      2012-08-21 Tue
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:


* Issues

** Not Fixed
    
*** [[http://caml.inria.fr/mantis/view.php?id%3D5716][5716]] 'remove_directory' was not supported

*** [[http://caml.inria.fr/mantis/view.php?id%3D5705][5705]] accept wrong syntax =FIXABLE=
    #+BEGIN_SRC caml
     let f x : type a. a = ()
    #+END_SRC

*** DONE [[http://caml.inria.fr/mantis/view.php?id%3D5672][5672]] Remove Camlp4_import =FIXED=
*** [[http://caml.inria.fr/mantis/view.php?id%3D5650][5650]] fold generator does not handle well "abstract" types =FIXABLE=

*** [[http://caml.inria.fr/mantis/view.php?id%3D5642][5642]] module type application =SHOULD be fixed=

*** [[http://caml.inria.fr/mantis/view.php?id%3D5685][5685]] list antiquotation unexpected behavior =SHOULD be fixed=



*** [[http://caml.inria.fr/mantis/view.php?id%3D5239][5239]] Wrong location

*** [[http://caml.inria.fr/mantis/view.php?id%3D5221][5221]] expose more type as concrete type =FIXABLE=
    #+BEGIN_SRC caml
    Gram.parse_tokens_after_filter;
    - : Camlp4.PreCast.Gram.Entry.t 'a -> Camlp4.PreCast.Gram.token_stream -> 'a
    Gram.Entry.of_parser;
    - : string ->
    (Camlp4.PreCast.Gram.token_stream -> 'a) ->
    Camlp4.PreCast.Gram.Entry.t 'a
    #+END_SRC

*** [[http://caml.inria.fr/mantis/view.php?id%3D5150][5150]] dllunix =FIXABLE= depends on Windows

*** [[http://caml.inria.fr/mantis/view.php?id%3D5142][5142]] wrong error locations and ghost locations =HARD= randomized

*** [[http://caml.inria.fr/mantis/view.php?id%3D5127][5127]] directive location =HARD=

    > After looking again at the problem I noticed that we might have a
    > misunderstanding: The problem is present with all directives (eg,
    > also with #load), even if I am using a dummy directive handler
    > for parsing, such as

    That's what i understood.

    > The problem is obviously that
    >
    > value stopped_at _loc =
    > Some (Loc.move_line 1 _loc) (* FIXME be more precise *);
    >
    > in camlp4/Camlp4Parsers/Camlp4OCamlRevisedParser.ml does not move
    > the offsets.

    It is a more complicated problem; the parser used by camlp4 for an
    implementation/interface file has type:

    Loc.t -> char Stream.t -> Ast.(str_item/sig_item) * Loc.t option

    Where Loc.t option is the the location after the current directive if any.

    This parser internally creates a lexer, token stream, ... for this
    character stream, and when it stops after a directive, pending
    characters in the lexer or pending tokens in the token streams or
    any other stuff in internal data structures are just lost, so
    there is no way to tell what will be the next location.

    Here is for example another bug with directives and camlp4:

    $ cat > foo.ml
    #use "bar.ml" 
    let x = 1
    $ touch bar.ml
    $ camlp4o foo.ml
    x = 1

    The "let" keyword has been dropped.

    One way to fix this would be to change the API to use parsers that
    takes token streams but it will break programs.

    If you really want to use directives you can have a look at the
    optcomp project, it handles them at the token level (before the
    parser) so it does not have this problem.
    

*** [[http://caml.inria.fr/mantis/view.php?id%3D5119][5119]] camlp4 raises less generic exception. Not_found exception =FIXABLE=

*** [[http://caml.inria.fr/mantis/view.php?id%3D5116][5116]] diff ocamlc camlp4o =HARD= parser technology different 
    let f : ('a. 'a -> 'a ) = fun x -> x;;
    Characters 6-7:
    let f : ('a. 'a -> 'a ) = fun x -> x;;
    ^
    Error: Parse error: "type" or [poly_type] expected after ":" (in [cvalue_binding])
    let f : 'a. 'a -> 'a  = fun x -> x;;
    val f : 'a -> 'a = <fun>
    let f : (type a. a -> a ) = fun x -> x;;
    Characters 6-7:
    let f : (type a. a -> a ) = fun x -> x;;
    ^
    Error: Parse error: "type" or [poly_type] expected after ":" (in [cvalue_binding])
    let f : (type a . a -> a ) = fun x -> x;;
    Characters 6-7:
    let f : (type a . a -> a ) = fun x -> x;;
    ^
    Error: Parse error: "type" or [poly_type] expected after ":" (in [cvalue_binding])
    let f : 'a. 'a -> 'a  = fun x -> 3;;
    Characters 28-34:
    let f : 'a. 'a -> 'a  = fun x -> 3;;
    ^^^^^^
    Error: This definition has type int -> int which is less general than
    'a. 'a -> 'a

*** [[http://caml.inria.fr/mantis/view.php?id%3D5114][5114]] Wrong precise location =interesting=


*** [[http://caml.inria.fr/mantis/view.php?id%3D5071][5071]] camlp4 parser option (-parser r -parser rp) =FIXABLE=
      there seems a bug in my branch

*** [[http://caml.inria.fr/mantis/view.php?id%3D5048][5048]] handle properly optional arguments, application is n-ary =SHOULD be fixed=

*** [[http://caml.inria.fr/mantis/view.php?id%3D4886][4886]] Duplicated label expansion =not a bug=
    I think there is no bug here, but a misunderstanding about label syntax:
    fun ~(lab:typ) -> exp
    is an abbreviated syntax equivalent to
    fun ~lab:(lab:typ) -> exp
    and they share the same abstract syntax representation.
    For this reason, if you want to get the label, you should just write:
    <:expr< fun ~$lab$:$_$ -> $_$ >>

*** [[http://caml.inria.fr/mantis/view.php?id%3D4885][4885]] lexer for invalid string inputs. =FIXABLE=
    Should be fixable when Lexer was separated

*** [[http://caml.inria.fr/mantis/view.php?id%3D4855][4855]] camlp4 -I options

*** [[http://caml.inria.fr/mantis/view.php?id%3D4846][4846]] seems to be related to 4595

*** DONE [[http://caml.inria.fr/mantis/view.php?id%3D4602][4602]] StNil

*** [[http://caml.inria.fr/mantis/view.php?id%3D4598][4598]] location error message emacs

*** [[http://caml.inria.fr/mantis/view.php?id%3D4596][4596]] pa_macro does not work for patterns

*** [[http://caml.inria.fr/mantis/view.php?id%3D4595][4595]] quotaion location (seems to be fixed by me)

*** [[http://caml.inria.fr/mantis/view.php?id%3D4590][4590]] EXTEND grouping statements

*** DONE [[http://caml.inria.fr/mantis/view.php?id%3D4659][4569]] wrong error message (parser seems to interpret many lines as one line)

*** [[http://caml.inria.fr/mantis/view.php?id%3D4545][4545]] wrong location docs

*** [[http://caml.inria.fr/mantis/view.php?id%3D4452][4452]] CleanAst to clean for printing (cost)

*** [[http://caml.inria.fr/mantis/view.php?id%3D4432][4432]] Load support =FIXABLE=

*** [[http://caml.inria.fr/mantis/view.php?id%3D4363][4363]] camp4 filter don't handle polymorphic variant

*** [[http://caml.inria.fr/mantis/view.php?id%3D4346][4346]] comments messed up
    
*** [[http://caml.inria.fr/mantis/view.php?id%3D4329][4329]] parser error message unuseful

*** [[http://caml.inria.fr/mantis/view.php?id%3D4713][4173]] camlp4o documentation

*** [[http://caml.inria.fr/mantis/view.php?id%3D3787][3787]] delete_rule removes empty precedence levels
* Fixed
*** [[http://caml.inria.fr/mantis/view.php?id%3D4337][4377]] invalid char token (Fatal error)
*** DONE [[http://caml.inria.fr/mantis/view.php?id%3D4522][4522]] Camlp4 erases unused optional arguments   
*** [[http://caml.inria.fr/mantis/view.php?id%3D5301][5301]] exception equal to another exception


*** [[http://caml.inria.fr/mantis/view.php?id%3D4966][4966]] loop endlessly due to faulty 'ignore_upto' hacks
*** [[http://caml.inria.fr/mantis/view.php?id%3D5129][5129]] reflective parser
*** [[http://caml.inria.fr/mantis/view.php?id%3D4395][4395]] parser token ">]" reserved
*** [[http://caml.inria.fr/mantis/view.php?id%3D4520][4250]] camlp4o True False 
*** 4120
#+BEGIN_SRC caml
  camlp4>camlp4of -str 'EXTEND Gram abc:[[`(x,y) -> "z"]]; END'
  Gram.extend (abc : 'abc Gram.Entry.t)
    ((fun () ->
        (None,
         [ (None, None,
            [ ([ Gram.Stoken (((fun (_, _) -> true), "(_, _)")) ],
               (Gram.Action.mk
                  (fun ((x, y) : Gram.Token.t) (_loc : Gram.Loc.t) ->
                     ("z" : 'abc)))) ]) ]))
       ())
  
#+END_SRC
Here we use irrefutable patterns

*** [[http://caml.inria.fr/mantis/view.php?id=4044][4044]]
A lexer bug accept '\' as identifier, but ocaml crashes when printing it.
There's a patch.

    
*** [[http://caml.inria.fr/mantis/view.php?id%3D5564][5564]] lexer (patch proposition)
*** [[http://caml.inria.fr/mantis/view.php?id%3D5508][5508]] quotation lexer
    
*** [[http://caml.inria.fr/mantis/view.php?id=3988][3998]]
syntax for bigarray access in camlp4
*** [[http://caml.inria.fr/mantis/view.php?id=4218][4218]]
list comprehension
Ast.is_irrefut_patt
*** [[http://caml.inria.fr/mantis/view.php?id=4330][4330]] gram lib accept multiple tokens
*** [[http://caml.inria.fr/mantis/view.php?id=4236][4236]] list antiquotation

*** [[http://caml.inria.fr/mantis/view.php?id=4176][4176]] StSem StNil Camlp4.Struct.CleanAst
*** [[http://caml.inria.fr/mantis/view.php?id=4328][4328]] StNil
*** [[http://caml.inria.fr/mantis/view.php?id%3D5387][5387]] StNil 
*** [[http://caml.inria.fr/mantis/view.php?id%3D4526][4526]] StNil
    
*** [[http://caml.inria.fr/mantis/view.php?id=3926][3926]] Unneeded limitation on the CamplP4 quotation system
*** [[http://caml.inria.fr/mantis/view.php?id=4263][4263]] Ast definition
#+BEGIN_SRC caml
    | PaEq  of loc and ident and patt (* i = p *)
#+END_SRC
#+BEGIN_SRC caml
    | RbEq  of loc and ident and expr
#+END_SRC

*** [[http://caml.inria.fr/mantis/view.php?id=4262][4262]] Camlp4MacroParser
*** [[http://caml.inria.fr/mantis/view.php?id=4302][4302]] macro bug fix
*** [[http://caml.inria.fr/mantis/view.php?id=1696][1696]] macro usage
: camlp4of -DA='(1, "foo", '"'a'"', 3.4, [])' -str 'A'
    
*** [[http://caml.inria.fr/mantis/view.php?id%3D5456][5456]] __LOCATION__

*** [[http://caml.inria.fr/mantis/view.php?id%3D4345][4345]] string_of_float loose precision

*** [[http://caml.inria.fr/mantis/view.php?id%3D5481][5481]] magic number
*** [[http://caml.inria.fr/mantis/view.php?id%3D4972][4972]] mkcamlp4 includes dylink
    

*** [[http://caml.inria.fr/mantis/view.php?id%3D4732][4732]] `IN `END conflict
*** [[http://caml.inria.fr/mantis/view.php?id%3D4705][4705]] `True `False conflict
    
*** [[http://caml.inria.fr/mantis/view.php?id%3D4884][4884]] optional argument does not work when Some is redefined
*** [[http://caml.inria.fr/mantis/view.php?id%3D4937][4937]]
    
*** [[http://caml.inria.fr/mantis/view.php?id=4249][4249]] list tuple antiquote
*** [[http://caml.inria.fr/mantis/view.php?id=4238][4238]] original syntax vs revised syntax

    
*** [[http://caml.inria.fr/mantis/view.php?id%3D5120][5120]] Camlp4 debug 
*** [[http://caml.inria.fr/mantis/view.php?id%3D5352][5352]] Wrong dependency
*** [[http://caml.inria.fr/mantis/view.php?id%3D5374][5374]] Ast wrong location due to mapping
*** [[http://caml.inria.fr/mantis/view.php?id=4521][4251]] error location
*** [[http://caml.inria.fr/mantis/view.php?id=4357][4357]] quotation location
*** [[http://caml.inria.fr/mantis/view.php?id%3D5147][5147]] location information missing
*** [[http://caml.inria.fr/mantis/view.php?id%3D5692][5692]] end location not propaged
*** [[http://caml.inria.fr/mantis/view.php?id%3D5159][5159]] location offset
    
*** [[http://caml.inria.fr/mantis/view.php?id=4404][4404]] do let sequence
[[http://brion.inria.fr/gallium/index.php/Local_definitions_and_sequences][seq wiki]]

*** [[http://caml.inria.fr/mantis/view.php?id=4349][4349]] printer (two printers inconsistent)
*** [[http://caml.inria.fr/mantis/view.php?id=4298][4298]] printer
*** [[http://caml.inria.fr/mantis/view.php?id%3D5167][5167]] printer (top)
two printers
*** [[http://caml.inria.fr/mantis/view.php?id%3D5637][5637]] two printer bug
    
*** [[http://caml.inria.fr/mantis/view.php?id%3D5158][5158]] Register.current_parser
*** [[http://caml.inria.fr/mantis/view.php?id%3D5122][5122]] module type lower case ident
*** [[http://caml.inria.fr/mantis/view.php?id=4309][4309]] map and fold filter
*** [[http://caml.inria.fr/mantis/view.php?id=4543][4543]] toplevel filter patch
*** [[http://caml.inria.fr/mantis/view.php?id%3D5579][5579]] Filter    
*** [[http://caml.inria.fr/mantis/view.php?id%3D5104][5104]] Extra TySum
*** [[http://caml.inria.fr/mantis/view.php?id=4568][4568]] remove dynlink in camlp4lib
*** [[http://caml.inria.fr/mantis/view.php?id%3D5442][5442]] String expand quotation
*** [[http://caml.inria.fr/mantis/view.php?id%3D5633][5633]] escape bootstrap performance
*** [[http://caml.inria.fr/mantis/view.php?id%3D5090][5090]] toplevel
*** [[http://caml.inria.fr/mantis/view.php?id%3D5267][5267]] automatic tuplification

*** [[http://caml.inria.fr/mantis/view.php?id%3D5265][5265]] Wrong location
* Separation
  

** File [[file:camlp4-build.log][Camlp4-build-log]]
   for the initial version, it's linked into camlp4boot.byte,
   camlp4lib.cma, camlp4fulllib.cma, camlp4_import.cmi is also installed

** myocamlbuild
   has a rule 'camlp4/camlp4_import.ml' to build camlp4_import, using
   *Pathname.read*

** camlp4lib.mllib, camlp4fulllib.mllib
   has a module named Camlp4_import
** file ErrorHandler
   Camlp4Parsers: Oprint.float_repres => use p4_util
** camlp4_import
   --dirs utils, parsing, typing (only Oprint.float_repres)
   is needed
   

   
* building
  include Camlp4 for traversing is necessary
  Take care of Warning message emitted by ocamlbuild 
  ocamldep sucks when it handles dependency.

  Camlp4Filters.ml request dependency on Register, but it is incorrect

  ocamldep is not friendly to open struct. it can not handle it
  correctly
** [[file:bootstrapping.log][boot]]

   The original camlp4boot.native is a combination of such parsers:

   #+BEGIN_SRC tuareg
     module R = struct INCLUDE "camlp4/Camlp4Parsers/Camlp4OCamlRevisedParser.ml"; end;
     module Camlp4QuotationCommon = struct INCLUDE "camlp4/Camlp4Parsers/Camlp4QuotationCommon.ml"; end;
     module Q = struct INCLUDE "camlp4/Camlp4Parsers/Camlp4QuotationExpander.ml"; end;
     module Rp = struct INCLUDE "camlp4/Camlp4Parsers/Camlp4OCamlRevisedParserParser.ml"; end;
     module G = struct INCLUDE "camlp4/Camlp4Parsers/Camlp4GrammarParser.ml"; end;
     module M = struct INCLUDE "camlp4/Camlp4Parsers/Camlp4MacroParser.ml"; end;
     module D = struct INCLUDE "camlp4/Camlp4Parsers/Camlp4DebugParser.ml"; end;
     module L = struct INCLUDE "camlp4/Camlp4Parsers/Camlp4ListComprehension.ml"; end;
     module P = struct INCLUDE "camlp4/Camlp4Printers/Camlp4OCamlAstDumper.ml"; end;
   #+END_SRC
   File "Camlp4/Struct/Camlp4Ast2OCamlAst.ml" depends on a debug parser
   
   1. boot Camlp4Ast.ml
      #+BEGIN_EXAMPLE
      _build/boot/fan -parser rf -parser debug -printer o -filter fold -filter meta -filter trash  -impl src/Camlp4/Struct/Camlp4Ast.mlast  -o src/Camlp4/Struct/Camlp4Ast.ml
      #+END_EXAMPLE
   2. Camlp4.ml4 -> Camlp4.ml
   3. Camlp4boot.ml4 -> Camlp4boot.ml
   4. compare
   5. make binary
* Factoring
  1. No dynamic loading for built-in parser any more.  possible
    inconsistent behavior is that no duplicated check any more


  2. Take care of how Camlp4Ast.ml was bootstrapped, it was built using
  different filters, and then copied to my software.

  3. Remove support of printers for revised syntax.
     
   
  4. Camlp4Parsers depends on string_of_patt, which relies on a printer



* previous notes
  Internal, very small, undocumented, or invisible changes
  - [april-may 04] the following interface files changed in order to
  implement OCaml style locations:
        camlp4/camlp4/{ast2pt.mli,pcaml.mli,reloc.mli,grammar.mli}
        camlp4/lib/{stdpp.mli,token.mli}
  The main changes are occurrences of "int" changed into
  "Lexing.position" and "int * int" changed into
  "Lexing.position * Lexing.position" (or an equivalent type).
  - [20 nov 03], token.mli: eval_string takes a location as a extra
    argument (needed to issue a warning).

  Camlp4s Version 3.06+19
  -----------------------
  - [28 Oct 02] Changed and simplified local entry of pa_o.ml from "cvalue"
  to "cvalue_binding".
  - [18 Oct 02] The standard syntax for antiquotations in object class_types
  and object class_expr are now: <:class_type< $opt:x$ $list:y$ >> and
  <:class_expr< $opt:x$ $list:y$ >>: the syntax without the "opt" is
  accepted but deprecated (a warning is displayed).
  - [15 Oct 02] Changed Plexer which now manages better the line directives
  (applied only on begin of lines, no error if parsing error in the
  directive).
  - [14 Sep 02] Grammar.print_entry does not end any more with
  Format.print_flush. The "flush" is done by Grammar.Entry.print.


* design
  Use batteries, but don't use its io,
  do't =open Batteries= by default.
  For operators, define your own to enhance them.

  bit_match
  parser_match

* Wishes
  hope to expose float_repres
