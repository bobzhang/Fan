#+STARTUP: overview
#+SEQ_TODO: TODO(T) WAIT(W) | DONE(D!) CANCELED(C@) 
#+COLUMNS: %10ITEM  %10PRIORITY %15TODO %65TAGS

#+OPTIONS: toc:4 ^:{} num:nil creator:nil author:nil
#+OPTIONS: author:nil timestamp:nil d:nil
#+STYLE: <link rel="stylesheet" type="text/css" href="../css/style.css">


Fan is a full blow programming language, it's a superset of [[http://caml.inria.fr/][ocaml]] with
Lisp-like macro's features. It shares the same run-time with ocaml, so
it's 100% compatible with ocaml.


* Why a new Programming Language?

  We see that a lot of computer scientists are creating languages to
  target their domain, but creating a language is itself a domain, Fan
  is targeted at this domain. Yes, Fan is targeted to compiler
  domains. Fan aims to make creating a language easier.

  There are some projects like Microsoft's Rosyln which aims to make
  "Compiler as service", but unlike Rosyln, we do not only expose the
  compiler API, but also we provide built-in language support to make
  those API easier to use instead, since for any non-trivial
  languages, the API is quite complex that average programmers will be
  frustrated ans move away.

* Credits:
  Fan is a successor to [[http://brion.inria.fr/gallium/index.php/Camlp4][Camlp4]], which was mainly developed by [[http://pauillac.inria.fr/~ddr/][Daniel
  de Rauglaudre]] and [[http://michel.mauny.net/index.en.php][Michel Mauny]], and later was largely renovated by
  [[http://nicolaspouillard.fr/][Nicolas Pouillard]].

  Unfortunately, though Camlp4 is a very powerful tool to program
  OCaml Ast and Extending OCaml language, Camlp4 is a really complex
  beast, that lately it grows out of control. Fan adopts some good
  ideas of Camlp4 and merges some new ideas.

  Fan is way more *faster* than *Camlp4*, generally 100 times faster!
  and Fan has a very robust bootstrapping system compared with Camlp4.

  Fan has all the features that Camlp4 has, and more!
  

* Install
** Requirements
   [[http://caml.inria.fr/ocaml/release.en.html][ocaml 4.00 or later]]
   [[http://projects.camlcity.org/projects/findlib.html][ocamlfind or later]] 
   [[https://github.com/ocaml-batteries-team/batteries-included][batteries dev]]

   Currently we depend on =batteries= and =ocamlfind=, but the
   dependency is quite loose, we will remove the dependency on them
   when polished
   
** Initial Install

   just type dist
*** What it mainly did
    - Start. it will make =cold/Fan.byte= from original syntax This is
      mainly for the cold start(compile from the original syntax
    code). Actually all work is done.
    - Bootstrap. Using the generated binary to preprocess the revised
      syntax to verify =Fan= reaches a fix point now.

    If it reaches fix point, then it succeeds. You can also test =hb
    Fan.native= for fun!
   
** Develop

   Everytime, you made some nontrival changes(change the grammar,
   lexer), make sure to type =hb Fan.byte= or =hb Fan.native= to
   verify it can be hot-bootstrapped.

   Then type =cb= to snapshot your changes to cold.(This is for
   distribute purpose) 


* Directory Structure
  
** src
   The main dev strcuture
   

** cold
   The mirror of src, for distribute purpose 
* For dev
  the common practice is
  #+BEGIN_SRC shell-script
    hb Fan.byte # verify
    cb # snapshot and verify again
  #+END_SRC

* Docs
  It will be coming soon
