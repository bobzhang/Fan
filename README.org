#+STARTUP: overview
#+SEQ_TODO: TODO(T) WAIT(W) | DONE(D!) CANCELED(C@) 
#+COLUMNS: %10ITEM  %10PRIORITY %15TODO %65TAGS

#+OPTIONS: toc:nil ^:{} num:nil creator:nil author:nil
#+OPTIONS: author:nil timestamp:nil d:nil
#+STYLE: <link rel="stylesheet" type="text/css" href="../css/style.css">

The Programming Language Fan


Fan is a full blow programming language, it's a superset of [[http://caml.inria.fr/][ocaml]] with
Lisp-like macro's features. It shares the same run-time with ocaml, so
it's 100% compatible with ocaml.


* Why a new Programming Language?

  We see that a lot of computer scientists are creating languages to
  target their domain, but creating a language is itself a domain, Fan
  is targeted at this domain. Yes, Fan is targeted to compiler
  domains. Fan aims to make creating a language easier.

  There are some projects like Microsoft's Rosyln which aims to make
  "Compiler as service", but unlike Rosyln, we do not only expose the
  compiler API, but also we provide built-in language support to make
  those API easier to use instead, since for any non-trivial
  languages, the API is quite complex that average programmers will be
  frustrated ans move away.

* Credits:
  Fan is a successor to [[http://brion.inria.fr/gallium/index.php/Camlp4][Camlp4]], which was mainly developed by [[http://pauillac.inria.fr/~ddr/][Daniel
  de Rauglaudre]] and [[http://michel.mauny.net/index.en.php][Michel Mauny]], and later was largely renovated by
  [[http://nicolaspouillard.fr/][Nicolas Pouillard]].

  Unfortunately, though Camlp4 is a very powerful tool to program
  OCaml Ast and Extending OCaml language, Camlp4 is a really complex
  beast, that lately it grows out of control. Fan adopts some good
  ideas of Camlp4 and merges some new ideas.

  Fan is way more *faster* than *Camlp4*, generally 100 times faster!
  and Fan has a very robust bootstrapping system compared with Camlp4.

  Fan has all the features that Camlp4 has, and much more!
  
* Status:

  Designing a non-toy language is not easy, though Fan is already very
  powerful right now, but I have a bunch of ideas which take some time
  to implement, so it's not usable now(mostly because some API is
  unstable ).

  




* Contribution
  Fan is a non-trivial project, I have already commited millions of
  lines revisions during the last year.

  Feel free to send me a pull request

* Install
** Requirements

   - [[http://caml.inria.fr/ocaml/release.en.html][ocaml 4.00 or later]]
   - [[http://projects.camlcity.org/projects/findlib.html][ocamlfind or later]] 


   Currently we depend on =ocamlfind=, but the dependency is quite
   loose, we will remove the dependency on them when polished
   
** Initial Install

   just type
   #+BEGIN_EXAMPLE
   ocamlbuild cold/FanDriver.native
   #+END_EXAMPLE

** For developers (to continue)

   #+BEGIN_EXAMPLE
   ./re cold FanDriver.native
   ./hb FanDriver.native 
   #+END_EXAMPLE
   
*** What it mainly did

    - Start 
      
      =./re cold FanDriver.native= will make =cold/FanDriver.native=
      the pre-processor engine.  for the cold start(compile from the
      original syntax code).

    - Bootstrap
      =./hb FanDriver.native=
      Using the generated binary to preprocess the revised syntax to
      verify =Fan= reaches a fix point now.

    If it reaches fix point, then it succeeds.
*** snapshot

    #+BEGIN_EXAMPLE
    ./snapshot
    #+END_EXAMPLE
    Pretty print the =revised syntax= to the =cold= Directory for distribution

    Everytime, you made some nontrival changes(change the grammar,
    lexer), make sure to type =./hb FanDriver.native= or to
    verify it can be hot-bootstrapped.
    Then type =./snapshot= to snapshot your changes to cold.(This is for
    distribution purpose) 

* Directory Structure
  
** src
   The main dev strcuture
** cold
   The =mirror= of src, for distribute purpose 

* Docs
  It will be coming soon ;-)
