#+OPTIONS: ^:{}
#+TITLE: Getting started
#+TOC: listings


* Installation
  see
* What language does Fan speak?

  Fan speaks OCaml natively, plus a few addons. The following post
  assumes the reader is already familiar with OCalm If you are not
  familiar with OCaml, http://ocaml.org/ is recommended for you to
  learn.

  There are some minor differences between Fan's concrete syntax and
  OCaml though, the major differences is that Fan is more strict than
  OCaml.

  Three particular points:
  1. Parens are necessary for tuples
     #+BEGIN_SRC caml
       a,b (* illegal in Fan*)
       (a,b)    
     #+END_SRC
  2. Parens or "begin" "end" necessary for semis
     #+BEGIN_SRC ocaml
       print_endline "a"; print_endline "b" (* illegal in Fan*)
       (print_endline "a"; print_endline "b") (* ok *)
       begin print_endline "a"; print_endline "b" end (* ok*)
     #+END_SRC
  3. First vertical bar is necessary for algebraic data type, pattern
     match
     #+BEGIN_SRC caml
       type u = A  | B (* illegal*)
       type u =
         | A
         | B  (* right *)
             
       let f = function
           A -> "a"
         | B -> "b" (* wrong *)
       
       let f = function
         | A -> "a"
         | B -> "b" (* right *)
                       
     #+END_SRC
  4. $ is a reserved operator, please don't take it as a function.


* Install
  See here for installation

* Compiing with Fan
  
** Hello world <<hello>>
    Create a file [[file:code/hello.ml][hello.ml]] as follows:
    #+INCLUDE:"./code/hello.ml" src ocaml :lines "1-3"
    The compile is quite simple(make sure fan.byte or fan.native) is
    in your search path

    #+BEGIN_SRC sh
      $ ocamlc -pp 'fan.native' hello.ml -o test
      $ ./test
    #+END_SRC

    As you may notice, adding ~-pp 'fan.native'~ flag is enough to
    switching to Fan. Using =fan.byte= or =fan.native= is up to you,
    for the time being, only the performance matters here. So,
    compiling with the following command line does also work.

    #+BEGIN_SRC sh
      $ ocamlc -pp 'fan.native' hello.ml -o test   
    #+END_SRC
    
** First class lexer

   Writing hello world is not very interesting, for the following
   example, we show you how DDSL fits into Fan. Suppose we want to
   write a lexical analyzier to filter nested comments in OCaml, the
   traditional way is to write a complex regex expression, or start a
   new file to write a lexer. The first way is hackish, inefficient,
   unmaintainable in the long run while the second way is too heavy
   weight, since lexer generator is a standard alone external DDSL which
   introduces another staging phase.

   Within Fan,  we show how easy it is now:
   #+INCLUDE: "./code/comment.ml" src ocaml :lines "1-27"

   Compiling is the same as the previous example [[hello]]

   #+BEGIN_SRC sh
     ocamlc -annot -pp 'fan.native' comment.ml -o comment   
   #+END_SRC

   Here we see the lexer DDSL is first class construct in Fan, the
   user don't need to create a new file to isolate their lexer, it's
   as convenient as regex expression in perl. So it works in
   toplevel, it works with module system, and objects, that said, the
   user could make lexer reusable by using [[http://caml.inria.fr/pub/docs/manual-ocaml/manual005.html][objects]] instead of
   functions.

   Abot the internal of /lexer/ DDSL, see [[file:ddsl/lexer.org][DDSL:lexer]].

* Playing with toplevel

   If you have ocamlfind installed, the easiest way to explore fan is
   starting the toplevel:

   #+BEGIN_SRC ocaml
     # #require "fan.top";;
     /Users/bobzhang1988/.opam/4.00.1/lib/fan: added to search path
     /Users/bobzhang1988/.opam/4.00.1/lib/fan/fanTop.cma: loaded
     # let a = {:exp-|3|};;
     val a : FAstN.exp = `Int "3"
   #+END_SRC
   Here "exp-" is a built-in DDSL for quasiquotation, see [[file:ddsl/quotation.org][DDSL:quotation]]
   
   There are two  directives added,

   1. normal
      #+BEGIN_SRC ocaml
        #normal;;      
      #+END_SRC
      This directive would restore the toplevel to the default
      behavior, it's useful sometimes, for examlpe, you want to load
      a normal ocaml file instead of file pre-processed by Fan.
   2. fan
      #+BEGIN_SRC ocaml
        #fan;;
      #+END_SRC
      It will turn on the featurs of fan.
      
** TODO Playing with utop


* 

