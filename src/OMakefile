

# USE_OCAMLFIND=true
# we don't depend on ocamlfind here

# OMakeFlags(--verbose)

## compile flags
OCAMLFLAGS = 
BYTE_ENABLED = true
NATIVE_ENABLED = true
OCAMLBIN_EXT = *.cmo *.cmi *.cmx *.cma *.cmxa *.cmxs *.run *.opt *.annot *.o

######################################
# This direcotry is preprocessed by cold
# The develop is mainly here
# produce fan0 
DIR_MAIN_ANNOT  = $(dir main_annot)


####################################
# preprocessed by fan0
# produce fan1
DIR_HOT1 = $(dir hot1)
####################################
# fan1 -> fan2
DIR_HOT2 = $(dir hot2)

####################################
# fan2 -> fan3 
DIR_HOT3 = $(dir hot3)


DIR_COMMON     = $(dir common)
DIR_TREEPARSER = $(dir treeparser)
DIR_COLD       = $(dir cold)  
DIR_MAIN       = $(dir main)
COMMON_INCLUDES[] =
    $(DIR_COMMON)
TREEPARSER_INCLUDES[]=
    $(DIR_TREEPARSER)
    $(COMMON_INCLUDES)
COLD_INCLUDES[]=
    $(DIR_COLD)
    $(TREEPARSER_INCLUDES)
HOT_ANNOT_INCLUDES[]=
    $(DIR_MAIN_ANNOT)
    $(TREEPARSER_INCLUDES)

NATIVE_ENABLED = true

##############
# files shared between cold and hot directory
FAN_FILES = \
    ant antN astInjection astLib astLibN ast_filters ast_macros\
    ast_parsers ast_quotation \
    basicN codeTemplate commentFilter compile_lex compile_stream ctypN \
    deriveN dynLoader epN \
    expN fAstN fControl fDyn fGramDef fGramGen fIncludeDir fMeta fQuotDir\
    fSigUtil fState fanAstN fanOps fan_lex fgram\
    filters flex_lib freeVars fsyntax gentry gfold gramlib\
    idN langFans langInclude langOcaml langSave lex_lex lexing_util\
    mkFan mktop objs objsN parse_fan parse_grammar parse_lex parse_lex2\
    parse_stream pluginsN preCast stdFan typehook

##################################################################
# driver files also need to be synced up with 
DRIVER_FILES = fan fanTop

##################################################################
    
# FAN_DRIVER= fan
FILES[] =
    # fan


OCAML_OTHER_LIBS += dynlink

LIB_COMMON = $(file common/libcommon)
LIB_PARSER_RT = $(file treeparser/libtreeparser)
LIB_COLD = $(file cold/libcold)



OCAML_LIBS[] =
    $(LIB_COMMON)
    $(LIB_PARSER_RT)
OCAML_LINK_FLAGS += -linkall    


#####################
# cold binary -> fan
section
    OCAMLCFLAGS += -annot 
    .SUBDIRS: common treeparser cold 
    OCAML_LIBS[] += $(LIB_COLD)
    OCamlProgram (fan, $(DIR_COLD)/fan)
    
#####################
# hot preprocessed by cold fan
section
    OCAMLCFLAGS += -annot
    VMOUNTDIR = $(DIR_MAIN_ANNOT) # simulate ocamlbuild to interact well with annotation
    vmount(-l,$(DIR_MAIN),$(VMOUNTDIR))
    PP_FAN = $(file fan)
    OCamlAdditionalExistDependency($(PP_FAN))
    OCAML_LIBS[] += $(VMOUNTDIR)/libhot
    .SUBDIRS: $(VMOUNTDIR)
    OCamlProgram(fan0, $(VMOUNTDIR)/fan)

MakeFix(mountdir,pp,exe) =
    VMOUNTDIR = $(mountdir)
    vmount(-l,$(DIR_MAIN),$(VMOUNTDIR))
    PP_FAN = $(pp) # use hot to preprocess hot
    AdditionalDependency($(pp))
    .SUBDIRS: $(VMOUNTDIR)
    OCAML_LIBS[] += $(VMOUNTDIR)/libhot
    OCamlProgram($(exe), $(VMOUNTDIR)/fan)

MakeFix($(DIR_HOT1),$(file fan0), $(file fan1))
MakeFix($(DIR_HOT2),$(file fan1), $(file fan2))
MakeFix($(DIR_HOT3),$(file fan2), $(file fan3))


#########################
# fix point and snapshot 
# .PHONY: fixed snapshot
# TARGET1 = hot_annot/libhot.cma
# TARGET2 =  hot_hot/libhot.cma

# fixed: $(TARGET1) $(TARGET2) 
#     if $(shell-success-null cmp $(TARGET1) $(TARGET2) )
#         println(bootstrapped success)
#     else
#         println(bootstrapped failure)


# #######################
# # hot preprocessed by hot fan
# section
#     VMOUNTDIR = $(DIR_HOT_HOT)
#     vmount(-l,hot,$(VMOUNTDIR))
#     PP_FAN = $(file fan_hot_cold) # use hot to preprocess hot
#     AdditionalDependency($(PP_FAN))
#     .SUBDIRS: $(VMOUNTDIR)
#     OCAML_LIBS[] += $(VMOUNTDIR)/libhot
#     OCamlProgram(fan_hot_hot, $(VMOUNTDIR)/fan)

# section
#     VMOUNTDIR = $(DIR_HOT_HOT_HOT)
#     vmount(-l,hot, $(VMOUNTDIR))
#     PP_FAN = $(file fan_hot_hot)
#     AdditionalDependency($(PP_FAN))
#     .SUBDIRS: $(VMOUNTDIR)
#     OCAML_LIBS[] += $(VMOUNTDIR)/libhot
#     OCamlProgram(fan_hot_hot_hot, $(VMOUNTDIR)/fan)

    
########################
# test

section
    NATIVE_ENABLED = false
    BYTE_ENABLED = true
    PP_FAN = $(file fan_hot_cold)
    AdditionalDependency($(PP_FAN))
    OCAML_LIBS[]+= $(DIR_MAIN_ANNOT)/libhot
    .SUBDIRS: unitest
.PHONY: test
test:unitest/test
    unitest/test -verbose    

# unitest
# section
#     OCamlProgram(test, $(FILES))
#     .SUBDIRS: unitest
PMAKE = $(file pmake)
        
snapshot:fan_hot_cold
    section
        cd hot
        foreach(f => ..., $(FAN_FILES) $(DRIVER_FILES))
            if $(file-exists $f.ml)
                ../fan_hot_cold.opt -printer o $f.ml > ../cold/$f.ml
            if $(file-exists $f.mli)
                cp $f.mli ../cold/$f.mli
        # $(PMAKE) fan -- cause a project lock

.PHONY: coldtop
coldtop:common/libcommon.cma treeparser/libtreeparser.cma cold/libcold_top.cma
    
clean:
    rm -rf $(OCAMLBIN_EXT)

