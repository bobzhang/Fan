

# USE_OCAMLFIND=true
# we don't depend on ocamlfind here

# OMakeFlags(--verbose)

## compile flags
OCAMLFLAGS = 
BYTE_ENABLED = true
NATIVE_ENABLED = true
OCAMLBIN_EXT = *.cmo *.cmi *.cmx *.cma *.cmxa *.cmxs *.run *.opt *.annot *.o

COMMON_INCLUDES[] =
    $(dir common)
TREEPARSER_INCLUDES[]=
    $(dir treeparser)
    $(COMMON_INCLUDES)
COLD_INCLUDES[]=
    $(dir cold)
    $(TREEPARSER_INCLUDES)
SRC_INCLUDES[]=
    $(dir src)
    $(TREEPARSER_INCLUDES)

NATIVE_ENABLED = true

##
FAN_FILES = \
    ant antN astInjection astLib astLibN ast_filters ast_macros\
    ast_parsers ast_quotation \
    basicN codeTemplate commentFilter compile_lex compile_stream ctypN \
    deriveN dynLoader epN \
    expN fAstN fControl fDyn fGramDef fGramGen fIncludeDir fMeta fQuotDir\
    fSigUtil fState fanAstN fanOps fan_lex fgram\
    filters flex_lib freeVars fsyntax gentry gfold gramlib\
    idN langFans langInclude langOcaml langSave lex_lex lexing_util\
    mkFan mktop objs objsN parse_fan parse_grammar parse_lex parse_lex2\
    parse_stream pluginsN preCast stdFan typehook fan 

FILES[] =
    # fan


COLD = fan

# hot preprocessed by cold
HOT_COLD = fan_hot_cold
# hot preprocessed by hot
HOT_HOT = fan_hot_hot


OCAML_OTHER_LIBS += dynlink
OCAML_LIBS[] =
    common/libcommon
    treeparser/libtreeparser
OCAML_LINK_FLAGS += -linkall    


#####################
# cold binary
section
    OCAMLCFLAGS += -annot 
    .SUBDIRS: common treeparser cold 
    OCAML_LIBS[] += cold/libcold
    OCamlProgram ($(COLD), $(FILES))
#####################
# hot preprocessed by cold fan
section
    OCAMLCFLAGS += -annot
    VMOUNTDIR = hot_annot # simulate ocamlbuild to interact well with annotation
    vmount(-l,hot,$(VMOUNTDIR))
    PP_FAN = $(file $(COLD))
    OCAML_LIBS[] += $(VMOUNTDIR)/libhot
    .SUBDIRS: $(VMOUNTDIR)
    OCamlProgram($(HOT_COLD), $(FILES))

#####################
# hot preprocessed by hot fan
section
    VMOUNTDIR = hot_hot
    vmount(-l,hot,$(VMOUNTDIR))
    PP_FAN = $(file $(HOT_COLD)) # use hot to preprocess hot
    .SUBDIRS: $(VMOUNTDIR)
    OCAML_LIBS[] += $(VMOUNTDIR)/libhot
    OCamlProgram($(HOT_HOT), $(FILES))

.PHONY: fixed snapshot
TARGET1 = hot_annot/libhot.cma
TARGET2 =  hot_hot/libhot.cma

fixed: $(TARGET1) $(TARGET2) 
    if $(shell-success-null cmp $(TARGET1) $(TARGET2) )
        println(bootstrapped success)
    elseif
        println(bootstrapped failure)

snapshot:fan_hot_cold
    section
        cd hot_annot
        foreach(f => ..., $(FAN_FILES))
            if($file-exists $f.ml)
                ../fan_hot_cold.opt -printer o $f.ml > ../cold/$f.ml
            if $(file-exists $f.mli)
                cp $f.mli ../cold/$f.mli
    # $(cd hot_annot, $(foreach f => ... $(shell ../fan_hot_cold.opt -printer o $f.ml > ../cold/$f.ml ) , $(FAN_FILES)))

    
clean:
    rm -rf $(OCAMLBIN_EXT)

