

# USE_OCAMLFIND=true
# we don't depend on ocamlfind here

# OMakeFlags(--verbose)

## compile flags
OCAMLFLAGS = 
BYTE_ENABLED = true
NATIVE_ENABLED = true
OCAMLBIN_EXT = *.cmo *.cmi *.cmx *.cma *.cmxa *.cmxs *.run *.opt *.annot *.o *.dparsetree \
   *.omc

######################################
# This direcotry is preprocessed by cold
# The develop is mainly here
# produce fan0 
DIR_MAIN_ANNOT  = $(dir main_annot)


####################################
# preprocessed by fan0
# produce fan1
DIR_HOT1 = $(dir hot1)
####################################
# fan1 -> fan2
DIR_HOT2 = $(dir hot2)

####################################
# fan2 -> fan3 
DIR_HOT3 = $(dir hot3)

DIR_UTILS      = $(dir utils)
DIR_COMMON     = $(dir common)
DIR_TREEPARSER = $(dir treeparser)
DIR_COLD       = $(dir cold)  
DIR_MAIN       = $(dir main)

UTILS_INCLUDES[] =
    $(DIR_UTILS)

COMMON_INCLUDES[] =
    $(UTILS_INCLUDES)
    $(DIR_COMMON)
    
TREEPARSER_INCLUDES[]=
    $(DIR_TREEPARSER)
    $(COMMON_INCLUDES)
    
COLD_INCLUDES[]=
    $(DIR_COLD)
    $(TREEPARSER_INCLUDES)
HOT_ANNOT_INCLUDES[]=
    $(DIR_MAIN_ANNOT)
    $(TREEPARSER_INCLUDES)

# CreateDirIfNotExist(dir) =
#     if $(not $(file-exists $(dir)))
#         println($"--- creating directory $(dir) ---")
#         mkdir $(dir)
#         export
# static.=
#     foreach(dir => ..., $(DIR_MAIN_ANNOT) $(DIR_HOT1) $(DIR_HOT2) $(DIR_HOT3))
#         CreateDirIfNotExist($(dir))
    

    
NATIVE_ENABLED = true

##############
# files shared between cold and hot directory
FAN_LEX_LIB_FILES = \
    lex_fan lexing_util  flex_lib lex_lex
    
FAN_FILES = \
    $(FAN_LEX_LIB_FILES) ast_gen ant antN ast_loc  ast_inject  astn_util \
    ast_filters ast_macros\
    ast_parsers ast_quotation \
    fid code_template comment_filter compile_lex compile_stream ctyp \
    derive dyn_load epN \
    expN fAstN control control_require fMeta \
    gram_def gram_gen \
    sig_util  fanAstN  fgram\
    filters freeVars  gentry gfold gramlib\
    idN  ns  langOcaml   \
    fan_args mktop objs objsN \
    parse_fan parse_grammar parse_stream \
    plugins prelude stdFan typehook\
    parse_lex \
    lang_fans lang_include lang_save \
    fan_ops state dyn_tag \
    syntaxf \
    parsef
    # parse_grammar2
    
FAN_EXP_FILES = \
    # parse_grammar2
    # parse_lex2 fan_lex2
    
# driver files also need to be synced up with 
DRIVER_FILES = fan fan_top
##################################################################


##################################################################
    
# FAN_DRIVER= fan
FILES[] =
    # fan



LIB_UTILS  = $(file utils/libutils)
LIB_COMMON = $(file common/libcommon)
LIB_PARSER_RT = $(file treeparser/libtreeparser)
LIB_COLD = $(file cold/libmain)



OCAML_LIBS[] =
    $(LIB_UTILS)
    $(LIB_COMMON)
    $(LIB_PARSER_RT)
OCAML_LINK_FLAGS += -I +compiler-libs -linkall    


#####################
# cold binary -> fan
section
    OCAML_OTHER_LIBS += dynlink ocamlcommon
    OCAMLCFLAGS += -annot 
    .SUBDIRS: utils common treeparser cold 
    OCAML_LIBS[] += $(LIB_COLD)
    OCamlProgram (fan, $(DIR_COLD)/fan)
    
#####################
# fan -> fan0
section
    OCAML_OTHER_LIBS += dynlink ocamlcommon
    OCAMLCFLAGS += -annot
    VMOUNTDIR = $(DIR_MAIN_ANNOT) # simulate ocamlbuild to interact well with annotation
    vmount(-l,$(DIR_MAIN),$(VMOUNTDIR))
    PP_FAN = $(file fan)
    OCamlAdditionalExistDependency($(PP_FAN))
    # AdditionalDependency($(PP_FAN))
    # weaker dependency require snapshot from time to time however
    OCAML_LIBS[] += $(VMOUNTDIR)/libmain
    .SUBDIRS: $(VMOUNTDIR)
    OCamlProgram(fan0, $(VMOUNTDIR)/fan)

MakeFix(mountdir,pp,exe) =
    OCAML_OTHER_LIBS += dynlink ocamlcommon
    VMOUNTDIR = $(mountdir)
    vmount(-l,$(DIR_MAIN),$(VMOUNTDIR))
    PP_FAN = $(pp) # use hot to preprocess hot
    AdditionalDependency($(pp))
    .SUBDIRS: $(VMOUNTDIR)
    OCAML_LIBS[] += $(VMOUNTDIR)/libmain
    OCamlProgram($(exe), $(VMOUNTDIR)/fan)

MakeFix($(DIR_HOT1),$(file fan0), $(file fan1))
MakeFix($(DIR_HOT2),$(file fan1), $(file fan2))
MakeFix($(DIR_HOT3),$(file fan2), $(file fan3))

MakeWeakFix(mountdir,pp,exe) =
    OCAML_OTHER_LIBS += dynlink ocamlcommon
    VMOUNTDIR = $(mountdir)
    vmount(-l,$(DIR_MAIN),$(VMOUNTDIR))
    PP_FAN = $(pp) # use hot to preprocess hot
    OCamlAdditionalExistDependency($(pp))
    # AdditionalDependency($(pp))
    .SUBDIRS: $(VMOUNTDIR)
    OCAML_LIBS[] += $(VMOUNTDIR)/libmain
    OCamlProgram($(exe), $(VMOUNTDIR)/fan)

DIR_WEAK1 = weak1
DIR_WEAK2 = weak2
DIR_WEAK3 = weak3 
MakeWeakFix($(DIR_WEAK1),$(file fan0), $(file weak1))
MakeWeakFix($(DIR_WEAK2),$(file weak1), $(file weak2))
MakeWeakFix($(DIR_WEAK3),$(file weak2), $(file weak3))

#########################
# fix point and snapshot 
.PHONY:  snapshot fixpoint fixpoint1
TARGET1 = $(DIR_HOT1)/libmain.cma
TARGET2 = $(DIR_HOT2)/libmain.cma

# fixed: $(TARGET1) $(TARGET2) 
#     if $(shell-success-null cmp $(TARGET1) $(TARGET2) )
#         println(bootstrapped success)
#     else
#         println(bootstrapped failure)


FAN_ML_FILES =
    value $(filter-exists $(addprefix main/, $(addsuffix .ml,  $(FAN_FILES) $(DRIVER_FILES))))




MakeRules(pp) =
    foreach(f=> ..., $(FAN_ML_FILES) )
        private.F = $f
        private.obj_file = $(file dparsetree/$(basename $f).$(basename $(pp)).dparsetree)
        # println ("$(obj_file)")

        # notice that =:exists:= is not enough
        # however, sometimes the cold is broken
        # we use exists
        # so here comes: for fan
        # it should be :exists:
        # other preprocessor it should be it self
        # if $(equal $(pp) $(file fan))
        #     $(obj_file): $F :exists: $(pp)
        #         section
        #             cd main
        #             $(pp) -printer dparsetree $F > $(obj_file)
        # else
        $(obj_file): $F $(pp)
            section
                cd main
                $(pp) -printer dparsetree $F > $(obj_file)
MakeRules($(file fan))
MakeRules($(file fan0))
MakeRules($(file fan1))

MakeDParseFiles(pp) =
    value $(addprefix dparsetree/, $(addsuffix .$(pp).dparsetree, $(basename $(FAN_ML_FILES))))

FAN_ML_FILES_P =
    MakeDParseFiles(fan)
FAN0_ML_FILES_P =
    MakeDParseFiles(fan0)
FAN1_ML_FILES_P =
    MakeDParseFiles(fan1)

fixpoint:  $(FAN_ML_FILES_P) $(FAN0_ML_FILES_P)
    foreach(f=> ..., $(FAN_ML_FILES))
        private.X = dparsetree/$(basename $f).fan.dparsetree
        private.Y = dparsetree/$(basename $f).fan0.dparsetree
        if $(not $(shell-success-null diff $X $Y))
            println($"*************fan fan0 diff on file $X $Y*****************")
            FLAG = false
fixpoint1: $(FAN1_ML_FILES_P) $(FAN0_ML_FILES_P)
    foreach(f=> ..., $(FAN_ML_FILES))
        private.X = dparsetree/$(basename $f).fan0.dparsetree
        private.Y = dparsetree/$(basename $f).fan1.dparsetree
        if $(not $(shell-success-null diff $X $Y))
            println($"************fan0 fan1 diff on file $f*****************")            
# .SUBDIRS: main_dparsetree





DIR_UNIT       = $(dir unitest)
DIR_UNIT_ANNOT = $(dir unitest_annot)
DIR_UNIT1      = $(dir unitest1)
DIR_UNIT2      = $(dir unitest2)
DIR_UNIT3      = $(dir unitest3)

# fixpoint: $(add)
########################
# test

MakeTest(maindir,mountdir,pp) =
    OCAMLCFLAGS += -annot
    OCAML_OTHER_LIBS += dynlink ocamlcommon
    NATIVE_ENABLED = false
    BYTE_ENABLED = true
    PP_FAN = $(pp)
    MAINDIR = $(maindir)
    OCAMLINCLUDES += $(TREEPARSER_INCLUDES)
    OCAMLINCLUDES += $(MAINDIR)
    vmount(-l, $(DIR_UNIT), $(mountdir))
    AdditionalDependency($(PP_FAN))
    # OCAML_LIBS[]+= $(MAINDIR)/libmain
    .SUBDIRS: $(mountdir)

MakeTest($(DIR_MAIN_ANNOT),$(DIR_UNIT_ANNOT),$(file fan))        
MakeTest($(DIR_COLD), $(DIR_UNIT1),$(file fan))

section
    OCAML_LIBS = 
    .SUBDIRS: tools
        
.PHONY: test_hot test_cold


test_hot: .PHONY/unitest_annot/test
    
test_cold: .PHONY/unitest1/test 

    
# unitest
# section
#     OCamlProgram(test, $(FILES))
#     .SUBDIRS: unitest
PMAKE = $(file pmake)

######################################################
## intentionaly to remove the strong dependency on fan
## use fan0 instead of fan since fan0 contains more features
## then fan
snapshot: :exists: fan0
    section
        cd $(DIR_MAIN)
        foreach(f => ..., $(FAN_FILES) $(DRIVER_FILES) $(FAN_EXP_FILES))
            if $(file-exists $f.ml)
                ../fan0 -printer o $f.ml > ../cold/$f.ml
            if $(file-exists $f.mli)
                cp $f.mli ../cold/$f.mli
        # $(PMAKE) fan -- cause a project lock


.PHONY: coldtop hottop

hottop:utils/libutils.cma common/libcommon.cma treeparser/libtreeparser.cma main_annot/liblex.cma main_annot/libmain_top.cma
    
coldtop:utils/libutils.cma common/libcommon.cma treeparser/libtreeparser.cma cold/liblex.cma cold/libmain_top.cma
    
clean:
    rm -rf $(OCAMLBIN_EXT)
    rm -rf fan fan0 fan1

# local variables:
# compile-command: "pmake fan0.run"
# end: