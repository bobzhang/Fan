let a_ident = Gramf.mk "a_ident"
let aident = Gramf.mk "aident"
let amp_ctyp = Gramf.mk "amp_ctyp"
let and_ctyp = Gramf.mk "and_ctyp"
let case = Gramf.mk "case"
let case0 = Gramf.mk "case0"
let bind = Gramf.mk "bind"
let class_declaration = Gramf.mk "class_declaration"
let class_description = Gramf.mk "class_description"
let clexp = Gramf.mk "clexp"
let class_fun_bind = Gramf.mk "class_fun_bind"
let class_fun_def = Gramf.mk "class_fun_def"
let class_info_for_cltyp = Gramf.mk "class_info_for_cltyp"
let class_longident = Gramf.mk "class_longident"
let class_name_and_param = Gramf.mk "class_name_and_param"
let clsigi = Gramf.mk "clsigi"
let class_signature = Gramf.mk "class_signature"
let clfield = Gramf.mk "clfield"
let class_structure = Gramf.mk "class_structure"
let cltyp = Gramf.mk "cltyp"
let cltyp_declaration = Gramf.mk "cltyp_declaration"
let cltyp_longident = Gramf.mk "cltyp_longident"
let cltyp_plus = Gramf.mk "cltyp_plus"
let com_ctyp = Gramf.mk "com_ctyp"
let comma_ctyp = Gramf.mk "comma_ctyp"
let comma_exp = Gramf.mk "comma_exp"
let comma_ipat = Gramf.mk "comma_ipat"
let comma_pat = Gramf.mk "comma_pat"
let comma_type_parameter = Gramf.mk "comma_type_parameter"
let constrain = Gramf.mk "constrain"
let constructor_arg_list = Gramf.mk "constructor_arg_list"
let constructor_declaration = Gramf.mk "constructor_declaration"
let constructor_declarations = Gramf.mk "constructor_declarations"
let ctyp = Gramf.mk "ctyp"
let cvalue_bind = Gramf.mk "cvalue_bind"
let flag = Gramf.mk "flag"
let direction_flag_quot = Gramf.mk "direction_flag_quot"
let eq_exp = Gramf.mk "eq_exp"
let exp = Gramf.mk "exp"
let exp_eoi = Gramf.mk "exp_eoi"
let field_exp = Gramf.mk "field_exp"
let field_exp_list = Gramf.mk "field_exp_list"
let fun_bind = Gramf.mk "fun_bind"
let fun_def = Gramf.mk "fun_def"
let ident = Gramf.mk "ident"
let implem = Gramf.mk "implem"
let interf = Gramf.mk "interf"
let ipat = Gramf.mk "ipat"
let ipat_tcon = Gramf.mk "ipat_tcon"
let pat_tcon = Gramf.mk "pat_tcon"
let label_declaration = Gramf.mk "label_declaration"
let label_declaration_list = Gramf.mk "label_declaration_list"
let label_exp = Gramf.mk "label_exp"
let label_exp_list = Gramf.mk "label_exp_list"
let label_pat_list = Gramf.mk "label_pat_list"
let label_pat = Gramf.mk "label_pat"
let label_longident = Gramf.mk "label_longident"
let let_bind = Gramf.mk "let_bind"
let meth_list = Gramf.mk "meth_list"
let meth_decl = Gramf.mk "meth_decl"
let mbind = Gramf.mk "mbind"
let mbind = Gramf.mk "mbind"
let mbind0 = Gramf.mk "mbind0"
let mexp = Gramf.mk "mexp"
let module_longident = Gramf.mk "module_longident"
let module_longident_with_app = Gramf.mk "module_longident_with_app"
let module_rec_declaration = Gramf.mk "module_rec_declaration"
let mtyp = Gramf.mk "mtyp"
let name_tags = Gramf.mk "name_tags"
let opt_class_self_pat = Gramf.mk "opt_class_self_pat"
let opt_class_self_type = Gramf.mk "opt_class_self_type"
let opt_comma_ctyp = Gramf.mk "opt_comma_ctyp"
let opt_dot_dot = Gramf.mk "opt_dot_dot"
let row_var_flag_quot = Gramf.mk "row_var_flag_quot"
let opt_exp = Gramf.mk "opt_exp"
let opt_meth_list = Gramf.mk "opt_meth_list"
let opt_mutable = Gramf.mk "opt_mutable"
let mutable_flag_quot = Gramf.mk "mutable_flag_quot"
let opt_polyt = Gramf.mk "opt_polyt"
let opt_private = Gramf.mk "opt_private"
let private_flag_quot = Gramf.mk "private_flag_quot"
let opt_rec = Gramf.mk "opt_rec"
let rec_flag_quot = Gramf.mk "rec_flag_quot"
let opt_virtual = Gramf.mk "opt_virtual"
let virtual_flag_quot = Gramf.mk "virtual_flag_quot"
let opt_override = Gramf.mk "opt_override"
let override_flag_quot = Gramf.mk "override_flag_quot"
let pat = Gramf.mk "pat"
let pat_as_pat_opt = Gramf.mk "pat_as_pat_opt"
let pat_eoi = Gramf.mk "pat_eoi"
let row_field = Gramf.mk "row_field"
let sem_exp = Gramf.mk "sem_exp"
let sem_exp_for_list = Gramf.mk "sem_exp_for_list"
let sem_pat = Gramf.mk "sem_pat"
let sem_pat_for_list = Gramf.mk "sem_pat_for_list"
let semi = Gramf.mk "semi"
let sequence = Gramf.mk "sequence"
let sigi = Gramf.mk "sigi"
let sigis = Gramf.mk "sigis"
let star_ctyp = Gramf.mk "star_ctyp"
let stru = Gramf.mk "stru"
let strus = Gramf.mk "strus"
let top_phrase = Gramf.mk "top_phrase"
let type_declaration = Gramf.mk "type_declaration"
let type_ident_and_parameters = Gramf.mk "type_ident_and_parameters"
let type_longident = Gramf.mk "type_longident"
let type_longident_and_parameters = Gramf.mk "type_longident_and_parameters"
let type_parameter = Gramf.mk "type_parameter"
let type_parameters = Gramf.mk "type_parameters"
let typevars = Gramf.mk "typevars"
let val_longident = Gramf.mk "val_longident"
let constr = Gramf.mk "constr"
let exp_quot = Gramf.mk "exp_quot"
let pat_quot = Gramf.mk "pat_quot"
let ctyp_quot = Gramf.mk "ctyp_quot"
let stru_quot = Gramf.mk "stru_quot"
let sigi_quot = Gramf.mk "sigi_quot"
let clfield_quot = Gramf.mk "clfield_quot"
let clsigi_quot = Gramf.mk "clsigi_quot"
let mexp_quot = Gramf.mk "mexp_quot"
let mtyp_quot = Gramf.mk "mtyp_quot"
let cltyp_quot = Gramf.mk "cltyp_quot"
let clexp_quot = Gramf.mk "clexp_quot"
let constr_quot = Gramf.mk "constr_quot"
let bind_quot = Gramf.mk "bind_quot"
let rec_exp_quot = Gramf.mk "rec_exp_quot"
let module_declaration = Gramf.mk "module_declaration"
let type_info = Gramf.mk "type_info"
let type_repr = Gramf.mk "type_repr"
let infixop2 =
  Gramf.mk "infix operator (level 2) (comparison operators, and some others)"
let infixop3 = Gramf.mk "infix operator (level 3) (start with '^', '@')"
let infixop4 = Gramf.mk "infix operator (level 4) (start with '+', '-')"
let infixop5 = Gramf.mk "infix operator (level 5) (start with '*', '/', '%')"
let case_quot = Gramf.mk "quotation of case (try/match/function case)"
let module_longident_dot_lparen = Gramf.mk "module_longident_dot_lparen"
let sequence' = Gramf.mk "sequence'"
let fun_def = Gramf.mk "fun_def"
let mbind_quot = Gramf.mk "mbind_quot"
let ident_quot = Gramf.mk "ident_quot"
let string_list = Gramf.mk "string_list"
let method_opt_override = Gramf.mk "method_opt_override"
let value_val_opt_override = Gramf.mk "value_val_opt_override"
let unquoted_typevars = Gramf.mk "unquoted_typevars"
let lang = Gramf.mk "lang"
let with_exp_lang = Gramf.mk "with_exp_lang"
let with_stru_lang = Gramf.mk "with_stru_lang"
let dot_lstrings = Gramf.mk "dot_lstrings"
let a_string = Gramf.mk "a_string"
let a_lident = Gramf.mk "a_lident"
let a_uident = Gramf.mk "a_uident"
let luident = Gramf.mk "luident"
let uident = Gramf.mk "uident"
let vid = Gramf.mk "vid"
let astr = Gramf.mk "astr"
