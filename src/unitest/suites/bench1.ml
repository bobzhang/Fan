(* let _ = *)
(*   function *)
(*   | 550543360 *)
(*     |803846675 *)
(*      |483739668 *)
(*       |131103253 *)
(*        |939042348 *)
(*         |190501942 *)
(*          |318291514 *)
(*           |1000574016 *)
(*            |600187987 *)
(*             |1035971165 *)
(*              |258923636 *)
(*               |231714422 *)
(*                |916095096 *)
(*                 |1031134330 *)
(*                  |166283392 *)
(*                   |303530675 *)
(*                    |63952589 *)
(*                     |606848730 *)
(*                      |347290843 *)
(*                       |92423390 *)
(*                        |72534754 *)
(*                         |504783075 *)
(*                          |632292067 *)
(*                           |299205366 *)
(*                            |804297977 *)
(*                             |624008963 *)
(*                              |175869201 *)
(*                               |972174611 *)
(*                                |99260692 *)
(*                                 |415265556 *)
(*                                  |43519261 *)
(*                                   |569308970 *)
(*                                    |197088567 *)
(*                                     |146147642 *)
(*                                      |424948034 *)
(*                                       |201771337 *)
(*                                        |494069608 *)
(*                                         |1035704714 *)
(*                                          |889500043 *)
(*                                           |144676753 *)
(*                                            |343776663 *)
(*                                             |1048928162 *)
(*                                              |149418948 *)
(*                                               |55606727|294194640|1050473980 *)
(*       -> true *)
(*   | _ -> false *)
let f v =
  (fun (s : string)  ->
    function
    | 550543360 -> s = "functor"
    | 803846675 -> s = "private"
    | 483739668 -> s = "sig"
    | 131103253 -> s = "include"
    | 939042348 -> s = "exception"
    | 190501942 -> s = "inherit"
    | 318291514 -> s = "and"
    | 1000574016 -> s = "when"
    | 600187987 -> s = "then"
    | 1035971165 -> s = "initializer"
    | 258923636 -> s = "in"
    | 231714422 -> s = "downto"
    | 916095096 -> s = "as"
    | 1031134330 -> s = "function"
    | 166283392 -> s = "begin"
    | 303530675 -> s = "class"
    | 63952589 -> s = "do"
    | 606848730 -> s = "end"
    | 347290843 -> s = "assert"
    | 92423390 -> s = "external"
    | 72534754 -> s = "virtual"
    | 504783075 -> s = "to"
    | 632292067 -> s = "try"
    | 299205366 -> s = "struct"
    | 804297977 -> s = "else"
    | 624008963 -> s = "val"
    | 175869201 -> s = "constraint"
    | 972174611 -> s = "type"
    | 99260692 -> s = "new"
    | 415265556 -> s = "of"
    | 43519261 -> s = "done"
    | 569308970 -> s = "for"
    | 197088567 -> s = "fun"
    | 146147642 -> s = "method"
    | 424948034 -> s = "mutable"
    | 201771337 -> s = "lazy"
    | 494069608 -> s = "with"
    | 1035704714 -> s = "if"
    | 889500043 -> s = "while"
    | 144676753 -> s = "rec"
    | 343776663 -> s = "object"
    | 1048928162 -> s = "or"
    | 149418948 -> s = "match"
    | 55606727 -> s = "open"
    | 294194640 -> s = "module"
    | 1050473980 -> s = "let"
    | _ -> false) "xxx" v
(*
%hash_cmp{"functor"|"private"|"sig"
            | "include"| "exception"| "inherit"
            | "and"| "when"| "then"| "initializer"
            | "in" | "downto"| "as"| "function"
            | "begin"| "class"| "do"|   "end"
            | "assert"| "external"| "virtual"| "to"
            | "try" | "struct"| "else"
            | "val" | "constraint"| "type"
            | "new" | "of"| "done"
            | "for" | "fun"| "method"
            | "mutable"| "lazy"| "with"
            | "if" | "while" | "rec"
            | "object" | "or"
            | "match" | "open"| "module"|"let"}
*)  
(* local variables: *)
(* compile-command: "ocamlopt.opt -dcmm -c bench1.ml" *)
(* end: *)
