


* DONE 01 lexer
  How to handle strings in quotation?

  Shall we treat them verbatim or impose some restrictions?
  the following quotations legal

  If we treat them verbatim the following is good (we may not like)
  {:lexer| "|}
  {:lexer| "agho |}

  If we treat only string specially, the following is wrong (should be
  a bug)
  {:lexer| '"' |}


  So to conclude, we should add some checks in quotation?

  how about this
  {:lexer| "|}" |}, if we treat them verbatim, this should fail.

  The problem becomes serious when handling nested quotations and
  anti-quotations:
     A sample code:
     #+BEGIN_SRC ocaml
       and quotation c = {:lexer|
         | '{' (':' quotation_name)? ('@' locname)? '|' (extra_quot as p)?
             ->
               begin
                 store c ;
                 Stack.push p opt_char; (* take care the order matters*)
                 with_curr_loc quotation c ;
                 parse quotation c
               end
         | (extra_quot as p)? "|}" ->
       ... |}     
     #+END_SRC

   The current solution is ad-hoc:
     It requires string to follow the ocaml convention, and for char,
     it has a loose requirement, it tries to recognize '"' problem,
     but
     does not prevent '    a' happen.
     #+BEGIN_SRC ocaml
           | "\"" {store c;
                   begin
                     try with_curr_loc string c
                     with FanLoc.Exc_located(_,Lexing_error Unterminated_string) ->
                       err Unterminated_string_in_quotation (loc_merge c)
                   end;
                   Buffer.add_char c.buffer '"';
                   parse quotation c
                 }
           | "'" ( [^ '\\' '\010' '\013'] | '\\' (['\\' '"' 'n' 't' 'b' 'r' ' ' '\'']
           | ['0'-'9'] ['0'-'9'] ['0'-'9'] |'x' hexa_char hexa_char)  as x) "'"
                  {store_parse quotation c }
     #+END_SRC


* DONE 02 illegal begin (ghost locatio horrible error message)

  When the parser raise "illegal begin " excpetion, the location is
  ghost a horrible error message.

  FIX
  




* 03 paser merge

  #+BEGIN_SRC caml
      (*
      FIXME:
      the merge does not work well with

      prefix:
      |-OPT [ "!"; `Uid _]---.
      `-OPT [ "!"; `Uid _]---stream_exp_comp_list---
      It's better to bring refine STree in the future,
      get rid of Action.t in most cases
     *)
  
  #+END_SRC

  
* DONE 04 class parser error

  This is not a bug :-), it's a build script bug in Fan, fixed now.
  can not parse... the class variable
  #+BEGIN_SRC caml
    class c_fold_pattern_vars ['accu] f init =  object
      inherit FanAst.fold as super
      val acc = init
      method acc : 'accu = acc
      method! pat = fun
        [ {:pat| $lid:s |} | {:pat| ~ $s |} | {:pat| ? $s |}
        -> {< acc = f s acc >}
      | p -> super#pat p ]
    end
  #+END_SRC
