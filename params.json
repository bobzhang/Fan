{"name":"Fan","tagline":"Programming Language Fan","body":"\r\nFan is a fully-featured metaprogramming system for OCaml, it's a\r\nsuperset of [OCaml](http://caml.inria.fr/) with Lisp-like macro's features. It shares the same\r\nrun-time with OCaml, its concrete syntax is basically the same as\r\nOCaml except for some minor differences, as we will explain later.\r\n\r\n\r\n# Why a new metaprogramming system?\r\n\r\nWe see that a lot of computer scientists are creating languages or\r\nwriting mini-compilers to target their domain, but writing a\r\ncompiler is itself a domain, Fan is targeted at this domain.\r\n\r\nYes, Fan is aimed to make writing compilers easier by the\r\ncombination of metaprogramming and strongly typed functional\r\nlanguages.\r\n\r\n# Why for OCaml?\r\n\r\nFan aims to make\r\ncreating a language easier.\r\n\r\nThere are some projects like Microsoft's Rosyln which aims to make\r\n\"Compiler as service\", but unlike Rosyln, we do not only expose the\r\ncompiler API, but also we provide built-in language support to make\r\nthose API easier to use instead, since for any non-trivial\r\nlanguages, the API is quite complex that average programmers will be\r\nfrustrated ans move away.\r\n\r\n# Credits:\r\n\r\nFan is a successor to [Camlp4](http://brion.inria.fr/gallium/index.php/Camlp4), which was\r\nmainly developed by [Daniel de Rauglaudre](http://pauillac.inria.fr/~ddr/) and\r\n[Michel Mauny](http://michel.mauny.net/index.en.php), and later was largely renovated by\r\n[Nicolas Pouillard](http://nicolaspouillard.fr/).\r\n\r\nUnfortunately, though Camlp4 is a very powerful tool to program\r\nOCaml Ast and Extending OCaml language, Camlp4 is a really complex\r\nbeast, that lately it grows out of control. Fan adopts some good\r\nideas of Camlp4 and merges some new ideas.\r\n\r\nFan is way more **faster** than **Camlp4**, generally 10 times faster!\r\nand Fan has a very robust bootstrapping system compared with Camlp4.\r\n\r\nFan has all the features that Camlp4 has, and much more!\r\n\r\n# Status:\r\n\r\nDesigning a non-toy language is not easy, though Fan is already very\r\npowerful right now, but I have a bunch of ideas which take some time\r\nto implement, so it's not usable now(mostly because some API is\r\nunstable ).\r\n\r\n\r\n# Contributions\r\n\r\nFan is a non-trivial project, I have already commited millions of\r\nlines revisions during the last year.\r\nFeel free to send me a pull request\r\n\r\n# Install\r\n\r\n## Requirements\r\n\r\n-   [ocaml 4.00 or later](http://caml.inria.fr/ocaml/release.en.html)\r\n\r\n-   [ocamlfind or later](http://projects.camlcity.org/projects/findlib.html)\r\n\r\n\r\nCurrently we depend on `ocamlfind`, but the dependency is quite\r\nloose, we will remove the dependency on them when polished\r\n\r\n## Initial Install\r\n\r\njust type\r\n\r\n    ocamlbuild cold/FanDriver.native\r\n\r\n## For developers (to continue)\r\n\r\n    ./re cold FanDriver.native\r\n    ./hb FanDriver.native \r\n\r\n### What it mainly did\r\n\r\n-   Start \r\n    \r\n    `./re cold FanDriver.native` will make `cold/FanDriver.native`\r\n    the pre-processor engine.  for the cold start(compile from the\r\n    original syntax code).\r\n\r\n-   Bootstrap\r\n    `./hb FanDriver.native`\r\n    Using the generated binary to preprocess the revised syntax to\r\n    verify `Fan` reaches a fix point now.\r\n\r\nIf it reaches fix point, then it succeeds.\r\n\r\n### snapshot\r\n\r\n    ./snapshot\r\n\r\nPretty print the `revised syntax` to the `cold` Directory for distribution\r\n\r\nEverytime, you made some nontrival changes(change the grammar,\r\nlexer), make sure to type `./hb FanDriver.native` or to\r\nverify it can be hot-bootstrapped.\r\nThen type `./snapshot` to snapshot your changes to cold.(This is for\r\ndistribution purpose) \r\n\r\n# Directory Structure\r\n\r\n## src\r\n\r\nThe main dev strcuture\r\n\r\n## cold\r\n\r\nThe `mirror` of src, for distribute purpose \r\n\r\n# Docs\r\n\r\nIt will be coming soon ;-)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}