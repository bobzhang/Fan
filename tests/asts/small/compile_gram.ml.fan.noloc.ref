[
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "eprintf" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "Format.eprintf" (compile_gram.ml[]..[])
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "list_of_list" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "Fan_ops.list_of_list" (compile_gram.ml[]..[])
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "tuple_com" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "Ast_gen.tuple_com" (compile_gram.ml[]..[])
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "typing" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "Ast_gen.typing" (compile_gram.ml[]..[])
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "and_of_list" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "Ast_gen.and_of_list" (compile_gram.ml[]..[])
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "seq_sem" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "Ast_gen.seq_sem" (compile_gram.ml[]..[])
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_open Fresh "Astf" (compile_gram.ml[]..[])
  structure_item (compile_gram.ml[]..[])
    Pstr_open Fresh "Util" (compile_gram.ml[]..[])
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "print_warning" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_apply
          expression (compile_gram.ml[]..[])
            Pexp_ident "eprintf" (compile_gram.ml[]..[])
          [
            <label> ""
              expression (compile_gram.ml[]..[])
                Pexp_constant Const_string("%a:\n%s@.",None)
            <label> ""
              expression (compile_gram.ml[]..[])
                Pexp_ident "Locf.print" (compile_gram.ml[]..[])
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "prefix" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_constant Const_string("__fan_",None)
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "Locf." (compile_gram.ml[]..[])
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "module_name" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_apply
          expression (compile_gram.ml[]..[])
            Pexp_ident "ref" (compile_gram.ml[]..[])
          [
            <label> ""
              expression (compile_gram.ml[]..[])
                Pexp_variant "Uid"
                Some
                  expression (compile_gram.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_gram.ml[]..[])
                        Pexp_ident "" (compile_gram.ml[]..[])
                      expression (compile_gram.ml[]..[])
                        Pexp_constant Const_string("Gramf",None)
                    ]
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "gm" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_construct "()" (compile_gram.ml[]..[])
                None
              expression (compile_gram.ml[]..[])
                Pexp_constraint
                expression (compile_gram.ml[]..[])
                  Pexp_match
                  expression (compile_gram.ml[]..[])
                    Pexp_apply
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "!" (compile_gram.ml[]..[])
                    [
                      <label> ""
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "Configf.compilation_unit" (compile_gram.ml[]..[])
                    ]
                  [
                    <case>
                      pattern (compile_gram.ml[]..[])
                        Ppat_construct "Some" (compile_gram.ml[]..[])
                        Some
                          pattern (compile_gram.ml[]..[])
                            Ppat_constant Const_string("Gramf",None)
                      expression (compile_gram.ml[]..[])
                        Pexp_variant "Uid"
                        Some
                          expression (compile_gram.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "" (compile_gram.ml[]..[])
                              expression (compile_gram.ml[]..[])
                                Pexp_constant Const_string("",None)
                            ]
                    <case>
                      pattern (compile_gram.ml[]..[])
                        Ppat_or
                        pattern (compile_gram.ml[]..[])
                          Ppat_construct "Some" (compile_gram.ml[]..[])
                          Some
                            pattern (compile_gram.ml[]..[])
                              Ppat_any
                        pattern (compile_gram.ml[]..[])
                          Ppat_construct "None" (compile_gram.ml[]..[])
                          None
                      expression (compile_gram.ml[]..[])
                        Pexp_apply
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "!" (compile_gram.ml[]..[])
                        [
                          <label> ""
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "module_name" (compile_gram.ml[]..[])
                        ]
                  ]
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "vid" (compile_gram.ml[]..[])
                  []
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "add" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_fun "?check"
          Some
            expression (compile_gram.ml[]..[])
              Pexp_construct "true" (compile_gram.ml[]..[])
              None
          pattern (compile_gram.ml[]..[])
            Ppat_var "check" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (compile_gram.ml[]..[])
                  Ppat_tuple
                  [
                    pattern (compile_gram.ml[]..[])
                      Ppat_tuple
                      [
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "loc" (compile_gram.ml[]..[])
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "id" (compile_gram.ml[]..[])
                      ]
                    pattern (compile_gram.ml[]..[])
                      Ppat_var "v" (compile_gram.ml[]..[])
                  ]
                expression (compile_gram.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "env" (compile_gram.ml[]..[])
                      expression (compile_gram.ml[]..[])
                        Pexp_ifthenelse
                        expression (compile_gram.ml[]..[])
                          Pexp_apply
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "&&" (compile_gram.ml[]..[])
                          [
                            <label> ""
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "check" (compile_gram.ml[]..[])
                            <label> ""
                              expression (compile_gram.ml[]..[])
                                Pexp_apply
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "List.exists" (compile_gram.ml[]..[])
                                [
                                  <label> ""
                                    expression (compile_gram.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (compile_gram.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_any
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_var "i" (compile_gram.ml[]..[])
                                                ]
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_any
                                            ]
                                          expression (compile_gram.ml[]..[])
                                            Pexp_apply
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "=" (compile_gram.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "i" (compile_gram.ml[]..[])
                                              <label> ""
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "id" (compile_gram.ml[]..[])
                                            ]
                                      ]
                                  <label> ""
                                    expression (compile_gram.ml[]..[])
                                      Pexp_apply
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "!" (compile_gram.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "env" (compile_gram.ml[]..[])
                                      ]
                                ]
                          ]
                        expression (compile_gram.ml[]..[])
                          Pexp_apply
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "Locf.failf" (compile_gram.ml[]..[])
                          [
                            <label> ""
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "loc" (compile_gram.ml[]..[])
                            <label> ""
                              expression (compile_gram.ml[]..[])
                                Pexp_constant Const_string("This variable %s is bound several times",None)
                            <label> ""
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "id" (compile_gram.ml[]..[])
                          ]
                        Some
                          expression (compile_gram.ml[]..[])
                            Pexp_apply
                            expression (compile_gram.ml[]..[])
                              Pexp_ident ":=" (compile_gram.ml[]..[])
                            [
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "env" (compile_gram.ml[]..[])
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_construct "::" (compile_gram.ml[]..[])
                                  Some
                                    expression (compile_gram.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (compile_gram.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_gram.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "loc" (compile_gram.ml[]..[])
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "id" (compile_gram.ml[]..[])
                                              ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "v" (compile_gram.ml[]..[])
                                          ]
                                        expression (compile_gram.ml[]..[])
                                          Pexp_apply
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "!" (compile_gram.ml[]..[])
                                          [
                                            <label> ""
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "env" (compile_gram.ml[]..[])
                                          ]
                                      ]
                            ]
                  ]
            ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "enhance_env" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_constraint
                pattern (compile_gram.ml[]..[])
                  Ppat_var "s" (compile_gram.ml[]..[])
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "string" (compile_gram.ml[]..[])
                  []
              expression (compile_gram.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_gram.ml[]..[])
                      Ppat_var "xs" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (compile_gram.ml[]..[])
                            Ppat_var "env" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_apply
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "|>" (compile_gram.ml[]..[])
                            [
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "xs" (compile_gram.ml[]..[])
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_apply
                                  expression (compile_gram.ml[]..[])
                                    Pexp_ident "List.iter" (compile_gram.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_gram.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_tuple
                                              [
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_alias "v" (compile_gram.ml[]..[])
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_tuple
                                                    [
                                                      pattern (compile_gram.ml[]..[])
                                                        Ppat_var "loc" (compile_gram.ml[]..[])
                                                      pattern (compile_gram.ml[]..[])
                                                        Ppat_any
                                                    ]
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_var "opt" (compile_gram.ml[]..[])
                                              ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_match
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "opt" (compile_gram.ml[]..[])
                                              [
                                                <case>
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_construct "None" (compile_gram.ml[]..[])
                                                    None
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "add" (compile_gram.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "v" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_coerce
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "loc" (compile_gram.ml[]..[])
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "s" (compile_gram.ml[]..[])
                                                                    ]
                                                              None
                                                              core_type (compile_gram.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                []
                                                          ]
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "env" (compile_gram.ml[]..[])
                                                    ]
                                                <case>
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_construct "Some" (compile_gram.ml[]..[])
                                                    Some
                                                      pattern (compile_gram.ml[]..[])
                                                        Ppat_var "l" (compile_gram.ml[]..[])
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "add" (compile_gram.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "v" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_coerce
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_variant "Field"
                                                                Some
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "loc" (compile_gram.ml[]..[])
                                                                      expression (compile_gram.ml[]..[])
Pexp_variant "Lid"
Some
  expression (compile_gram.ml[]..[])
    Pexp_tuple
    [
      expression (compile_gram.ml[]..[])
        Pexp_ident "loc" (compile_gram.ml[]..[])
      expression (compile_gram.ml[]..[])
        Pexp_ident "s" (compile_gram.ml[]..[])
    ]
                                                                      expression (compile_gram.ml[]..[])
Pexp_variant "Lid"
Some
  expression (compile_gram.ml[]..[])
    Pexp_tuple
    [
      expression (compile_gram.ml[]..[])
        Pexp_ident "loc" (compile_gram.ml[]..[])
      expression (compile_gram.ml[]..[])
        Pexp_ident "l" (compile_gram.ml[]..[])
    ]
                                                                    ]
                                                              None
                                                              core_type (compile_gram.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                []
                                                          ]
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "env" (compile_gram.ml[]..[])
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "mk_prule" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_fun "prod"
          None
          pattern (compile_gram.ml[]..[])
            Ppat_var "prod" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_fun "action"
            None
            pattern (compile_gram.ml[]..[])
              Ppat_var "action" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_let Nonrec
              [
                <def>
                  pattern (compile_gram.ml[]..[])
                    Ppat_var "env" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_apply
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "ref" (compile_gram.ml[]..[])
                    [
                      <label> ""
                        expression (compile_gram.ml[]..[])
                          Pexp_construct "[]" (compile_gram.ml[]..[])
                          None
                    ]
              ]
              expression (compile_gram.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (compile_gram.ml[]..[])
                      Ppat_var "i" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_apply
                      expression (compile_gram.ml[]..[])
                        Pexp_ident "ref" (compile_gram.ml[]..[])
                      [
                        <label> ""
                          expression (compile_gram.ml[]..[])
                            Pexp_constant Const_int 0
                      ]
                ]
                expression (compile_gram.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "prod" (compile_gram.ml[]..[])
                      expression (compile_gram.ml[]..[])
                        Pexp_apply
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "Listf.filter_map" (compile_gram.ml[]..[])
                        [
                          <label> ""
                            expression (compile_gram.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (compile_gram.ml[]..[])
                                    Ppat_constraint
                                    pattern (compile_gram.ml[]..[])
                                      Ppat_var "p" (compile_gram.ml[]..[])
                                    core_type (compile_gram.ml[]..[])
                                      Ptyp_constr "Gram_def.decorate" (compile_gram.ml[]..[])
                                      [
                                        core_type (compile_gram.ml[]..[])
                                          Ptyp_constr "list" (compile_gram.ml[]..[])
                                          [
                                            core_type (compile_gram.ml[]..[])
                                              Ptyp_constr "Gram_def.osymbol" (compile_gram.ml[]..[])
                                              []
                                          ]
                                      ]
                                  expression (compile_gram.ml[]..[])
                                    Pexp_match
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "p" (compile_gram.ml[]..[])
                                    [
                                      <case>
                                        pattern (compile_gram.ml[]..[])
                                          Ppat_record Closed
                                          [
                                            "kind" (compile_gram.ml[]..[])
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_construct "KSome" (compile_gram.ml[]..[])
                                                None
                                            "txt" (compile_gram.ml[]..[])
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_var "txt" (compile_gram.ml[]..[])
                                          ]
                                        expression (compile_gram.ml[]..[])
                                          Pexp_construct "Some" (compile_gram.ml[]..[])
                                          Some
                                            expression (compile_gram.ml[]..[])
                                              Pexp_apply
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "|>" (compile_gram.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "txt" (compile_gram.ml[]..[])
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "List.map" (compile_gram.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_function
                                                          [
                                                            <case>
                                                              pattern (compile_gram.ml[]..[])
                                                                Ppat_constraint
                                                                pattern (compile_gram.ml[]..[])
                                                                  Ppat_var "symbol" (compile_gram.ml[]..[])
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Gram_def.osymbol" (compile_gram.ml[]..[])
                                                                  []
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_match
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "symbol" (compile_gram.ml[]..[])
                                                                [
                                                                  <case>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_record Open
                                                                      [
"outer_pattern" (compile_gram.ml[]..[])
  pattern (compile_gram.ml[]..[])
    Ppat_construct "None" (compile_gram.ml[]..[])
    None
"bounds" (compile_gram.ml[]..[])
  pattern (compile_gram.ml[]..[])
    Ppat_var "bounds" (compile_gram.ml[]..[])
                                                                      ]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_let Nonrec
                                                                      [
<def>
  pattern (compile_gram.ml[]..[])
    Ppat_var "id" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_apply
    expression (compile_gram.ml[]..[])
      Pexp_ident "^" (compile_gram.ml[]..[])
    [
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_ident "prefix" (compile_gram.ml[]..[])
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_apply
          expression (compile_gram.ml[]..[])
            Pexp_ident "string_of_int" (compile_gram.ml[]..[])
          [
            <label> ""
              expression (compile_gram.ml[]..[])
                Pexp_apply
                expression (compile_gram.ml[]..[])
                  Pexp_ident "!" (compile_gram.ml[]..[])
                [
                  <label> ""
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "i" (compile_gram.ml[]..[])
                ]
          ]
    ]
                                                                      ]
                                                                      expression (compile_gram.ml[]..[])
Pexp_sequence
expression (compile_gram.ml[]..[])
  Pexp_apply
  expression (compile_gram.ml[]..[])
    Pexp_ident "enhance_env" (compile_gram.ml[]..[])
  [
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_ident "id" (compile_gram.ml[]..[])
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_ident "bounds" (compile_gram.ml[]..[])
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_ident "env" (compile_gram.ml[]..[])
  ]
expression (compile_gram.ml[]..[])
  Pexp_sequence
  expression (compile_gram.ml[]..[])
    Pexp_apply
    expression (compile_gram.ml[]..[])
      Pexp_ident "List.iter" (compile_gram.ml[]..[])
    [
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_tuple
                [
                  pattern (compile_gram.ml[]..[])
                    Ppat_alias "z" (compile_gram.ml[]..[])
                    pattern (compile_gram.ml[]..[])
                      Ppat_tuple
                      [
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "xloc" (compile_gram.ml[]..[])
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "id" (compile_gram.ml[]..[])
                      ]
                  pattern (compile_gram.ml[]..[])
                    Ppat_any
                ]
              expression (compile_gram.ml[]..[])
                Pexp_apply
                expression (compile_gram.ml[]..[])
                  Pexp_ident "add" (compile_gram.ml[]..[])
                [
                  <label> "check"
                    expression (compile_gram.ml[]..[])
                      Pexp_construct "false" (compile_gram.ml[]..[])
                      None
                  <label> ""
                    expression (compile_gram.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "z" (compile_gram.ml[]..[])
                        expression (compile_gram.ml[]..[])
                          Pexp_coerce
                          expression (compile_gram.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (compile_gram.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_gram.ml[]..[])
                                    Pexp_ident "xloc" (compile_gram.ml[]..[])
                                  expression (compile_gram.ml[]..[])
                                    Pexp_variant "Uid"
                                    Some
                                      expression (compile_gram.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "xloc" (compile_gram.ml[]..[])
                                          expression (compile_gram.ml[]..[])
                                            Pexp_constant Const_string("Some",None)
                                        ]
                                  expression (compile_gram.ml[]..[])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (compile_gram.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "xloc" (compile_gram.ml[]..[])
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "id" (compile_gram.ml[]..[])
                                        ]
                                ]
                          None
                          core_type (compile_gram.ml[]..[])
                            Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                            []
                      ]
                  <label> ""
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "env" (compile_gram.ml[]..[])
                ]
          ]
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_ident "bounds" (compile_gram.ml[]..[])
    ]
  expression (compile_gram.ml[]..[])
    Pexp_sequence
    expression (compile_gram.ml[]..[])
      Pexp_apply
      expression (compile_gram.ml[]..[])
        Pexp_ident "incr" (compile_gram.ml[]..[])
      [
        <label> ""
          expression (compile_gram.ml[]..[])
            Pexp_ident "i" (compile_gram.ml[]..[])
      ]
    expression (compile_gram.ml[]..[])
      Pexp_ident "symbol" (compile_gram.ml[]..[])
                                                                  <case>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_alias "s" (compile_gram.ml[]..[])
                                                                      pattern (compile_gram.ml[]..[])
Ppat_record Open
[
  "outer_pattern" (compile_gram.ml[]..[])
    pattern (compile_gram.ml[]..[])
      Ppat_construct "Some" (compile_gram.ml[]..[])
      Some
        pattern (compile_gram.ml[]..[])
          Ppat_alias "z" (compile_gram.ml[]..[])
          pattern (compile_gram.ml[]..[])
            Ppat_tuple
            [
              pattern (compile_gram.ml[]..[])
                Ppat_var "xloc" (compile_gram.ml[]..[])
              pattern (compile_gram.ml[]..[])
                Ppat_var "id" (compile_gram.ml[]..[])
            ]
  "bounds" (compile_gram.ml[]..[])
    pattern (compile_gram.ml[]..[])
      Ppat_var "bounds" (compile_gram.ml[]..[])
]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_sequence
                                                                      expression (compile_gram.ml[]..[])
Pexp_apply
expression (compile_gram.ml[]..[])
  Pexp_ident "enhance_env" (compile_gram.ml[]..[])
[
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_ident "id" (compile_gram.ml[]..[])
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_ident "bounds" (compile_gram.ml[]..[])
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_ident "env" (compile_gram.ml[]..[])
]
                                                                      expression (compile_gram.ml[]..[])
Pexp_sequence
expression (compile_gram.ml[]..[])
  Pexp_apply
  expression (compile_gram.ml[]..[])
    Pexp_ident "add" (compile_gram.ml[]..[])
  [
    <label> "check"
      expression (compile_gram.ml[]..[])
        Pexp_construct "false" (compile_gram.ml[]..[])
        None
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "z" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_coerce
            expression (compile_gram.ml[]..[])
              Pexp_variant "App"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "xloc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_variant "Uid"
                      Some
                        expression (compile_gram.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "xloc" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_constant Const_string("Some",None)
                          ]
                    expression (compile_gram.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_gram.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "xloc" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "id" (compile_gram.ml[]..[])
                          ]
                  ]
            None
            core_type (compile_gram.ml[]..[])
              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
              []
        ]
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_ident "env" (compile_gram.ml[]..[])
  ]
expression (compile_gram.ml[]..[])
  Pexp_sequence
  expression (compile_gram.ml[]..[])
    Pexp_apply
    expression (compile_gram.ml[]..[])
      Pexp_ident "List.iter" (compile_gram.ml[]..[])
    [
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_tuple
                [
                  pattern (compile_gram.ml[]..[])
                    Ppat_alias "z" (compile_gram.ml[]..[])
                    pattern (compile_gram.ml[]..[])
                      Ppat_tuple
                      [
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "xloc" (compile_gram.ml[]..[])
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "id" (compile_gram.ml[]..[])
                      ]
                  pattern (compile_gram.ml[]..[])
                    Ppat_any
                ]
              expression (compile_gram.ml[]..[])
                Pexp_apply
                expression (compile_gram.ml[]..[])
                  Pexp_ident "add" (compile_gram.ml[]..[])
                [
                  <label> "check"
                    expression (compile_gram.ml[]..[])
                      Pexp_construct "false" (compile_gram.ml[]..[])
                      None
                  <label> ""
                    expression (compile_gram.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "z" (compile_gram.ml[]..[])
                        expression (compile_gram.ml[]..[])
                          Pexp_coerce
                          expression (compile_gram.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (compile_gram.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_gram.ml[]..[])
                                    Pexp_ident "xloc" (compile_gram.ml[]..[])
                                  expression (compile_gram.ml[]..[])
                                    Pexp_variant "Uid"
                                    Some
                                      expression (compile_gram.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "xloc" (compile_gram.ml[]..[])
                                          expression (compile_gram.ml[]..[])
                                            Pexp_constant Const_string("Some",None)
                                        ]
                                  expression (compile_gram.ml[]..[])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (compile_gram.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "xloc" (compile_gram.ml[]..[])
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "id" (compile_gram.ml[]..[])
                                        ]
                                ]
                          None
                          core_type (compile_gram.ml[]..[])
                            Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                            []
                      ]
                  <label> ""
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "env" (compile_gram.ml[]..[])
                ]
          ]
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_ident "bounds" (compile_gram.ml[]..[])
    ]
  expression (compile_gram.ml[]..[])
    Pexp_sequence
    expression (compile_gram.ml[]..[])
      Pexp_apply
      expression (compile_gram.ml[]..[])
        Pexp_ident "incr" (compile_gram.ml[]..[])
      [
        <label> ""
          expression (compile_gram.ml[]..[])
            Pexp_ident "i" (compile_gram.ml[]..[])
      ]
    expression (compile_gram.ml[]..[])
      Pexp_ident "s" (compile_gram.ml[]..[])
                                                                ]
                                                          ]
                                                    ]
                                              ]
                                      <case>
                                        pattern (compile_gram.ml[]..[])
                                          Ppat_record Closed
                                          [
                                            "kind" (compile_gram.ml[]..[])
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_construct "KNormal" (compile_gram.ml[]..[])
                                                None
                                            "txt" (compile_gram.ml[]..[])
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_var "txt" (compile_gram.ml[]..[])
                                          ]
                                        expression (compile_gram.ml[]..[])
                                          Pexp_construct "Some" (compile_gram.ml[]..[])
                                          Some
                                            expression (compile_gram.ml[]..[])
                                              Pexp_apply
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "List.map" (compile_gram.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_function
                                                    [
                                                      <case>
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_constraint
                                                          pattern (compile_gram.ml[]..[])
                                                            Ppat_var "symbol" (compile_gram.ml[]..[])
                                                          core_type (compile_gram.ml[]..[])
                                                            Ptyp_constr "Gram_def.osymbol" (compile_gram.ml[]..[])
                                                            []
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_match
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "symbol" (compile_gram.ml[]..[])
                                                          [
                                                            <case>
                                                              pattern (compile_gram.ml[]..[])
                                                                Ppat_record Open
                                                                [
                                                                  "outer_pattern" (compile_gram.ml[]..[])
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_construct "None" (compile_gram.ml[]..[])
                                                                      None
                                                                  "bounds" (compile_gram.ml[]..[])
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_var "bounds" (compile_gram.ml[]..[])
                                                                ]
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_var "id" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "^" (compile_gram.ml[]..[])
                                                                      [
<label> ""
  expression (compile_gram.ml[]..[])
    Pexp_ident "prefix" (compile_gram.ml[]..[])
<label> ""
  expression (compile_gram.ml[]..[])
    Pexp_apply
    expression (compile_gram.ml[]..[])
      Pexp_ident "string_of_int" (compile_gram.ml[]..[])
    [
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_apply
          expression (compile_gram.ml[]..[])
            Pexp_ident "!" (compile_gram.ml[]..[])
          [
            <label> ""
              expression (compile_gram.ml[]..[])
                Pexp_ident "i" (compile_gram.ml[]..[])
          ]
    ]
                                                                      ]
                                                                ]
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_sequence
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "enhance_env" (compile_gram.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (compile_gram.ml[]..[])
  Pexp_ident "id" (compile_gram.ml[]..[])
                                                                      <label> ""
expression (compile_gram.ml[]..[])
  Pexp_ident "bounds" (compile_gram.ml[]..[])
                                                                      <label> ""
expression (compile_gram.ml[]..[])
  Pexp_ident "env" (compile_gram.ml[]..[])
                                                                    ]
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_sequence
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "incr" (compile_gram.ml[]..[])
                                                                      [
<label> ""
  expression (compile_gram.ml[]..[])
    Pexp_ident "i" (compile_gram.ml[]..[])
                                                                      ]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "symbol" (compile_gram.ml[]..[])
                                                            <case>
                                                              pattern (compile_gram.ml[]..[])
                                                                Ppat_alias "symbol" (compile_gram.ml[]..[])
                                                                pattern (compile_gram.ml[]..[])
                                                                  Ppat_record Open
                                                                  [
                                                                    "outer_pattern" (compile_gram.ml[]..[])
                                                                      pattern (compile_gram.ml[]..[])
Ppat_construct "Some" (compile_gram.ml[]..[])
Some
  pattern (compile_gram.ml[]..[])
    Ppat_tuple
    [
      pattern (compile_gram.ml[]..[])
        Ppat_any
      pattern (compile_gram.ml[]..[])
        Ppat_var "id" (compile_gram.ml[]..[])
    ]
                                                                    "bounds" (compile_gram.ml[]..[])
                                                                      pattern (compile_gram.ml[]..[])
Ppat_var "bounds" (compile_gram.ml[]..[])
                                                                  ]
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_sequence
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "enhance_env" (compile_gram.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "id" (compile_gram.ml[]..[])
                                                                    <label> ""
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "bounds" (compile_gram.ml[]..[])
                                                                    <label> ""
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "env" (compile_gram.ml[]..[])
                                                                  ]
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_sequence
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "incr" (compile_gram.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (compile_gram.ml[]..[])
  Pexp_ident "i" (compile_gram.ml[]..[])
                                                                    ]
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "symbol" (compile_gram.ml[]..[])
                                                          ]
                                                    ]
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "txt" (compile_gram.ml[]..[])
                                              ]
                                      <case>
                                        pattern (compile_gram.ml[]..[])
                                          Ppat_record Closed
                                          [
                                            "kind" (compile_gram.ml[]..[])
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_construct "KNone" (compile_gram.ml[]..[])
                                                None
                                            "txt" (compile_gram.ml[]..[])
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_var "txt" (compile_gram.ml[]..[])
                                          ]
                                        expression (compile_gram.ml[]..[])
                                          Pexp_sequence
                                          expression (compile_gram.ml[]..[])
                                            Pexp_apply
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "List.iter" (compile_gram.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (compile_gram.ml[]..[])
                                                        Ppat_constraint
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_var "symbol" (compile_gram.ml[]..[])
                                                        core_type (compile_gram.ml[]..[])
                                                          Ptyp_constr "Gram_def.osymbol" (compile_gram.ml[]..[])
                                                          []
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_match
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "symbol" (compile_gram.ml[]..[])
                                                        [
                                                          <case>
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_record Open
                                                              [
                                                                "outer_pattern" (compile_gram.ml[]..[])
                                                                  pattern (compile_gram.ml[]..[])
                                                                    Ppat_construct "None" (compile_gram.ml[]..[])
                                                                    None
                                                                "bounds" (compile_gram.ml[]..[])
                                                                  pattern (compile_gram.ml[]..[])
                                                                    Ppat_var "bounds" (compile_gram.ml[]..[])
                                                              ]
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "List.iter" (compile_gram.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (compile_gram.ml[]..[])
  Ppat_tuple
  [
    pattern (compile_gram.ml[]..[])
      Ppat_alias "z" (compile_gram.ml[]..[])
      pattern (compile_gram.ml[]..[])
        Ppat_tuple
        [
          pattern (compile_gram.ml[]..[])
            Ppat_var "xloc" (compile_gram.ml[]..[])
          pattern (compile_gram.ml[]..[])
            Ppat_any
        ]
    pattern (compile_gram.ml[]..[])
      Ppat_any
  ]
expression (compile_gram.ml[]..[])
  Pexp_apply
  expression (compile_gram.ml[]..[])
    Pexp_ident "add" (compile_gram.ml[]..[])
  [
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "z" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_coerce
            expression (compile_gram.ml[]..[])
              Pexp_variant "Uid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "xloc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("None",None)
                  ]
            None
            core_type (compile_gram.ml[]..[])
              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
              []
        ]
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_ident "env" (compile_gram.ml[]..[])
  ]
                                                                    ]
                                                                <label> ""
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "bounds" (compile_gram.ml[]..[])
                                                              ]
                                                          <case>
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_record Open
                                                              [
                                                                "outer_pattern" (compile_gram.ml[]..[])
                                                                  pattern (compile_gram.ml[]..[])
                                                                    Ppat_construct "Some" (compile_gram.ml[]..[])
                                                                    Some
                                                                      pattern (compile_gram.ml[]..[])
Ppat_alias "z" (compile_gram.ml[]..[])
pattern (compile_gram.ml[]..[])
  Ppat_tuple
  [
    pattern (compile_gram.ml[]..[])
      Ppat_var "xloc" (compile_gram.ml[]..[])
    pattern (compile_gram.ml[]..[])
      Ppat_any
  ]
                                                                "bounds" (compile_gram.ml[]..[])
                                                                  pattern (compile_gram.ml[]..[])
                                                                    Ppat_var "bounds" (compile_gram.ml[]..[])
                                                              ]
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_sequence
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_apply
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "add" (compile_gram.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_gram.ml[]..[])
  Pexp_ident "z" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_coerce
  expression (compile_gram.ml[]..[])
    Pexp_variant "Uid"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "xloc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_constant Const_string("None",None)
        ]
  None
  core_type (compile_gram.ml[]..[])
    Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
    []
                                                                      ]
                                                                  <label> ""
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "env" (compile_gram.ml[]..[])
                                                                ]
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_apply
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "List.iter" (compile_gram.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_function
                                                                      [
<case>
  pattern (compile_gram.ml[]..[])
    Ppat_tuple
    [
      pattern (compile_gram.ml[]..[])
        Ppat_alias "z" (compile_gram.ml[]..[])
        pattern (compile_gram.ml[]..[])
          Ppat_tuple
          [
            pattern (compile_gram.ml[]..[])
              Ppat_var "xloc" (compile_gram.ml[]..[])
            pattern (compile_gram.ml[]..[])
              Ppat_any
          ]
      pattern (compile_gram.ml[]..[])
        Ppat_any
    ]
  expression (compile_gram.ml[]..[])
    Pexp_apply
    expression (compile_gram.ml[]..[])
      Pexp_ident "add" (compile_gram.ml[]..[])
    [
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "z" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_coerce
              expression (compile_gram.ml[]..[])
                Pexp_variant "Uid"
                Some
                  expression (compile_gram.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_gram.ml[]..[])
                        Pexp_ident "xloc" (compile_gram.ml[]..[])
                      expression (compile_gram.ml[]..[])
                        Pexp_constant Const_string("None",None)
                    ]
              None
              core_type (compile_gram.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                []
          ]
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_ident "env" (compile_gram.ml[]..[])
    ]
                                                                      ]
                                                                  <label> ""
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "bounds" (compile_gram.ml[]..[])
                                                                ]
                                                        ]
                                                  ]
                                              <label> ""
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "txt" (compile_gram.ml[]..[])
                                            ]
                                          expression (compile_gram.ml[]..[])
                                            Pexp_construct "None" (compile_gram.ml[]..[])
                                            None
                                    ]
                              ]
                          <label> ""
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "prod" (compile_gram.ml[]..[])
                        ]
                  ]
                  expression (compile_gram.ml[]..[])
                    Pexp_constraint
                    expression (compile_gram.ml[]..[])
                      Pexp_record
                      [
                        "prod" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_apply
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "List.concat" (compile_gram.ml[]..[])
                            [
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "prod" (compile_gram.ml[]..[])
                            ]
                        "action" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "action" (compile_gram.ml[]..[])
                        "env" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_apply
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "List.rev" (compile_gram.ml[]..[])
                            [
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_apply
                                  expression (compile_gram.ml[]..[])
                                    Pexp_ident "!" (compile_gram.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "env" (compile_gram.ml[]..[])
                                  ]
                            ]
                      ]
                      None
                    core_type (compile_gram.ml[]..[])
                      Ptyp_constr "Gram_def.rule" (compile_gram.ml[]..[])
                      []
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "make_exp" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_constraint
                pattern (compile_gram.ml[]..[])
                  Ppat_var "tvar" (compile_gram.ml[]..[])
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "string" (compile_gram.ml[]..[])
                  []
              expression (compile_gram.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_gram.ml[]..[])
                      Ppat_constraint
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "x" (compile_gram.ml[]..[])
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Gram_def.text" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_let Rec
                      [
                        <def>
                          pattern (compile_gram.ml[]..[])
                            Ppat_var "aux" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (compile_gram.ml[]..[])
                                  Ppat_var "tvar" (compile_gram.ml[]..[])
                                expression (compile_gram.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (compile_gram.ml[]..[])
                                        Ppat_constraint
                                        pattern (compile_gram.ml[]..[])
                                          Ppat_var "x" (compile_gram.ml[]..[])
                                        core_type (compile_gram.ml[]..[])
                                          Ptyp_constr "Gram_def.text" (compile_gram.ml[]..[])
                                          []
                                      expression (compile_gram.ml[]..[])
                                        Pexp_match
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "x" (compile_gram.ml[]..[])
                                        [
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_construct "List" (compile_gram.ml[]..[])
                                              Some
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "_loc" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "min" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "t" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "ts" (compile_gram.ml[]..[])
                                                  ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_var "txt" (compile_gram.ml[]..[])
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "aux" (compile_gram.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_constant Const_string("",None)
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_field
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "t" (compile_gram.ml[]..[])
                                                          "text" (compile_gram.ml[]..[])
                                                    ]
                                              ]
                                              expression (compile_gram.ml[]..[])
                                                Pexp_match
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "ts" (compile_gram.ml[]..[])
                                                [
                                                  <case>
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_construct "None" (compile_gram.ml[]..[])
                                                      None
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ifthenelse
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "min" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_coerce
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_variant "App"
                                                          Some
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_variant "Uid"
                                                                  Some
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_gram.ml[]..[])
  Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_constant Const_string("List1",None)
                                                                      ]
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "txt" (compile_gram.ml[]..[])
                                                                  None
                                                                  core_type (compile_gram.ml[]..[])
                                                                    Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                    []
                                                              ]
                                                        None
                                                        core_type (compile_gram.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                          []
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_coerce
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "Uid"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_constant Const_string("List0",None)
]
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "txt" (compile_gram.ml[]..[])
                                                                    None
                                                                    core_type (compile_gram.ml[]..[])
                                                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                      []
                                                                ]
                                                          None
                                                          core_type (compile_gram.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                            []
                                                  <case>
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_construct "Some" (compile_gram.ml[]..[])
                                                      Some
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_var "s" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (compile_gram.ml[]..[])
                                                            Ppat_var "x" (compile_gram.ml[]..[])
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "aux" (compile_gram.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "tvar" (compile_gram.ml[]..[])
                                                              <label> ""
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_field
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "s" (compile_gram.ml[]..[])
                                                                  "text" (compile_gram.ml[]..[])
                                                            ]
                                                      ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ifthenelse
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "min" (compile_gram.ml[]..[])
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_coerce
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "Uid"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_constant Const_string("List1sep",None)
]
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "Par"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_variant "Com"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_coerce
            expression (compile_gram.ml[]..[])
              Pexp_ident "txt" (compile_gram.ml[]..[])
            None
            core_type (compile_gram.ml[]..[])
              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
              []
          expression (compile_gram.ml[]..[])
            Pexp_coerce
            expression (compile_gram.ml[]..[])
              Pexp_ident "x" (compile_gram.ml[]..[])
            None
            core_type (compile_gram.ml[]..[])
              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
              []
        ]
]
                                                                ]
                                                          None
                                                          core_type (compile_gram.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                            []
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_coerce
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "App"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "Uid"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_constant Const_string("List0sep",None)
  ]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "Par"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "Com"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_coerce
              expression (compile_gram.ml[]..[])
                Pexp_ident "txt" (compile_gram.ml[]..[])
              None
              core_type (compile_gram.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                []
            expression (compile_gram.ml[]..[])
              Pexp_coerce
              expression (compile_gram.ml[]..[])
                Pexp_ident "x" (compile_gram.ml[]..[])
              None
              core_type (compile_gram.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                []
          ]
  ]
                                                                  ]
                                                            None
                                                            core_type (compile_gram.ml[]..[])
                                                              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                              []
                                                ]
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_construct "Self" (compile_gram.ml[]..[])
                                              Some
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_var "_loc" (compile_gram.ml[]..[])
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "Uid"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_constant Const_string("Self",None)
                                                    ]
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                []
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_construct "Keyword" (compile_gram.ml[]..[])
                                              Some
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "_loc" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "kwd" (compile_gram.ml[]..[])
                                                  ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Vrn"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constant Const_string("Keyword",None)
                                                            ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Str"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "kwd" (compile_gram.ml[]..[])
                                                            ]
                                                    ]
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                []
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_construct "Nterm" (compile_gram.ml[]..[])
                                              Some
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "_loc" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "n" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "lev" (compile_gram.ml[]..[])
                                                  ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_var "obj" (compile_gram.ml[]..[])
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_coerce
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "App"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Dot"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (compile_gram.ml[]..[])
Pexp_apply
expression (compile_gram.ml[]..[])
  Pexp_ident "gm" (compile_gram.ml[]..[])
[
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_construct "()" (compile_gram.ml[]..[])
      None
]
                                                                      None
                                                                      core_type (compile_gram.ml[]..[])
Ptyp_constr "Astf.vid" (compile_gram.ml[]..[])
[]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_constant Const_string("obj",None)
  ]
                                                                  ]
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Constraint"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (compile_gram.ml[]..[])
Pexp_field
expression (compile_gram.ml[]..[])
  Pexp_ident "n" (compile_gram.ml[]..[])
"id" (compile_gram.ml[]..[])
                                                                      None
                                                                      core_type (compile_gram.ml[]..[])
Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
[]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "App"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "Dot"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_coerce
              expression (compile_gram.ml[]..[])
                Pexp_constraint
                expression (compile_gram.ml[]..[])
                  Pexp_apply
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "gm" (compile_gram.ml[]..[])
                  [
                    <label> ""
                      expression (compile_gram.ml[]..[])
                        Pexp_construct "()" (compile_gram.ml[]..[])
                        None
                  ]
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "vid" (compile_gram.ml[]..[])
                  []
              None
              core_type (compile_gram.ml[]..[])
                Ptyp_constr "Astf.ident" (compile_gram.ml[]..[])
                []
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("t",None)
                  ]
          ]
    expression (compile_gram.ml[]..[])
      Pexp_variant "Quote"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Normal"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_field
                      expression (compile_gram.ml[]..[])
                        Pexp_ident "n" (compile_gram.ml[]..[])
                      "tvar" (compile_gram.ml[]..[])
                  ]
          ]
  ]
                                                                  ]
                                                          ]
                                                    None
                                                    core_type (compile_gram.ml[]..[])
                                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                      []
                                              ]
                                              expression (compile_gram.ml[]..[])
                                                Pexp_match
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "lev" (compile_gram.ml[]..[])
                                                [
                                                  <case>
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_construct "Some" (compile_gram.ml[]..[])
                                                      Some
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_var "lab" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_coerce
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_variant "Uid"
                                                                Some
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                      expression (compile_gram.ml[]..[])
Pexp_constant Const_string("Snterml",None)
                                                                    ]
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_variant "Par"
                                                                Some
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                      expression (compile_gram.ml[]..[])
Pexp_variant "Com"
Some
  expression (compile_gram.ml[]..[])
    Pexp_tuple
    [
      expression (compile_gram.ml[]..[])
        Pexp_ident "_loc" (compile_gram.ml[]..[])
      expression (compile_gram.ml[]..[])
        Pexp_coerce
        expression (compile_gram.ml[]..[])
          Pexp_ident "obj" (compile_gram.ml[]..[])
        None
        core_type (compile_gram.ml[]..[])
          Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
          []
      expression (compile_gram.ml[]..[])
        Pexp_variant "Int"
        Some
          expression (compile_gram.ml[]..[])
            Pexp_tuple
            [
              expression (compile_gram.ml[]..[])
                Pexp_ident "_loc" (compile_gram.ml[]..[])
              expression (compile_gram.ml[]..[])
                Pexp_apply
                expression (compile_gram.ml[]..[])
                  Pexp_ident "string_of_int" (compile_gram.ml[]..[])
                [
                  <label> ""
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "lab" (compile_gram.ml[]..[])
                ]
            ]
    ]
                                                                    ]
                                                            ]
                                                      None
                                                      core_type (compile_gram.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                        []
                                                  <case>
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_construct "None" (compile_gram.ml[]..[])
                                                      None
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ifthenelse
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "=" (compile_gram.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_field
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "n" (compile_gram.ml[]..[])
                                                              "tvar" (compile_gram.ml[]..[])
                                                          <label> ""
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "tvar" (compile_gram.ml[]..[])
                                                        ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_coerce
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_variant "Uid"
                                                          Some
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_constant Const_string("Self",None)
                                                              ]
                                                        None
                                                        core_type (compile_gram.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                          []
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_coerce
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "Uid"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_constant Const_string("Nterm",None)
]
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "obj" (compile_gram.ml[]..[])
                                                                    None
                                                                    core_type (compile_gram.ml[]..[])
                                                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                      []
                                                                ]
                                                          None
                                                          core_type (compile_gram.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                            []
                                                ]
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_construct "Try" (compile_gram.ml[]..[])
                                              Some
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "_loc" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "t" (compile_gram.ml[]..[])
                                                  ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Uid"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constant Const_string("Try",None)
                                                            ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_coerce
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "aux" (compile_gram.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constant Const_string("",None)
                                                            <label> ""
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "t" (compile_gram.ml[]..[])
                                                          ]
                                                        None
                                                        core_type (compile_gram.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                          []
                                                    ]
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                []
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_construct "Peek" (compile_gram.ml[]..[])
                                              Some
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "_loc" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "t" (compile_gram.ml[]..[])
                                                  ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Uid"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constant Const_string("Peek",None)
                                                            ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_coerce
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "aux" (compile_gram.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constant Const_string("",None)
                                                            <label> ""
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "t" (compile_gram.ml[]..[])
                                                          ]
                                                        None
                                                        core_type (compile_gram.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                          []
                                                    ]
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                []
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_construct "Token" (compile_gram.ml[]..[])
                                              Some
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "_loc" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "meta" (compile_gram.ml[]..[])
                                                  ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Uid"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constant Const_string("Token",None)
                                                            ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_coerce
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "meta" (compile_gram.ml[]..[])
                                                        None
                                                        core_type (compile_gram.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                          []
                                                    ]
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                []
                                        ]
                                  ]
                            ]
                      ]
                      expression (compile_gram.ml[]..[])
                        Pexp_apply
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "aux" (compile_gram.ml[]..[])
                        [
                          <label> ""
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "tvar" (compile_gram.ml[]..[])
                          <label> ""
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "x" (compile_gram.ml[]..[])
                        ]
                ]
          ]
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "make_exp_rules" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_constraint
                pattern (compile_gram.ml[]..[])
                  Ppat_var "rl" (compile_gram.ml[]..[])
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "list" (compile_gram.ml[]..[])
                  [
                    core_type (compile_gram.ml[]..[])
                      Ptyp_tuple
                      [
                        core_type (compile_gram.ml[]..[])
                          Ptyp_constr "list" (compile_gram.ml[]..[])
                          [
                            core_type (compile_gram.ml[]..[])
                              Ptyp_constr "Gram_def.text" (compile_gram.ml[]..[])
                              []
                          ]
                        core_type (compile_gram.ml[]..[])
                          Ptyp_constr "exp" (compile_gram.ml[]..[])
                          []
                        core_type (compile_gram.ml[]..[])
                          Ptyp_constr "Gram_def.action" (compile_gram.ml[]..[])
                          []
                      ]
                  ]
              expression (compile_gram.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_gram.ml[]..[])
                      Ppat_constraint
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "tvar" (compile_gram.ml[]..[])
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "string" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_apply
                      expression (compile_gram.ml[]..[])
                        Pexp_ident "|>" (compile_gram.ml[]..[])
                      [
                        <label> ""
                          expression (compile_gram.ml[]..[])
                            Pexp_apply
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "|>" (compile_gram.ml[]..[])
                            [
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "rl" (compile_gram.ml[]..[])
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_apply
                                  expression (compile_gram.ml[]..[])
                                    Pexp_ident "List.map" (compile_gram.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_gram.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_tuple
                                              [
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_var "sl" (compile_gram.ml[]..[])
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_var "action" (compile_gram.ml[]..[])
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_constraint
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_var "raw" (compile_gram.ml[]..[])
                                                  core_type (compile_gram.ml[]..[])
                                                    Ptyp_constr "Gram_def.action" (compile_gram.ml[]..[])
                                                    []
                                              ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (compile_gram.ml[]..[])
                                                    Ppat_var "action_string" (compile_gram.ml[]..[])
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_match
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "raw" (compile_gram.ml[]..[])
                                                    [
                                                      <case>
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_construct "E" (compile_gram.ml[]..[])
                                                          Some
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_construct "None" (compile_gram.ml[]..[])
                                                              None
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_constant Const_string("",None)
                                                      <case>
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_construct "E" (compile_gram.ml[]..[])
                                                          Some
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_construct "Some" (compile_gram.ml[]..[])
                                                              Some
                                                                pattern (compile_gram.ml[]..[])
                                                                  Ppat_var "e" (compile_gram.ml[]..[])
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "Dump.exp_to_string" (compile_gram.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "e" (compile_gram.ml[]..[])
                                                          ]
                                                      <case>
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_construct "Ant" (compile_gram.ml[]..[])
                                                          Some
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_any
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_constant Const_string("",None)
                                                    ]
                                              ]
                                              expression (compile_gram.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "sl" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "|>" (compile_gram.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "|>" (compile_gram.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "sl" (compile_gram.ml[]..[])
                                                              <label> ""
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "List.map" (compile_gram.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_gram.ml[]..[])
Pexp_apply
expression (compile_gram.ml[]..[])
  Pexp_ident "make_exp" (compile_gram.ml[]..[])
[
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_ident "tvar" (compile_gram.ml[]..[])
]
                                                                  ]
                                                            ]
                                                        <label> ""
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "list_of_list" (compile_gram.ml[]..[])
                                                      ]
                                                ]
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (compile_gram.ml[]..[])
                                                        Ppat_var "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "Ast_loc.loc_of" (compile_gram.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "sl" (compile_gram.ml[]..[])
                                                        ]
                                                  ]
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_coerce
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "Record"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Sem"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "RecBind"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_constant Const_string("symbols",None)
          ]
    expression (compile_gram.ml[]..[])
      Pexp_coerce
      expression (compile_gram.ml[]..[])
        Pexp_ident "sl" (compile_gram.ml[]..[])
      None
      core_type (compile_gram.ml[]..[])
        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
        []
  ]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "Sem"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "RecBind"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("annot",None)
                  ]
            expression (compile_gram.ml[]..[])
              Pexp_variant "Str"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "action_string" (compile_gram.ml[]..[])
                  ]
          ]
    expression (compile_gram.ml[]..[])
      Pexp_variant "RecBind"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("fn",None)
                  ]
            expression (compile_gram.ml[]..[])
              Pexp_coerce
              expression (compile_gram.ml[]..[])
                Pexp_ident "action" (compile_gram.ml[]..[])
              None
              core_type (compile_gram.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                []
          ]
  ]
                                                                  ]
                                                          ]
                                                    None
                                                    core_type (compile_gram.ml[]..[])
                                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                      []
                                        ]
                                  ]
                            ]
                        <label> ""
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "list_of_list" (compile_gram.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "make_action" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_constraint
                pattern (compile_gram.ml[]..[])
                  Ppat_var "_loc" (compile_gram.ml[]..[])
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "loc" (compile_gram.ml[]..[])
                  []
              expression (compile_gram.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_gram.ml[]..[])
                      Ppat_constraint
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "x" (compile_gram.ml[]..[])
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Gram_def.rule" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (compile_gram.ml[]..[])
                            Ppat_constraint
                            pattern (compile_gram.ml[]..[])
                              Ppat_var "rtvar" (compile_gram.ml[]..[])
                            core_type (compile_gram.ml[]..[])
                              Ptyp_constr "string" (compile_gram.ml[]..[])
                              []
                          expression (compile_gram.ml[]..[])
                            Pexp_constraint
                            expression (compile_gram.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (compile_gram.ml[]..[])
                                    Ppat_var "locid" (compile_gram.ml[]..[])
                                  expression (compile_gram.ml[]..[])
                                    Pexp_coerce
                                    expression (compile_gram.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_gram.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                            expression (compile_gram.ml[]..[])
                                              Pexp_apply
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "!" (compile_gram.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "Locf.name" (compile_gram.ml[]..[])
                                              ]
                                          ]
                                    None
                                    core_type (compile_gram.ml[]..[])
                                      Ptyp_constr "Astf.pat" (compile_gram.ml[]..[])
                                      []
                              ]
                              expression (compile_gram.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (compile_gram.ml[]..[])
                                      Ppat_var "make_ctyp" (compile_gram.ml[]..[])
                                    expression (compile_gram.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (compile_gram.ml[]..[])
                                            Ppat_constraint
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_var "styp" (compile_gram.ml[]..[])
                                            core_type (compile_gram.ml[]..[])
                                              Ptyp_constr "Gram_def.styp" (compile_gram.ml[]..[])
                                              []
                                          expression (compile_gram.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_var "tvar" (compile_gram.ml[]..[])
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_constraint
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_let Rec
                                                    [
                                                      <def>
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_var "aux" (compile_gram.ml[]..[])
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_function
                                                          [
                                                            <case>
                                                              pattern (compile_gram.ml[]..[])
                                                                Ppat_var "v" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_match
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_constraint
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "v" (compile_gram.ml[]..[])
                                                                  core_type (compile_gram.ml[]..[])
                                                                    Ptyp_constr "Gram_def.styp" (compile_gram.ml[]..[])
                                                                    []
                                                                [
                                                                  <case>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_alias "x" (compile_gram.ml[]..[])
                                                                      pattern (compile_gram.ml[]..[])
Ppat_type
"vid'" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "x" (compile_gram.ml[]..[])
                                                                      Some
core_type (compile_gram.ml[]..[])
  Ptyp_constr "vid'" (compile_gram.ml[]..[])
  []
                                                                      core_type (compile_gram.ml[]..[])
Ptyp_constr "ctyp" (compile_gram.ml[]..[])
[]
                                                                  <case>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_alias "x" (compile_gram.ml[]..[])
                                                                      pattern (compile_gram.ml[]..[])
Ppat_variant "Quote"
Some
  pattern (compile_gram.ml[]..[])
    Ppat_any
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "x" (compile_gram.ml[]..[])
                                                                  <case>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_variant "App"
                                                                      Some
pattern (compile_gram.ml[]..[])
  Ppat_tuple
  [
    pattern (compile_gram.ml[]..[])
      Ppat_var "_loc" (compile_gram.ml[]..[])
    pattern (compile_gram.ml[]..[])
      Ppat_var "t1" (compile_gram.ml[]..[])
    pattern (compile_gram.ml[]..[])
      Ppat_var "t2" (compile_gram.ml[]..[])
  ]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (compile_gram.ml[]..[])
Pexp_variant "App"
Some
  expression (compile_gram.ml[]..[])
    Pexp_tuple
    [
      expression (compile_gram.ml[]..[])
        Pexp_ident "_loc" (compile_gram.ml[]..[])
      expression (compile_gram.ml[]..[])
        Pexp_coerce
        expression (compile_gram.ml[]..[])
          Pexp_apply
          expression (compile_gram.ml[]..[])
            Pexp_ident "aux" (compile_gram.ml[]..[])
          [
            <label> ""
              expression (compile_gram.ml[]..[])
                Pexp_ident "t1" (compile_gram.ml[]..[])
          ]
        None
        core_type (compile_gram.ml[]..[])
          Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
          []
      expression (compile_gram.ml[]..[])
        Pexp_coerce
        expression (compile_gram.ml[]..[])
          Pexp_apply
          expression (compile_gram.ml[]..[])
            Pexp_ident "aux" (compile_gram.ml[]..[])
          [
            <label> ""
              expression (compile_gram.ml[]..[])
                Pexp_ident "t2" (compile_gram.ml[]..[])
          ]
        None
        core_type (compile_gram.ml[]..[])
          Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
          []
    ]
                                                                      None
                                                                      core_type (compile_gram.ml[]..[])
Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
[]
                                                                  <case>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_variant "Self"
                                                                      Some
pattern (compile_gram.ml[]..[])
  Ppat_var "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ifthenelse
                                                                      expression (compile_gram.ml[]..[])
Pexp_apply
expression (compile_gram.ml[]..[])
  Pexp_ident "=" (compile_gram.ml[]..[])
[
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_ident "tvar" (compile_gram.ml[]..[])
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_constant Const_string("",None)
]
                                                                      expression (compile_gram.ml[]..[])
Pexp_apply
expression (compile_gram.ml[]..[])
  Pexp_ident "@@" (compile_gram.ml[]..[])
[
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_apply
      expression (compile_gram.ml[]..[])
        Pexp_ident "Locf.raise" (compile_gram.ml[]..[])
      [
        <label> ""
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
      ]
  <label> ""
    expression (compile_gram.ml[]..[])
      Pexp_construct "Streamf.Error" (compile_gram.ml[]..[])
      Some
        expression (compile_gram.ml[]..[])
          Pexp_constant Const_string("S: illegal in anonymous entry level",None)
]
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_coerce
  expression (compile_gram.ml[]..[])
    Pexp_variant "Quote"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_variant "Normal"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_variant "Lid"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "tvar" (compile_gram.ml[]..[])
                ]
        ]
  None
  core_type (compile_gram.ml[]..[])
    Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
    []
                                                                  <case>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_variant "Type"
                                                                      Some
pattern (compile_gram.ml[]..[])
  Ppat_var "t" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "t" (compile_gram.ml[]..[])
                                                                ]
                                                          ]
                                                    ]
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "aux" (compile_gram.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "styp" (compile_gram.ml[]..[])
                                                      ]
                                                  core_type (compile_gram.ml[]..[])
                                                    Ptyp_constr "ctyp" (compile_gram.ml[]..[])
                                                    []
                                            ]
                                      ]
                                ]
                                expression (compile_gram.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (compile_gram.ml[]..[])
                                        Ppat_var "+:" (compile_gram.ml[]..[])
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "typing" (compile_gram.ml[]..[])
                                  ]
                                  expression (compile_gram.ml[]..[])
                                    Pexp_match
                                    expression (compile_gram.ml[]..[])
                                      Pexp_field
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "x" (compile_gram.ml[]..[])
                                      "action" (compile_gram.ml[]..[])
                                    [
                                      <case>
                                        pattern (compile_gram.ml[]..[])
                                          Ppat_construct "Ant" (compile_gram.ml[]..[])
                                          Some
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_var "v" (compile_gram.ml[]..[])
                                        expression (compile_gram.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_var "e" (compile_gram.ml[]..[])
                                              expression (compile_gram.ml[]..[])
                                                Pexp_apply
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "Tokenf.ant_expand" (compile_gram.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "Parsef.exp" (compile_gram.ml[]..[])
                                                  <label> ""
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "v" (compile_gram.ml[]..[])
                                                ]
                                          ]
                                          expression (compile_gram.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_var "ty" (compile_gram.ml[]..[])
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "List.fold_left" (compile_gram.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_function
                                                        [
                                                          <case>
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_var "ty" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (compile_gram.ml[]..[])
                                                                    Ppat_constraint
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_var "s" (compile_gram.ml[]..[])
                                                                    core_type (compile_gram.ml[]..[])
                                                                      Ptyp_constr "Gram_def.osymbol" (compile_gram.ml[]..[])
                                                                      []
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (compile_gram.ml[]..[])
  Ppat_var "t" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_apply
  expression (compile_gram.ml[]..[])
    Pexp_ident "make_ctyp" (compile_gram.ml[]..[])
  [
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_field
        expression (compile_gram.ml[]..[])
          Pexp_ident "s" (compile_gram.ml[]..[])
        "styp" (compile_gram.ml[]..[])
    <label> ""
      expression (compile_gram.ml[]..[])
        Pexp_ident "rtvar" (compile_gram.ml[]..[])
  ]
                                                                    ]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (compile_gram.ml[]..[])
Pexp_variant "Arrow"
Some
  expression (compile_gram.ml[]..[])
    Pexp_tuple
    [
      expression (compile_gram.ml[]..[])
        Pexp_ident "_loc" (compile_gram.ml[]..[])
      expression (compile_gram.ml[]..[])
        Pexp_coerce
        expression (compile_gram.ml[]..[])
          Pexp_ident "t" (compile_gram.ml[]..[])
        None
        core_type (compile_gram.ml[]..[])
          Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
          []
      expression (compile_gram.ml[]..[])
        Pexp_coerce
        expression (compile_gram.ml[]..[])
          Pexp_ident "ty" (compile_gram.ml[]..[])
        None
        core_type (compile_gram.ml[]..[])
          Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
          []
    ]
                                                                      None
                                                                      core_type (compile_gram.ml[]..[])
Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
[]
                                                              ]
                                                        ]
                                                    <label> ""
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_coerce
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_variant "Arrow"
                                                          Some
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_variant "Dot"
                                                                  Some
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_gram.ml[]..[])
  Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_variant "Uid"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_tuple
      [
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_constant Const_string("Locf",None)
      ]
expression (compile_gram.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_tuple
      [
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_constant Const_string("t",None)
      ]
                                                                      ]
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_variant "Quote"
                                                                  Some
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_gram.ml[]..[])
  Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_variant "Normal"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_tuple
      [
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "rtvar" (compile_gram.ml[]..[])
      ]
                                                                      ]
                                                              ]
                                                        None
                                                        core_type (compile_gram.ml[]..[])
                                                          Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                                          []
                                                    <label> ""
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_field
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "x" (compile_gram.ml[]..[])
                                                        "prod" (compile_gram.ml[]..[])
                                                  ]
                                            ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Dot"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_coerce
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "gm" (compile_gram.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_gram.ml[]..[])
Pexp_construct "()" (compile_gram.ml[]..[])
None
                                                                  ]
                                                                None
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Astf.vid" (compile_gram.ml[]..[])
                                                                  []
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                      expression (compile_gram.ml[]..[])
Pexp_constant Const_string("mk_action",None)
                                                                    ]
                                                            ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Constraint"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_coerce
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "e" (compile_gram.ml[]..[])
                                                                None
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                  []
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_coerce
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "ty" (compile_gram.ml[]..[])
                                                                None
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                                                  []
                                                            ]
                                                    ]
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                []
                                      <case>
                                        pattern (compile_gram.ml[]..[])
                                          Ppat_construct "E" (compile_gram.ml[]..[])
                                          Some
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_var "v" (compile_gram.ml[]..[])
                                        expression (compile_gram.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_var "e" (compile_gram.ml[]..[])
                                              expression (compile_gram.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "act" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "Option.default" (compile_gram.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_coerce
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Unit"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            None
                                                            core_type (compile_gram.ml[]..[])
                                                              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                              []
                                                        <label> ""
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "v" (compile_gram.ml[]..[])
                                                      ]
                                                ]
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (compile_gram.ml[]..[])
                                                        Ppat_var "make_env" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_function
                                                        [
                                                          <case>
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_var "env" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "|>" (compile_gram.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "env" (compile_gram.ml[]..[])
                                                                <label> ""
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "List.map" (compile_gram.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (compile_gram.ml[]..[])
  Pexp_function
  [
    <case>
      pattern (compile_gram.ml[]..[])
        Ppat_tuple
        [
          pattern (compile_gram.ml[]..[])
            Ppat_tuple
            [
              pattern (compile_gram.ml[]..[])
                Ppat_var "loc" (compile_gram.ml[]..[])
              pattern (compile_gram.ml[]..[])
                Ppat_var "id" (compile_gram.ml[]..[])
            ]
          pattern (compile_gram.ml[]..[])
            Ppat_var "e" (compile_gram.ml[]..[])
        ]
      expression (compile_gram.ml[]..[])
        Pexp_coerce
        expression (compile_gram.ml[]..[])
          Pexp_variant "Bind"
          Some
            expression (compile_gram.ml[]..[])
              Pexp_tuple
              [
                expression (compile_gram.ml[]..[])
                  Pexp_ident "_loc" (compile_gram.ml[]..[])
                expression (compile_gram.ml[]..[])
                  Pexp_coerce
                  expression (compile_gram.ml[]..[])
                    Pexp_coerce
                    expression (compile_gram.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_gram.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "loc" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "id" (compile_gram.ml[]..[])
                          ]
                    None
                    core_type (compile_gram.ml[]..[])
                      Ptyp_constr "Astf.pat" (compile_gram.ml[]..[])
                      []
                  None
                  core_type (compile_gram.ml[]..[])
                    Ptyp_constr "Astf.pat" (compile_gram.ml[]..[])
                    []
                expression (compile_gram.ml[]..[])
                  Pexp_coerce
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "e" (compile_gram.ml[]..[])
                  None
                  core_type (compile_gram.ml[]..[])
                    Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                    []
              ]
        None
        core_type (compile_gram.ml[]..[])
          Ptyp_constr "Astf.bind" (compile_gram.ml[]..[])
          []
  ]
                                                                    ]
                                                              ]
                                                        ]
                                                  ]
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_var "binds" (compile_gram.ml[]..[])
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "make_env" (compile_gram.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_field
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "x" (compile_gram.ml[]..[])
                                                                "env" (compile_gram.ml[]..[])
                                                          ]
                                                    ]
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (compile_gram.ml[]..[])
                                                            Ppat_var "e1" (compile_gram.ml[]..[])
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_coerce
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Constraint"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "act" (compile_gram.ml[]..[])
                                                                      None
                                                                      core_type (compile_gram.ml[]..[])
Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
[]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "Quote"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "Normal"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_ident "rtvar" (compile_gram.ml[]..[])
          ]
  ]
                                                                  ]
                                                            None
                                                            core_type (compile_gram.ml[]..[])
                                                              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                              []
                                                      ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_var "e1" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "Ast_gen.seq_binds" (compile_gram.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "binds" (compile_gram.ml[]..[])
                                                                <label> ""
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "e1" (compile_gram.ml[]..[])
                                                              ]
                                                        ]
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_coerce
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_variant "Fun"
                                                            Some
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "Case"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_variant "Constraint"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_coerce
            expression (compile_gram.ml[]..[])
              Pexp_ident "locid" (compile_gram.ml[]..[])
            None
            core_type (compile_gram.ml[]..[])
              Ptyp_constr "Astf.pat" (compile_gram.ml[]..[])
              []
          expression (compile_gram.ml[]..[])
            Pexp_variant "Dot"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_variant "Uid"
                    Some
                      expression (compile_gram.ml[]..[])
                        Pexp_tuple
                        [
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "_loc" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_constant Const_string("Locf",None)
                        ]
                  expression (compile_gram.ml[]..[])
                    Pexp_variant "Lid"
                    Some
                      expression (compile_gram.ml[]..[])
                        Pexp_tuple
                        [
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "_loc" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_constant Const_string("t",None)
                        ]
                ]
        ]
  expression (compile_gram.ml[]..[])
    Pexp_coerce
    expression (compile_gram.ml[]..[])
      Pexp_ident "e1" (compile_gram.ml[]..[])
    None
    core_type (compile_gram.ml[]..[])
      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
      []
]
                                                                ]
                                                          None
                                                          core_type (compile_gram.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                            []
                                          ]
                                          expression (compile_gram.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "ty" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "txt" (compile_gram.ml[]..[])
                                                  ]
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "@@" (compile_gram.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "snd" (compile_gram.ml[]..[])
                                                    <label> ""
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "Listf.fold_lefti" (compile_gram.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (compile_gram.ml[]..[])
                                                                    Ppat_var "i" (compile_gram.ml[]..[])
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (compile_gram.ml[]..[])
  Ppat_tuple
  [
    pattern (compile_gram.ml[]..[])
      Ppat_var "ty" (compile_gram.ml[]..[])
    pattern (compile_gram.ml[]..[])
      Ppat_var "txt" (compile_gram.ml[]..[])
  ]
expression (compile_gram.ml[]..[])
  Pexp_function
  [
    <case>
      pattern (compile_gram.ml[]..[])
        Ppat_constraint
        pattern (compile_gram.ml[]..[])
          Ppat_var "s" (compile_gram.ml[]..[])
        core_type (compile_gram.ml[]..[])
          Ptyp_constr "Gram_def.osymbol" (compile_gram.ml[]..[])
          []
      expression (compile_gram.ml[]..[])
        Pexp_match
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_field
              expression (compile_gram.ml[]..[])
                Pexp_ident "s" (compile_gram.ml[]..[])
              "outer_pattern" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_field
              expression (compile_gram.ml[]..[])
                Pexp_ident "s" (compile_gram.ml[]..[])
              "bounds" (compile_gram.ml[]..[])
          ]
        [
          <case>
            pattern (compile_gram.ml[]..[])
              Ppat_tuple
              [
                pattern (compile_gram.ml[]..[])
                  Ppat_construct "Some" (compile_gram.ml[]..[])
                  Some
                    pattern (compile_gram.ml[]..[])
                      Ppat_tuple
                      [
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "xloc" (compile_gram.ml[]..[])
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "id" (compile_gram.ml[]..[])
                      ]
                pattern (compile_gram.ml[]..[])
                  Ppat_any
              ]
            expression (compile_gram.ml[]..[])
              Pexp_let Nonrec
              [
                <def>
                  pattern (compile_gram.ml[]..[])
                    Ppat_var "t" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_apply
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "make_ctyp" (compile_gram.ml[]..[])
                    [
                      <label> ""
                        expression (compile_gram.ml[]..[])
                          Pexp_field
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "s" (compile_gram.ml[]..[])
                          "styp" (compile_gram.ml[]..[])
                      <label> ""
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "rtvar" (compile_gram.ml[]..[])
                    ]
              ]
              expression (compile_gram.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (compile_gram.ml[]..[])
                      Ppat_var "p" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_apply
                      expression (compile_gram.ml[]..[])
                        Pexp_ident "+:" (compile_gram.ml[]..[])
                      [
                        <label> ""
                          expression (compile_gram.ml[]..[])
                            Pexp_coerce
                            expression (compile_gram.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (compile_gram.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "xloc" (compile_gram.ml[]..[])
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "id" (compile_gram.ml[]..[])
                                  ]
                            None
                            core_type (compile_gram.ml[]..[])
                              Ptyp_constr "Astf.pat" (compile_gram.ml[]..[])
                              []
                        <label> ""
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "t" (compile_gram.ml[]..[])
                      ]
                ]
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_coerce
                      expression (compile_gram.ml[]..[])
                        Pexp_variant "Arrow"
                        Some
                          expression (compile_gram.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                              expression (compile_gram.ml[]..[])
                                Pexp_coerce
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "t" (compile_gram.ml[]..[])
                                None
                                core_type (compile_gram.ml[]..[])
                                  Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                  []
                              expression (compile_gram.ml[]..[])
                                Pexp_coerce
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "ty" (compile_gram.ml[]..[])
                                None
                                core_type (compile_gram.ml[]..[])
                                  Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                  []
                            ]
                      None
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_coerce
                      expression (compile_gram.ml[]..[])
                        Pexp_variant "Fun"
                        Some
                          expression (compile_gram.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                              expression (compile_gram.ml[]..[])
                                Pexp_variant "Case"
                                Some
                                  expression (compile_gram.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                      expression (compile_gram.ml[]..[])
                                        Pexp_coerce
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "p" (compile_gram.ml[]..[])
                                        None
                                        core_type (compile_gram.ml[]..[])
                                          Ptyp_constr "Astf.pat" (compile_gram.ml[]..[])
                                          []
                                      expression (compile_gram.ml[]..[])
                                        Pexp_coerce
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "txt" (compile_gram.ml[]..[])
                                        None
                                        core_type (compile_gram.ml[]..[])
                                          Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                          []
                                    ]
                            ]
                      None
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                        []
                  ]
          <case>
            pattern (compile_gram.ml[]..[])
              Ppat_tuple
              [
                pattern (compile_gram.ml[]..[])
                  Ppat_construct "None" (compile_gram.ml[]..[])
                  None
                pattern (compile_gram.ml[]..[])
                  Ppat_construct "[]" (compile_gram.ml[]..[])
                  None
              ]
            expression (compile_gram.ml[]..[])
              Pexp_let Nonrec
              [
                <def>
                  pattern (compile_gram.ml[]..[])
                    Ppat_var "t" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_apply
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "make_ctyp" (compile_gram.ml[]..[])
                    [
                      <label> ""
                        expression (compile_gram.ml[]..[])
                          Pexp_field
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "s" (compile_gram.ml[]..[])
                          "styp" (compile_gram.ml[]..[])
                      <label> ""
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "rtvar" (compile_gram.ml[]..[])
                    ]
              ]
              expression (compile_gram.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_gram.ml[]..[])
                    Pexp_coerce
                    expression (compile_gram.ml[]..[])
                      Pexp_variant "Arrow"
                      Some
                        expression (compile_gram.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_coerce
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "t" (compile_gram.ml[]..[])
                              None
                              core_type (compile_gram.ml[]..[])
                                Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                []
                            expression (compile_gram.ml[]..[])
                              Pexp_coerce
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "ty" (compile_gram.ml[]..[])
                              None
                              core_type (compile_gram.ml[]..[])
                                Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                []
                          ]
                    None
                    core_type (compile_gram.ml[]..[])
                      Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                      []
                  expression (compile_gram.ml[]..[])
                    Pexp_coerce
                    expression (compile_gram.ml[]..[])
                      Pexp_variant "Fun"
                      Some
                        expression (compile_gram.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_variant "Case"
                              Some
                                expression (compile_gram.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                    expression (compile_gram.ml[]..[])
                                      Pexp_variant "Any"
                                      Some
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "_loc" (compile_gram.ml[]..[])
                                    expression (compile_gram.ml[]..[])
                                      Pexp_coerce
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "txt" (compile_gram.ml[]..[])
                                      None
                                      core_type (compile_gram.ml[]..[])
                                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                        []
                                  ]
                          ]
                    None
                    core_type (compile_gram.ml[]..[])
                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                      []
                ]
          <case>
            pattern (compile_gram.ml[]..[])
              Ppat_tuple
              [
                pattern (compile_gram.ml[]..[])
                  Ppat_construct "None" (compile_gram.ml[]..[])
                  None
                pattern (compile_gram.ml[]..[])
                  Ppat_any
              ]
            expression (compile_gram.ml[]..[])
              Pexp_let Nonrec
              [
                <def>
                  pattern (compile_gram.ml[]..[])
                    Ppat_var "t" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_apply
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "make_ctyp" (compile_gram.ml[]..[])
                    [
                      <label> ""
                        expression (compile_gram.ml[]..[])
                          Pexp_field
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "s" (compile_gram.ml[]..[])
                          "styp" (compile_gram.ml[]..[])
                      <label> ""
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "rtvar" (compile_gram.ml[]..[])
                    ]
              ]
              expression (compile_gram.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (compile_gram.ml[]..[])
                      Ppat_var "p" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_apply
                      expression (compile_gram.ml[]..[])
                        Pexp_ident "+:" (compile_gram.ml[]..[])
                      [
                        <label> ""
                          expression (compile_gram.ml[]..[])
                            Pexp_coerce
                            expression (compile_gram.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (compile_gram.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                    expression (compile_gram.ml[]..[])
                                      Pexp_apply
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "^" (compile_gram.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "prefix" (compile_gram.ml[]..[])
                                        <label> ""
                                          expression (compile_gram.ml[]..[])
                                            Pexp_apply
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "string_of_int" (compile_gram.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "i" (compile_gram.ml[]..[])
                                            ]
                                      ]
                                  ]
                            None
                            core_type (compile_gram.ml[]..[])
                              Ptyp_constr "Astf.pat" (compile_gram.ml[]..[])
                              []
                        <label> ""
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "t" (compile_gram.ml[]..[])
                      ]
                ]
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_coerce
                      expression (compile_gram.ml[]..[])
                        Pexp_variant "Arrow"
                        Some
                          expression (compile_gram.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                              expression (compile_gram.ml[]..[])
                                Pexp_coerce
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "t" (compile_gram.ml[]..[])
                                None
                                core_type (compile_gram.ml[]..[])
                                  Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                  []
                              expression (compile_gram.ml[]..[])
                                Pexp_coerce
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "ty" (compile_gram.ml[]..[])
                                None
                                core_type (compile_gram.ml[]..[])
                                  Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                  []
                            ]
                      None
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_coerce
                      expression (compile_gram.ml[]..[])
                        Pexp_variant "Fun"
                        Some
                          expression (compile_gram.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                              expression (compile_gram.ml[]..[])
                                Pexp_variant "Case"
                                Some
                                  expression (compile_gram.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                      expression (compile_gram.ml[]..[])
                                        Pexp_coerce
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "p" (compile_gram.ml[]..[])
                                        None
                                        core_type (compile_gram.ml[]..[])
                                          Ptyp_constr "Astf.pat" (compile_gram.ml[]..[])
                                          []
                                      expression (compile_gram.ml[]..[])
                                        Pexp_coerce
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "txt" (compile_gram.ml[]..[])
                                        None
                                        core_type (compile_gram.ml[]..[])
                                          Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                          []
                                    ]
                            ]
                      None
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                        []
                  ]
        ]
  ]
                                                                    ]
                                                              ]
                                                          <label> ""
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "Arrow"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_variant "Dot"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_variant "Uid"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_constant Const_string("Locf",None)
                ]
          expression (compile_gram.ml[]..[])
            Pexp_variant "Lid"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_constant Const_string("t",None)
                ]
        ]
  expression (compile_gram.ml[]..[])
    Pexp_variant "Quote"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_variant "Normal"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_variant "Lid"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "rtvar" (compile_gram.ml[]..[])
                ]
        ]
]
                                                                  None
                                                                  core_type (compile_gram.ml[]..[])
                                                                    Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                                                    []
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "e" (compile_gram.ml[]..[])
                                                              ]
                                                          <label> ""
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_field
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "x" (compile_gram.ml[]..[])
                                                              "prod" (compile_gram.ml[]..[])
                                                        ]
                                                  ]
                                            ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Dot"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_coerce
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "gm" (compile_gram.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_gram.ml[]..[])
Pexp_construct "()" (compile_gram.ml[]..[])
None
                                                                  ]
                                                                None
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Astf.vid" (compile_gram.ml[]..[])
                                                                  []
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                      expression (compile_gram.ml[]..[])
Pexp_constant Const_string("mk_action",None)
                                                                    ]
                                                            ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Constraint"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_coerce
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "txt" (compile_gram.ml[]..[])
                                                                None
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                  []
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_coerce
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "ty" (compile_gram.ml[]..[])
                                                                None
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Astf.ctyp" (compile_gram.ml[]..[])
                                                                  []
                                                            ]
                                                    ]
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                []
                                    ]
                            core_type (compile_gram.ml[]..[])
                              Ptyp_constr "exp" (compile_gram.ml[]..[])
                              []
                      ]
                ]
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "make_single_extend_statement" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_constraint
                pattern (compile_gram.ml[]..[])
                  Ppat_var "e" (compile_gram.ml[]..[])
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "Gram_def.entry" (compile_gram.ml[]..[])
                  []
              expression (compile_gram.ml[]..[])
                Pexp_constraint
                expression (compile_gram.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "_loc" (compile_gram.ml[]..[])
                      expression (compile_gram.ml[]..[])
                        Pexp_field
                        expression (compile_gram.ml[]..[])
                          Pexp_field
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "e" (compile_gram.ml[]..[])
                          "name" (compile_gram.ml[]..[])
                        "loc" (compile_gram.ml[]..[])
                  ]
                  expression (compile_gram.ml[]..[])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (compile_gram.ml[]..[])
                          Ppat_var "gmid" (compile_gram.ml[]..[])
                        expression (compile_gram.ml[]..[])
                          Pexp_coerce
                          expression (compile_gram.ml[]..[])
                            Pexp_apply
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "gm" (compile_gram.ml[]..[])
                            [
                              <label> ""
                                expression (compile_gram.ml[]..[])
                                  Pexp_construct "()" (compile_gram.ml[]..[])
                                  None
                            ]
                          Some
                            core_type (compile_gram.ml[]..[])
                              Ptyp_constr "vid" (compile_gram.ml[]..[])
                              []
                          core_type (compile_gram.ml[]..[])
                            Ptyp_constr "ident" (compile_gram.ml[]..[])
                            []
                    ]
                    expression (compile_gram.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (compile_gram.ml[]..[])
                            Ppat_var "ent" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_coerce
                            expression (compile_gram.ml[]..[])
                              Pexp_variant "Constraint"
                              Some
                                expression (compile_gram.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                    expression (compile_gram.ml[]..[])
                                      Pexp_coerce
                                      expression (compile_gram.ml[]..[])
                                        Pexp_field
                                        expression (compile_gram.ml[]..[])
                                          Pexp_field
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "e" (compile_gram.ml[]..[])
                                          "name" (compile_gram.ml[]..[])
                                        "id" (compile_gram.ml[]..[])
                                      None
                                      core_type (compile_gram.ml[]..[])
                                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                        []
                                    expression (compile_gram.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (compile_gram.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                            expression (compile_gram.ml[]..[])
                                              Pexp_variant "Dot"
                                              Some
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_coerce
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "gmid" (compile_gram.ml[]..[])
                                                      None
                                                      core_type (compile_gram.ml[]..[])
                                                        Ptyp_constr "Astf.ident" (compile_gram.ml[]..[])
                                                        []
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_constant Const_string("t",None)
                                                          ]
                                                  ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_variant "Quote"
                                              Some
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "Normal"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_field
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_field
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "e" (compile_gram.ml[]..[])
                                                                "name" (compile_gram.ml[]..[])
                                                              "tvar" (compile_gram.ml[]..[])
                                                          ]
                                                  ]
                                          ]
                                  ]
                            None
                            core_type (compile_gram.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                              []
                      ]
                      expression (compile_gram.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (compile_gram.ml[]..[])
                              Ppat_var "pos" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_match
                              expression (compile_gram.ml[]..[])
                                Pexp_field
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "e" (compile_gram.ml[]..[])
                                "pos" (compile_gram.ml[]..[])
                              [
                                <case>
                                  pattern (compile_gram.ml[]..[])
                                    Ppat_construct "Some" (compile_gram.ml[]..[])
                                    Some
                                      pattern (compile_gram.ml[]..[])
                                        Ppat_var "pos" (compile_gram.ml[]..[])
                                  expression (compile_gram.ml[]..[])
                                    Pexp_coerce
                                    expression (compile_gram.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (compile_gram.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                            expression (compile_gram.ml[]..[])
                                              Pexp_variant "Uid"
                                              Some
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_constant Const_string("Some",None)
                                                  ]
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "pos" (compile_gram.ml[]..[])
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                []
                                          ]
                                    None
                                    core_type (compile_gram.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                      []
                                <case>
                                  pattern (compile_gram.ml[]..[])
                                    Ppat_construct "None" (compile_gram.ml[]..[])
                                    None
                                  expression (compile_gram.ml[]..[])
                                    Pexp_coerce
                                    expression (compile_gram.ml[]..[])
                                      Pexp_variant "Uid"
                                      Some
                                        expression (compile_gram.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                            expression (compile_gram.ml[]..[])
                                              Pexp_constant Const_string("None",None)
                                          ]
                                    None
                                    core_type (compile_gram.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                      []
                              ]
                        ]
                        expression (compile_gram.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (compile_gram.ml[]..[])
                                Ppat_var "apply" (compile_gram.ml[]..[])
                              expression (compile_gram.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (compile_gram.ml[]..[])
                                      Ppat_constraint
                                      pattern (compile_gram.ml[]..[])
                                        Ppat_var "level" (compile_gram.ml[]..[])
                                      core_type (compile_gram.ml[]..[])
                                        Ptyp_constr "Gram_def.level" (compile_gram.ml[]..[])
                                        []
                                    expression (compile_gram.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (compile_gram.ml[]..[])
                                            Ppat_var "ass" (compile_gram.ml[]..[])
                                          expression (compile_gram.ml[]..[])
                                            Pexp_match
                                            expression (compile_gram.ml[]..[])
                                              Pexp_field
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "level" (compile_gram.ml[]..[])
                                              "assoc" (compile_gram.ml[]..[])
                                            [
                                              <case>
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_construct "Some" (compile_gram.ml[]..[])
                                                  Some
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "ass" (compile_gram.ml[]..[])
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "ass" (compile_gram.ml[]..[])
                                              <case>
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_construct "None" (compile_gram.ml[]..[])
                                                  None
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_coerce
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_variant "Bool"
                                                    Some
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_construct "true" (compile_gram.ml[]..[])
                                                            None
                                                        ]
                                                  None
                                                  core_type (compile_gram.ml[]..[])
                                                    Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                    []
                                            ]
                                      ]
                                      expression (compile_gram.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_var "rl" (compile_gram.ml[]..[])
                                            expression (compile_gram.ml[]..[])
                                              Pexp_apply
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "|>" (compile_gram.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_field
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "level" (compile_gram.ml[]..[])
                                                    "rules" (compile_gram.ml[]..[])
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "List.map" (compile_gram.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_function
                                                          [
                                                            <case>
                                                              pattern (compile_gram.ml[]..[])
                                                                Ppat_constraint
                                                                pattern (compile_gram.ml[]..[])
                                                                  Ppat_var "r" (compile_gram.ml[]..[])
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Gram_def.rule" (compile_gram.ml[]..[])
                                                                  []
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (compile_gram.ml[]..[])
                                                                      Ppat_var "sl" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "|>" (compile_gram.ml[]..[])
                                                                      [
<label> ""
  expression (compile_gram.ml[]..[])
    Pexp_field
    expression (compile_gram.ml[]..[])
      Pexp_ident "r" (compile_gram.ml[]..[])
    "prod" (compile_gram.ml[]..[])
<label> ""
  expression (compile_gram.ml[]..[])
    Pexp_apply
    expression (compile_gram.ml[]..[])
      Pexp_ident "List.map" (compile_gram.ml[]..[])
    [
      <label> ""
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_constraint
                pattern (compile_gram.ml[]..[])
                  Ppat_var "s" (compile_gram.ml[]..[])
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "Gram_def.osymbol" (compile_gram.ml[]..[])
                  []
              expression (compile_gram.ml[]..[])
                Pexp_field
                expression (compile_gram.ml[]..[])
                  Pexp_ident "s" (compile_gram.ml[]..[])
                "text" (compile_gram.ml[]..[])
          ]
    ]
                                                                      ]
                                                                ]
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "sl" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "make_action" (compile_gram.ml[]..[])
                                                                      [
<label> ""
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
<label> ""
  expression (compile_gram.ml[]..[])
    Pexp_ident "r" (compile_gram.ml[]..[])
<label> ""
  expression (compile_gram.ml[]..[])
    Pexp_field
    expression (compile_gram.ml[]..[])
      Pexp_field
      expression (compile_gram.ml[]..[])
        Pexp_ident "e" (compile_gram.ml[]..[])
      "name" (compile_gram.ml[]..[])
    "tvar" (compile_gram.ml[]..[])
                                                                      ]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_field
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "r" (compile_gram.ml[]..[])
                                                                      "action" (compile_gram.ml[]..[])
                                                                  ]
                                                          ]
                                                    ]
                                              ]
                                        ]
                                        expression (compile_gram.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_var "prod" (compile_gram.ml[]..[])
                                              expression (compile_gram.ml[]..[])
                                                Pexp_apply
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "make_exp_rules" (compile_gram.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "rl" (compile_gram.ml[]..[])
                                                  <label> ""
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_field
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_field
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "e" (compile_gram.ml[]..[])
                                                        "name" (compile_gram.ml[]..[])
                                                      "tvar" (compile_gram.ml[]..[])
                                                ]
                                          ]
                                          expression (compile_gram.ml[]..[])
                                            Pexp_coerce
                                            expression (compile_gram.ml[]..[])
                                              Pexp_variant "Constraint"
                                              Some
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "Record"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Sem"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "RecBind"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_constant Const_string("label",None)
          ]
    expression (compile_gram.ml[]..[])
      Pexp_coerce
      expression (compile_gram.ml[]..[])
        Pexp_ident "pos" (compile_gram.ml[]..[])
      None
      core_type (compile_gram.ml[]..[])
        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
        []
  ]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "Sem"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "RecBind"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("lassoc",None)
                  ]
            expression (compile_gram.ml[]..[])
              Pexp_coerce
              expression (compile_gram.ml[]..[])
                Pexp_ident "ass" (compile_gram.ml[]..[])
              None
              core_type (compile_gram.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                []
          ]
    expression (compile_gram.ml[]..[])
      Pexp_variant "RecBind"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("productions",None)
                  ]
            expression (compile_gram.ml[]..[])
              Pexp_coerce
              expression (compile_gram.ml[]..[])
                Pexp_ident "prod" (compile_gram.ml[]..[])
              None
              core_type (compile_gram.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                []
          ]
  ]
                                                                  ]
                                                          ]
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "Dot"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_coerce
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constraint
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "gm" (compile_gram.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_gram.ml[]..[])
Pexp_construct "()" (compile_gram.ml[]..[])
None
                                                                  ]
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "vid" (compile_gram.ml[]..[])
                                                                  []
                                                              None
                                                              core_type (compile_gram.ml[]..[])
                                                                Ptyp_constr "Astf.ident" (compile_gram.ml[]..[])
                                                                []
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_constant Const_string("olevel",None)
                                                                  ]
                                                          ]
                                                  ]
                                            None
                                            core_type (compile_gram.ml[]..[])
                                              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                              []
                                ]
                          ]
                          expression (compile_gram.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (compile_gram.ml[]..[])
                                  Ppat_var "l" (compile_gram.ml[]..[])
                                expression (compile_gram.ml[]..[])
                                  Pexp_field
                                  expression (compile_gram.ml[]..[])
                                    Pexp_ident "e" (compile_gram.ml[]..[])
                                  "level" (compile_gram.ml[]..[])
                            ]
                            expression (compile_gram.ml[]..[])
                              Pexp_coerce
                              expression (compile_gram.ml[]..[])
                                Pexp_variant "Constraint"
                                Some
                                  expression (compile_gram.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                      expression (compile_gram.ml[]..[])
                                        Pexp_variant "Record"
                                        Some
                                          expression (compile_gram.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "Sem"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "RecBind"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                      expression (compile_gram.ml[]..[])
Pexp_constant Const_string("entry",None)
                                                                    ]
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_coerce
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "ent" (compile_gram.ml[]..[])
                                                                None
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                  []
                                                            ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "RecBind"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                      expression (compile_gram.ml[]..[])
Pexp_constant Const_string("olevel",None)
                                                                    ]
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_coerce
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "apply" (compile_gram.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "l" (compile_gram.ml[]..[])
                                                                  ]
                                                                None
                                                                core_type (compile_gram.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                  []
                                                            ]
                                                    ]
                                            ]
                                      expression (compile_gram.ml[]..[])
                                        Pexp_variant "App"
                                        Some
                                          expression (compile_gram.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "Dot"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Uid"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constant Const_string("Gramf",None)
                                                            ]
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_variant "Lid"
                                                        Some
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_constant Const_string("single_extend_statement",None)
                                                            ]
                                                    ]
                                              expression (compile_gram.ml[]..[])
                                                Pexp_variant "Any"
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                            ]
                                    ]
                              None
                              core_type (compile_gram.ml[]..[])
                                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                []
                core_type (compile_gram.ml[]..[])
                  Ptyp_constr "exp" (compile_gram.ml[]..[])
                  []
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "make_extend" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_var "safe" (compile_gram.ml[]..[])
              expression (compile_gram.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_gram.ml[]..[])
                      Ppat_constraint
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "e" (compile_gram.ml[]..[])
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Gram_def.entry" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_constraint
                      expression (compile_gram.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (compile_gram.ml[]..[])
                              Ppat_var "_loc" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_field
                              expression (compile_gram.ml[]..[])
                                Pexp_field
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "e" (compile_gram.ml[]..[])
                                "name" (compile_gram.ml[]..[])
                              "loc" (compile_gram.ml[]..[])
                        ]
                        expression (compile_gram.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (compile_gram.ml[]..[])
                                Ppat_var "f" (compile_gram.ml[]..[])
                              expression (compile_gram.ml[]..[])
                                Pexp_ifthenelse
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "safe" (compile_gram.ml[]..[])
                                expression (compile_gram.ml[]..[])
                                  Pexp_coerce
                                  expression (compile_gram.ml[]..[])
                                    Pexp_variant "Dot"
                                    Some
                                      expression (compile_gram.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "_loc" (compile_gram.ml[]..[])
                                          expression (compile_gram.ml[]..[])
                                            Pexp_coerce
                                            expression (compile_gram.ml[]..[])
                                              Pexp_apply
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "gm" (compile_gram.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_construct "()" (compile_gram.ml[]..[])
                                                    None
                                              ]
                                            None
                                            core_type (compile_gram.ml[]..[])
                                              Ptyp_constr "Astf.vid" (compile_gram.ml[]..[])
                                              []
                                          expression (compile_gram.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (compile_gram.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_constant Const_string("extend_single",None)
                                                ]
                                        ]
                                  None
                                  core_type (compile_gram.ml[]..[])
                                    Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                    []
                                Some
                                  expression (compile_gram.ml[]..[])
                                    Pexp_coerce
                                    expression (compile_gram.ml[]..[])
                                      Pexp_variant "Dot"
                                      Some
                                        expression (compile_gram.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                            expression (compile_gram.ml[]..[])
                                              Pexp_coerce
                                              expression (compile_gram.ml[]..[])
                                                Pexp_apply
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "gm" (compile_gram.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_construct "()" (compile_gram.ml[]..[])
                                                      None
                                                ]
                                              None
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Astf.vid" (compile_gram.ml[]..[])
                                                []
                                            expression (compile_gram.ml[]..[])
                                              Pexp_variant "Lid"
                                              Some
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_constant Const_string("unsafe_extend_single",None)
                                                  ]
                                          ]
                                    None
                                    core_type (compile_gram.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                      []
                          ]
                          expression (compile_gram.ml[]..[])
                            Pexp_coerce
                            expression (compile_gram.ml[]..[])
                              Pexp_variant "App"
                              Some
                                expression (compile_gram.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                    expression (compile_gram.ml[]..[])
                                      Pexp_coerce
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "f" (compile_gram.ml[]..[])
                                      None
                                      core_type (compile_gram.ml[]..[])
                                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                        []
                                    expression (compile_gram.ml[]..[])
                                      Pexp_coerce
                                      expression (compile_gram.ml[]..[])
                                        Pexp_apply
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "make_single_extend_statement" (compile_gram.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "e" (compile_gram.ml[]..[])
                                        ]
                                      None
                                      core_type (compile_gram.ml[]..[])
                                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                        []
                                  ]
                            None
                            core_type (compile_gram.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                              []
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "exp" (compile_gram.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "make_localbinds" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_var "_loc" (compile_gram.ml[]..[])
              expression (compile_gram.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_gram.ml[]..[])
                      Ppat_var "locals" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (compile_gram.ml[]..[])
                            Ppat_var "local_bind_of_name" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (compile_gram.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_gram.ml[]..[])
                                    Ppat_var "x" (compile_gram.ml[]..[])
                                  core_type (compile_gram.ml[]..[])
                                    Ptyp_constr "Gram_def.name" (compile_gram.ml[]..[])
                                    []
                                expression (compile_gram.ml[]..[])
                                  Pexp_match
                                  expression (compile_gram.ml[]..[])
                                    Pexp_constraint
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "x" (compile_gram.ml[]..[])
                                    core_type (compile_gram.ml[]..[])
                                      Ptyp_constr "Gram_def.name" (compile_gram.ml[]..[])
                                      []
                                  [
                                    <case>
                                      pattern (compile_gram.ml[]..[])
                                        Ppat_record Closed
                                        [
                                          "id" (compile_gram.ml[]..[])
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_variant "Lid"
                                              Some
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_any
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "i" (compile_gram.ml[]..[])
                                                  ]
                                          "tvar" (compile_gram.ml[]..[])
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_var "x" (compile_gram.ml[]..[])
                                          "loc" (compile_gram.ml[]..[])
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_var "_loc" (compile_gram.ml[]..[])
                                        ]
                                      expression (compile_gram.ml[]..[])
                                        Pexp_coerce
                                        expression (compile_gram.ml[]..[])
                                          Pexp_variant "Bind"
                                          Some
                                            expression (compile_gram.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "i" (compile_gram.ml[]..[])
                                                      ]
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_variant "Constraint"
                                                  Some
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_variant "App"
                                                          Some
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_variant "Dot"
                                                                  Some
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_gram.ml[]..[])
  Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_variant "Uid"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_tuple
      [
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_constant Const_string("Gramf",None)
      ]
expression (compile_gram.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_tuple
      [
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_constant Const_string("mk",None)
      ]
                                                                      ]
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_variant "Str"
                                                                  Some
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_gram.ml[]..[])
  Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_ident "i" (compile_gram.ml[]..[])
                                                                      ]
                                                              ]
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_variant "App"
                                                          Some
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_variant "Dot"
                                                                  Some
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_gram.ml[]..[])
  Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_coerce
  expression (compile_gram.ml[]..[])
    Pexp_constraint
    expression (compile_gram.ml[]..[])
      Pexp_apply
      expression (compile_gram.ml[]..[])
        Pexp_ident "gm" (compile_gram.ml[]..[])
      [
        <label> ""
          expression (compile_gram.ml[]..[])
            Pexp_construct "()" (compile_gram.ml[]..[])
            None
      ]
    core_type (compile_gram.ml[]..[])
      Ptyp_constr "vid" (compile_gram.ml[]..[])
      []
  None
  core_type (compile_gram.ml[]..[])
    Ptyp_constr "Astf.ident" (compile_gram.ml[]..[])
    []
expression (compile_gram.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_tuple
      [
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_constant Const_string("t",None)
      ]
                                                                      ]
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_variant "Quote"
                                                                  Some
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_gram.ml[]..[])
  Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_variant "Normal"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
expression (compile_gram.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_gram.ml[]..[])
      Pexp_tuple
      [
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_ident "x" (compile_gram.ml[]..[])
      ]
                                                                      ]
                                                              ]
                                                      ]
                                              ]
                                        None
                                        core_type (compile_gram.ml[]..[])
                                          Ptyp_constr "Astf.bind" (compile_gram.ml[]..[])
                                          []
                                    <case>
                                      pattern (compile_gram.ml[]..[])
                                        Ppat_any
                                      expression (compile_gram.ml[]..[])
                                        Pexp_apply
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "failwithf" (compile_gram.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_gram.ml[]..[])
                                              Pexp_constant Const_string("internal error in the Grammar extension %s",None)
                                          <label> ""
                                            expression (compile_gram.ml[]..[])
                                              Pexp_apply
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "Objs.dump_vid" (compile_gram.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_field
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "x" (compile_gram.ml[]..[])
                                                    "id" (compile_gram.ml[]..[])
                                              ]
                                        ]
                                  ]
                            ]
                      ]
                      expression (compile_gram.ml[]..[])
                        Pexp_apply
                        expression (compile_gram.ml[]..[])
                          Pexp_ident "List.map" (compile_gram.ml[]..[])
                        [
                          <label> ""
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "local_bind_of_name" (compile_gram.ml[]..[])
                          <label> ""
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "locals" (compile_gram.ml[]..[])
                        ]
                ]
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "make" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_var "_loc" (compile_gram.ml[]..[])
              expression (compile_gram.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_gram.ml[]..[])
                      Ppat_constraint
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "x" (compile_gram.ml[]..[])
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Gram_def.entries" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (compile_gram.ml[]..[])
                            Ppat_var "extends" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (compile_gram.ml[]..[])
                                  Ppat_var "el" (compile_gram.ml[]..[])
                                expression (compile_gram.ml[]..[])
                                  Pexp_apply
                                  expression (compile_gram.ml[]..[])
                                    Pexp_ident "|>" (compile_gram.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_gram.ml[]..[])
                                        Pexp_field
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "x" (compile_gram.ml[]..[])
                                        "items" (compile_gram.ml[]..[])
                                    <label> ""
                                      expression (compile_gram.ml[]..[])
                                        Pexp_apply
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "List.map" (compile_gram.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_gram.ml[]..[])
                                              Pexp_apply
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "make_extend" (compile_gram.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_field
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "x" (compile_gram.ml[]..[])
                                                    "safe" (compile_gram.ml[]..[])
                                              ]
                                        ]
                                  ]
                            ]
                            expression (compile_gram.ml[]..[])
                              Pexp_match
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "el" (compile_gram.ml[]..[])
                              [
                                <case>
                                  pattern (compile_gram.ml[]..[])
                                    Ppat_construct "[]" (compile_gram.ml[]..[])
                                    None
                                  expression (compile_gram.ml[]..[])
                                    Pexp_coerce
                                    expression (compile_gram.ml[]..[])
                                      Pexp_variant "Unit"
                                      Some
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "_loc" (compile_gram.ml[]..[])
                                    None
                                    core_type (compile_gram.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                      []
                                <case>
                                  pattern (compile_gram.ml[]..[])
                                    Ppat_any
                                  expression (compile_gram.ml[]..[])
                                    Pexp_apply
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "seq_sem" (compile_gram.ml[]..[])
                                    [
                                      <label> ""
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "el" (compile_gram.ml[]..[])
                                    ]
                              ]
                      ]
                      expression (compile_gram.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (compile_gram.ml[]..[])
                              Ppat_var "locals" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_apply
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "|>" (compile_gram.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_gram.ml[]..[])
                                    Pexp_field
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "x" (compile_gram.ml[]..[])
                                    "items" (compile_gram.ml[]..[])
                                <label> ""
                                  expression (compile_gram.ml[]..[])
                                    Pexp_apply
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "Listf.filter_map" (compile_gram.ml[]..[])
                                    [
                                      <label> ""
                                        expression (compile_gram.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_constraint
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_var "x" (compile_gram.ml[]..[])
                                                core_type (compile_gram.ml[]..[])
                                                  Ptyp_constr "Gram_def.entry" (compile_gram.ml[]..[])
                                                  []
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ifthenelse
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_field
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "x" (compile_gram.ml[]..[])
                                                  "local" (compile_gram.ml[]..[])
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_construct "Some" (compile_gram.ml[]..[])
                                                  Some
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_field
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_ident "x" (compile_gram.ml[]..[])
                                                      "name" (compile_gram.ml[]..[])
                                                Some
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_construct "None" (compile_gram.ml[]..[])
                                                    None
                                          ]
                                    ]
                              ]
                        ]
                        expression (compile_gram.ml[]..[])
                          Pexp_apply
                          expression (compile_gram.ml[]..[])
                            Pexp_ident "Ast_gen.binds" (compile_gram.ml[]..[])
                          [
                            <label> ""
                              expression (compile_gram.ml[]..[])
                                Pexp_apply
                                expression (compile_gram.ml[]..[])
                                  Pexp_ident "make_localbinds" (compile_gram.ml[]..[])
                                [
                                  <label> ""
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                  <label> ""
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "locals" (compile_gram.ml[]..[])
                                ]
                            <label> ""
                              expression (compile_gram.ml[]..[])
                                Pexp_ident "extends" (compile_gram.ml[]..[])
                          ]
                ]
          ]
    ]
  structure_item (compile_gram.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_gram.ml[]..[])
          Ppat_var "make_protects" (compile_gram.ml[]..[])
        expression (compile_gram.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_gram.ml[]..[])
                Ppat_var "_loc" (compile_gram.ml[]..[])
              expression (compile_gram.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_gram.ml[]..[])
                      Ppat_constraint
                      pattern (compile_gram.ml[]..[])
                        Ppat_var "x" (compile_gram.ml[]..[])
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Gram_def.entries" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (compile_gram.ml[]..[])
                            Ppat_var "action" (compile_gram.ml[]..[])
                          expression (compile_gram.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (compile_gram.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_gram.ml[]..[])
                                      Ppat_any
                                    pattern (compile_gram.ml[]..[])
                                      Ppat_var "globals" (compile_gram.ml[]..[])
                                  ]
                                expression (compile_gram.ml[]..[])
                                  Pexp_apply
                                  expression (compile_gram.ml[]..[])
                                    Pexp_ident "List.partition" (compile_gram.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_gram.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (compile_gram.ml[]..[])
                                              Ppat_constraint
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_var "x" (compile_gram.ml[]..[])
                                              core_type (compile_gram.ml[]..[])
                                                Ptyp_constr "Gram_def.entry" (compile_gram.ml[]..[])
                                                []
                                            expression (compile_gram.ml[]..[])
                                              Pexp_field
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "x" (compile_gram.ml[]..[])
                                              "local" (compile_gram.ml[]..[])
                                        ]
                                    <label> ""
                                      expression (compile_gram.ml[]..[])
                                        Pexp_field
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "x" (compile_gram.ml[]..[])
                                        "items" (compile_gram.ml[]..[])
                                  ]
                            ]
                            expression (compile_gram.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (compile_gram.ml[]..[])
                                    Ppat_var "binds" (compile_gram.ml[]..[])
                                  expression (compile_gram.ml[]..[])
                                    Pexp_apply
                                    expression (compile_gram.ml[]..[])
                                      Pexp_ident "List.map" (compile_gram.ml[]..[])
                                    [
                                      <label> ""
                                        expression (compile_gram.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (compile_gram.ml[]..[])
                                                Ppat_constraint
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_var "x" (compile_gram.ml[]..[])
                                                core_type (compile_gram.ml[]..[])
                                                  Ptyp_constr "Gram_def.entry" (compile_gram.ml[]..[])
                                                  []
                                              expression (compile_gram.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "Gensym.fresh" (compile_gram.ml[]..[])
                                                    [
                                                      <label> "prefix"
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_constant Const_string("tmp_entry",None)
                                                      <label> ""
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_construct "()" (compile_gram.ml[]..[])
                                                          None
                                                    ]
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_coerce
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_coerce
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_field
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_field
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "x" (compile_gram.ml[]..[])
                                                          "name" (compile_gram.ml[]..[])
                                                        "id" (compile_gram.ml[]..[])
                                                      None
                                                      core_type (compile_gram.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                        []
                                                    None
                                                    core_type (compile_gram.ml[]..[])
                                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                      []
                                                ]
                                          ]
                                      <label> ""
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "globals" (compile_gram.ml[]..[])
                                    ]
                              ]
                              expression (compile_gram.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (compile_gram.ml[]..[])
                                      Ppat_var "save_binds" (compile_gram.ml[]..[])
                                    expression (compile_gram.ml[]..[])
                                      Pexp_apply
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "List.map" (compile_gram.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_gram.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (compile_gram.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "tmp" (compile_gram.ml[]..[])
                                                    pattern (compile_gram.ml[]..[])
                                                      Ppat_var "e" (compile_gram.ml[]..[])
                                                  ]
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_coerce
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_variant "Bind"
                                                    Some
                                                      expression (compile_gram.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_variant "Lid"
                                                            Some
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "tmp" (compile_gram.ml[]..[])
                                                                ]
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "Dot"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_variant "Uid"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_constant Const_string("Gramf",None)
        ]
  expression (compile_gram.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_constant Const_string("get_levels",None)
        ]
]
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "e" (compile_gram.ml[]..[])
                                                                    None
                                                                    core_type (compile_gram.ml[]..[])
                                                                      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                                      []
                                                                ]
                                                        ]
                                                  None
                                                  core_type (compile_gram.ml[]..[])
                                                    Ptyp_constr "Astf.bind" (compile_gram.ml[]..[])
                                                    []
                                            ]
                                        <label> ""
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "binds" (compile_gram.ml[]..[])
                                      ]
                                ]
                                expression (compile_gram.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (compile_gram.ml[]..[])
                                        Ppat_var "pop_actions" (compile_gram.ml[]..[])
                                      expression (compile_gram.ml[]..[])
                                        Pexp_apply
                                        expression (compile_gram.ml[]..[])
                                          Pexp_ident "@@" (compile_gram.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_gram.ml[]..[])
                                              Pexp_ident "seq_sem" (compile_gram.ml[]..[])
                                          <label> ""
                                            expression (compile_gram.ml[]..[])
                                              Pexp_apply
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "Listf.map" (compile_gram.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_function
                                                    [
                                                      <case>
                                                        pattern (compile_gram.ml[]..[])
                                                          Ppat_tuple
                                                          [
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_var "tmp" (compile_gram.ml[]..[])
                                                            pattern (compile_gram.ml[]..[])
                                                              Ppat_var "e" (compile_gram.ml[]..[])
                                                          ]
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_coerce
                                                          expression (compile_gram.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (compile_gram.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "App"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_variant "Dot"
    Some
      expression (compile_gram.ml[]..[])
        Pexp_tuple
        [
          expression (compile_gram.ml[]..[])
            Pexp_ident "_loc" (compile_gram.ml[]..[])
          expression (compile_gram.ml[]..[])
            Pexp_variant "Uid"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_constant Const_string("Gramf",None)
                ]
          expression (compile_gram.ml[]..[])
            Pexp_variant "Lid"
            Some
              expression (compile_gram.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_gram.ml[]..[])
                    Pexp_ident "_loc" (compile_gram.ml[]..[])
                  expression (compile_gram.ml[]..[])
                    Pexp_constant Const_string("fresh_with_levels",None)
                ]
        ]
  expression (compile_gram.ml[]..[])
    Pexp_coerce
    expression (compile_gram.ml[]..[])
      Pexp_ident "e" (compile_gram.ml[]..[])
    None
    core_type (compile_gram.ml[]..[])
      Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
      []
]
                                                                  expression (compile_gram.ml[]..[])
                                                                    Pexp_variant "Lid"
                                                                    Some
                                                                      expression (compile_gram.ml[]..[])
Pexp_tuple
[
  expression (compile_gram.ml[]..[])
    Pexp_ident "_loc" (compile_gram.ml[]..[])
  expression (compile_gram.ml[]..[])
    Pexp_ident "tmp" (compile_gram.ml[]..[])
]
                                                                ]
                                                          None
                                                          core_type (compile_gram.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                                            []
                                                    ]
                                                <label> ""
                                                  expression (compile_gram.ml[]..[])
                                                    Pexp_ident "binds" (compile_gram.ml[]..[])
                                              ]
                                        ]
                                  ]
                                  expression (compile_gram.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (compile_gram.ml[]..[])
                                          Ppat_var "e" (compile_gram.ml[]..[])
                                        expression (compile_gram.ml[]..[])
                                          Pexp_apply
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "make" (compile_gram.ml[]..[])
                                          [
                                            <label> ""
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "_loc" (compile_gram.ml[]..[])
                                            <label> ""
                                              expression (compile_gram.ml[]..[])
                                                Pexp_ident "x" (compile_gram.ml[]..[])
                                          ]
                                    ]
                                    expression (compile_gram.ml[]..[])
                                      Pexp_apply
                                      expression (compile_gram.ml[]..[])
                                        Pexp_ident "Ast_gen.binds" (compile_gram.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_gram.ml[]..[])
                                            Pexp_ident "save_binds" (compile_gram.ml[]..[])
                                        <label> ""
                                          expression (compile_gram.ml[]..[])
                                            Pexp_coerce
                                            expression (compile_gram.ml[]..[])
                                              Pexp_variant "Try"
                                              Some
                                                expression (compile_gram.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "Seq"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Sem"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (compile_gram.ml[]..[])
Pexp_ident "e" (compile_gram.ml[]..[])
                                                                      None
                                                                      core_type (compile_gram.ml[]..[])
Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
[]
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "LetIn"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "Negative"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_variant "Bind"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("result",None)
                  ]
            expression (compile_gram.ml[]..[])
              Pexp_coerce
              expression (compile_gram.ml[]..[])
                Pexp_ident "action" (compile_gram.ml[]..[])
              None
              core_type (compile_gram.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                []
          ]
    expression (compile_gram.ml[]..[])
      Pexp_variant "Seq"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Sem"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_coerce
                      expression (compile_gram.ml[]..[])
                        Pexp_ident "pop_actions" (compile_gram.ml[]..[])
                      None
                      core_type (compile_gram.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                        []
                    expression (compile_gram.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_gram.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_gram.ml[]..[])
                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                            expression (compile_gram.ml[]..[])
                              Pexp_constant Const_string("result",None)
                          ]
                  ]
          ]
  ]
                                                                  ]
                                                          ]
                                                    expression (compile_gram.ml[]..[])
                                                      Pexp_variant "Case"
                                                      Some
                                                        expression (compile_gram.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_constant Const_string("x",None)
                                                                  ]
                                                            expression (compile_gram.ml[]..[])
                                                              Pexp_variant "Seq"
                                                              Some
                                                                expression (compile_gram.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                                                                    expression (compile_gram.ml[]..[])
                                                                      Pexp_variant "Sem"
                                                                      Some
expression (compile_gram.ml[]..[])
  Pexp_tuple
  [
    expression (compile_gram.ml[]..[])
      Pexp_ident "_loc" (compile_gram.ml[]..[])
    expression (compile_gram.ml[]..[])
      Pexp_coerce
      expression (compile_gram.ml[]..[])
        Pexp_ident "pop_actions" (compile_gram.ml[]..[])
      None
      core_type (compile_gram.ml[]..[])
        Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
        []
    expression (compile_gram.ml[]..[])
      Pexp_variant "App"
      Some
        expression (compile_gram.ml[]..[])
          Pexp_tuple
          [
            expression (compile_gram.ml[]..[])
              Pexp_ident "_loc" (compile_gram.ml[]..[])
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("raise",None)
                  ]
            expression (compile_gram.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_gram.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_gram.ml[]..[])
                      Pexp_ident "_loc" (compile_gram.ml[]..[])
                    expression (compile_gram.ml[]..[])
                      Pexp_constant Const_string("x",None)
                  ]
          ]
  ]
                                                                  ]
                                                          ]
                                                  ]
                                            None
                                            core_type (compile_gram.ml[]..[])
                                              Ptyp_constr "Astf.exp" (compile_gram.ml[]..[])
                                              []
                                      ]
                      ]
                ]
          ]
    ]
]
