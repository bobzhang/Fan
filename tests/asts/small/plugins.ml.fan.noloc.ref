[
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_stru" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_ident "Derive.gen_stru" (plugins.ml[]..[])
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_object" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_ident "Derive.gen_object" (plugins.ml[]..[])
    ]
  structure_item (plugins.ml[]..[])
    Pstr_open Fresh "Astfn" (plugins.ml[]..[])
  structure_item (plugins.ml[]..[])
    Pstr_open Fresh "Astn_util" (plugins.ml[]..[])
  structure_item (plugins.ml[]..[])
    Pstr_open Fresh "Util" (plugins.ml[]..[])
  structure_item (plugins.ml[]..[])
    Pstr_open Fresh "Sigs_util" (plugins.ml[]..[])
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_variant" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "_cons" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_constraint
                expression (plugins.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (plugins.ml[]..[])
                        Ppat_construct "[]" (plugins.ml[]..[])
                        None
                      expression (plugins.ml[]..[])
                        Pexp_coerce
                        expression (plugins.ml[]..[])
                          Pexp_variant "Bool"
                          Some
                            expression (plugins.ml[]..[])
                              Pexp_construct "true" (plugins.ml[]..[])
                              None
                        None
                        core_type (plugins.ml[]..[])
                          Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                          []
                    <case>
                      pattern (plugins.ml[]..[])
                        Ppat_var "ls" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "Listf.reduce_left_with" (plugins.ml[]..[])
                        [
                          <label> "compose"
                            expression (plugins.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (plugins.ml[]..[])
                                    Ppat_var "x" (plugins.ml[]..[])
                                  expression (plugins.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (plugins.ml[]..[])
                                          Ppat_var "y" (plugins.ml[]..[])
                                        expression (plugins.ml[]..[])
                                          Pexp_coerce
                                          expression (plugins.ml[]..[])
                                            Pexp_variant "App"
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (plugins.ml[]..[])
                                                    Pexp_variant "App"
                                                    Some
                                                      expression (plugins.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (plugins.ml[]..[])
                                                            Pexp_variant "Lid"
                                                            Some
                                                              expression (plugins.ml[]..[])
                                                                Pexp_constant Const_string("&&",None)
                                                          expression (plugins.ml[]..[])
                                                            Pexp_coerce
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident "x" (plugins.ml[]..[])
                                                            None
                                                            core_type (plugins.ml[]..[])
                                                              Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                              []
                                                        ]
                                                  expression (plugins.ml[]..[])
                                                    Pexp_coerce
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "y" (plugins.ml[]..[])
                                                    None
                                                    core_type (plugins.ml[]..[])
                                                      Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                      []
                                                ]
                                          None
                                          core_type (plugins.ml[]..[])
                                            Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                            []
                                    ]
                              ]
                          <label> "project"
                            expression (plugins.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (plugins.ml[]..[])
                                    Ppat_constraint
                                    pattern (plugins.ml[]..[])
                                      Ppat_var "x" (plugins.ml[]..[])
                                    core_type (plugins.ml[]..[])
                                      Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                      []
                                  expression (plugins.ml[]..[])
                                    Pexp_field
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "x" (plugins.ml[]..[])
                                    "info_exp" (plugins.ml[]..[])
                              ]
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "ls" (plugins.ml[]..[])
                        ]
                  ]
                core_type (plugins.ml[]..[])
                  Ptyp_arrow
                  ""
                  core_type (plugins.ml[]..[])
                    Ptyp_constr "list" (plugins.ml[]..[])
                    [
                      core_type (plugins.ml[]..[])
                        Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                        []
                    ]
                  core_type (plugins.ml[]..[])
                    Ptyp_constr "exp" (plugins.ml[]..[])
                    []
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_tuple" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "exps" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "mk_variant" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_constant Const_string("",None)
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "exps" (plugins.ml[]..[])
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_record" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_constraint
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_var "cols" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "|>" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "|>" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "cols" (plugins.ml[]..[])
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_apply
                              expression (plugins.ml[]..[])
                                Pexp_ident "List.map" (plugins.ml[]..[])
                              [
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (plugins.ml[]..[])
                                          Ppat_constraint
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "x" (plugins.ml[]..[])
                                          core_type (plugins.ml[]..[])
                                            Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                                            []
                                        expression (plugins.ml[]..[])
                                          Pexp_field
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "x" (plugins.ml[]..[])
                                          "info" (plugins.ml[]..[])
                                    ]
                              ]
                        ]
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_variant" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_constant Const_string("",None)
                        ]
                  ]
            ]
          core_type (plugins.ml[]..[])
            Ptyp_arrow
            ""
            core_type (plugins.ml[]..[])
              Ptyp_constr "list" (plugins.ml[]..[])
              [
                core_type (plugins.ml[]..[])
                  Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                  []
              ]
            core_type (plugins.ml[]..[])
              Ptyp_constr "exp" (plugins.ml[]..[])
              []
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_tuple
          [
            pattern (plugins.ml[]..[])
              Ppat_var "gen_eq" (plugins.ml[]..[])
            pattern (plugins.ml[]..[])
              Ppat_var "gen_eqobj" (plugins.ml[]..[])
          ]
        expression (plugins.ml[]..[])
          Pexp_tuple
          [
            expression (plugins.ml[]..[])
              Pexp_apply
              expression (plugins.ml[]..[])
                Pexp_ident "gen_stru" (plugins.ml[]..[])
              [
                <label> "id"
                  expression (plugins.ml[]..[])
                    Pexp_variant "Pre"
                    Some
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("eq_",None)
                <label> "arity"
                  expression (plugins.ml[]..[])
                    Pexp_constant Const_int 2
                <label> "mk_tuple"
                  expression (plugins.ml[]..[])
                    Pexp_ident "mk_tuple" (plugins.ml[]..[])
                <label> "mk_record"
                  expression (plugins.ml[]..[])
                    Pexp_ident "mk_record" (plugins.ml[]..[])
                <label> "mk_variant"
                  expression (plugins.ml[]..[])
                    Pexp_ident "mk_variant" (plugins.ml[]..[])
                <label> "default"
                  expression (plugins.ml[]..[])
                    Pexp_coerce
                    expression (plugins.ml[]..[])
                      Pexp_variant "Bool"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_construct "false" (plugins.ml[]..[])
                          None
                    None
                    core_type (plugins.ml[]..[])
                      Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                      []
                <label> ""
                  expression (plugins.ml[]..[])
                    Pexp_construct "()" (plugins.ml[]..[])
                    None
              ]
            expression (plugins.ml[]..[])
              Pexp_apply
              expression (plugins.ml[]..[])
                Pexp_ident "gen_object" (plugins.ml[]..[])
              [
                <label> "kind"
                  expression (plugins.ml[]..[])
                    Pexp_construct "Iter" (plugins.ml[]..[])
                    None
                <label> "mk_tuple"
                  expression (plugins.ml[]..[])
                    Pexp_ident "mk_tuple" (plugins.ml[]..[])
                <label> "mk_record"
                  expression (plugins.ml[]..[])
                    Pexp_ident "mk_record" (plugins.ml[]..[])
                <label> "base"
                  expression (plugins.ml[]..[])
                    Pexp_constant Const_string("eqbase",None)
                <label> "class_name"
                  expression (plugins.ml[]..[])
                    Pexp_constant Const_string("eq",None)
                <label> "mk_variant"
                  expression (plugins.ml[]..[])
                    Pexp_ident "mk_variant" (plugins.ml[]..[])
                <label> "arity"
                  expression (plugins.ml[]..[])
                    Pexp_constant Const_int 2
                <label> "default"
                  expression (plugins.ml[]..[])
                    Pexp_coerce
                    expression (plugins.ml[]..[])
                      Pexp_variant "Bool"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_construct "false" (plugins.ml[]..[])
                          None
                    None
                    core_type (plugins.ml[]..[])
                      Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                      []
                <label> ""
                  expression (plugins.ml[]..[])
                    Pexp_construct "()" (plugins.ml[]..[])
                    None
              ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "some" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "f" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "x" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_construct "Some" (plugins.ml[]..[])
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "f" (plugins.ml[]..[])
                          [
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "x" (plugins.ml[]..[])
                          ]
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_tuple
          [
            pattern (plugins.ml[]..[])
              Ppat_var "gen_fold" (plugins.ml[]..[])
            pattern (plugins.ml[]..[])
              Ppat_var "gen_fold2" (plugins.ml[]..[])
          ]
        expression (plugins.ml[]..[])
          Pexp_let Nonrec
          [
            <def>
              pattern (plugins.ml[]..[])
                Ppat_var "mk_variant" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "_cons" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (plugins.ml[]..[])
                            Ppat_var "params" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "|>" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "|>" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "params" (plugins.ml[]..[])
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "List.map" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_constraint
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_var "x" (plugins.ml[]..[])
                                                    core_type (plugins.ml[]..[])
                                                      Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                                      []
                                                  expression (plugins.ml[]..[])
                                                    Pexp_field
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "x" (plugins.ml[]..[])
                                                    "info_exp" (plugins.ml[]..[])
                                              ]
                                        ]
                                  ]
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (plugins.ml[]..[])
                                        Ppat_construct "[]" (plugins.ml[]..[])
                                        None
                                      expression (plugins.ml[]..[])
                                        Pexp_coerce
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("self",None)
                                        None
                                        core_type (plugins.ml[]..[])
                                          Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                          []
                                    <case>
                                      pattern (plugins.ml[]..[])
                                        Ppat_var "ls" (plugins.ml[]..[])
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "Listf.reduce_right" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_var "v" (plugins.ml[]..[])
                                                  expression (plugins.ml[]..[])
                                                    Pexp_function
                                                    [
                                                      <case>
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_var "acc" (plugins.ml[]..[])
                                                        expression (plugins.ml[]..[])
                                                          Pexp_coerce
                                                          expression (plugins.ml[]..[])
                                                            Pexp_variant "LetIn"
                                                            Some
                                                              expression (plugins.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_variant "Negative"
                                                                    None
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_variant "Bind"
                                                                    Some
                                                                      expression (plugins.ml[]..[])
Pexp_tuple
[
  expression (plugins.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (plugins.ml[]..[])
        Pexp_constant Const_string("self",None)
  expression (plugins.ml[]..[])
    Pexp_coerce
    expression (plugins.ml[]..[])
      Pexp_ident "v" (plugins.ml[]..[])
    None
    core_type (plugins.ml[]..[])
      Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
      []
]
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "acc" (plugins.ml[]..[])
                                                                    None
                                                                    core_type (plugins.ml[]..[])
                                                                      Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                      []
                                                                ]
                                                          None
                                                          core_type (plugins.ml[]..[])
                                                            Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                            []
                                                    ]
                                              ]
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "ls" (plugins.ml[]..[])
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
          expression (plugins.ml[]..[])
            Pexp_let Nonrec
            [
              <def>
                pattern (plugins.ml[]..[])
                  Ppat_var "mk_tuple" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "mk_variant" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("",None)
                  ]
            ]
            expression (plugins.ml[]..[])
              Pexp_let Nonrec
              [
                <def>
                  pattern (plugins.ml[]..[])
                    Ppat_var "mk_record" (plugins.ml[]..[])
                  expression (plugins.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (plugins.ml[]..[])
                          Ppat_var "cols" (plugins.ml[]..[])
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "|>" (plugins.ml[]..[])
                          [
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "|>" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "cols" (plugins.ml[]..[])
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "List.map" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_constraint
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_var "x" (plugins.ml[]..[])
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                                                    []
                                                expression (plugins.ml[]..[])
                                                  Pexp_field
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                  "info" (plugins.ml[]..[])
                                            ]
                                      ]
                                ]
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "mk_variant" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("",None)
                                ]
                          ]
                    ]
              ]
              expression (plugins.ml[]..[])
                Pexp_tuple
                [
                  expression (plugins.ml[]..[])
                    Pexp_apply
                    expression (plugins.ml[]..[])
                      Pexp_ident "gen_object" (plugins.ml[]..[])
                    [
                      <label> "kind"
                        expression (plugins.ml[]..[])
                          Pexp_construct "Fold" (plugins.ml[]..[])
                          None
                      <label> "mk_tuple"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_tuple" (plugins.ml[]..[])
                      <label> "mk_record"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_record" (plugins.ml[]..[])
                      <label> "base"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("foldbase",None)
                      <label> "class_name"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("fold",None)
                      <label> "mk_variant"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_variant" (plugins.ml[]..[])
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_construct "()" (plugins.ml[]..[])
                          None
                    ]
                  expression (plugins.ml[]..[])
                    Pexp_apply
                    expression (plugins.ml[]..[])
                      Pexp_ident "gen_object" (plugins.ml[]..[])
                    [
                      <label> "kind"
                        expression (plugins.ml[]..[])
                          Pexp_construct "Fold" (plugins.ml[]..[])
                          None
                      <label> "mk_tuple"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_tuple" (plugins.ml[]..[])
                      <label> "mk_record"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_record" (plugins.ml[]..[])
                      <label> "base"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("foldbase2",None)
                      <label> "class_name"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("fold2",None)
                      <label> "mk_variant"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_variant" (plugins.ml[]..[])
                      <label> "arity"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_int 2
                      <label> "default"
                        expression (plugins.ml[]..[])
                          Pexp_coerce
                          expression (plugins.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (plugins.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (plugins.ml[]..[])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (plugins.ml[]..[])
                                        Pexp_constant Const_string("invalid_arg",None)
                                  expression (plugins.ml[]..[])
                                    Pexp_variant "Str"
                                    Some
                                      expression (plugins.ml[]..[])
                                        Pexp_constant Const_string("fold2 failure",None)
                                ]
                          None
                          core_type (plugins.ml[]..[])
                            Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                            []
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_construct "()" (plugins.ml[]..[])
                          None
                    ]
                ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "List.iter" (plugins.ml[]..[])
      [
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_ident "Typehook.register" (plugins.ml[]..[])
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_construct "::" (plugins.ml[]..[])
            Some
              expression (plugins.ml[]..[])
                Pexp_tuple
                [
                  expression (plugins.ml[]..[])
                    Pexp_tuple
                    [
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("Fold",None)
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "some" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "gen_fold" (plugins.ml[]..[])
                        ]
                    ]
                  expression (plugins.ml[]..[])
                    Pexp_construct "::" (plugins.ml[]..[])
                    Some
                      expression (plugins.ml[]..[])
                        Pexp_tuple
                        [
                          expression (plugins.ml[]..[])
                            Pexp_tuple
                            [
                              expression (plugins.ml[]..[])
                                Pexp_constant Const_string("Fold2",None)
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "some" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "gen_fold2" (plugins.ml[]..[])
                                ]
                            ]
                          expression (plugins.ml[]..[])
                            Pexp_construct "[]" (plugins.ml[]..[])
                            None
                        ]
                ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_tuple
          [
            pattern (plugins.ml[]..[])
              Ppat_var "gen_map" (plugins.ml[]..[])
            pattern (plugins.ml[]..[])
              Ppat_var "gen_map2" (plugins.ml[]..[])
          ]
        expression (plugins.ml[]..[])
          Pexp_let Nonrec
          [
            <def>
              pattern (plugins.ml[]..[])
                Ppat_var "mk_variant" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "cons" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (plugins.ml[]..[])
                            Ppat_var "params" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (plugins.ml[]..[])
                                  Ppat_var "result" (plugins.ml[]..[])
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "appl_of_list" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_construct "::" (plugins.ml[]..[])
                                        Some
                                          expression (plugins.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (plugins.ml[]..[])
                                                Pexp_apply
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "EpN.of_str" (plugins.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "cons" (plugins.ml[]..[])
                                                ]
                                              expression (plugins.ml[]..[])
                                                Pexp_apply
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "|>" (plugins.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "params" (plugins.ml[]..[])
                                                  <label> ""
                                                    expression (plugins.ml[]..[])
                                                      Pexp_apply
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "List.map" (plugins.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (plugins.ml[]..[])
                                                            Pexp_function
                                                            [
                                                              <case>
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constraint
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_var "x" (plugins.ml[]..[])
                                                                  core_type (plugins.ml[]..[])
                                                                    Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                                                    []
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_field
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                                  "ep0" (plugins.ml[]..[])
                                                            ]
                                                      ]
                                                ]
                                            ]
                                  ]
                            ]
                            expression (plugins.ml[]..[])
                              Pexp_apply
                              expression (plugins.ml[]..[])
                                Pexp_ident "List.fold_right" (plugins.ml[]..[])
                              [
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (plugins.ml[]..[])
                                          Ppat_constraint
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "x" (plugins.ml[]..[])
                                          core_type (plugins.ml[]..[])
                                            Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                            []
                                        expression (plugins.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (plugins.ml[]..[])
                                                Ppat_var "res" (plugins.ml[]..[])
                                              expression (plugins.ml[]..[])
                                                Pexp_coerce
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "LetIn"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "Negative"
                                                          None
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "Bind"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_field
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "x" (plugins.ml[]..[])
                                                                    "ep0" (plugins.ml[]..[])
                                                                  None
                                                                  core_type (plugins.ml[]..[])
                                                                    Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
                                                                    []
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_field
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "x" (plugins.ml[]..[])
                                                                    "info_exp" (plugins.ml[]..[])
                                                                  None
                                                                  core_type (plugins.ml[]..[])
                                                                    Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                    []
                                                              ]
                                                        expression (plugins.ml[]..[])
                                                          Pexp_coerce
                                                          expression (plugins.ml[]..[])
                                                            Pexp_ident "res" (plugins.ml[]..[])
                                                          None
                                                          core_type (plugins.ml[]..[])
                                                            Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                            []
                                                      ]
                                                None
                                                core_type (plugins.ml[]..[])
                                                  Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                  []
                                          ]
                                    ]
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "params" (plugins.ml[]..[])
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_coerce
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "result" (plugins.ml[]..[])
                                    None
                                    core_type (plugins.ml[]..[])
                                      Ptyp_constr "exp" (plugins.ml[]..[])
                                      []
                              ]
                      ]
                ]
          ]
          expression (plugins.ml[]..[])
            Pexp_let Nonrec
            [
              <def>
                pattern (plugins.ml[]..[])
                  Ppat_var "mk_tuple" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (plugins.ml[]..[])
                        Ppat_var "params" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (plugins.ml[]..[])
                              Ppat_var "result" (plugins.ml[]..[])
                            expression (plugins.ml[]..[])
                              Pexp_apply
                              expression (plugins.ml[]..[])
                                Pexp_ident "|>" (plugins.ml[]..[])
                              [
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_apply
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "|>" (plugins.ml[]..[])
                                    [
                                      <label> ""
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "params" (plugins.ml[]..[])
                                      <label> ""
                                        expression (plugins.ml[]..[])
                                          Pexp_apply
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "List.map" (plugins.ml[]..[])
                                          [
                                            <label> ""
                                              expression (plugins.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_constraint
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_var "x" (plugins.ml[]..[])
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                                        []
                                                    expression (plugins.ml[]..[])
                                                      Pexp_field
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "x" (plugins.ml[]..[])
                                                      "ep0" (plugins.ml[]..[])
                                                ]
                                          ]
                                    ]
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "tuple_com" (plugins.ml[]..[])
                              ]
                        ]
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "List.fold_right" (plugins.ml[]..[])
                          [
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (plugins.ml[]..[])
                                      Ppat_constraint
                                      pattern (plugins.ml[]..[])
                                        Ppat_var "x" (plugins.ml[]..[])
                                      core_type (plugins.ml[]..[])
                                        Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                        []
                                    expression (plugins.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "res" (plugins.ml[]..[])
                                          expression (plugins.ml[]..[])
                                            Pexp_coerce
                                            expression (plugins.ml[]..[])
                                              Pexp_variant "LetIn"
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (plugins.ml[]..[])
                                                      Pexp_variant "Negative"
                                                      None
                                                    expression (plugins.ml[]..[])
                                                      Pexp_variant "Bind"
                                                      Some
                                                        expression (plugins.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (plugins.ml[]..[])
                                                              Pexp_coerce
                                                              expression (plugins.ml[]..[])
                                                                Pexp_field
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "x" (plugins.ml[]..[])
                                                                "ep0" (plugins.ml[]..[])
                                                              None
                                                              core_type (plugins.ml[]..[])
                                                                Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
                                                                []
                                                            expression (plugins.ml[]..[])
                                                              Pexp_coerce
                                                              expression (plugins.ml[]..[])
                                                                Pexp_field
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "x" (plugins.ml[]..[])
                                                                "info_exp" (plugins.ml[]..[])
                                                              None
                                                              core_type (plugins.ml[]..[])
                                                                Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                []
                                                          ]
                                                    expression (plugins.ml[]..[])
                                                      Pexp_coerce
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "res" (plugins.ml[]..[])
                                                      None
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                        []
                                                  ]
                                            None
                                            core_type (plugins.ml[]..[])
                                              Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                              []
                                      ]
                                ]
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "params" (plugins.ml[]..[])
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_ident "result" (plugins.ml[]..[])
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "exp" (plugins.ml[]..[])
                                  []
                          ]
                  ]
            ]
            expression (plugins.ml[]..[])
              Pexp_let Nonrec
              [
                <def>
                  pattern (plugins.ml[]..[])
                    Ppat_var "mk_record" (plugins.ml[]..[])
                  expression (plugins.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (plugins.ml[]..[])
                          Ppat_var "cols" (plugins.ml[]..[])
                        expression (plugins.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (plugins.ml[]..[])
                                Ppat_var "result" (plugins.ml[]..[])
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "|>" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "|>" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "cols" (plugins.ml[]..[])
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "List.map" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_constraint
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_var "x" (plugins.ml[]..[])
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                                                          []
                                                      expression (plugins.ml[]..[])
                                                        Pexp_match
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "x" (plugins.ml[]..[])
                                                        [
                                                          <case>
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_record Open
                                                              [
                                                                "label" (plugins.ml[]..[])
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_var "label" (plugins.ml[]..[])
                                                                "info" (plugins.ml[]..[])
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_record Open
                                                                    [
                                                                      "ep0" (plugins.ml[]..[])
pattern (plugins.ml[]..[])
  Ppat_var "ep0" (plugins.ml[]..[])
                                                                    ]
                                                              ]
                                                            expression (plugins.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "label" (plugins.ml[]..[])
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "ep0" (plugins.ml[]..[])
                                                                  None
                                                                  core_type (plugins.ml[]..[])
                                                                    Ptyp_constr "exp" (plugins.ml[]..[])
                                                                    []
                                                              ]
                                                        ]
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "ExpN.mk_record" (plugins.ml[]..[])
                                ]
                          ]
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "List.fold_right" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (plugins.ml[]..[])
                                        Ppat_constraint
                                        pattern (plugins.ml[]..[])
                                          Ppat_record Open
                                          [
                                            "info" (plugins.ml[]..[])
                                              pattern (plugins.ml[]..[])
                                                Ppat_record Open
                                                [
                                                  "info_exp" (plugins.ml[]..[])
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_var "exp" (plugins.ml[]..[])
                                                  "ep0" (plugins.ml[]..[])
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_var "ep0" (plugins.ml[]..[])
                                                ]
                                          ]
                                        core_type (plugins.ml[]..[])
                                          Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                                          []
                                      expression (plugins.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (plugins.ml[]..[])
                                              Ppat_var "res" (plugins.ml[]..[])
                                            expression (plugins.ml[]..[])
                                              Pexp_coerce
                                              expression (plugins.ml[]..[])
                                                Pexp_variant "LetIn"
                                                Some
                                                  expression (plugins.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (plugins.ml[]..[])
                                                        Pexp_variant "Negative"
                                                        None
                                                      expression (plugins.ml[]..[])
                                                        Pexp_variant "Bind"
                                                        Some
                                                          expression (plugins.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (plugins.ml[]..[])
                                                                Pexp_coerce
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "ep0" (plugins.ml[]..[])
                                                                None
                                                                core_type (plugins.ml[]..[])
                                                                  Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
                                                                  []
                                                              expression (plugins.ml[]..[])
                                                                Pexp_coerce
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "exp" (plugins.ml[]..[])
                                                                None
                                                                core_type (plugins.ml[]..[])
                                                                  Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                  []
                                                            ]
                                                      expression (plugins.ml[]..[])
                                                        Pexp_coerce
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "res" (plugins.ml[]..[])
                                                        None
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                          []
                                                    ]
                                              None
                                              core_type (plugins.ml[]..[])
                                                Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                []
                                        ]
                                  ]
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_ident "cols" (plugins.ml[]..[])
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_ident "result" (plugins.ml[]..[])
                            ]
                    ]
              ]
              expression (plugins.ml[]..[])
                Pexp_tuple
                [
                  expression (plugins.ml[]..[])
                    Pexp_apply
                    expression (plugins.ml[]..[])
                      Pexp_ident "gen_object" (plugins.ml[]..[])
                    [
                      <label> "kind"
                        expression (plugins.ml[]..[])
                          Pexp_construct "Map" (plugins.ml[]..[])
                          None
                      <label> "mk_tuple"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_tuple" (plugins.ml[]..[])
                      <label> "mk_record"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_record" (plugins.ml[]..[])
                      <label> "base"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("mapbase",None)
                      <label> "class_name"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("map",None)
                      <label> "mk_variant"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_variant" (plugins.ml[]..[])
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_construct "()" (plugins.ml[]..[])
                          None
                    ]
                  expression (plugins.ml[]..[])
                    Pexp_apply
                    expression (plugins.ml[]..[])
                      Pexp_ident "gen_object" (plugins.ml[]..[])
                    [
                      <label> "kind"
                        expression (plugins.ml[]..[])
                          Pexp_construct "Map" (plugins.ml[]..[])
                          None
                      <label> "mk_tuple"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_tuple" (plugins.ml[]..[])
                      <label> "mk_record"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_record" (plugins.ml[]..[])
                      <label> "base"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("mapbase2",None)
                      <label> "class_name"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("map2",None)
                      <label> "mk_variant"
                        expression (plugins.ml[]..[])
                          Pexp_ident "mk_variant" (plugins.ml[]..[])
                      <label> "arity"
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_int 2
                      <label> "default"
                        expression (plugins.ml[]..[])
                          Pexp_coerce
                          expression (plugins.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (plugins.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (plugins.ml[]..[])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (plugins.ml[]..[])
                                        Pexp_constant Const_string("invalid_arg",None)
                                  expression (plugins.ml[]..[])
                                    Pexp_variant "Str"
                                    Some
                                      expression (plugins.ml[]..[])
                                        Pexp_constant Const_string("map2 failure",None)
                                ]
                          None
                          core_type (plugins.ml[]..[])
                            Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                            []
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_construct "()" (plugins.ml[]..[])
                          None
                    ]
                ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "|>" (plugins.ml[]..[])
      [
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_construct "::" (plugins.ml[]..[])
            Some
              expression (plugins.ml[]..[])
                Pexp_tuple
                [
                  expression (plugins.ml[]..[])
                    Pexp_tuple
                    [
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("Map",None)
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "some" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "gen_map" (plugins.ml[]..[])
                        ]
                    ]
                  expression (plugins.ml[]..[])
                    Pexp_construct "::" (plugins.ml[]..[])
                    Some
                      expression (plugins.ml[]..[])
                        Pexp_tuple
                        [
                          expression (plugins.ml[]..[])
                            Pexp_tuple
                            [
                              expression (plugins.ml[]..[])
                                Pexp_constant Const_string("Map2",None)
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "some" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "gen_map2" (plugins.ml[]..[])
                                ]
                            ]
                          expression (plugins.ml[]..[])
                            Pexp_construct "[]" (plugins.ml[]..[])
                            None
                        ]
                ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_apply
            expression (plugins.ml[]..[])
              Pexp_ident "List.iter" (plugins.ml[]..[])
            [
              <label> ""
                expression (plugins.ml[]..[])
                  Pexp_ident "Typehook.register" (plugins.ml[]..[])
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_strip" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_let Nonrec
          [
            <def>
              pattern (plugins.ml[]..[])
                Ppat_var "mk_variant" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "cons" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (plugins.ml[]..[])
                            Ppat_var "params" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (plugins.ml[]..[])
                                  Ppat_var "params'" (plugins.ml[]..[])
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "List.filter" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (plugins.ml[]..[])
                                              Ppat_constraint
                                              pattern (plugins.ml[]..[])
                                                Ppat_var "x" (plugins.ml[]..[])
                                              core_type (plugins.ml[]..[])
                                                Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                                []
                                            expression (plugins.ml[]..[])
                                              Pexp_apply
                                              expression (plugins.ml[]..[])
                                                Pexp_ident "<>" (plugins.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (plugins.ml[]..[])
                                                    Pexp_field
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "x" (plugins.ml[]..[])
                                                    "ty" (plugins.ml[]..[])
                                                <label> ""
                                                  expression (plugins.ml[]..[])
                                                    Pexp_variant "Lid"
                                                    Some
                                                      expression (plugins.ml[]..[])
                                                        Pexp_constant Const_string("loc",None)
                                              ]
                                        ]
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "params" (plugins.ml[]..[])
                                  ]
                            ]
                            expression (plugins.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (plugins.ml[]..[])
                                    Ppat_var "result" (plugins.ml[]..[])
                                  expression (plugins.ml[]..[])
                                    Pexp_coerce
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "appl_of_list" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_construct "::" (plugins.ml[]..[])
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (plugins.ml[]..[])
                                                    Pexp_apply
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "EpN.of_str" (plugins.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "cons" (plugins.ml[]..[])
                                                    ]
                                                  expression (plugins.ml[]..[])
                                                    Pexp_apply
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "|>" (plugins.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "params'" (plugins.ml[]..[])
                                                      <label> ""
                                                        expression (plugins.ml[]..[])
                                                          Pexp_apply
                                                          expression (plugins.ml[]..[])
                                                            Pexp_ident "List.map" (plugins.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (plugins.ml[]..[])
                                                                Pexp_function
                                                                [
                                                                  <case>
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_constraint
                                                                      pattern (plugins.ml[]..[])
Ppat_var "x" (plugins.ml[]..[])
                                                                      core_type (plugins.ml[]..[])
Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
[]
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_field
                                                                      expression (plugins.ml[]..[])
Pexp_ident "x" (plugins.ml[]..[])
                                                                      "ep0" (plugins.ml[]..[])
                                                                ]
                                                          ]
                                                    ]
                                                ]
                                      ]
                                    None
                                    core_type (plugins.ml[]..[])
                                      Ptyp_constr "exp" (plugins.ml[]..[])
                                      []
                              ]
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "List.fold_right" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (plugins.ml[]..[])
                                            Ppat_constraint
                                            pattern (plugins.ml[]..[])
                                              Ppat_var "x" (plugins.ml[]..[])
                                            core_type (plugins.ml[]..[])
                                              Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                              []
                                          expression (plugins.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_var "res" (plugins.ml[]..[])
                                                expression (plugins.ml[]..[])
                                                  Pexp_match
                                                  expression (plugins.ml[]..[])
                                                    Pexp_field
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "x" (plugins.ml[]..[])
                                                    "ty" (plugins.ml[]..[])
                                                  [
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_or
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_or
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_variant "Lid"
                                                            Some
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_or
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (plugins.ml[]..[])
Ppat_or
pattern (plugins.ml[]..[])
  Ppat_or
  pattern (plugins.ml[]..[])
    Ppat_or
    pattern (plugins.ml[]..[])
      Ppat_constant Const_string("int",None)
    pattern (plugins.ml[]..[])
      Ppat_constant Const_string("char",None)
  pattern (plugins.ml[]..[])
    Ppat_constant Const_string("string",None)
pattern (plugins.ml[]..[])
  Ppat_constant Const_string("int32",None)
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("unit",None)
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_constant Const_string("nativeint",None)
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_constant Const_string("bool",None)
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constant Const_string("loc",None)
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_constraint
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_variant "Dot"
                                                              Some
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_tuple
                                                                  [
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_variant "Uid"
                                                                      Some
pattern (plugins.ml[]..[])
  Ppat_constant Const_string("Tokenf",None)
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_variant "Lid"
                                                                      Some
pattern (plugins.ml[]..[])
  Ppat_constant Const_string("quot",None)
                                                                  ]
                                                            core_type (plugins.ml[]..[])
                                                              Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                              []
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_constraint
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_variant "Dot"
                                                            Some
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_variant "Uid"
                                                                    Some
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("Tokenf",None)
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_variant "Lid"
                                                                    Some
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("ant",None)
                                                                ]
                                                          core_type (plugins.ml[]..[])
                                                            Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                            []
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "res" (plugins.ml[]..[])
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_any
                                                      expression (plugins.ml[]..[])
                                                        Pexp_coerce
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "LetIn"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_variant "Negative"
                                                                  None
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_variant "Bind"
                                                                  Some
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (plugins.ml[]..[])
  Pexp_coerce
  expression (plugins.ml[]..[])
    Pexp_field
    expression (plugins.ml[]..[])
      Pexp_ident "x" (plugins.ml[]..[])
    "ep0" (plugins.ml[]..[])
  None
  core_type (plugins.ml[]..[])
    Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
    []
expression (plugins.ml[]..[])
  Pexp_coerce
  expression (plugins.ml[]..[])
    Pexp_field
    expression (plugins.ml[]..[])
      Pexp_ident "x" (plugins.ml[]..[])
    "info_exp" (plugins.ml[]..[])
  None
  core_type (plugins.ml[]..[])
    Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
    []
                                                                      ]
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "res" (plugins.ml[]..[])
                                                                  None
                                                                  core_type (plugins.ml[]..[])
                                                                    Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                    []
                                                              ]
                                                        None
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                          []
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "params'" (plugins.ml[]..[])
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "result" (plugins.ml[]..[])
                                ]
                      ]
                ]
          ]
          expression (plugins.ml[]..[])
            Pexp_let Nonrec
            [
              <def>
                pattern (plugins.ml[]..[])
                  Ppat_var "mk_tuple" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (plugins.ml[]..[])
                        Ppat_var "params" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (plugins.ml[]..[])
                              Ppat_var "result" (plugins.ml[]..[])
                            expression (plugins.ml[]..[])
                              Pexp_coerce
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "|>" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "|>" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "params" (plugins.ml[]..[])
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "List.map" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_constraint
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_var "x" (plugins.ml[]..[])
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                                          []
                                                      expression (plugins.ml[]..[])
                                                        Pexp_field
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "x" (plugins.ml[]..[])
                                                        "ep0" (plugins.ml[]..[])
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "tuple_com" (plugins.ml[]..[])
                                ]
                              None
                              core_type (plugins.ml[]..[])
                                Ptyp_constr "exp" (plugins.ml[]..[])
                                []
                        ]
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "List.fold_right" (plugins.ml[]..[])
                          [
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (plugins.ml[]..[])
                                      Ppat_constraint
                                      pattern (plugins.ml[]..[])
                                        Ppat_var "x" (plugins.ml[]..[])
                                      core_type (plugins.ml[]..[])
                                        Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                        []
                                    expression (plugins.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "res" (plugins.ml[]..[])
                                          expression (plugins.ml[]..[])
                                            Pexp_match
                                            expression (plugins.ml[]..[])
                                              Pexp_field
                                              expression (plugins.ml[]..[])
                                                Pexp_ident "x" (plugins.ml[]..[])
                                              "ty" (plugins.ml[]..[])
                                            [
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_or
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_or
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_variant "Lid"
                                                      Some
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_or
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_or
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_or
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_or
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("int",None)
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("char",None)
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_constant Const_string("string",None)
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_constant Const_string("int32",None)
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constant Const_string("unit",None)
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_constant Const_string("nativeint",None)
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_constant Const_string("bool",None)
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_constant Const_string("loc",None)
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_constraint
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_variant "Dot"
                                                        Some
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_variant "Uid"
                                                                Some
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_constant Const_string("Tokenf",None)
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_variant "Lid"
                                                                Some
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_constant Const_string("ant",None)
                                                            ]
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                        []
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_constraint
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_variant "Dot"
                                                      Some
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_tuple
                                                          [
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_variant "Uid"
                                                              Some
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constant Const_string("Tokenf",None)
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_variant "Lid"
                                                              Some
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constant Const_string("quot",None)
                                                          ]
                                                    core_type (plugins.ml[]..[])
                                                      Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                      []
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "res" (plugins.ml[]..[])
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_any
                                                expression (plugins.ml[]..[])
                                                  Pexp_coerce
                                                  expression (plugins.ml[]..[])
                                                    Pexp_variant "LetIn"
                                                    Some
                                                      expression (plugins.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (plugins.ml[]..[])
                                                            Pexp_variant "Negative"
                                                            None
                                                          expression (plugins.ml[]..[])
                                                            Pexp_variant "Bind"
                                                            Some
                                                              expression (plugins.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_field
                                                                      expression (plugins.ml[]..[])
Pexp_ident "x" (plugins.ml[]..[])
                                                                      "ep0" (plugins.ml[]..[])
                                                                    None
                                                                    core_type (plugins.ml[]..[])
                                                                      Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
                                                                      []
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_field
                                                                      expression (plugins.ml[]..[])
Pexp_ident "x" (plugins.ml[]..[])
                                                                      "info_exp" (plugins.ml[]..[])
                                                                    None
                                                                    core_type (plugins.ml[]..[])
                                                                      Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                      []
                                                                ]
                                                          expression (plugins.ml[]..[])
                                                            Pexp_coerce
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident "res" (plugins.ml[]..[])
                                                            None
                                                            core_type (plugins.ml[]..[])
                                                              Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                              []
                                                        ]
                                                  None
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                    []
                                            ]
                                      ]
                                ]
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "params" (plugins.ml[]..[])
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "result" (plugins.ml[]..[])
                          ]
                  ]
            ]
            expression (plugins.ml[]..[])
              Pexp_let Nonrec
              [
                <def>
                  pattern (plugins.ml[]..[])
                    Ppat_var "mk_record" (plugins.ml[]..[])
                  expression (plugins.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (plugins.ml[]..[])
                          Ppat_any
                        expression (plugins.ml[]..[])
                          Pexp_assert
                          expression (plugins.ml[]..[])
                            Pexp_construct "false" (plugins.ml[]..[])
                            None
                    ]
              ]
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "gen_stru" (plugins.ml[]..[])
                [
                  <label> "id"
                    expression (plugins.ml[]..[])
                      Pexp_variant "Pre"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("",None)
                  <label> "mk_tuple"
                    expression (plugins.ml[]..[])
                      Pexp_ident "mk_tuple" (plugins.ml[]..[])
                  <label> "mk_record"
                    expression (plugins.ml[]..[])
                      Pexp_ident "mk_record" (plugins.ml[]..[])
                  <label> "mk_variant"
                    expression (plugins.ml[]..[])
                      Pexp_ident "mk_variant" (plugins.ml[]..[])
                  <label> "annot"
                    expression (plugins.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (plugins.ml[]..[])
                            Ppat_var "x" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_tuple
                            [
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_variant "Arrow"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Dot"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Uid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("Astf",None)
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "x" (plugins.ml[]..[])
                                              ]
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Dot"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Uid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("Astfn",None)
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "x" (plugins.ml[]..[])
                                              ]
                                      ]
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                  []
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_variant "Dot"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Uid"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("Astfn",None)
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "x" (plugins.ml[]..[])
                                      ]
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                  []
                            ]
                      ]
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_construct "()" (plugins.ml[]..[])
                      None
                ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "Typehook.register" (plugins.ml[]..[])
      [
        <label> "filter"
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_var "s" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "not" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "List.mem" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "s" (plugins.ml[]..[])
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_construct "::" (plugins.ml[]..[])
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("loc",None)
                                    expression (plugins.ml[]..[])
                                      Pexp_construct "::" (plugins.ml[]..[])
                                      Some
                                        expression (plugins.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("ant",None)
                                            expression (plugins.ml[]..[])
                                              Pexp_construct "::" (plugins.ml[]..[])
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("quot",None)
                                                    expression (plugins.ml[]..[])
                                                      Pexp_construct "[]" (plugins.ml[]..[])
                                                      None
                                                  ]
                                          ]
                                  ]
                        ]
                  ]
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("Strip",None)
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "some" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "gen_strip" (plugins.ml[]..[])
                ]
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_fill" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_let Nonrec
          [
            <def>
              pattern (plugins.ml[]..[])
                Ppat_var "mk_variant" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "cons" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (plugins.ml[]..[])
                            Ppat_var "params" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (plugins.ml[]..[])
                                  Ppat_var "result" (plugins.ml[]..[])
                                expression (plugins.ml[]..[])
                                  Pexp_coerce
                                  expression (plugins.ml[]..[])
                                    Pexp_apply
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "appl_of_list" (plugins.ml[]..[])
                                    [
                                      <label> ""
                                        expression (plugins.ml[]..[])
                                          Pexp_construct "::" (plugins.ml[]..[])
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_apply
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "EpN.of_str" (plugins.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "cons" (plugins.ml[]..[])
                                                  ]
                                                expression (plugins.ml[]..[])
                                                  Pexp_construct "::" (plugins.ml[]..[])
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (plugins.ml[]..[])
                                                          Pexp_coerce
                                                          expression (plugins.ml[]..[])
                                                            Pexp_variant "Lid"
                                                            Some
                                                              expression (plugins.ml[]..[])
                                                                Pexp_constant Const_string("loc",None)
                                                          None
                                                          core_type (plugins.ml[]..[])
                                                            Ptyp_constr "Astfn.ep" (plugins.ml[]..[])
                                                            []
                                                        expression (plugins.ml[]..[])
                                                          Pexp_apply
                                                          expression (plugins.ml[]..[])
                                                            Pexp_ident "|>" (plugins.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (plugins.ml[]..[])
                                                                Pexp_ident "params" (plugins.ml[]..[])
                                                            <label> ""
                                                              expression (plugins.ml[]..[])
                                                                Pexp_apply
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "List.map" (plugins.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_function
                                                                      [
<case>
  pattern (plugins.ml[]..[])
    Ppat_constraint
    pattern (plugins.ml[]..[])
      Ppat_var "x" (plugins.ml[]..[])
    core_type (plugins.ml[]..[])
      Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
      []
  expression (plugins.ml[]..[])
    Pexp_field
    expression (plugins.ml[]..[])
      Pexp_ident "x" (plugins.ml[]..[])
    "ep0" (plugins.ml[]..[])
                                                                      ]
                                                                ]
                                                          ]
                                                      ]
                                              ]
                                    ]
                                  None
                                  core_type (plugins.ml[]..[])
                                    Ptyp_constr "exp" (plugins.ml[]..[])
                                    []
                            ]
                            expression (plugins.ml[]..[])
                              Pexp_apply
                              expression (plugins.ml[]..[])
                                Pexp_ident "List.fold_right" (plugins.ml[]..[])
                              [
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (plugins.ml[]..[])
                                          Ppat_constraint
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "x" (plugins.ml[]..[])
                                          core_type (plugins.ml[]..[])
                                            Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                            []
                                        expression (plugins.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (plugins.ml[]..[])
                                                Ppat_var "res" (plugins.ml[]..[])
                                              expression (plugins.ml[]..[])
                                                Pexp_match
                                                expression (plugins.ml[]..[])
                                                  Pexp_field
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                  "ty" (plugins.ml[]..[])
                                                [
                                                  <case>
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_or
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_or
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_variant "Lid"
                                                          Some
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_or
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_or
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (plugins.ml[]..[])
Ppat_or
pattern (plugins.ml[]..[])
  Ppat_or
  pattern (plugins.ml[]..[])
    Ppat_or
    pattern (plugins.ml[]..[])
      Ppat_constant Const_string("int",None)
    pattern (plugins.ml[]..[])
      Ppat_constant Const_string("char",None)
  pattern (plugins.ml[]..[])
    Ppat_constant Const_string("string",None)
pattern (plugins.ml[]..[])
  Ppat_constant Const_string("int32",None)
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("unit",None)
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_constant Const_string("nativeint",None)
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_constant Const_string("bool",None)
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constant Const_string("loc",None)
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_constant Const_string("ant",None)
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_constraint
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_variant "Dot"
                                                            Some
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_variant "Uid"
                                                                    Some
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("Tokenf",None)
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_variant "Lid"
                                                                    Some
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("ant",None)
                                                                ]
                                                          core_type (plugins.ml[]..[])
                                                            Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                            []
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_constraint
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_variant "Dot"
                                                          Some
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_tuple
                                                              [
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_variant "Uid"
                                                                  Some
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_constant Const_string("Tokenf",None)
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_variant "Lid"
                                                                  Some
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_constant Const_string("quot",None)
                                                              ]
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                          []
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "res" (plugins.ml[]..[])
                                                  <case>
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_any
                                                    expression (plugins.ml[]..[])
                                                      Pexp_coerce
                                                      expression (plugins.ml[]..[])
                                                        Pexp_variant "LetIn"
                                                        Some
                                                          expression (plugins.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (plugins.ml[]..[])
                                                                Pexp_variant "Negative"
                                                                None
                                                              expression (plugins.ml[]..[])
                                                                Pexp_variant "Bind"
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (plugins.ml[]..[])
Pexp_coerce
expression (plugins.ml[]..[])
  Pexp_field
  expression (plugins.ml[]..[])
    Pexp_ident "x" (plugins.ml[]..[])
  "ep0" (plugins.ml[]..[])
None
core_type (plugins.ml[]..[])
  Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
  []
                                                                      expression (plugins.ml[]..[])
Pexp_coerce
expression (plugins.ml[]..[])
  Pexp_field
  expression (plugins.ml[]..[])
    Pexp_ident "x" (plugins.ml[]..[])
  "info_exp" (plugins.ml[]..[])
None
core_type (plugins.ml[]..[])
  Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
  []
                                                                    ]
                                                              expression (plugins.ml[]..[])
                                                                Pexp_coerce
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "res" (plugins.ml[]..[])
                                                                None
                                                                core_type (plugins.ml[]..[])
                                                                  Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                  []
                                                            ]
                                                      None
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                        []
                                                ]
                                          ]
                                    ]
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "params" (plugins.ml[]..[])
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "result" (plugins.ml[]..[])
                              ]
                      ]
                ]
          ]
          expression (plugins.ml[]..[])
            Pexp_let Nonrec
            [
              <def>
                pattern (plugins.ml[]..[])
                  Ppat_var "mk_tuple" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (plugins.ml[]..[])
                        Ppat_var "params" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (plugins.ml[]..[])
                              Ppat_var "result" (plugins.ml[]..[])
                            expression (plugins.ml[]..[])
                              Pexp_coerce
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "|>" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "|>" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "params" (plugins.ml[]..[])
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "List.map" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_constraint
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_var "x" (plugins.ml[]..[])
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                                          []
                                                      expression (plugins.ml[]..[])
                                                        Pexp_field
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "x" (plugins.ml[]..[])
                                                        "ep0" (plugins.ml[]..[])
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "tuple_com" (plugins.ml[]..[])
                                ]
                              None
                              core_type (plugins.ml[]..[])
                                Ptyp_constr "exp" (plugins.ml[]..[])
                                []
                        ]
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "List.fold_right" (plugins.ml[]..[])
                          [
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (plugins.ml[]..[])
                                      Ppat_constraint
                                      pattern (plugins.ml[]..[])
                                        Ppat_var "x" (plugins.ml[]..[])
                                      core_type (plugins.ml[]..[])
                                        Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                        []
                                    expression (plugins.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "res" (plugins.ml[]..[])
                                          expression (plugins.ml[]..[])
                                            Pexp_match
                                            expression (plugins.ml[]..[])
                                              Pexp_field
                                              expression (plugins.ml[]..[])
                                                Pexp_ident "x" (plugins.ml[]..[])
                                              "ty" (plugins.ml[]..[])
                                            [
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_or
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_or
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_variant "Lid"
                                                      Some
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_or
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_or
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_or
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_or
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (plugins.ml[]..[])
Ppat_or
pattern (plugins.ml[]..[])
  Ppat_constant Const_string("int",None)
pattern (plugins.ml[]..[])
  Ppat_constant Const_string("char",None)
                                                                      pattern (plugins.ml[]..[])
Ppat_constant Const_string("string",None)
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_constant Const_string("int32",None)
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_constant Const_string("unit",None)
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constant Const_string("nativeint",None)
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_constant Const_string("bool",None)
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_constant Const_string("loc",None)
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_constant Const_string("ant",None)
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_constraint
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_variant "Dot"
                                                        Some
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_variant "Uid"
                                                                Some
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_constant Const_string("Tokenf",None)
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_variant "Lid"
                                                                Some
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_constant Const_string("ant",None)
                                                            ]
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                        []
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_constraint
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_variant "Dot"
                                                      Some
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_tuple
                                                          [
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_variant "Uid"
                                                              Some
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constant Const_string("Tokenf",None)
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_variant "Lid"
                                                              Some
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_constant Const_string("quot",None)
                                                          ]
                                                    core_type (plugins.ml[]..[])
                                                      Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                      []
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "res" (plugins.ml[]..[])
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_any
                                                expression (plugins.ml[]..[])
                                                  Pexp_coerce
                                                  expression (plugins.ml[]..[])
                                                    Pexp_variant "LetIn"
                                                    Some
                                                      expression (plugins.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (plugins.ml[]..[])
                                                            Pexp_variant "Negative"
                                                            None
                                                          expression (plugins.ml[]..[])
                                                            Pexp_variant "Bind"
                                                            Some
                                                              expression (plugins.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_field
                                                                      expression (plugins.ml[]..[])
Pexp_ident "x" (plugins.ml[]..[])
                                                                      "ep0" (plugins.ml[]..[])
                                                                    None
                                                                    core_type (plugins.ml[]..[])
                                                                      Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
                                                                      []
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_field
                                                                      expression (plugins.ml[]..[])
Pexp_ident "x" (plugins.ml[]..[])
                                                                      "info_exp" (plugins.ml[]..[])
                                                                    None
                                                                    core_type (plugins.ml[]..[])
                                                                      Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                      []
                                                                ]
                                                          expression (plugins.ml[]..[])
                                                            Pexp_coerce
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident "res" (plugins.ml[]..[])
                                                            None
                                                            core_type (plugins.ml[]..[])
                                                              Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                              []
                                                        ]
                                                  None
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                    []
                                            ]
                                      ]
                                ]
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "params" (plugins.ml[]..[])
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "result" (plugins.ml[]..[])
                          ]
                  ]
            ]
            expression (plugins.ml[]..[])
              Pexp_let Nonrec
              [
                <def>
                  pattern (plugins.ml[]..[])
                    Ppat_var "mk_record" (plugins.ml[]..[])
                  expression (plugins.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (plugins.ml[]..[])
                          Ppat_var "_cols" (plugins.ml[]..[])
                        expression (plugins.ml[]..[])
                          Pexp_assert
                          expression (plugins.ml[]..[])
                            Pexp_construct "false" (plugins.ml[]..[])
                            None
                    ]
              ]
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "gen_stru" (plugins.ml[]..[])
                [
                  <label> "id"
                    expression (plugins.ml[]..[])
                      Pexp_variant "Pre"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("",None)
                  <label> "mk_tuple"
                    expression (plugins.ml[]..[])
                      Pexp_ident "mk_tuple" (plugins.ml[]..[])
                  <label> "mk_record"
                    expression (plugins.ml[]..[])
                      Pexp_ident "mk_record" (plugins.ml[]..[])
                  <label> "mk_variant"
                    expression (plugins.ml[]..[])
                      Pexp_ident "mk_variant" (plugins.ml[]..[])
                  <label> "names"
                    expression (plugins.ml[]..[])
                      Pexp_construct "::" (plugins.ml[]..[])
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_tuple
                          [
                            expression (plugins.ml[]..[])
                              Pexp_constant Const_string("loc",None)
                            expression (plugins.ml[]..[])
                              Pexp_construct "[]" (plugins.ml[]..[])
                              None
                          ]
                  <label> "annot"
                    expression (plugins.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (plugins.ml[]..[])
                            Ppat_var "x" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_tuple
                            [
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_variant "Arrow"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Dot"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Uid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("Locf",None)
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("t",None)
                                              ]
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Arrow"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Dot"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "Uid"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_constant Const_string("Astfn",None)
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "Lid"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident "x" (plugins.ml[]..[])
                                                      ]
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Dot"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "Uid"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_constant Const_string("Astf",None)
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "Lid"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident "x" (plugins.ml[]..[])
                                                      ]
                                              ]
                                      ]
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                  []
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_variant "Dot"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Uid"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("Astf",None)
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "x" (plugins.ml[]..[])
                                      ]
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                  []
                            ]
                      ]
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_construct "()" (plugins.ml[]..[])
                      None
                ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "Typehook.register" (plugins.ml[]..[])
      [
        <label> "filter"
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_var "s" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "not" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "List.mem" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "s" (plugins.ml[]..[])
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_construct "::" (plugins.ml[]..[])
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("loc",None)
                                    expression (plugins.ml[]..[])
                                      Pexp_construct "::" (plugins.ml[]..[])
                                      Some
                                        expression (plugins.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("ant",None)
                                            expression (plugins.ml[]..[])
                                              Pexp_construct "::" (plugins.ml[]..[])
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("quot",None)
                                                    expression (plugins.ml[]..[])
                                                      Pexp_construct "[]" (plugins.ml[]..[])
                                                      None
                                                  ]
                                          ]
                                  ]
                        ]
                  ]
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("Fill",None)
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "some" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "gen_fill" (plugins.ml[]..[])
                ]
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_variant" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "cons" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "params" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (plugins.ml[]..[])
                            Ppat_var "len" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "List.length" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_ident "params" (plugins.ml[]..[])
                            ]
                      ]
                      expression (plugins.ml[]..[])
                        Pexp_ifthenelse
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "Stringf.ends_with" (plugins.ml[]..[])
                          [
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "cons" (plugins.ml[]..[])
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_constant Const_string("Ant",None)
                          ]
                        expression (plugins.ml[]..[])
                          Pexp_coerce
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "EpN.of_vstr_number" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string("Ant",None)
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_ident "len" (plugins.ml[]..[])
                            ]
                          None
                          core_type (plugins.ml[]..[])
                            Ptyp_constr "exp" (plugins.ml[]..[])
                            []
                        Some
                          expression (plugins.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (plugins.ml[]..[])
                                  Ppat_var "params" (plugins.ml[]..[])
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "|>" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "params" (plugins.ml[]..[])
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "List.map" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_constraint
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_var "x" (plugins.ml[]..[])
                                                    core_type (plugins.ml[]..[])
                                                      Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                                      []
                                                  expression (plugins.ml[]..[])
                                                    Pexp_field
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "x" (plugins.ml[]..[])
                                                    "info_exp" (plugins.ml[]..[])
                                              ]
                                        ]
                                  ]
                            ]
                            expression (plugins.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (plugins.ml[]..[])
                                    Ppat_var "a" (plugins.ml[]..[])
                                  expression (plugins.ml[]..[])
                                    Pexp_apply
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "ExpN.mee_of_str" (plugins.ml[]..[])
                                    [
                                      <label> ""
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "cons" (plugins.ml[]..[])
                                    ]
                              ]
                              expression (plugins.ml[]..[])
                                Pexp_match
                                expression (plugins.ml[]..[])
                                  Pexp_ident "params" (plugins.ml[]..[])
                                [
                                  <case>
                                    pattern (plugins.ml[]..[])
                                      Ppat_construct "[]" (plugins.ml[]..[])
                                      None
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "a" (plugins.ml[]..[])
                                  <case>
                                    pattern (plugins.ml[]..[])
                                      Ppat_any
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "@@" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "ExpN.mee_app" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "a" (plugins.ml[]..[])
                                            ]
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "ExpN.mk_tuple_ee" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "params" (plugins.ml[]..[])
                                            ]
                                      ]
                                ]
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_record" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "cols" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "|>" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_apply
                      expression (plugins.ml[]..[])
                        Pexp_ident "|>" (plugins.ml[]..[])
                      [
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_ident "cols" (plugins.ml[]..[])
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "List.map" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (plugins.ml[]..[])
                                        Ppat_constraint
                                        pattern (plugins.ml[]..[])
                                          Ppat_var "x" (plugins.ml[]..[])
                                        core_type (plugins.ml[]..[])
                                          Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                                          []
                                      expression (plugins.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (plugins.ml[]..[])
                                            Pexp_field
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "x" (plugins.ml[]..[])
                                            "label" (plugins.ml[]..[])
                                          expression (plugins.ml[]..[])
                                            Pexp_field
                                            expression (plugins.ml[]..[])
                                              Pexp_field
                                              expression (plugins.ml[]..[])
                                                Pexp_ident "x" (plugins.ml[]..[])
                                              "info" (plugins.ml[]..[])
                                            "info_exp" (plugins.ml[]..[])
                                        ]
                                  ]
                            ]
                      ]
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "ExpN.mk_record_ee" (plugins.ml[]..[])
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_tuple" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "params" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "|>" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_apply
                      expression (plugins.ml[]..[])
                        Pexp_ident "|>" (plugins.ml[]..[])
                      [
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_ident "params" (plugins.ml[]..[])
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "List.map" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (plugins.ml[]..[])
                                        Ppat_constraint
                                        pattern (plugins.ml[]..[])
                                          Ppat_var "x" (plugins.ml[]..[])
                                        core_type (plugins.ml[]..[])
                                          Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                          []
                                      expression (plugins.ml[]..[])
                                        Pexp_field
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "x" (plugins.ml[]..[])
                                        "info_exp" (plugins.ml[]..[])
                                  ]
                            ]
                      ]
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "ExpN.mk_tuple_ee" (plugins.ml[]..[])
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_meta_exp" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_apply
          expression (plugins.ml[]..[])
            Pexp_ident "gen_stru" (plugins.ml[]..[])
          [
            <label> "id"
              expression (plugins.ml[]..[])
                Pexp_variant "Pre"
                Some
                  expression (plugins.ml[]..[])
                    Pexp_constant Const_string("meta_",None)
            <label> "names"
              expression (plugins.ml[]..[])
                Pexp_construct "::" (plugins.ml[]..[])
                Some
                  expression (plugins.ml[]..[])
                    Pexp_tuple
                    [
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("_loc",None)
                      expression (plugins.ml[]..[])
                        Pexp_construct "[]" (plugins.ml[]..[])
                        None
                    ]
            <label> "mk_tuple"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_tuple" (plugins.ml[]..[])
            <label> "mk_record"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_record" (plugins.ml[]..[])
            <label> "mk_variant"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_variant" (plugins.ml[]..[])
            <label> ""
              expression (plugins.ml[]..[])
                Pexp_construct "()" (plugins.ml[]..[])
                None
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_meta" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_apply
          expression (plugins.ml[]..[])
            Pexp_ident "gen_object" (plugins.ml[]..[])
          [
            <label> "kind"
              expression (plugins.ml[]..[])
                Pexp_construct "Concrete" (plugins.ml[]..[])
                Some
                  expression (plugins.ml[]..[])
                    Pexp_coerce
                    expression (plugins.ml[]..[])
                      Pexp_variant "Dot"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_tuple
                          [
                            expression (plugins.ml[]..[])
                              Pexp_variant "Uid"
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string("Astf",None)
                            expression (plugins.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string("ep",None)
                          ]
                    None
                    core_type (plugins.ml[]..[])
                      Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                      []
            <label> "mk_tuple"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_tuple" (plugins.ml[]..[])
            <label> "mk_record"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_record" (plugins.ml[]..[])
            <label> "base"
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("primitive",None)
            <label> "class_name"
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("meta",None)
            <label> "mk_variant"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_variant" (plugins.ml[]..[])
            <label> "names"
              expression (plugins.ml[]..[])
                Pexp_construct "::" (plugins.ml[]..[])
                Some
                  expression (plugins.ml[]..[])
                    Pexp_tuple
                    [
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("_loc",None)
                      expression (plugins.ml[]..[])
                        Pexp_construct "[]" (plugins.ml[]..[])
                        None
                    ]
            <label> ""
              expression (plugins.ml[]..[])
                Pexp_construct "()" (plugins.ml[]..[])
                None
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "Typehook.register" (plugins.ml[]..[])
      [
        <label> "filter"
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_var "s" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "not" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "List.mem" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "s" (plugins.ml[]..[])
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_construct "::" (plugins.ml[]..[])
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("loc",None)
                                    expression (plugins.ml[]..[])
                                      Pexp_construct "::" (plugins.ml[]..[])
                                      Some
                                        expression (plugins.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("ant",None)
                                            expression (plugins.ml[]..[])
                                              Pexp_construct "::" (plugins.ml[]..[])
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("quot",None)
                                                    expression (plugins.ml[]..[])
                                                      Pexp_construct "[]" (plugins.ml[]..[])
                                                      None
                                                  ]
                                          ]
                                  ]
                        ]
                  ]
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("MetaObj",None)
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "some" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "gen_meta" (plugins.ml[]..[])
                ]
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "extract" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "info" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "|>" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "info" (plugins.ml[]..[])
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_apply
                      expression (plugins.ml[]..[])
                        Pexp_ident "Listf.concat_map" (plugins.ml[]..[])
                      [
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (plugins.ml[]..[])
                                  Ppat_constraint
                                  pattern (plugins.ml[]..[])
                                    Ppat_var "x" (plugins.ml[]..[])
                                  core_type (plugins.ml[]..[])
                                    Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                    []
                                expression (plugins.ml[]..[])
                                  Pexp_construct "::" (plugins.ml[]..[])
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_field
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "x" (plugins.ml[]..[])
                                          "name_exp" (plugins.ml[]..[])
                                        expression (plugins.ml[]..[])
                                          Pexp_construct "::" (plugins.ml[]..[])
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_coerce
                                                  expression (plugins.ml[]..[])
                                                    Pexp_field
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "x" (plugins.ml[]..[])
                                                    "id_ep" (plugins.ml[]..[])
                                                  None
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "exp" (plugins.ml[]..[])
                                                    []
                                                expression (plugins.ml[]..[])
                                                  Pexp_construct "[]" (plugins.ml[]..[])
                                                  None
                                              ]
                                      ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mkfmt" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "pre" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "sep" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (plugins.ml[]..[])
                            Ppat_var "post" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (plugins.ml[]..[])
                                  Ppat_var "fields" (plugins.ml[]..[])
                                expression (plugins.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (plugins.ml[]..[])
                                        Ppat_var "s" (plugins.ml[]..[])
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "^" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "pre" (plugins.ml[]..[])
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_apply
                                              expression (plugins.ml[]..[])
                                                Pexp_ident "^" (plugins.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (plugins.ml[]..[])
                                                    Pexp_apply
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "String.concat" (plugins.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "sep" (plugins.ml[]..[])
                                                      <label> ""
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "fields" (plugins.ml[]..[])
                                                    ]
                                                <label> ""
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "post" (plugins.ml[]..[])
                                              ]
                                        ]
                                  ]
                                  expression (plugins.ml[]..[])
                                    Pexp_coerce
                                    expression (plugins.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (plugins.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (plugins.ml[]..[])
                                              Pexp_variant "App"
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (plugins.ml[]..[])
                                                      Pexp_variant "Dot"
                                                      Some
                                                        expression (plugins.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (plugins.ml[]..[])
                                                              Pexp_variant "Uid"
                                                              Some
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_constant Const_string("Format",None)
                                                            expression (plugins.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_constant Const_string("fprintf",None)
                                                          ]
                                                    expression (plugins.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (plugins.ml[]..[])
                                                          Pexp_constant Const_string("fmt",None)
                                                  ]
                                            expression (plugins.ml[]..[])
                                              Pexp_variant "Str"
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "s" (plugins.ml[]..[])
                                          ]
                                    None
                                    core_type (plugins.ml[]..[])
                                      Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                      []
                            ]
                      ]
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_variant_print" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "cons" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "params" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (plugins.ml[]..[])
                            Ppat_var "len" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "List.length" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_ident "params" (plugins.ml[]..[])
                            ]
                      ]
                      expression (plugins.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (plugins.ml[]..[])
                              Ppat_var "pre" (plugins.ml[]..[])
                            expression (plugins.ml[]..[])
                              Pexp_ifthenelse
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident ">=" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "len" (plugins.ml[]..[])
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_int 1
                                ]
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "@@" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "mkfmt" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "^" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_constant Const_string("@[<1>(",None)
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_apply
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "^" (plugins.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "cons" (plugins.ml[]..[])
                                                    <label> ""
                                                      expression (plugins.ml[]..[])
                                                        Pexp_constant Const_string("@ ",None)
                                                  ]
                                            ]
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_constant Const_string("@ ",None)
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_constant Const_string(")@]",None)
                                      ]
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "Listf.init" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "len" (plugins.ml[]..[])
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_any
                                                expression (plugins.ml[]..[])
                                                  Pexp_constant Const_string("%a",None)
                                            ]
                                      ]
                                ]
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "mkfmt" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "cons" (plugins.ml[]..[])
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_constant Const_string("",None)
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_constant Const_string("",None)
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_construct "[]" (plugins.ml[]..[])
                                        None
                                  ]
                        ]
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "appl_of_list" (plugins.ml[]..[])
                          [
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_construct "::" (plugins.ml[]..[])
                                Some
                                  expression (plugins.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "pre" (plugins.ml[]..[])
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "extract" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "params" (plugins.ml[]..[])
                                        ]
                                    ]
                          ]
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_tuple_print" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "params" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (plugins.ml[]..[])
                      Ppat_var "len" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_apply
                      expression (plugins.ml[]..[])
                        Pexp_ident "List.length" (plugins.ml[]..[])
                      [
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_ident "params" (plugins.ml[]..[])
                      ]
                ]
                expression (plugins.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (plugins.ml[]..[])
                        Ppat_var "pre" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "@@" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_apply
                              expression (plugins.ml[]..[])
                                Pexp_ident "mkfmt" (plugins.ml[]..[])
                              [
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_constant Const_string("@[<1>(",None)
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_constant Const_string(",@,",None)
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_constant Const_string(")@]",None)
                              ]
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_apply
                              expression (plugins.ml[]..[])
                                Pexp_ident "Listf.init" (plugins.ml[]..[])
                              [
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "len" (plugins.ml[]..[])
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (plugins.ml[]..[])
                                          Ppat_any
                                        expression (plugins.ml[]..[])
                                          Pexp_constant Const_string("%a",None)
                                    ]
                              ]
                        ]
                  ]
                  expression (plugins.ml[]..[])
                    Pexp_apply
                    expression (plugins.ml[]..[])
                      Pexp_ident "appl_of_list" (plugins.ml[]..[])
                    [
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_construct "::" (plugins.ml[]..[])
                          Some
                            expression (plugins.ml[]..[])
                              Pexp_tuple
                              [
                                expression (plugins.ml[]..[])
                                  Pexp_ident "pre" (plugins.ml[]..[])
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "extract" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "params" (plugins.ml[]..[])
                                  ]
                              ]
                    ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_record_print" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "cols" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (plugins.ml[]..[])
                      Ppat_var "pre" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_apply
                      expression (plugins.ml[]..[])
                        Pexp_ident "|>" (plugins.ml[]..[])
                      [
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "|>" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_ident "cols" (plugins.ml[]..[])
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "List.map" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (plugins.ml[]..[])
                                              Ppat_constraint
                                              pattern (plugins.ml[]..[])
                                                Ppat_var "x" (plugins.ml[]..[])
                                              core_type (plugins.ml[]..[])
                                                Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                                                []
                                            expression (plugins.ml[]..[])
                                              Pexp_apply
                                              expression (plugins.ml[]..[])
                                                Pexp_ident "^" (plugins.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (plugins.ml[]..[])
                                                    Pexp_field
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "x" (plugins.ml[]..[])
                                                    "label" (plugins.ml[]..[])
                                                <label> ""
                                                  expression (plugins.ml[]..[])
                                                    Pexp_constant Const_string(":%a",None)
                                              ]
                                        ]
                                  ]
                            ]
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "mkfmt" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string("@[<hv 1>{",None)
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string(";@,",None)
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string("}@]",None)
                            ]
                      ]
                ]
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "appl_of_list" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_construct "::" (plugins.ml[]..[])
                        Some
                          expression (plugins.ml[]..[])
                            Pexp_tuple
                            [
                              expression (plugins.ml[]..[])
                                Pexp_ident "pre" (plugins.ml[]..[])
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "|>" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "|>" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "cols" (plugins.ml[]..[])
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "List.map" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_constraint
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_var "x" (plugins.ml[]..[])
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                                                          []
                                                      expression (plugins.ml[]..[])
                                                        Pexp_field
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "x" (plugins.ml[]..[])
                                                        "info" (plugins.ml[]..[])
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "extract" (plugins.ml[]..[])
                                ]
                            ]
                  ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_print" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_apply
          expression (plugins.ml[]..[])
            Pexp_ident "gen_stru" (plugins.ml[]..[])
          [
            <label> "id"
              expression (plugins.ml[]..[])
                Pexp_variant "Pre"
                Some
                  expression (plugins.ml[]..[])
                    Pexp_constant Const_string("pp_print_",None)
            <label> "names"
              expression (plugins.ml[]..[])
                Pexp_construct "::" (plugins.ml[]..[])
                Some
                  expression (plugins.ml[]..[])
                    Pexp_tuple
                    [
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("fmt",None)
                      expression (plugins.ml[]..[])
                        Pexp_construct "[]" (plugins.ml[]..[])
                        None
                    ]
            <label> "mk_tuple"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_tuple_print" (plugins.ml[]..[])
            <label> "mk_record"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_record_print" (plugins.ml[]..[])
            <label> "annot"
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "s" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_tuple
                      [
                        expression (plugins.ml[]..[])
                          Pexp_coerce
                          expression (plugins.ml[]..[])
                            Pexp_variant "Arrow"
                            Some
                              expression (plugins.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (plugins.ml[]..[])
                                    Pexp_variant "Dot"
                                    Some
                                      expression (plugins.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (plugins.ml[]..[])
                                            Pexp_variant "Uid"
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_constant Const_string("Format",None)
                                          expression (plugins.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_constant Const_string("formatter",None)
                                        ]
                                  expression (plugins.ml[]..[])
                                    Pexp_variant "Arrow"
                                    Some
                                      expression (plugins.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (plugins.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_ident "s" (plugins.ml[]..[])
                                          expression (plugins.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_constant Const_string("unit",None)
                                        ]
                                ]
                          None
                          core_type (plugins.ml[]..[])
                            Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                            []
                        expression (plugins.ml[]..[])
                          Pexp_coerce
                          expression (plugins.ml[]..[])
                            Pexp_variant "Lid"
                            Some
                              expression (plugins.ml[]..[])
                                Pexp_constant Const_string("unit",None)
                          None
                          core_type (plugins.ml[]..[])
                            Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                            []
                      ]
                ]
            <label> "mk_variant"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_variant_print" (plugins.ml[]..[])
            <label> ""
              expression (plugins.ml[]..[])
                Pexp_construct "()" (plugins.ml[]..[])
                None
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_print_obj" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_apply
          expression (plugins.ml[]..[])
            Pexp_ident "gen_object" (plugins.ml[]..[])
          [
            <label> "kind"
              expression (plugins.ml[]..[])
                Pexp_construct "Concrete" (plugins.ml[]..[])
                Some
                  expression (plugins.ml[]..[])
                    Pexp_coerce
                    expression (plugins.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("unit",None)
                    None
                    core_type (plugins.ml[]..[])
                      Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                      []
            <label> "mk_tuple"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_tuple_print" (plugins.ml[]..[])
            <label> "base"
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("printbase",None)
            <label> "class_name"
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("print",None)
            <label> "names"
              expression (plugins.ml[]..[])
                Pexp_construct "::" (plugins.ml[]..[])
                Some
                  expression (plugins.ml[]..[])
                    Pexp_tuple
                    [
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("fmt",None)
                      expression (plugins.ml[]..[])
                        Pexp_construct "[]" (plugins.ml[]..[])
                        None
                    ]
            <label> "mk_record"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_record_print" (plugins.ml[]..[])
            <label> "mk_variant"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_variant_print" (plugins.ml[]..[])
            <label> ""
              expression (plugins.ml[]..[])
                Pexp_construct "()" (plugins.ml[]..[])
                None
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "|>" (plugins.ml[]..[])
      [
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_construct "::" (plugins.ml[]..[])
            Some
              expression (plugins.ml[]..[])
                Pexp_tuple
                [
                  expression (plugins.ml[]..[])
                    Pexp_tuple
                    [
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("Print",None)
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "some" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "gen_print" (plugins.ml[]..[])
                        ]
                    ]
                  expression (plugins.ml[]..[])
                    Pexp_construct "::" (plugins.ml[]..[])
                    Some
                      expression (plugins.ml[]..[])
                        Pexp_tuple
                        [
                          expression (plugins.ml[]..[])
                            Pexp_tuple
                            [
                              expression (plugins.ml[]..[])
                                Pexp_constant Const_string("OPrint",None)
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "some" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "gen_print_obj" (plugins.ml[]..[])
                                ]
                            ]
                          expression (plugins.ml[]..[])
                            Pexp_construct "[]" (plugins.ml[]..[])
                            None
                        ]
                ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_apply
            expression (plugins.ml[]..[])
              Pexp_ident "List.iter" (plugins.ml[]..[])
            [
              <label> ""
                expression (plugins.ml[]..[])
                  Pexp_ident "Typehook.register" (plugins.ml[]..[])
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_variant_iter" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "_cons" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (plugins.ml[]..[])
                      Ppat_var "params" (plugins.ml[]..[])
                    expression (plugins.ml[]..[])
                      Pexp_constraint
                      expression (plugins.ml[]..[])
                        Pexp_match
                        expression (plugins.ml[]..[])
                          Pexp_ident "params" (plugins.ml[]..[])
                        [
                          <case>
                            pattern (plugins.ml[]..[])
                              Ppat_construct "[]" (plugins.ml[]..[])
                              None
                            expression (plugins.ml[]..[])
                              Pexp_coerce
                              expression (plugins.ml[]..[])
                                Pexp_ident "unit" (plugins.ml[]..[])
                              None
                              core_type (plugins.ml[]..[])
                                Ptyp_constr "exp" (plugins.ml[]..[])
                                []
                          <case>
                            pattern (plugins.ml[]..[])
                              Ppat_any
                            expression (plugins.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (plugins.ml[]..[])
                                    Ppat_var "lst" (plugins.ml[]..[])
                                  expression (plugins.ml[]..[])
                                    Pexp_apply
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "|>" (plugins.ml[]..[])
                                    [
                                      <label> ""
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "params" (plugins.ml[]..[])
                                      <label> ""
                                        expression (plugins.ml[]..[])
                                          Pexp_apply
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "List.map" (plugins.ml[]..[])
                                          [
                                            <label> ""
                                              expression (plugins.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_constraint
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_var "x" (plugins.ml[]..[])
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Ctyp.ty_info" (plugins.ml[]..[])
                                                        []
                                                    expression (plugins.ml[]..[])
                                                      Pexp_coerce
                                                      expression (plugins.ml[]..[])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (plugins.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (plugins.ml[]..[])
                                                                Pexp_coerce
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_field
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                                  "name_exp" (plugins.ml[]..[])
                                                                None
                                                                core_type (plugins.ml[]..[])
                                                                  Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                  []
                                                              expression (plugins.ml[]..[])
                                                                Pexp_coerce
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_field
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                                  "id_ep" (plugins.ml[]..[])
                                                                None
                                                                core_type (plugins.ml[]..[])
                                                                  Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                                  []
                                                            ]
                                                      None
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                        []
                                                ]
                                          ]
                                    ]
                              ]
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "seq_sem" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "lst" (plugins.ml[]..[])
                                ]
                        ]
                      core_type (plugins.ml[]..[])
                        Ptyp_constr "exp" (plugins.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_tuple_iter" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "params" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_constraint
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "mk_variant_iter" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_constant Const_string("",None)
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_ident "params" (plugins.ml[]..[])
                  ]
                core_type (plugins.ml[]..[])
                  Ptyp_constr "exp" (plugins.ml[]..[])
                  []
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "mk_record_iter" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_var "cols" (plugins.ml[]..[])
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "|>" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_apply
                      expression (plugins.ml[]..[])
                        Pexp_ident "|>" (plugins.ml[]..[])
                      [
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_ident "cols" (plugins.ml[]..[])
                        <label> ""
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "List.map" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (plugins.ml[]..[])
                                        Ppat_constraint
                                        pattern (plugins.ml[]..[])
                                          Ppat_var "x" (plugins.ml[]..[])
                                        core_type (plugins.ml[]..[])
                                          Ptyp_constr "Ctyp.record_col" (plugins.ml[]..[])
                                          []
                                      expression (plugins.ml[]..[])
                                        Pexp_coerce
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "App"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_coerce
                                                  expression (plugins.ml[]..[])
                                                    Pexp_field
                                                    expression (plugins.ml[]..[])
                                                      Pexp_field
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "x" (plugins.ml[]..[])
                                                      "info" (plugins.ml[]..[])
                                                    "name_exp" (plugins.ml[]..[])
                                                  None
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                    []
                                                expression (plugins.ml[]..[])
                                                  Pexp_coerce
                                                  expression (plugins.ml[]..[])
                                                    Pexp_field
                                                    expression (plugins.ml[]..[])
                                                      Pexp_field
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "x" (plugins.ml[]..[])
                                                      "info" (plugins.ml[]..[])
                                                    "id_ep" (plugins.ml[]..[])
                                                  None
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                                    []
                                              ]
                                        None
                                        core_type (plugins.ml[]..[])
                                          Ptyp_constr "Astfn.exp" (plugins.ml[]..[])
                                          []
                                  ]
                            ]
                      ]
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "seq_sem" (plugins.ml[]..[])
                ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "gen_iter" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_apply
          expression (plugins.ml[]..[])
            Pexp_ident "gen_object" (plugins.ml[]..[])
          [
            <label> "kind"
              expression (plugins.ml[]..[])
                Pexp_construct "Iter" (plugins.ml[]..[])
                None
            <label> "base"
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("iterbase",None)
            <label> "class_name"
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("iter",None)
            <label> "names"
              expression (plugins.ml[]..[])
                Pexp_construct "[]" (plugins.ml[]..[])
                None
            <label> "mk_tuple"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_tuple_iter" (plugins.ml[]..[])
            <label> "mk_record"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_record_iter" (plugins.ml[]..[])
            <label> "mk_variant"
              expression (plugins.ml[]..[])
                Pexp_ident "mk_variant_iter" (plugins.ml[]..[])
            <label> ""
              expression (plugins.ml[]..[])
                Pexp_construct "()" (plugins.ml[]..[])
                None
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "|>" (plugins.ml[]..[])
      [
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("OIter",None)
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "some" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "gen_iter" (plugins.ml[]..[])
                ]
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_ident "Typehook.register" (plugins.ml[]..[])
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "generate" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_constraint
                pattern (plugins.ml[]..[])
                  Ppat_var "mtyps" (plugins.ml[]..[])
                core_type (plugins.ml[]..[])
                  Ptyp_constr "mtyps" (plugins.ml[]..[])
                  []
              expression (plugins.ml[]..[])
                Pexp_constraint
                expression (plugins.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (plugins.ml[]..[])
                        Ppat_var "tbl" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "Hashtbl.create" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_constant Const_int 30
                        ]
                  ]
                  expression (plugins.ml[]..[])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (plugins.ml[]..[])
                          Ppat_var "aux" (plugins.ml[]..[])
                        expression (plugins.ml[]..[])
                          Pexp_function
                          [
                            <case>
                              pattern (plugins.ml[]..[])
                                Ppat_tuple
                                [
                                  pattern (plugins.ml[]..[])
                                    Ppat_any
                                  pattern (plugins.ml[]..[])
                                    Ppat_var "ty" (plugins.ml[]..[])
                                ]
                              expression (plugins.ml[]..[])
                                Pexp_match
                                expression (plugins.ml[]..[])
                                  Pexp_constraint
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "ty" (plugins.ml[]..[])
                                  core_type (plugins.ml[]..[])
                                    Ptyp_constr "typedecl" (plugins.ml[]..[])
                                    []
                                [
                                  <case>
                                    pattern (plugins.ml[]..[])
                                      Ppat_variant "TyDcl"
                                      Some
                                        pattern (plugins.ml[]..[])
                                          Ppat_tuple
                                          [
                                            pattern (plugins.ml[]..[])
                                              Ppat_any
                                            pattern (plugins.ml[]..[])
                                              Ppat_any
                                            pattern (plugins.ml[]..[])
                                              Ppat_variant "TyEq"
                                              Some
                                                pattern (plugins.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_any
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_variant "PolyEq"
                                                      Some
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_var "t" (plugins.ml[]..[])
                                                  ]
                                            pattern (plugins.ml[]..[])
                                              Ppat_any
                                          ]
                                    expression (plugins.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "branches" (plugins.ml[]..[])
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "Ctyp.view_variant" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "t" (plugins.ml[]..[])
                                            ]
                                      ]
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "List.iter" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_variant "variant"
                                                    Some
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_var "s" (plugins.ml[]..[])
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_var "ls" (plugins.ml[]..[])
                                                        ]
                                                  expression (plugins.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_var "arity" (plugins.ml[]..[])
                                                        expression (plugins.ml[]..[])
                                                          Pexp_apply
                                                          expression (plugins.ml[]..[])
                                                            Pexp_ident "List.length" (plugins.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (plugins.ml[]..[])
                                                                Pexp_ident "ls" (plugins.ml[]..[])
                                                          ]
                                                    ]
                                                    expression (plugins.ml[]..[])
                                                      Pexp_apply
                                                      expression (plugins.ml[]..[])
                                                        Pexp_try
                                                        expression (plugins.ml[]..[])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_var "v" (plugins.ml[]..[])
                                                              expression (plugins.ml[]..[])
                                                                Pexp_apply
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "Hashtbl.find" (plugins.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "tbl" (plugins.ml[]..[])
                                                                  <label> ""
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "s" (plugins.ml[]..[])
                                                                ]
                                                          ]
                                                          expression (plugins.ml[]..[])
                                                            Pexp_function
                                                            [
                                                              <case>
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_construct "()" (plugins.ml[]..[])
                                                                  None
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ifthenelse
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "<>" (plugins.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (plugins.ml[]..[])
  Pexp_ident "v" (plugins.ml[]..[])
                                                                      <label> ""
expression (plugins.ml[]..[])
  Pexp_ident "arity" (plugins.ml[]..[])
                                                                    ]
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "failwithf" (plugins.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (plugins.ml[]..[])
  Pexp_constant Const_string("%s has diffireent arities",None)
                                                                      <label> ""
expression (plugins.ml[]..[])
  Pexp_ident "s" (plugins.ml[]..[])
                                                                    ]
                                                                  None
                                                            ]
                                                        [
                                                          <case>
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_construct "Not_found" (plugins.ml[]..[])
                                                              None
                                                            expression (plugins.ml[]..[])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_construct "()" (plugins.ml[]..[])
                                                                    None
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "Hashtbl.add" (plugins.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (plugins.ml[]..[])
  Pexp_ident "tbl" (plugins.ml[]..[])
                                                                      <label> ""
expression (plugins.ml[]..[])
  Pexp_ident "s" (plugins.ml[]..[])
                                                                      <label> ""
expression (plugins.ml[]..[])
  Pexp_ident "arity" (plugins.ml[]..[])
                                                                    ]
                                                              ]
                                                        ]
                                                      [
                                                        <label> ""
                                                          expression (plugins.ml[]..[])
                                                            Pexp_construct "()" (plugins.ml[]..[])
                                                            None
                                                      ]
                                                <case>
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_any
                                                  expression (plugins.ml[]..[])
                                                    Pexp_construct "()" (plugins.ml[]..[])
                                                    None
                                              ]
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "branches" (plugins.ml[]..[])
                                        ]
                                  <case>
                                    pattern (plugins.ml[]..[])
                                      Ppat_any
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "failwithf" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_constant Const_string("generate mtyps %s",None)
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "ObjsN.dump_typedecl" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "ty" (plugins.ml[]..[])
                                            ]
                                      ]
                                ]
                          ]
                    ]
                    expression (plugins.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (plugins.ml[]..[])
                            Ppat_any
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "List.iter" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (plugins.ml[]..[])
                                        Ppat_variant "Mutual"
                                        Some
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "tys" (plugins.ml[]..[])
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "List.iter" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "aux" (plugins.ml[]..[])
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "tys" (plugins.ml[]..[])
                                        ]
                                    <case>
                                      pattern (plugins.ml[]..[])
                                        Ppat_variant "Single"
                                        Some
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "t" (plugins.ml[]..[])
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "aux" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "t" (plugins.ml[]..[])
                                        ]
                                  ]
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_ident "mtyps" (plugins.ml[]..[])
                            ]
                      ]
                      expression (plugins.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (plugins.ml[]..[])
                              Ppat_var "case" (plugins.ml[]..[])
                            expression (plugins.ml[]..[])
                              Pexp_apply
                              expression (plugins.ml[]..[])
                                Pexp_ident "Hashtbl.fold" (plugins.ml[]..[])
                              [
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (plugins.ml[]..[])
                                          Ppat_var "key" (plugins.ml[]..[])
                                        expression (plugins.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (plugins.ml[]..[])
                                                Ppat_var "arity" (plugins.ml[]..[])
                                              expression (plugins.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (plugins.ml[]..[])
                                                      Ppat_var "acc" (plugins.ml[]..[])
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ifthenelse
                                                      expression (plugins.ml[]..[])
                                                        Pexp_apply
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "=" (plugins.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident "arity" (plugins.ml[]..[])
                                                          <label> ""
                                                            expression (plugins.ml[]..[])
                                                              Pexp_constant Const_int 1
                                                        ]
                                                      expression (plugins.ml[]..[])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_var "case" (plugins.ml[]..[])
                                                            expression (plugins.ml[]..[])
                                                              Pexp_coerce
                                                              expression (plugins.ml[]..[])
                                                                Pexp_variant "Case"
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (plugins.ml[]..[])
Pexp_variant "App"
Some
  expression (plugins.ml[]..[])
    Pexp_tuple
    [
      expression (plugins.ml[]..[])
        Pexp_variant "Vrn"
        Some
          expression (plugins.ml[]..[])
            Pexp_ident "key" (plugins.ml[]..[])
      expression (plugins.ml[]..[])
        Pexp_variant "Lid"
        Some
          expression (plugins.ml[]..[])
            Pexp_constant Const_string("_loc",None)
    ]
                                                                      expression (plugins.ml[]..[])
Pexp_variant "Lid"
Some
  expression (plugins.ml[]..[])
    Pexp_constant Const_string("_loc",None)
                                                                    ]
                                                              None
                                                              core_type (plugins.ml[]..[])
                                                                Ptyp_constr "Astfn.case" (plugins.ml[]..[])
                                                                []
                                                        ]
                                                        expression (plugins.ml[]..[])
                                                          Pexp_match
                                                          expression (plugins.ml[]..[])
                                                            Pexp_ident "acc" (plugins.ml[]..[])
                                                          [
                                                            <case>
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_construct "None" (plugins.ml[]..[])
                                                                None
                                                              expression (plugins.ml[]..[])
                                                                Pexp_construct "Some" (plugins.ml[]..[])
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "case" (plugins.ml[]..[])
                                                            <case>
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_construct "Some" (plugins.ml[]..[])
                                                                Some
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_var "acc" (plugins.ml[]..[])
                                                              expression (plugins.ml[]..[])
                                                                Pexp_construct "Some" (plugins.ml[]..[])
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_variant "Bar"
                                                                      Some
expression (plugins.ml[]..[])
  Pexp_tuple
  [
    expression (plugins.ml[]..[])
      Pexp_ident "case" (plugins.ml[]..[])
    expression (plugins.ml[]..[])
      Pexp_ident "acc" (plugins.ml[]..[])
  ]
                                                                    None
                                                                    core_type (plugins.ml[]..[])
                                                                      Ptyp_constr "Astfn.case" (plugins.ml[]..[])
                                                                      []
                                                          ]
                                                      Some
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ifthenelse
                                                          expression (plugins.ml[]..[])
                                                            Pexp_apply
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident ">" (plugins.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "arity" (plugins.ml[]..[])
                                                              <label> ""
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_constant Const_int 1
                                                            ]
                                                          expression (plugins.ml[]..[])
                                                            Pexp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_var "pats" (plugins.ml[]..[])
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_construct "::" (plugins.ml[]..[])
                                                                  Some
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (plugins.ml[]..[])
  Pexp_coerce
  expression (plugins.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (plugins.ml[]..[])
        Pexp_constant Const_string("_loc",None)
  None
  core_type (plugins.ml[]..[])
    Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
    []
expression (plugins.ml[]..[])
  Pexp_apply
  expression (plugins.ml[]..[])
    Pexp_ident "Listf.init" (plugins.ml[]..[])
  [
    <label> ""
      expression (plugins.ml[]..[])
        Pexp_apply
        expression (plugins.ml[]..[])
          Pexp_ident "-" (plugins.ml[]..[])
        [
          <label> ""
            expression (plugins.ml[]..[])
              Pexp_ident "arity" (plugins.ml[]..[])
          <label> ""
            expression (plugins.ml[]..[])
              Pexp_constant Const_int 1
        ]
    <label> ""
      expression (plugins.ml[]..[])
        Pexp_apply
        expression (plugins.ml[]..[])
          Pexp_ident "const" (plugins.ml[]..[])
        [
          <label> ""
            expression (plugins.ml[]..[])
              Pexp_coerce
              expression (plugins.ml[]..[])
                Pexp_variant "Any"
                None
              None
              core_type (plugins.ml[]..[])
                Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
                []
        ]
  ]
                                                                      ]
                                                            ]
                                                            expression (plugins.ml[]..[])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_var "case" (plugins.ml[]..[])
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_variant "Case"
                                                                      Some
expression (plugins.ml[]..[])
  Pexp_tuple
  [
    expression (plugins.ml[]..[])
      Pexp_variant "App"
      Some
        expression (plugins.ml[]..[])
          Pexp_tuple
          [
            expression (plugins.ml[]..[])
              Pexp_variant "Vrn"
              Some
                expression (plugins.ml[]..[])
                  Pexp_ident "key" (plugins.ml[]..[])
            expression (plugins.ml[]..[])
              Pexp_coerce
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "tuple_com" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "pats" (plugins.ml[]..[])
                ]
              None
              core_type (plugins.ml[]..[])
                Ptyp_constr "Astfn.pat" (plugins.ml[]..[])
                []
          ]
    expression (plugins.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (plugins.ml[]..[])
          Pexp_constant Const_string("_loc",None)
  ]
                                                                    None
                                                                    core_type (plugins.ml[]..[])
                                                                      Ptyp_constr "Astfn.case" (plugins.ml[]..[])
                                                                      []
                                                              ]
                                                              expression (plugins.ml[]..[])
                                                                Pexp_match
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_ident "acc" (plugins.ml[]..[])
                                                                [
                                                                  <case>
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_construct "None" (plugins.ml[]..[])
                                                                      None
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_construct "Some" (plugins.ml[]..[])
                                                                      Some
expression (plugins.ml[]..[])
  Pexp_ident "case" (plugins.ml[]..[])
                                                                  <case>
                                                                    pattern (plugins.ml[]..[])
                                                                      Ppat_construct "Some" (plugins.ml[]..[])
                                                                      Some
pattern (plugins.ml[]..[])
  Ppat_var "acc" (plugins.ml[]..[])
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_construct "Some" (plugins.ml[]..[])
                                                                      Some
expression (plugins.ml[]..[])
  Pexp_coerce
  expression (plugins.ml[]..[])
    Pexp_variant "Bar"
    Some
      expression (plugins.ml[]..[])
        Pexp_tuple
        [
          expression (plugins.ml[]..[])
            Pexp_ident "case" (plugins.ml[]..[])
          expression (plugins.ml[]..[])
            Pexp_ident "acc" (plugins.ml[]..[])
        ]
  None
  core_type (plugins.ml[]..[])
    Ptyp_constr "Astfn.case" (plugins.ml[]..[])
    []
                                                                ]
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_apply
                                                              expression (plugins.ml[]..[])
                                                                Pexp_ident "failwithf" (plugins.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_constant Const_string("arity=0 key:%s",None)
                                                                <label> ""
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "key" (plugins.ml[]..[])
                                                              ]
                                                ]
                                          ]
                                    ]
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "tbl" (plugins.ml[]..[])
                                <label> ""
                                  expression (plugins.ml[]..[])
                                    Pexp_construct "None" (plugins.ml[]..[])
                                    None
                              ]
                        ]
                        expression (plugins.ml[]..[])
                          Pexp_match
                          expression (plugins.ml[]..[])
                            Pexp_ident "case" (plugins.ml[]..[])
                          [
                            <case>
                              pattern (plugins.ml[]..[])
                                Ppat_construct "Some" (plugins.ml[]..[])
                                Some
                                  pattern (plugins.ml[]..[])
                                    Ppat_var "case" (plugins.ml[]..[])
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_variant "Value"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Negative"
                                          None
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Bind"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("loc_of",None)
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Fun"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_ident "case" (plugins.ml[]..[])
                                              ]
                                      ]
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "Astfn.stru" (plugins.ml[]..[])
                                  []
                            <case>
                              pattern (plugins.ml[]..[])
                                Ppat_construct "None" (plugins.ml[]..[])
                                None
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "failwithf" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("PluginsN.generate null case",None)
                                ]
                          ]
                core_type (plugins.ml[]..[])
                  Ptyp_constr "stru" (plugins.ml[]..[])
                  []
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "Typehook.register" (plugins.ml[]..[])
      [
        <label> "filter"
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_var "s" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "not" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "List.mem" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "s" (plugins.ml[]..[])
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_construct "::" (plugins.ml[]..[])
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("loc",None)
                                    expression (plugins.ml[]..[])
                                      Pexp_construct "[]" (plugins.ml[]..[])
                                      None
                                  ]
                        ]
                  ]
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("GenLoc",None)
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "some" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "generate" (plugins.ml[]..[])
                ]
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "generate" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_constraint
                pattern (plugins.ml[]..[])
                  Ppat_var "mtyps" (plugins.ml[]..[])
                core_type (plugins.ml[]..[])
                  Ptyp_constr "mtyps" (plugins.ml[]..[])
                  []
              expression (plugins.ml[]..[])
                Pexp_constraint
                expression (plugins.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (plugins.ml[]..[])
                        Ppat_var "tys" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_constraint
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "Listf.concat_map" (plugins.ml[]..[])
                          [
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (plugins.ml[]..[])
                                      Ppat_var "x" (plugins.ml[]..[])
                                    expression (plugins.ml[]..[])
                                      Pexp_match
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "x" (plugins.ml[]..[])
                                      [
                                        <case>
                                          pattern (plugins.ml[]..[])
                                            Ppat_variant "Mutual"
                                            Some
                                              pattern (plugins.ml[]..[])
                                                Ppat_var "tys" (plugins.ml[]..[])
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "List.map" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_constraint
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_tuple
                                                          [
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_var "x" (plugins.ml[]..[])
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_any
                                                          ]
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "named_type" (plugins.ml[]..[])
                                                          []
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "x" (plugins.ml[]..[])
                                                  ]
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "tys" (plugins.ml[]..[])
                                            ]
                                        <case>
                                          pattern (plugins.ml[]..[])
                                            Ppat_variant "Single"
                                            Some
                                              pattern (plugins.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_var "x" (plugins.ml[]..[])
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_any
                                                ]
                                          expression (plugins.ml[]..[])
                                            Pexp_construct "::" (plugins.ml[]..[])
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                  expression (plugins.ml[]..[])
                                                    Pexp_construct "[]" (plugins.ml[]..[])
                                                    None
                                                ]
                                      ]
                                ]
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "mtyps" (plugins.ml[]..[])
                          ]
                        core_type (plugins.ml[]..[])
                          Ptyp_constr "list" (plugins.ml[]..[])
                          [
                            core_type (plugins.ml[]..[])
                              Ptyp_constr "string" (plugins.ml[]..[])
                              []
                          ]
                  ]
                  expression (plugins.ml[]..[])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (plugins.ml[]..[])
                          Ppat_var "typedecl" (plugins.ml[]..[])
                        expression (plugins.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (plugins.ml[]..[])
                                Ppat_var "x" (plugins.ml[]..[])
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "|>" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "|>" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "tys" (plugins.ml[]..[])
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_apply
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "List.map" (plugins.ml[]..[])
                                            [
                                              <label> ""
                                                expression (plugins.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_var "x" (plugins.ml[]..[])
                                                      expression (plugins.ml[]..[])
                                                        Pexp_apply
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "@@" (plugins.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident "uid" (plugins.ml[]..[])
                                                          <label> ""
                                                            expression (plugins.ml[]..[])
                                                              Pexp_apply
                                                              expression (plugins.ml[]..[])
                                                                Pexp_ident "String.capitalize" (plugins.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                              ]
                                                        ]
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "bar_of_list" (plugins.ml[]..[])
                                ]
                          ]
                          expression (plugins.ml[]..[])
                            Pexp_coerce
                            expression (plugins.ml[]..[])
                              Pexp_variant "Type"
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_variant "TyDcl"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("t",None)
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Some"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_variant "Quote"
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (plugins.ml[]..[])
                                                      Pexp_variant "Normal"
                                                      None
                                                    expression (plugins.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (plugins.ml[]..[])
                                                          Pexp_constant Const_string("a",None)
                                                  ]
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "TyRepr"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Negative"
                                                  None
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Sum"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_coerce
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "x" (plugins.ml[]..[])
                                                      None
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Astfn.or_ctyp" (plugins.ml[]..[])
                                                        []
                                              ]
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "None"
                                          None
                                      ]
                            None
                            core_type (plugins.ml[]..[])
                              Ptyp_constr "Astfn.stru" (plugins.ml[]..[])
                              []
                    ]
                    expression (plugins.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (plugins.ml[]..[])
                            Ppat_var "to_string" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (plugins.ml[]..[])
                                  Ppat_var "case" (plugins.ml[]..[])
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_ident "bar_of_list" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_apply
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "List.map" (plugins.ml[]..[])
                                        [
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_var "x" (plugins.ml[]..[])
                                                  expression (plugins.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_var "u" (plugins.ml[]..[])
                                                        expression (plugins.ml[]..[])
                                                          Pexp_apply
                                                          expression (plugins.ml[]..[])
                                                            Pexp_ident "String.capitalize" (plugins.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (plugins.ml[]..[])
                                                                Pexp_ident "x" (plugins.ml[]..[])
                                                          ]
                                                    ]
                                                    expression (plugins.ml[]..[])
                                                      Pexp_coerce
                                                      expression (plugins.ml[]..[])
                                                        Pexp_variant "Case"
                                                        Some
                                                          expression (plugins.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (plugins.ml[]..[])
                                                                Pexp_variant "Uid"
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "u" (plugins.ml[]..[])
                                                              expression (plugins.ml[]..[])
                                                                Pexp_variant "Str"
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                            ]
                                                      None
                                                      core_type (plugins.ml[]..[])
                                                        Ptyp_constr "Astfn.case" (plugins.ml[]..[])
                                                        []
                                              ]
                                          <label> ""
                                            expression (plugins.ml[]..[])
                                              Pexp_ident "tys" (plugins.ml[]..[])
                                        ]
                                  ]
                            ]
                            expression (plugins.ml[]..[])
                              Pexp_coerce
                              expression (plugins.ml[]..[])
                                Pexp_variant "Value"
                                Some
                                  expression (plugins.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (plugins.ml[]..[])
                                        Pexp_variant "Negative"
                                        None
                                      expression (plugins.ml[]..[])
                                        Pexp_variant "Bind"
                                        Some
                                          expression (plugins.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (plugins.ml[]..[])
                                                Pexp_variant "Lid"
                                                Some
                                                  expression (plugins.ml[]..[])
                                                    Pexp_constant Const_string("to_string",None)
                                              expression (plugins.ml[]..[])
                                                Pexp_variant "Fun"
                                                Some
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "case" (plugins.ml[]..[])
                                            ]
                                    ]
                              None
                              core_type (plugins.ml[]..[])
                                Ptyp_constr "Astfn.stru" (plugins.ml[]..[])
                                []
                      ]
                      expression (plugins.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (plugins.ml[]..[])
                              Ppat_var "of_string" (plugins.ml[]..[])
                            expression (plugins.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (plugins.ml[]..[])
                                    Ppat_var "case" (plugins.ml[]..[])
                                  expression (plugins.ml[]..[])
                                    Pexp_apply
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "|>" (plugins.ml[]..[])
                                    [
                                      <label> ""
                                        expression (plugins.ml[]..[])
                                          Pexp_apply
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "|>" (plugins.ml[]..[])
                                          [
                                            <label> ""
                                              expression (plugins.ml[]..[])
                                                Pexp_ident "tys" (plugins.ml[]..[])
                                            <label> ""
                                              expression (plugins.ml[]..[])
                                                Pexp_apply
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "List.map" (plugins.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (plugins.ml[]..[])
                                                      Pexp_function
                                                      [
                                                        <case>
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_var "x" (plugins.ml[]..[])
                                                          expression (plugins.ml[]..[])
                                                            Pexp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_var "u" (plugins.ml[]..[])
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "String.capitalize" (plugins.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (plugins.ml[]..[])
Pexp_ident "x" (plugins.ml[]..[])
                                                                  ]
                                                            ]
                                                            expression (plugins.ml[]..[])
                                                              Pexp_coerce
                                                              expression (plugins.ml[]..[])
                                                                Pexp_variant "Case"
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (plugins.ml[]..[])
Pexp_variant "Str"
Some
  expression (plugins.ml[]..[])
    Pexp_ident "x" (plugins.ml[]..[])
                                                                      expression (plugins.ml[]..[])
Pexp_variant "Uid"
Some
  expression (plugins.ml[]..[])
    Pexp_ident "u" (plugins.ml[]..[])
                                                                    ]
                                                              None
                                                              core_type (plugins.ml[]..[])
                                                                Ptyp_constr "Astfn.case" (plugins.ml[]..[])
                                                                []
                                                      ]
                                                ]
                                          ]
                                      <label> ""
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "bar_of_list" (plugins.ml[]..[])
                                    ]
                              ]
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_variant "Value"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Negative"
                                          None
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Bind"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("of_string",None)
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Fun"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_variant "Bar"
                                                      Some
                                                        expression (plugins.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (plugins.ml[]..[])
                                                              Pexp_ident "case" (plugins.ml[]..[])
                                                            expression (plugins.ml[]..[])
                                                              Pexp_variant "Case"
                                                              Some
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_variant "Any"
                                                                      None
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_variant "App"
                                                                      Some
expression (plugins.ml[]..[])
  Pexp_tuple
  [
    expression (plugins.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (plugins.ml[]..[])
          Pexp_constant Const_string("failwith",None)
    expression (plugins.ml[]..[])
      Pexp_variant "App"
      Some
        expression (plugins.ml[]..[])
          Pexp_tuple
          [
            expression (plugins.ml[]..[])
              Pexp_variant "App"
              Some
                expression (plugins.ml[]..[])
                  Pexp_tuple
                  [
                    expression (plugins.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("^",None)
                    expression (plugins.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("__MODULE__",None)
                  ]
            expression (plugins.ml[]..[])
              Pexp_variant "App"
              Some
                expression (plugins.ml[]..[])
                  Pexp_tuple
                  [
                    expression (plugins.ml[]..[])
                      Pexp_variant "App"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_tuple
                          [
                            expression (plugins.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string("^",None)
                            expression (plugins.ml[]..[])
                              Pexp_variant "Str"
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string(".",None)
                          ]
                    expression (plugins.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("__BIND__",None)
                  ]
          ]
  ]
                                                                  ]
                                                          ]
                                              ]
                                      ]
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "Astfn.stru" (plugins.ml[]..[])
                                  []
                        ]
                        expression (plugins.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (plugins.ml[]..[])
                                Ppat_var "tags" (plugins.ml[]..[])
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "List.map" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (plugins.ml[]..[])
                                            Ppat_var "x" (plugins.ml[]..[])
                                          expression (plugins.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_var "u" (plugins.ml[]..[])
                                                expression (plugins.ml[]..[])
                                                  Pexp_apply
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "String.capitalize" (plugins.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "x" (plugins.ml[]..[])
                                                  ]
                                            ]
                                            expression (plugins.ml[]..[])
                                              Pexp_coerce
                                              expression (plugins.ml[]..[])
                                                Pexp_variant "Value"
                                                Some
                                                  expression (plugins.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (plugins.ml[]..[])
                                                        Pexp_variant "Negative"
                                                        None
                                                      expression (plugins.ml[]..[])
                                                        Pexp_variant "Bind"
                                                        Some
                                                          expression (plugins.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (plugins.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                              expression (plugins.ml[]..[])
                                                                Pexp_variant "Constraint"
                                                                Some
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (plugins.ml[]..[])
Pexp_variant "Uid"
Some
  expression (plugins.ml[]..[])
    Pexp_ident "u" (plugins.ml[]..[])
                                                                      expression (plugins.ml[]..[])
Pexp_variant "App"
Some
  expression (plugins.ml[]..[])
    Pexp_tuple
    [
      expression (plugins.ml[]..[])
        Pexp_variant "Lid"
        Some
          expression (plugins.ml[]..[])
            Pexp_constant Const_string("t",None)
      expression (plugins.ml[]..[])
        Pexp_variant "Lid"
        Some
          expression (plugins.ml[]..[])
            Pexp_ident "x" (plugins.ml[]..[])
    ]
                                                                    ]
                                                            ]
                                                    ]
                                              None
                                              core_type (plugins.ml[]..[])
                                                Ptyp_constr "Astfn.stru" (plugins.ml[]..[])
                                                []
                                      ]
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "tys" (plugins.ml[]..[])
                                ]
                          ]
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "sem_of_list" (plugins.ml[]..[])
                            [
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_construct "::" (plugins.ml[]..[])
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_ident "typedecl" (plugins.ml[]..[])
                                        expression (plugins.ml[]..[])
                                          Pexp_construct "::" (plugins.ml[]..[])
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "to_string" (plugins.ml[]..[])
                                                expression (plugins.ml[]..[])
                                                  Pexp_construct "::" (plugins.ml[]..[])
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "of_string" (plugins.ml[]..[])
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "tags" (plugins.ml[]..[])
                                                      ]
                                              ]
                                      ]
                            ]
                core_type (plugins.ml[]..[])
                  Ptyp_constr "stru" (plugins.ml[]..[])
                  []
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "Typehook.register" (plugins.ml[]..[])
      [
        <label> "filter"
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_var "s" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "@@" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_ident "not" (plugins.ml[]..[])
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "List.mem" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "s" (plugins.ml[]..[])
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_construct "::" (plugins.ml[]..[])
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("loc",None)
                                    expression (plugins.ml[]..[])
                                      Pexp_construct "::" (plugins.ml[]..[])
                                      Some
                                        expression (plugins.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("ant",None)
                                            expression (plugins.ml[]..[])
                                              Pexp_construct "::" (plugins.ml[]..[])
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("quot",None)
                                                    expression (plugins.ml[]..[])
                                                      Pexp_construct "[]" (plugins.ml[]..[])
                                                      None
                                                  ]
                                          ]
                                  ]
                        ]
                  ]
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("DynAst",None)
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "some" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "generate" (plugins.ml[]..[])
                ]
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "generate" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_constraint
                pattern (plugins.ml[]..[])
                  Ppat_var "mtyps" (plugins.ml[]..[])
                core_type (plugins.ml[]..[])
                  Ptyp_constr "mtyps" (plugins.ml[]..[])
                  []
              expression (plugins.ml[]..[])
                Pexp_constraint
                expression (plugins.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (plugins.ml[]..[])
                        Ppat_var "aux" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (plugins.ml[]..[])
                              Ppat_constraint
                              pattern (plugins.ml[]..[])
                                Ppat_var "f" (plugins.ml[]..[])
                              core_type (plugins.ml[]..[])
                                Ptyp_constr "string" (plugins.ml[]..[])
                                []
                            expression (plugins.ml[]..[])
                              Pexp_constraint
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_variant "Value"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Negative"
                                          None
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Bind"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_apply
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "^" (plugins.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (plugins.ml[]..[])
                                                            Pexp_constant Const_string("map_",None)
                                                        <label> ""
                                                          expression (plugins.ml[]..[])
                                                            Pexp_ident "f" (plugins.ml[]..[])
                                                      ]
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Fun"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_variant "Case"
                                                      Some
                                                        expression (plugins.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (plugins.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_constant Const_string("f",None)
                                                            expression (plugins.ml[]..[])
                                                              Pexp_variant "Obj"
                                                              Some
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_variant "Sem"
                                                                  Some
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (plugins.ml[]..[])
  Pexp_variant "InheritAs"
  Some
    expression (plugins.ml[]..[])
      Pexp_tuple
      [
        expression (plugins.ml[]..[])
          Pexp_variant "Negative"
          None
        expression (plugins.ml[]..[])
          Pexp_variant "Lid"
          Some
            expression (plugins.ml[]..[])
              Pexp_constant Const_string("map",None)
        expression (plugins.ml[]..[])
          Pexp_variant "Lid"
          Some
            expression (plugins.ml[]..[])
              Pexp_constant Const_string("super",None)
      ]
expression (plugins.ml[]..[])
  Pexp_variant "CrMthS"
  Some
    expression (plugins.ml[]..[])
      Pexp_tuple
      [
        expression (plugins.ml[]..[])
          Pexp_variant "Lid"
          Some
            expression (plugins.ml[]..[])
              Pexp_ident "f" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_variant "Positive"
          None
        expression (plugins.ml[]..[])
          Pexp_variant "Negative"
          None
        expression (plugins.ml[]..[])
          Pexp_variant "Fun"
          Some
            expression (plugins.ml[]..[])
              Pexp_variant "Case"
              Some
                expression (plugins.ml[]..[])
                  Pexp_tuple
                  [
                    expression (plugins.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_constant Const_string("x",None)
                    expression (plugins.ml[]..[])
                      Pexp_variant "App"
                      Some
                        expression (plugins.ml[]..[])
                          Pexp_tuple
                          [
                            expression (plugins.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_constant Const_string("f",None)
                            expression (plugins.ml[]..[])
                              Pexp_variant "App"
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (plugins.ml[]..[])
                                      Pexp_variant "Send"
                                      Some
                                        expression (plugins.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (plugins.ml[]..[])
                                              Pexp_variant "Lid"
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_constant Const_string("super",None)
                                            expression (plugins.ml[]..[])
                                              Pexp_variant "Lid"
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "f" (plugins.ml[]..[])
                                          ]
                                    expression (plugins.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (plugins.ml[]..[])
                                          Pexp_constant Const_string("x",None)
                                  ]
                          ]
                  ]
      ]
                                                                      ]
                                                          ]
                                              ]
                                      ]
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "Astfn.stru" (plugins.ml[]..[])
                                  []
                              core_type (plugins.ml[]..[])
                                Ptyp_constr "stru" (plugins.ml[]..[])
                                []
                        ]
                  ]
                  expression (plugins.ml[]..[])
                    Pexp_apply
                    expression (plugins.ml[]..[])
                      Pexp_ident "stru_from_ty" (plugins.ml[]..[])
                    [
                      <label> "f"
                        expression (plugins.ml[]..[])
                          Pexp_ident "aux" (plugins.ml[]..[])
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_ident "mtyps" (plugins.ml[]..[])
                    ]
                core_type (plugins.ml[]..[])
                  Ptyp_constr "stru" (plugins.ml[]..[])
                  []
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "Typehook.register" (plugins.ml[]..[])
      [
        <label> "filter"
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_any
                expression (plugins.ml[]..[])
                  Pexp_construct "true" (plugins.ml[]..[])
                  None
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("MapWrapper",None)
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "some" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "generate" (plugins.ml[]..[])
                ]
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "generate" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_constraint
                pattern (plugins.ml[]..[])
                  Ppat_var "mtyps" (plugins.ml[]..[])
                core_type (plugins.ml[]..[])
                  Ptyp_constr "mtyps" (plugins.ml[]..[])
                  []
              expression (plugins.ml[]..[])
                Pexp_constraint
                expression (plugins.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (plugins.ml[]..[])
                        Ppat_var "aux" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (plugins.ml[]..[])
                              Ppat_constraint
                              pattern (plugins.ml[]..[])
                                Ppat_var "f" (plugins.ml[]..[])
                              core_type (plugins.ml[]..[])
                                Ptyp_constr "string" (plugins.ml[]..[])
                                []
                            expression (plugins.ml[]..[])
                              Pexp_constraint
                              expression (plugins.ml[]..[])
                                Pexp_coerce
                                expression (plugins.ml[]..[])
                                  Pexp_variant "Value"
                                  Some
                                    expression (plugins.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Negative"
                                          None
                                        expression (plugins.ml[]..[])
                                          Pexp_variant "Bind"
                                          Some
                                            expression (plugins.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_apply
                                                      expression (plugins.ml[]..[])
                                                        Pexp_ident "^" (plugins.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (plugins.ml[]..[])
                                                            Pexp_constant Const_string("dump_",None)
                                                        <label> ""
                                                          expression (plugins.ml[]..[])
                                                            Pexp_ident "f" (plugins.ml[]..[])
                                                      ]
                                                expression (plugins.ml[]..[])
                                                  Pexp_variant "App"
                                                  Some
                                                    expression (plugins.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "Dot"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_variant "Uid"
                                                                  Some
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_constant Const_string("Formatf",None)
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_constant Const_string("to_string",None)
                                                              ]
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "Send"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_constant Const_string("dump",None)
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "f" (plugins.ml[]..[])
                                                              ]
                                                      ]
                                              ]
                                      ]
                                None
                                core_type (plugins.ml[]..[])
                                  Ptyp_constr "Astfn.stru" (plugins.ml[]..[])
                                  []
                              core_type (plugins.ml[]..[])
                                Ptyp_constr "stru" (plugins.ml[]..[])
                                []
                        ]
                  ]
                  expression (plugins.ml[]..[])
                    Pexp_apply
                    expression (plugins.ml[]..[])
                      Pexp_ident "sem" (plugins.ml[]..[])
                    [
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_coerce
                          expression (plugins.ml[]..[])
                            Pexp_variant "Value"
                            Some
                              expression (plugins.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (plugins.ml[]..[])
                                    Pexp_variant "Negative"
                                    None
                                  expression (plugins.ml[]..[])
                                    Pexp_variant "Bind"
                                    Some
                                      expression (plugins.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (plugins.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_constant Const_string("dump",None)
                                          expression (plugins.ml[]..[])
                                            Pexp_variant "New"
                                            Some
                                              expression (plugins.ml[]..[])
                                                Pexp_variant "Lid"
                                                Some
                                                  expression (plugins.ml[]..[])
                                                    Pexp_constant Const_string("print",None)
                                        ]
                                ]
                          None
                          core_type (plugins.ml[]..[])
                            Ptyp_constr "Astfn.stru" (plugins.ml[]..[])
                            []
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_apply
                          expression (plugins.ml[]..[])
                            Pexp_ident "stru_from_ty" (plugins.ml[]..[])
                          [
                            <label> "f"
                              expression (plugins.ml[]..[])
                                Pexp_ident "aux" (plugins.ml[]..[])
                            <label> ""
                              expression (plugins.ml[]..[])
                                Pexp_ident "mtyps" (plugins.ml[]..[])
                          ]
                    ]
                core_type (plugins.ml[]..[])
                  Ptyp_constr "stru" (plugins.ml[]..[])
                  []
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "Typehook.register" (plugins.ml[]..[])
      [
        <label> "filter"
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_var "s" (plugins.ml[]..[])
                expression (plugins.ml[]..[])
                  Pexp_apply
                  expression (plugins.ml[]..[])
                    Pexp_ident "not" (plugins.ml[]..[])
                  [
                    <label> ""
                      expression (plugins.ml[]..[])
                        Pexp_apply
                        expression (plugins.ml[]..[])
                          Pexp_ident "List.mem" (plugins.ml[]..[])
                        [
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_ident "s" (plugins.ml[]..[])
                          <label> ""
                            expression (plugins.ml[]..[])
                              Pexp_construct "::" (plugins.ml[]..[])
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("loc",None)
                                    expression (plugins.ml[]..[])
                                      Pexp_construct "::" (plugins.ml[]..[])
                                      Some
                                        expression (plugins.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (plugins.ml[]..[])
                                              Pexp_constant Const_string("ant",None)
                                            expression (plugins.ml[]..[])
                                              Pexp_construct "::" (plugins.ml[]..[])
                                              Some
                                                expression (plugins.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (plugins.ml[]..[])
                                                      Pexp_constant Const_string("quot",None)
                                                    expression (plugins.ml[]..[])
                                                      Pexp_construct "[]" (plugins.ml[]..[])
                                                      None
                                                  ]
                                          ]
                                  ]
                        ]
                  ]
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("PrintWrapper",None)
              expression (plugins.ml[]..[])
                Pexp_apply
                expression (plugins.ml[]..[])
                  Pexp_ident "some" (plugins.ml[]..[])
                [
                  <label> ""
                    expression (plugins.ml[]..[])
                      Pexp_ident "generate" (plugins.ml[]..[])
                ]
            ]
      ]
  structure_item (plugins.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (plugins.ml[]..[])
          Ppat_var "generate" (plugins.ml[]..[])
        expression (plugins.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (plugins.ml[]..[])
                Ppat_constraint
                pattern (plugins.ml[]..[])
                  Ppat_var "mtyps" (plugins.ml[]..[])
                core_type (plugins.ml[]..[])
                  Ptyp_constr "mtyps" (plugins.ml[]..[])
                  []
              expression (plugins.ml[]..[])
                Pexp_constraint
                expression (plugins.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (plugins.ml[]..[])
                        Ppat_var "f" (plugins.ml[]..[])
                      expression (plugins.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (plugins.ml[]..[])
                              Ppat_tuple
                              [
                                pattern (plugins.ml[]..[])
                                  Ppat_var "name" (plugins.ml[]..[])
                                pattern (plugins.ml[]..[])
                                  Ppat_var "ty" (plugins.ml[]..[])
                              ]
                            expression (plugins.ml[]..[])
                              Pexp_ifthenelse
                              expression (plugins.ml[]..[])
                                Pexp_apply
                                expression (plugins.ml[]..[])
                                  Pexp_ident "<>" (plugins.ml[]..[])
                                [
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "name" (plugins.ml[]..[])
                                  <label> ""
                                    expression (plugins.ml[]..[])
                                      Pexp_constant Const_string("ant",None)
                                ]
                              expression (plugins.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (plugins.ml[]..[])
                                      Ppat_var "obj" (plugins.ml[]..[])
                                    expression (plugins.ml[]..[])
                                      Pexp_apply
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "@@" (plugins.ml[]..[])
                                      [
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_ident "ObjsN.map_row_field" (plugins.ml[]..[])
                                        <label> ""
                                          expression (plugins.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_constraint
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_variant "TyVrnOf"
                                                    Some
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_var "x" (plugins.ml[]..[])
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_variant "Lid"
                                                            Some
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_constant Const_string("loc",None)
                                                        ]
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "Astfn.row_field" (plugins.ml[]..[])
                                                    []
                                                expression (plugins.ml[]..[])
                                                  Pexp_coerce
                                                  expression (plugins.ml[]..[])
                                                    Pexp_variant "TyVrn"
                                                    Some
                                                      expression (plugins.ml[]..[])
                                                        Pexp_coerce
                                                        expression (plugins.ml[]..[])
                                                          Pexp_ident "x" (plugins.ml[]..[])
                                                        None
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Astfn.astring" (plugins.ml[]..[])
                                                          []
                                                  None
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "Astfn.row_field" (plugins.ml[]..[])
                                                    []
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_constraint
                                                  pattern (plugins.ml[]..[])
                                                    Ppat_variant "TyVrnOf"
                                                    Some
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_var "x" (plugins.ml[]..[])
                                                          pattern (plugins.ml[]..[])
                                                            Ppat_variant "Par"
                                                            Some
                                                              pattern (plugins.ml[]..[])
                                                                Ppat_variant "Sta"
                                                                Some
                                                                  pattern (plugins.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (plugins.ml[]..[])
Ppat_variant "Lid"
Some
  pattern (plugins.ml[]..[])
    Ppat_constant Const_string("loc",None)
                                                                      pattern (plugins.ml[]..[])
Ppat_var "y" (plugins.ml[]..[])
                                                                    ]
                                                        ]
                                                  core_type (plugins.ml[]..[])
                                                    Ptyp_constr "Astfn.row_field" (plugins.ml[]..[])
                                                    []
                                                expression (plugins.ml[]..[])
                                                  Pexp_match
                                                  expression (plugins.ml[]..[])
                                                    Pexp_ident "y" (plugins.ml[]..[])
                                                  [
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_constraint
                                                        pattern (plugins.ml[]..[])
                                                          Ppat_variant "Sta"
                                                          Some
                                                            pattern (plugins.ml[]..[])
                                                              Ppat_tuple
                                                              [
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_var "_loc" (plugins.ml[]..[])
                                                                pattern (plugins.ml[]..[])
                                                                  Ppat_any
                                                              ]
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                          []
                                                      expression (plugins.ml[]..[])
                                                        Pexp_coerce
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "TyVrnOf"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                                  None
                                                                  core_type (plugins.ml[]..[])
                                                                    Ptyp_constr "Astfn.astring" (plugins.ml[]..[])
                                                                    []
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_variant "Par"
                                                                  Some
                                                                    expression (plugins.ml[]..[])
                                                                      Pexp_ident "y" (plugins.ml[]..[])
                                                              ]
                                                        None
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Astfn.row_field" (plugins.ml[]..[])
                                                          []
                                                    <case>
                                                      pattern (plugins.ml[]..[])
                                                        Ppat_any
                                                      expression (plugins.ml[]..[])
                                                        Pexp_coerce
                                                        expression (plugins.ml[]..[])
                                                          Pexp_variant "TyVrnOf"
                                                          Some
                                                            expression (plugins.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "x" (plugins.ml[]..[])
                                                                  None
                                                                  core_type (plugins.ml[]..[])
                                                                    Ptyp_constr "Astfn.astring" (plugins.ml[]..[])
                                                                    []
                                                                expression (plugins.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (plugins.ml[]..[])
                                                                    Pexp_ident "y" (plugins.ml[]..[])
                                                                  None
                                                                  core_type (plugins.ml[]..[])
                                                                    Ptyp_constr "Astfn.ctyp" (plugins.ml[]..[])
                                                                    []
                                                              ]
                                                        None
                                                        core_type (plugins.ml[]..[])
                                                          Ptyp_constr "Astfn.row_field" (plugins.ml[]..[])
                                                          []
                                                  ]
                                              <case>
                                                pattern (plugins.ml[]..[])
                                                  Ppat_var "x" (plugins.ml[]..[])
                                                expression (plugins.ml[]..[])
                                                  Pexp_ident "x" (plugins.ml[]..[])
                                            ]
                                      ]
                                ]
                                expression (plugins.ml[]..[])
                                  Pexp_apply
                                  expression (plugins.ml[]..[])
                                    Pexp_send "typedecl"
                                    expression (plugins.ml[]..[])
                                      Pexp_ident "obj" (plugins.ml[]..[])
                                  [
                                    <label> ""
                                      expression (plugins.ml[]..[])
                                        Pexp_ident "ty" (plugins.ml[]..[])
                                  ]
                              Some
                                expression (plugins.ml[]..[])
                                  Pexp_ident "ty" (plugins.ml[]..[])
                        ]
                  ]
                  expression (plugins.ml[]..[])
                    Pexp_apply
                    expression (plugins.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (plugins.ml[]..[])
                            Ppat_var "x" (plugins.ml[]..[])
                          expression (plugins.ml[]..[])
                            Pexp_apply
                            expression (plugins.ml[]..[])
                              Pexp_ident "stru_from_mtyps" (plugins.ml[]..[])
                            [
                              <label> "f"
                                expression (plugins.ml[]..[])
                                  Pexp_ident "f" (plugins.ml[]..[])
                              <label> ""
                                expression (plugins.ml[]..[])
                                  Pexp_ident "x" (plugins.ml[]..[])
                            ]
                      ]
                    [
                      <label> ""
                        expression (plugins.ml[]..[])
                          Pexp_ident "mtyps" (plugins.ml[]..[])
                    ]
                core_type (plugins.ml[]..[])
                  Ptyp_constr "option" (plugins.ml[]..[])
                  [
                    core_type (plugins.ml[]..[])
                      Ptyp_constr "stru" (plugins.ml[]..[])
                      []
                  ]
          ]
    ]
  structure_item (plugins.ml[]..[])
    Pstr_eval
    expression (plugins.ml[]..[])
      Pexp_apply
      expression (plugins.ml[]..[])
        Pexp_ident "Typehook.register" (plugins.ml[]..[])
      [
        <label> "filter"
          expression (plugins.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (plugins.ml[]..[])
                  Ppat_any
                expression (plugins.ml[]..[])
                  Pexp_construct "true" (plugins.ml[]..[])
                  None
            ]
        <label> ""
          expression (plugins.ml[]..[])
            Pexp_tuple
            [
              expression (plugins.ml[]..[])
                Pexp_constant Const_string("LocType",None)
              expression (plugins.ml[]..[])
                Pexp_ident "generate" (plugins.ml[]..[])
            ]
      ]
]
