[
  structure_item (derive.ml[]..[])
    Pstr_open Fresh "Format" (derive.ml[]..[])
  structure_item (derive.ml[]..[])
    Pstr_open Fresh "Util" (derive.ml[]..[])
  structure_item (derive.ml[]..[])
    Pstr_open Fresh "Astn_util" (derive.ml[]..[])
  structure_item (derive.ml[]..[])
    Pstr_open Fresh "Astfn" (derive.ml[]..[])
  structure_item (derive.ml[]..[])
    Pstr_open Fresh "Fid" (derive.ml[]..[])
  structure_item (derive.ml[]..[])
    Pstr_open Fresh "Ctyp" (derive.ml[]..[])
  structure_item (derive.ml[]..[])
    Pstr_open Fresh "Sigs_util" (derive.ml[]..[])
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "check_valid" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (derive.ml[]..[])
                Ppat_var "str" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (derive.ml[]..[])
                      Ppat_var "len" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_apply
                      expression (derive.ml[]..[])
                        Pexp_ident "String.length" (derive.ml[]..[])
                      [
                        <label> ""
                          expression (derive.ml[]..[])
                            Pexp_ident "str" (derive.ml[]..[])
                      ]
                ]
                expression (derive.ml[]..[])
                  Pexp_ifthenelse
                  expression (derive.ml[]..[])
                    Pexp_apply
                    expression (derive.ml[]..[])
                      Pexp_ident "not" (derive.ml[]..[])
                    [
                      <label> ""
                        expression (derive.ml[]..[])
                          Pexp_apply
                          expression (derive.ml[]..[])
                            Pexp_ident "&&" (derive.ml[]..[])
                          [
                            <label> ""
                              expression (derive.ml[]..[])
                                Pexp_apply
                                expression (derive.ml[]..[])
                                  Pexp_ident ">" (derive.ml[]..[])
                                [
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_ident "len" (derive.ml[]..[])
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_constant Const_int 1
                                ]
                            <label> ""
                              expression (derive.ml[]..[])
                                Pexp_apply
                                expression (derive.ml[]..[])
                                  Pexp_ident "&&" (derive.ml[]..[])
                                [
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_apply
                                      expression (derive.ml[]..[])
                                        Pexp_ident "@@" (derive.ml[]..[])
                                      [
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "not" (derive.ml[]..[])
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "Charf.is_digit" (derive.ml[]..[])
                                            [
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_apply
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "String.get" (derive.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "str" (derive.ml[]..[])
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_constant Const_int 1
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_apply
                                      expression (derive.ml[]..[])
                                        Pexp_ident "@@" (derive.ml[]..[])
                                      [
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "not" (derive.ml[]..[])
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "Stringf.starts_with" (derive.ml[]..[])
                                            [
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "str" (derive.ml[]..[])
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_constant Const_string("all_",None)
                                            ]
                                      ]
                                ]
                          ]
                    ]
                  expression (derive.ml[]..[])
                    Pexp_sequence
                    expression (derive.ml[]..[])
                      Pexp_apply
                      expression (derive.ml[]..[])
                        Pexp_ident "eprintf" (derive.ml[]..[])
                      [
                        <label> ""
                          expression (derive.ml[]..[])
                            Pexp_constant Const_string("%s is not a valid name",None)
                        <label> ""
                          expression (derive.ml[]..[])
                            Pexp_ident "str" (derive.ml[]..[])
                      ]
                    expression (derive.ml[]..[])
                      Pexp_sequence
                      expression (derive.ml[]..[])
                        Pexp_apply
                        expression (derive.ml[]..[])
                          Pexp_ident "eprintf" (derive.ml[]..[])
                        [
                          <label> ""
                            expression (derive.ml[]..[])
                              Pexp_constant Const_string("For valid name its length should be more than 1\ncan not be a-[digit], can not start with [all_]",None)
                        ]
                      expression (derive.ml[]..[])
                        Pexp_apply
                        expression (derive.ml[]..[])
                          Pexp_ident "exit" (derive.ml[]..[])
                        [
                          <label> ""
                            expression (derive.ml[]..[])
                              Pexp_constant Const_int 2
                        ]
                  None
          ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "preserve" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_construct "::" (derive.ml[]..[])
          Some
            expression (derive.ml[]..[])
              Pexp_tuple
              [
                expression (derive.ml[]..[])
                  Pexp_constant Const_string("self",None)
                expression (derive.ml[]..[])
                  Pexp_construct "::" (derive.ml[]..[])
                  Some
                    expression (derive.ml[]..[])
                      Pexp_tuple
                      [
                        expression (derive.ml[]..[])
                          Pexp_constant Const_string("self_type",None)
                        expression (derive.ml[]..[])
                          Pexp_construct "::" (derive.ml[]..[])
                          Some
                            expression (derive.ml[]..[])
                              Pexp_tuple
                              [
                                expression (derive.ml[]..[])
                                  Pexp_constant Const_string("unit",None)
                                expression (derive.ml[]..[])
                                  Pexp_construct "::" (derive.ml[]..[])
                                  Some
                                    expression (derive.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (derive.ml[]..[])
                                          Pexp_constant Const_string("result",None)
                                        expression (derive.ml[]..[])
                                          Pexp_construct "[]" (derive.ml[]..[])
                                          None
                                      ]
                              ]
                      ]
              ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "check" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (derive.ml[]..[])
                Ppat_var "names" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_apply
                expression (derive.ml[]..[])
                  Pexp_ident "List.iter" (derive.ml[]..[])
                [
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[]..[])
                            Ppat_var "name" (derive.ml[]..[])
                          expression (derive.ml[]..[])
                            Pexp_ifthenelse
                            expression (derive.ml[]..[])
                              Pexp_apply
                              expression (derive.ml[]..[])
                                Pexp_ident "List.mem" (derive.ml[]..[])
                              [
                                <label> ""
                                  expression (derive.ml[]..[])
                                    Pexp_ident "name" (derive.ml[]..[])
                                <label> ""
                                  expression (derive.ml[]..[])
                                    Pexp_ident "preserve" (derive.ml[]..[])
                              ]
                            expression (derive.ml[]..[])
                              Pexp_sequence
                              expression (derive.ml[]..[])
                                Pexp_apply
                                expression (derive.ml[]..[])
                                  Pexp_ident "eprintf" (derive.ml[]..[])
                                [
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_constant Const_string("%s is not a valid name\n",None)
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_ident "name" (derive.ml[]..[])
                                ]
                              expression (derive.ml[]..[])
                                Pexp_sequence
                                expression (derive.ml[]..[])
                                  Pexp_apply
                                  expression (derive.ml[]..[])
                                    Pexp_ident "eprintf" (derive.ml[]..[])
                                  [
                                    <label> ""
                                      expression (derive.ml[]..[])
                                        Pexp_constant Const_string("preserved keywords:\n",None)
                                  ]
                                expression (derive.ml[]..[])
                                  Pexp_sequence
                                  expression (derive.ml[]..[])
                                    Pexp_apply
                                    expression (derive.ml[]..[])
                                      Pexp_ident "List.iter" (derive.ml[]..[])
                                    [
                                      <label> ""
                                        expression (derive.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (derive.ml[]..[])
                                                Ppat_var "s" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_apply
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "eprintf" (derive.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_constant Const_string("%s\n",None)
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "s" (derive.ml[]..[])
                                                ]
                                          ]
                                      <label> ""
                                        expression (derive.ml[]..[])
                                          Pexp_ident "preserve" (derive.ml[]..[])
                                    ]
                                  expression (derive.ml[]..[])
                                    Pexp_apply
                                    expression (derive.ml[]..[])
                                      Pexp_ident "exit" (derive.ml[]..[])
                                    [
                                      <label> ""
                                        expression (derive.ml[]..[])
                                          Pexp_constant Const_int 2
                                    ]
                            Some
                              expression (derive.ml[]..[])
                                Pexp_apply
                                expression (derive.ml[]..[])
                                  Pexp_ident "check_valid" (derive.ml[]..[])
                                [
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_ident "name" (derive.ml[]..[])
                                ]
                      ]
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "names" (derive.ml[]..[])
                ]
          ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "mapi_exp" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?arity"
          Some
            expression (derive.ml[]..[])
              Pexp_constant Const_int 1
          pattern (derive.ml[]..[])
            Ppat_var "arity" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?names"
            Some
              expression (derive.ml[]..[])
                Pexp_construct "[]" (derive.ml[]..[])
                None
            pattern (derive.ml[]..[])
              Ppat_var "names" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "f"
              None
              pattern (derive.ml[]..[])
                Ppat_constraint
                pattern (derive.ml[]..[])
                  Ppat_var "f" (derive.ml[]..[])
                core_type (derive.ml[]..[])
                  Ptyp_arrow
                  ""
                  core_type (derive.ml[]..[])
                    Ptyp_constr "ctyp" (derive.ml[]..[])
                    []
                  core_type (derive.ml[]..[])
                    Ptyp_constr "exp" (derive.ml[]..[])
                    []
              expression (derive.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[]..[])
                      Ppat_constraint
                      pattern (derive.ml[]..[])
                        Ppat_var "i" (derive.ml[]..[])
                      core_type (derive.ml[]..[])
                        Ptyp_constr "int" (derive.ml[]..[])
                        []
                    expression (derive.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[]..[])
                            Ppat_constraint
                            pattern (derive.ml[]..[])
                              Ppat_var "ty" (derive.ml[]..[])
                            core_type (derive.ml[]..[])
                              Ptyp_constr "ctyp" (derive.ml[]..[])
                              []
                          expression (derive.ml[]..[])
                            Pexp_constraint
                            expression (derive.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (derive.ml[]..[])
                                    Ppat_var "name_exp" (derive.ml[]..[])
                                  expression (derive.ml[]..[])
                                    Pexp_apply
                                    expression (derive.ml[]..[])
                                      Pexp_ident "f" (derive.ml[]..[])
                                    [
                                      <label> ""
                                        expression (derive.ml[]..[])
                                          Pexp_ident "ty" (derive.ml[]..[])
                                    ]
                              ]
                              expression (derive.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (derive.ml[]..[])
                                      Ppat_var "base" (derive.ml[]..[])
                                    expression (derive.ml[]..[])
                                      Pexp_apply
                                      expression (derive.ml[]..[])
                                        Pexp_ident "+>" (derive.ml[]..[])
                                      [
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "name_exp" (derive.ml[]..[])
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "names" (derive.ml[]..[])
                                      ]
                                ]
                                expression (derive.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (derive.ml[]..[])
                                        Ppat_var "id_eps" (derive.ml[]..[])
                                      expression (derive.ml[]..[])
                                        Pexp_apply
                                        expression (derive.ml[]..[])
                                          Pexp_ident "@@" (derive.ml[]..[])
                                        [
                                          <label> ""
                                            expression (derive.ml[]..[])
                                              Pexp_apply
                                              expression (derive.ml[]..[])
                                                Pexp_ident "Listf.init" (derive.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "arity" (derive.ml[]..[])
                                              ]
                                          <label> ""
                                            expression (derive.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "index" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "xid" (derive.ml[]..[])
                                                    [
                                                      <label> "off"
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "index" (derive.ml[]..[])
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "i" (derive.ml[]..[])
                                                    ]
                                              ]
                                        ]
                                  ]
                                  expression (derive.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[]..[])
                                          Ppat_var "ep0" (derive.ml[]..[])
                                        expression (derive.ml[]..[])
                                          Pexp_apply
                                          expression (derive.ml[]..[])
                                            Pexp_ident "List.hd" (derive.ml[]..[])
                                          [
                                            <label> ""
                                              expression (derive.ml[]..[])
                                                Pexp_ident "id_eps" (derive.ml[]..[])
                                          ]
                                    ]
                                    expression (derive.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[]..[])
                                            Ppat_var "id_ep" (derive.ml[]..[])
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "tuple_com" (derive.ml[]..[])
                                            [
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "id_eps" (derive.ml[]..[])
                                            ]
                                      ]
                                      expression (derive.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (derive.ml[]..[])
                                              Ppat_var "exp" (derive.ml[]..[])
                                            expression (derive.ml[]..[])
                                              Pexp_apply
                                              expression (derive.ml[]..[])
                                                Pexp_ident "appl_of_list" (derive.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (derive.ml[]..[])
                                                    Pexp_construct "::" (derive.ml[]..[])
                                                    Some
                                                      expression (derive.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "base" (derive.ml[]..[])
                                                          expression (derive.ml[]..[])
                                                            Pexp_coerce
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "id_eps" (derive.ml[]..[])
                                                            None
                                                            core_type (derive.ml[]..[])
                                                              Ptyp_constr "list" (derive.ml[]..[])
                                                              [
                                                                core_type (derive.ml[]..[])
                                                                  Ptyp_constr "exp" (derive.ml[]..[])
                                                                  []
                                                              ]
                                                        ]
                                              ]
                                        ]
                                        expression (derive.ml[]..[])
                                          Pexp_record
                                          [
                                            "name_exp" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_ident "name_exp" (derive.ml[]..[])
                                            "info_exp" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_ident "exp" (derive.ml[]..[])
                                            "id_ep" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_ident "id_ep" (derive.ml[]..[])
                                            "id_eps" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_ident "id_eps" (derive.ml[]..[])
                                            "ep0" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_ident "ep0" (derive.ml[]..[])
                                            "ty" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_ident "ty" (derive.ml[]..[])
                                          ]
                                          None
                            core_type (derive.ml[]..[])
                              Ptyp_constr "ty_info" (derive.ml[]..[])
                              []
                      ]
                ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "tuple_exp_of_ctyp" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?arity"
          Some
            expression (derive.ml[]..[])
              Pexp_constant Const_int 1
          pattern (derive.ml[]..[])
            Ppat_var "arity" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?names"
            Some
              expression (derive.ml[]..[])
                Pexp_construct "[]" (derive.ml[]..[])
                None
            pattern (derive.ml[]..[])
              Ppat_var "names" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "mk_tuple"
              None
              pattern (derive.ml[]..[])
                Ppat_var "mk_tuple" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "f"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "f" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (derive.ml[]..[])
                        Ppat_constraint
                        pattern (derive.ml[]..[])
                          Ppat_var "ty" (derive.ml[]..[])
                        core_type (derive.ml[]..[])
                          Ptyp_constr "ctyp" (derive.ml[]..[])
                          []
                      expression (derive.ml[]..[])
                        Pexp_constraint
                        expression (derive.ml[]..[])
                          Pexp_match
                          expression (derive.ml[]..[])
                            Pexp_ident "ty" (derive.ml[]..[])
                          [
                            <case>
                              pattern (derive.ml[]..[])
                                Ppat_variant "Par"
                                Some
                                  pattern (derive.ml[]..[])
                                    Ppat_var "t" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (derive.ml[]..[])
                                      Ppat_var "ls" (derive.ml[]..[])
                                    expression (derive.ml[]..[])
                                      Pexp_apply
                                      expression (derive.ml[]..[])
                                        Pexp_ident "Ast_basic.N.list_of_star" (derive.ml[]..[])
                                      [
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "t" (derive.ml[]..[])
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_construct "[]" (derive.ml[]..[])
                                            None
                                      ]
                                ]
                                expression (derive.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (derive.ml[]..[])
                                        Ppat_var "len" (derive.ml[]..[])
                                      expression (derive.ml[]..[])
                                        Pexp_apply
                                        expression (derive.ml[]..[])
                                          Pexp_ident "List.length" (derive.ml[]..[])
                                        [
                                          <label> ""
                                            expression (derive.ml[]..[])
                                              Pexp_ident "ls" (derive.ml[]..[])
                                        ]
                                  ]
                                  expression (derive.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[]..[])
                                          Ppat_var "pat" (derive.ml[]..[])
                                        expression (derive.ml[]..[])
                                          Pexp_coerce
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "EpN.mk_tuple" (derive.ml[]..[])
                                            [
                                              <label> "arity"
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "arity" (derive.ml[]..[])
                                              <label> "number"
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "len" (derive.ml[]..[])
                                            ]
                                          None
                                          core_type (derive.ml[]..[])
                                            Ptyp_constr "pat" (derive.ml[]..[])
                                            []
                                    ]
                                    expression (derive.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[]..[])
                                            Ppat_var "tys" (derive.ml[]..[])
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "mk_tuple" (derive.ml[]..[])
                                            [
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_apply
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "List.mapi" (derive.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_apply
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "mapi_exp" (derive.ml[]..[])
                                                        [
                                                          <label> "arity"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "arity" (derive.ml[]..[])
                                                          <label> "names"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "names" (derive.ml[]..[])
                                                          <label> "f"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "f" (derive.ml[]..[])
                                                        ]
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "ls" (derive.ml[]..[])
                                                  ]
                                            ]
                                      ]
                                      expression (derive.ml[]..[])
                                        Pexp_apply
                                        expression (derive.ml[]..[])
                                          Pexp_ident "ExpN.mkfun" (derive.ml[]..[])
                                        [
                                          <label> ""
                                            expression (derive.ml[]..[])
                                              Pexp_ident "names" (derive.ml[]..[])
                                          <label> ""
                                            expression (derive.ml[]..[])
                                              Pexp_apply
                                              expression (derive.ml[]..[])
                                                Pexp_ident "ExpN.currying" (derive.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (derive.ml[]..[])
                                                    Pexp_construct "::" (derive.ml[]..[])
                                                    Some
                                                      expression (derive.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (derive.ml[]..[])
                                                            Pexp_coerce
                                                            expression (derive.ml[]..[])
                                                              Pexp_variant "Case"
                                                              Some
                                                                expression (derive.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[]..[])
Pexp_ident "pat" (derive.ml[]..[])
                                                                      None
                                                                      core_type (derive.ml[]..[])
Ptyp_constr "Astfn.pat" (derive.ml[]..[])
[]
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[]..[])
Pexp_ident "tys" (derive.ml[]..[])
                                                                      None
                                                                      core_type (derive.ml[]..[])
Ptyp_constr "Astfn.exp" (derive.ml[]..[])
[]
                                                                  ]
                                                            None
                                                            core_type (derive.ml[]..[])
                                                              Ptyp_constr "Astfn.case" (derive.ml[]..[])
                                                              []
                                                          expression (derive.ml[]..[])
                                                            Pexp_construct "[]" (derive.ml[]..[])
                                                            None
                                                        ]
                                                <label> "arity"
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "arity" (derive.ml[]..[])
                                              ]
                                        ]
                            <case>
                              pattern (derive.ml[]..[])
                                Ppat_any
                              expression (derive.ml[]..[])
                                Pexp_apply
                                expression (derive.ml[]..[])
                                  Pexp_ident "failwithf" (derive.ml[]..[])
                                [
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_constant Const_string("tuple_exp_of_ctyp %s",None)
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_apply
                                      expression (derive.ml[]..[])
                                        Pexp_ident "ObjsN.dump_ctyp" (derive.ml[]..[])
                                      [
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "ty" (derive.ml[]..[])
                                      ]
                                ]
                          ]
                        core_type (derive.ml[]..[])
                          Ptyp_constr "exp" (derive.ml[]..[])
                          []
                  ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "normal_simple_exp_of_ctyp" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?arity"
          None
          pattern (derive.ml[]..[])
            Ppat_var "arity" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?names"
            None
            pattern (derive.ml[]..[])
              Ppat_var "names" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "mk_tuple"
              None
              pattern (derive.ml[]..[])
                Ppat_var "mk_tuple" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "right_type_id"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "right_type_id" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "left_type_id"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "left_type_id" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_fun "right_type_variable"
                    None
                    pattern (derive.ml[]..[])
                      Ppat_var "right_type_variable" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[]..[])
                            Ppat_var "cxt" (derive.ml[]..[])
                          expression (derive.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (derive.ml[]..[])
                                  Ppat_constraint
                                  pattern (derive.ml[]..[])
                                    Ppat_var "ty" (derive.ml[]..[])
                                  core_type (derive.ml[]..[])
                                    Ptyp_constr "ctyp" (derive.ml[]..[])
                                    []
                                expression (derive.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (derive.ml[]..[])
                                        Ppat_var "right_trans" (derive.ml[]..[])
                                      expression (derive.ml[]..[])
                                        Pexp_apply
                                        expression (derive.ml[]..[])
                                          Pexp_ident "transform" (derive.ml[]..[])
                                        [
                                          <label> ""
                                            expression (derive.ml[]..[])
                                              Pexp_ident "right_type_id" (derive.ml[]..[])
                                        ]
                                  ]
                                  expression (derive.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[]..[])
                                          Ppat_var "left_trans" (derive.ml[]..[])
                                        expression (derive.ml[]..[])
                                          Pexp_apply
                                          expression (derive.ml[]..[])
                                            Pexp_ident "basic_transform" (derive.ml[]..[])
                                          [
                                            <label> ""
                                              expression (derive.ml[]..[])
                                                Pexp_ident "left_type_id" (derive.ml[]..[])
                                          ]
                                    ]
                                    expression (derive.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[]..[])
                                            Ppat_var "tyvar" (derive.ml[]..[])
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "right_transform" (derive.ml[]..[])
                                            [
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "right_type_variable" (derive.ml[]..[])
                                            ]
                                      ]
                                      expression (derive.ml[]..[])
                                        Pexp_let Rec
                                        [
                                          <def>
                                            pattern (derive.ml[]..[])
                                              Ppat_var "aux" (derive.ml[]..[])
                                            expression (derive.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_variant "Lid"
                                                    Some
                                                      pattern (derive.ml[]..[])
                                                        Ppat_var "id" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_ifthenelse
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "Hashset.mem" (derive.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "cxt" (derive.ml[]..[])
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "id" (derive.ml[]..[])
                                                      ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "lid" (derive.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "left_trans" (derive.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "id" (derive.ml[]..[])
                                                            ]
                                                      ]
                                                    Some
                                                      expression (derive.ml[]..[])
                                                        Pexp_apply
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "right_trans" (derive.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "id" (derive.ml[]..[])
                                                        ]
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_alias "id" (derive.ml[]..[])
                                                    pattern (derive.ml[]..[])
                                                      Ppat_type
                                                      "ident'" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "right_trans" (derive.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "IdN.to_vid" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "id" (derive.ml[]..[])
                                                          ]
                                                    ]
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_variant "App"
                                                    Some
                                                      pattern (derive.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "t1" (derive.ml[]..[])
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "t2" (derive.ml[]..[])
                                                        ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_coerce
                                                    expression (derive.ml[]..[])
                                                      Pexp_variant "App"
                                                      Some
                                                        expression (derive.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (derive.ml[]..[])
                                                              Pexp_coerce
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "aux" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "t1" (derive.ml[]..[])
                                                                ]
                                                              None
                                                              core_type (derive.ml[]..[])
                                                                Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                                                []
                                                            expression (derive.ml[]..[])
                                                              Pexp_coerce
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "aux" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "t2" (derive.ml[]..[])
                                                                ]
                                                              None
                                                              core_type (derive.ml[]..[])
                                                                Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                                                []
                                                          ]
                                                    None
                                                    core_type (derive.ml[]..[])
                                                      Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                                      []
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_variant "Quote"
                                                    Some
                                                      pattern (derive.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[]..[])
                                                            Ppat_any
                                                          pattern (derive.ml[]..[])
                                                            Ppat_variant "Lid"
                                                            Some
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "s" (derive.ml[]..[])
                                                        ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "tyvar" (derive.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "s" (derive.ml[]..[])
                                                    ]
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_variant "Arrow"
                                                    Some
                                                      pattern (derive.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "t1" (derive.ml[]..[])
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "t2" (derive.ml[]..[])
                                                        ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "aux" (derive.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_coerce
                                                          expression (derive.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (derive.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_variant "App"
                                                                    Some
                                                                      expression (derive.ml[]..[])
Pexp_tuple
[
  expression (derive.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (derive.ml[]..[])
        Pexp_constant Const_string("arrow",None)
  expression (derive.ml[]..[])
    Pexp_coerce
    expression (derive.ml[]..[])
      Pexp_ident "t1" (derive.ml[]..[])
    None
    core_type (derive.ml[]..[])
      Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
      []
]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "t2" (derive.ml[]..[])
                                                                    None
                                                                    core_type (derive.ml[]..[])
                                                                      Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
                                                                      []
                                                                ]
                                                          None
                                                          core_type (derive.ml[]..[])
                                                            Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
                                                            []
                                                    ]
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_alias "ty" (derive.ml[]..[])
                                                    pattern (derive.ml[]..[])
                                                      Ppat_variant "Par"
                                                      Some
                                                        pattern (derive.ml[]..[])
                                                          Ppat_any
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "tuple_exp_of_ctyp" (derive.ml[]..[])
                                                    [
                                                      <label> "?arity"
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "arity" (derive.ml[]..[])
                                                      <label> "?names"
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "names" (derive.ml[]..[])
                                                      <label> "mk_tuple"
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "mk_tuple" (derive.ml[]..[])
                                                      <label> "f"
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "normal_simple_exp_of_ctyp" (derive.ml[]..[])
                                                          [
                                                            <label> "?arity"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "arity" (derive.ml[]..[])
                                                            <label> "?names"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "names" (derive.ml[]..[])
                                                            <label> "mk_tuple"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "mk_tuple" (derive.ml[]..[])
                                                            <label> "right_type_id"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "right_type_id" (derive.ml[]..[])
                                                            <label> "left_type_id"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "left_type_id" (derive.ml[]..[])
                                                            <label> "right_type_variable"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "right_type_variable" (derive.ml[]..[])
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "cxt" (derive.ml[]..[])
                                                          ]
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "ty" (derive.ml[]..[])
                                                    ]
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_constraint
                                                    pattern (derive.ml[]..[])
                                                      Ppat_var "ty" (derive.ml[]..[])
                                                    core_type (derive.ml[]..[])
                                                      Ptyp_constr "ctyp" (derive.ml[]..[])
                                                      []
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "failwithf" (derive.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_constant Const_string("normal_simple_exp_of_ctyp : %s",None)
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "ObjsN.dump_ctyp" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "ty" (derive.ml[]..[])
                                                          ]
                                                    ]
                                              ]
                                        ]
                                        expression (derive.ml[]..[])
                                          Pexp_apply
                                          expression (derive.ml[]..[])
                                            Pexp_ident "aux" (derive.ml[]..[])
                                          [
                                            <label> ""
                                              expression (derive.ml[]..[])
                                                Pexp_ident "ty" (derive.ml[]..[])
                                          ]
                            ]
                      ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "obj_simple_exp_of_ctyp" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "right_type_id"
          None
          pattern (derive.ml[]..[])
            Ppat_var "right_type_id" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "left_type_variable"
            None
            pattern (derive.ml[]..[])
              Ppat_var "left_type_variable" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "right_type_variable"
              None
              pattern (derive.ml[]..[])
                Ppat_var "right_type_variable" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "?names"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "names" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "?arity"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "arity" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_fun "mk_tuple"
                    None
                    pattern (derive.ml[]..[])
                      Ppat_var "mk_tuple" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[]..[])
                            Ppat_var "ty" (derive.ml[]..[])
                          expression (derive.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (derive.ml[]..[])
                                  Ppat_var "trans" (derive.ml[]..[])
                                expression (derive.ml[]..[])
                                  Pexp_apply
                                  expression (derive.ml[]..[])
                                    Pexp_ident "transform" (derive.ml[]..[])
                                  [
                                    <label> ""
                                      expression (derive.ml[]..[])
                                        Pexp_ident "right_type_id" (derive.ml[]..[])
                                  ]
                            ]
                            expression (derive.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (derive.ml[]..[])
                                    Ppat_var "var" (derive.ml[]..[])
                                  expression (derive.ml[]..[])
                                    Pexp_apply
                                    expression (derive.ml[]..[])
                                      Pexp_ident "basic_transform" (derive.ml[]..[])
                                    [
                                      <label> ""
                                        expression (derive.ml[]..[])
                                          Pexp_ident "left_type_variable" (derive.ml[]..[])
                                    ]
                              ]
                              expression (derive.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (derive.ml[]..[])
                                      Ppat_var "tyvar" (derive.ml[]..[])
                                    expression (derive.ml[]..[])
                                      Pexp_apply
                                      expression (derive.ml[]..[])
                                        Pexp_ident "right_transform" (derive.ml[]..[])
                                      [
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "right_type_variable" (derive.ml[]..[])
                                      ]
                                ]
                                expression (derive.ml[]..[])
                                  Pexp_let Rec
                                  [
                                    <def>
                                      pattern (derive.ml[]..[])
                                        Ppat_var "aux" (derive.ml[]..[])
                                      expression (derive.ml[]..[])
                                        Pexp_constraint
                                        expression (derive.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (derive.ml[]..[])
                                                Ppat_alias "id" (derive.ml[]..[])
                                                pattern (derive.ml[]..[])
                                                  Ppat_type
                                                  "ident'" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_apply
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "trans" (derive.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "IdN.to_vid" (derive.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "id" (derive.ml[]..[])
                                                      ]
                                                ]
                                            <case>
                                              pattern (derive.ml[]..[])
                                                Ppat_variant "Quote"
                                                Some
                                                  pattern (derive.ml[]..[])
                                                    Ppat_tuple
                                                    [
                                                      pattern (derive.ml[]..[])
                                                        Ppat_any
                                                      pattern (derive.ml[]..[])
                                                        Ppat_variant "Lid"
                                                        Some
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "s" (derive.ml[]..[])
                                                    ]
                                              expression (derive.ml[]..[])
                                                Pexp_apply
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "tyvar" (derive.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "s" (derive.ml[]..[])
                                                ]
                                            <case>
                                              pattern (derive.ml[]..[])
                                                Ppat_alias "ty" (derive.ml[]..[])
                                                pattern (derive.ml[]..[])
                                                  Ppat_variant "App"
                                                  Some
                                                    pattern (derive.ml[]..[])
                                                      Ppat_any
                                              expression (derive.ml[]..[])
                                                Pexp_match
                                                expression (derive.ml[]..[])
                                                  Pexp_apply
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "Ast_basic.N.list_of_app" (derive.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "ty" (derive.ml[]..[])
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_construct "[]" (derive.ml[]..[])
                                                        None
                                                  ]
                                                [
                                                  <case>
                                                    pattern (derive.ml[]..[])
                                                      Ppat_construct "::" (derive.ml[]..[])
                                                      Some
                                                        pattern (derive.ml[]..[])
                                                          Ppat_tuple
                                                          [
                                                            pattern (derive.ml[]..[])
                                                              Ppat_alias "tctor" (derive.ml[]..[])
                                                              pattern (derive.ml[]..[])
                                                                Ppat_type
                                                                "ident'" (derive.ml[]..[])
                                                            pattern (derive.ml[]..[])
                                                              Ppat_var "ls" (derive.ml[]..[])
                                                          ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "appl_of_list" (derive.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_construct "::" (derive.ml[]..[])
                                                            Some
                                                              expression (derive.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "trans" (derive.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_apply
  expression (derive.ml[]..[])
    Pexp_ident "IdN.to_vid" (derive.ml[]..[])
  [
    <label> ""
      expression (derive.ml[]..[])
        Pexp_ident "tctor" (derive.ml[]..[])
  ]
                                                                    ]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "|>" (derive.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "ls" (derive.ml[]..[])
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_apply
  expression (derive.ml[]..[])
    Pexp_ident "List.map" (derive.ml[]..[])
  [
    <label> ""
      expression (derive.ml[]..[])
        Pexp_function
        [
          <case>
            pattern (derive.ml[]..[])
              Ppat_variant "Quote"
              Some
                pattern (derive.ml[]..[])
                  Ppat_tuple
                  [
                    pattern (derive.ml[]..[])
                      Ppat_any
                    pattern (derive.ml[]..[])
                      Ppat_variant "Lid"
                      Some
                        pattern (derive.ml[]..[])
                          Ppat_var "s" (derive.ml[]..[])
                  ]
            expression (derive.ml[]..[])
              Pexp_coerce
              expression (derive.ml[]..[])
                Pexp_variant "Lid"
                Some
                  expression (derive.ml[]..[])
                    Pexp_apply
                    expression (derive.ml[]..[])
                      Pexp_ident "var" (derive.ml[]..[])
                    [
                      <label> ""
                        expression (derive.ml[]..[])
                          Pexp_ident "s" (derive.ml[]..[])
                    ]
              None
              core_type (derive.ml[]..[])
                Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                []
          <case>
            pattern (derive.ml[]..[])
              Ppat_var "t" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_coerce
              expression (derive.ml[]..[])
                Pexp_variant "Fun"
                Some
                  expression (derive.ml[]..[])
                    Pexp_variant "Case"
                    Some
                      expression (derive.ml[]..[])
                        Pexp_tuple
                        [
                          expression (derive.ml[]..[])
                            Pexp_variant "Lid"
                            Some
                              expression (derive.ml[]..[])
                                Pexp_constant Const_string("self",None)
                          expression (derive.ml[]..[])
                            Pexp_coerce
                            expression (derive.ml[]..[])
                              Pexp_apply
                              expression (derive.ml[]..[])
                                Pexp_ident "aux" (derive.ml[]..[])
                              [
                                <label> ""
                                  expression (derive.ml[]..[])
                                    Pexp_ident "t" (derive.ml[]..[])
                              ]
                            None
                            core_type (derive.ml[]..[])
                              Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                              []
                        ]
              None
              core_type (derive.ml[]..[])
                Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                []
        ]
  ]
                                                                    ]
                                                                ]
                                                      ]
                                                  <case>
                                                    pattern (derive.ml[]..[])
                                                      Ppat_any
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "failwithf" (derive.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_constant Const_string("list_of_app in obj_simple_exp_of_ctyp: %s",None)
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "ObjsN.dump_ctyp" (derive.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "ty" (derive.ml[]..[])
                                                            ]
                                                      ]
                                                ]
                                            <case>
                                              pattern (derive.ml[]..[])
                                                Ppat_variant "Arrow"
                                                Some
                                                  pattern (derive.ml[]..[])
                                                    Ppat_tuple
                                                    [
                                                      pattern (derive.ml[]..[])
                                                        Ppat_var "t1" (derive.ml[]..[])
                                                      pattern (derive.ml[]..[])
                                                        Ppat_var "t2" (derive.ml[]..[])
                                                    ]
                                              expression (derive.ml[]..[])
                                                Pexp_apply
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "aux" (derive.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_coerce
                                                      expression (derive.ml[]..[])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (derive.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (derive.ml[]..[])
                                                                Pexp_variant "App"
                                                                Some
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (derive.ml[]..[])
Pexp_variant "Lid"
Some
  expression (derive.ml[]..[])
    Pexp_constant Const_string("arrow",None)
                                                                      expression (derive.ml[]..[])
Pexp_coerce
expression (derive.ml[]..[])
  Pexp_ident "t1" (derive.ml[]..[])
None
core_type (derive.ml[]..[])
  Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
  []
                                                                    ]
                                                              expression (derive.ml[]..[])
                                                                Pexp_coerce
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "t2" (derive.ml[]..[])
                                                                None
                                                                core_type (derive.ml[]..[])
                                                                  Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
                                                                  []
                                                            ]
                                                      None
                                                      core_type (derive.ml[]..[])
                                                        Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
                                                        []
                                                ]
                                            <case>
                                              pattern (derive.ml[]..[])
                                                Ppat_alias "ty" (derive.ml[]..[])
                                                pattern (derive.ml[]..[])
                                                  Ppat_variant "Par"
                                                  Some
                                                    pattern (derive.ml[]..[])
                                                      Ppat_any
                                              expression (derive.ml[]..[])
                                                Pexp_apply
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "tuple_exp_of_ctyp" (derive.ml[]..[])
                                                [
                                                  <label> "?arity"
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "arity" (derive.ml[]..[])
                                                  <label> "?names"
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "names" (derive.ml[]..[])
                                                  <label> "mk_tuple"
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "mk_tuple" (derive.ml[]..[])
                                                  <label> "f"
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "obj_simple_exp_of_ctyp" (derive.ml[]..[])
                                                      [
                                                        <label> "right_type_id"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "right_type_id" (derive.ml[]..[])
                                                        <label> "left_type_variable"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                        <label> "right_type_variable"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "right_type_variable" (derive.ml[]..[])
                                                        <label> "?names"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "names" (derive.ml[]..[])
                                                        <label> "?arity"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "arity" (derive.ml[]..[])
                                                        <label> "mk_tuple"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "mk_tuple" (derive.ml[]..[])
                                                      ]
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "ty" (derive.ml[]..[])
                                                ]
                                            <case>
                                              pattern (derive.ml[]..[])
                                                Ppat_var "ty" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_apply
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "failwithf" (derive.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_constant Const_string("obj_simple_exp_of_ctyp: %s",None)
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "ObjsN.dump_ctyp" (derive.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "ty" (derive.ml[]..[])
                                                      ]
                                                ]
                                          ]
                                        core_type (derive.ml[]..[])
                                          Ptyp_arrow
                                          ""
                                          core_type (derive.ml[]..[])
                                            Ptyp_constr "ctyp" (derive.ml[]..[])
                                            []
                                          core_type (derive.ml[]..[])
                                            Ptyp_constr "exp" (derive.ml[]..[])
                                            []
                                  ]
                                  expression (derive.ml[]..[])
                                    Pexp_apply
                                    expression (derive.ml[]..[])
                                      Pexp_ident "aux" (derive.ml[]..[])
                                    [
                                      <label> ""
                                        expression (derive.ml[]..[])
                                          Pexp_ident "ty" (derive.ml[]..[])
                                    ]
                      ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "exp_of_ctyp" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?cons_transform"
          None
          pattern (derive.ml[]..[])
            Ppat_var "cons_transform" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[]..[])
                Pexp_constant Const_int 1
            pattern (derive.ml[]..[])
              Ppat_var "arity" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "?names"
              Some
                expression (derive.ml[]..[])
                  Pexp_construct "[]" (derive.ml[]..[])
                  None
              pattern (derive.ml[]..[])
                Ppat_var "names" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "default"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "default" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "mk_variant"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "mk_variant" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (derive.ml[]..[])
                          Ppat_var "simple_exp_of_ctyp" (derive.ml[]..[])
                        expression (derive.ml[]..[])
                          Pexp_function
                          [
                            <case>
                              pattern (derive.ml[]..[])
                                Ppat_constraint
                                pattern (derive.ml[]..[])
                                  Ppat_var "ty" (derive.ml[]..[])
                                core_type (derive.ml[]..[])
                                  Ptyp_constr "or_ctyp" (derive.ml[]..[])
                                  []
                              expression (derive.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (derive.ml[]..[])
                                      Ppat_var "f" (derive.ml[]..[])
                                    expression (derive.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (derive.ml[]..[])
                                            Ppat_constraint
                                            pattern (derive.ml[]..[])
                                              Ppat_var "cons" (derive.ml[]..[])
                                            core_type (derive.ml[]..[])
                                              Ptyp_constr "string" (derive.ml[]..[])
                                              []
                                          expression (derive.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (derive.ml[]..[])
                                                  Ppat_constraint
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "tyargs" (derive.ml[]..[])
                                                  core_type (derive.ml[]..[])
                                                    Ptyp_constr "list" (derive.ml[]..[])
                                                    [
                                                      core_type (derive.ml[]..[])
                                                        Ptyp_constr "ctyp" (derive.ml[]..[])
                                                        []
                                                    ]
                                                expression (derive.ml[]..[])
                                                  Pexp_constraint
                                                  expression (derive.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "args_length" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "List.length" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "tyargs" (derive.ml[]..[])
                                                          ]
                                                    ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "p" (derive.ml[]..[])
                                                          expression (derive.ml[]..[])
                                                            Pexp_constraint
                                                            expression (derive.ml[]..[])
                                                              Pexp_coerce
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "EpN.gen_tuple_n" (derive.ml[]..[])
                                                                [
                                                                  <label> "?cons_transform"
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "cons_transform" (derive.ml[]..[])
                                                                  <label> "arity"
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "arity" (derive.ml[]..[])
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "cons" (derive.ml[]..[])
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "args_length" (derive.ml[]..[])
                                                                ]
                                                              None
                                                              core_type (derive.ml[]..[])
                                                                Ptyp_constr "pat" (derive.ml[]..[])
                                                                []
                                                            core_type (derive.ml[]..[])
                                                              Ptyp_constr "pat" (derive.ml[]..[])
                                                              []
                                                      ]
                                                      expression (derive.ml[]..[])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (derive.ml[]..[])
                                                              Ppat_var "mk" (derive.ml[]..[])
                                                            expression (derive.ml[]..[])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (derive.ml[]..[])
Ppat_var "cons" (derive.ml[]..[])
                                                                      pattern (derive.ml[]..[])
Ppat_var "tyargs" (derive.ml[]..[])
                                                                    ]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (derive.ml[]..[])
  Ppat_var "exps" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_apply
  expression (derive.ml[]..[])
    Pexp_ident "List.mapi" (derive.ml[]..[])
  [
    <label> ""
      expression (derive.ml[]..[])
        Pexp_apply
        expression (derive.ml[]..[])
          Pexp_ident "mapi_exp" (derive.ml[]..[])
        [
          <label> "arity"
            expression (derive.ml[]..[])
              Pexp_ident "arity" (derive.ml[]..[])
          <label> "names"
            expression (derive.ml[]..[])
              Pexp_ident "names" (derive.ml[]..[])
          <label> "f"
            expression (derive.ml[]..[])
              Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
        ]
    <label> ""
      expression (derive.ml[]..[])
        Pexp_ident "tyargs" (derive.ml[]..[])
  ]
                                                                    ]
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "mk_variant" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "cons" (derive.ml[]..[])
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "exps" (derive.ml[]..[])
                                                                      ]
                                                              ]
                                                        ]
                                                        expression (derive.ml[]..[])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "e" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "mk" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (derive.ml[]..[])
  Pexp_ident "cons" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_ident "tyargs" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                          ]
                                                          expression (derive.ml[]..[])
                                                            Pexp_coerce
                                                            expression (derive.ml[]..[])
                                                              Pexp_variant "Case"
                                                              Some
                                                                expression (derive.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[]..[])
Pexp_ident "p" (derive.ml[]..[])
                                                                      None
                                                                      core_type (derive.ml[]..[])
Ptyp_constr "Astfn.pat" (derive.ml[]..[])
[]
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[]..[])
Pexp_ident "e" (derive.ml[]..[])
                                                                      None
                                                                      core_type (derive.ml[]..[])
Ptyp_constr "Astfn.exp" (derive.ml[]..[])
[]
                                                                  ]
                                                            None
                                                            core_type (derive.ml[]..[])
                                                              Ptyp_constr "Astfn.case" (derive.ml[]..[])
                                                              []
                                                  core_type (derive.ml[]..[])
                                                    Ptyp_constr "case" (derive.ml[]..[])
                                                    []
                                            ]
                                      ]
                                ]
                                expression (derive.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (derive.ml[]..[])
                                        Ppat_var "info" (derive.ml[]..[])
                                      expression (derive.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (derive.ml[]..[])
                                            Pexp_construct "Sum" (derive.ml[]..[])
                                            None
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "List.length" (derive.ml[]..[])
                                            [
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_apply
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "Ast_basic.N.list_of_bar" (derive.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "ty" (derive.ml[]..[])
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_construct "[]" (derive.ml[]..[])
                                                        None
                                                  ]
                                            ]
                                        ]
                                  ]
                                  expression (derive.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[]..[])
                                          Ppat_var "res" (derive.ml[]..[])
                                        expression (derive.ml[]..[])
                                          Pexp_constraint
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "Ctyp.reduce_data_ctors" (derive.ml[]..[])
                                            [
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "ty" (derive.ml[]..[])
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_construct "[]" (derive.ml[]..[])
                                                  None
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "f" (derive.ml[]..[])
                                              <label> "compose"
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "cons" (derive.ml[]..[])
                                            ]
                                          core_type (derive.ml[]..[])
                                            Ptyp_constr "list" (derive.ml[]..[])
                                            [
                                              core_type (derive.ml[]..[])
                                                Ptyp_constr "case" (derive.ml[]..[])
                                                []
                                            ]
                                    ]
                                    expression (derive.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[]..[])
                                            Ppat_var "res" (derive.ml[]..[])
                                          expression (derive.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[]..[])
                                                  Ppat_var "t" (derive.ml[]..[])
                                                expression (derive.ml[]..[])
                                                  Pexp_ifthenelse
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "&&" (derive.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident ">=" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "List.length" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "res" (derive.ml[]..[])
                                                                ]
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_constant Const_int 2
                                                          ]
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident ">=" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "arity" (derive.ml[]..[])
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_constant Const_int 2
                                                          ]
                                                    ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_match
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "default" (derive.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "info" (derive.ml[]..[])
                                                      ]
                                                    [
                                                      <case>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_construct "Some" (derive.ml[]..[])
                                                          Some
                                                            pattern (derive.ml[]..[])
                                                              Ppat_var "x" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_construct "::" (derive.ml[]..[])
                                                          Some
                                                            expression (derive.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "x" (derive.ml[]..[])
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "res" (derive.ml[]..[])
                                                              ]
                                                      <case>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_construct "None" (derive.ml[]..[])
                                                          None
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "res" (derive.ml[]..[])
                                                    ]
                                                  Some
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "res" (derive.ml[]..[])
                                            ]
                                            expression (derive.ml[]..[])
                                              Pexp_apply
                                              expression (derive.ml[]..[])
                                                Pexp_ident "List.rev" (derive.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "t" (derive.ml[]..[])
                                              ]
                                      ]
                                      expression (derive.ml[]..[])
                                        Pexp_apply
                                        expression (derive.ml[]..[])
                                          Pexp_ident "ExpN.currying" (derive.ml[]..[])
                                        [
                                          <label> "arity"
                                            expression (derive.ml[]..[])
                                              Pexp_ident "arity" (derive.ml[]..[])
                                          <label> ""
                                            expression (derive.ml[]..[])
                                              Pexp_ident "res" (derive.ml[]..[])
                                        ]
                          ]
                    ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "exp_of_variant" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?cons_transform"
          None
          pattern (derive.ml[]..[])
            Ppat_var "cons_transform" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[]..[])
                Pexp_constant Const_int 1
            pattern (derive.ml[]..[])
              Ppat_var "arity" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "?names"
              Some
                expression (derive.ml[]..[])
                  Pexp_construct "[]" (derive.ml[]..[])
                  None
              pattern (derive.ml[]..[])
                Ppat_var "names" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "default"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "default" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "mk_variant"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "mk_variant" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_fun "destination"
                    None
                    pattern (derive.ml[]..[])
                      Ppat_var "destination" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[]..[])
                            Ppat_var "simple_exp_of_ctyp" (derive.ml[]..[])
                          expression (derive.ml[]..[])
                            Pexp_fun "result"
                            None
                            pattern (derive.ml[]..[])
                              Ppat_var "result" (derive.ml[]..[])
                            expression (derive.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (derive.ml[]..[])
                                    Ppat_var "ty" (derive.ml[]..[])
                                  expression (derive.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[]..[])
                                          Ppat_var "f" (derive.ml[]..[])
                                        expression (derive.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (derive.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "cons" (derive.ml[]..[])
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "tyargs" (derive.ml[]..[])
                                                ]
                                              expression (derive.ml[]..[])
                                                Pexp_constraint
                                                expression (derive.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[]..[])
                                                        Ppat_var "len" (derive.ml[]..[])
                                                      expression (derive.ml[]..[])
                                                        Pexp_apply
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "List.length" (derive.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "tyargs" (derive.ml[]..[])
                                                        ]
                                                  ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "p" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_coerce
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "EpN.gen_tuple_n" (derive.ml[]..[])
                                                            [
                                                              <label> "?cons_transform"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "cons_transform" (derive.ml[]..[])
                                                              <label> "arity"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "arity" (derive.ml[]..[])
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "cons" (derive.ml[]..[])
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "len" (derive.ml[]..[])
                                                            ]
                                                          None
                                                          core_type (derive.ml[]..[])
                                                            Ptyp_constr "pat" (derive.ml[]..[])
                                                            []
                                                    ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "mk" (derive.ml[]..[])
                                                          expression (derive.ml[]..[])
                                                            Pexp_function
                                                            [
                                                              <case>
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_tuple
                                                                  [
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "cons" (derive.ml[]..[])
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "tyargs" (derive.ml[]..[])
                                                                  ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (derive.ml[]..[])
Ppat_var "exps" (derive.ml[]..[])
                                                                      expression (derive.ml[]..[])
Pexp_apply
expression (derive.ml[]..[])
  Pexp_ident "List.mapi" (derive.ml[]..[])
[
  <label> ""
    expression (derive.ml[]..[])
      Pexp_apply
      expression (derive.ml[]..[])
        Pexp_ident "mapi_exp" (derive.ml[]..[])
      [
        <label> "arity"
          expression (derive.ml[]..[])
            Pexp_ident "arity" (derive.ml[]..[])
        <label> "names"
          expression (derive.ml[]..[])
            Pexp_ident "names" (derive.ml[]..[])
        <label> "f"
          expression (derive.ml[]..[])
            Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
      ]
  <label> ""
    expression (derive.ml[]..[])
      Pexp_ident "tyargs" (derive.ml[]..[])
]
                                                                  ]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "mk_variant" (derive.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "cons" (derive.ml[]..[])
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "exps" (derive.ml[]..[])
                                                                    ]
                                                            ]
                                                      ]
                                                      expression (derive.ml[]..[])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (derive.ml[]..[])
                                                              Ppat_var "e" (derive.ml[]..[])
                                                            expression (derive.ml[]..[])
                                                              Pexp_apply
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "mk" (derive.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (derive.ml[]..[])
Pexp_ident "cons" (derive.ml[]..[])
                                                                      expression (derive.ml[]..[])
Pexp_ident "tyargs" (derive.ml[]..[])
                                                                    ]
                                                              ]
                                                        ]
                                                        expression (derive.ml[]..[])
                                                          Pexp_coerce
                                                          expression (derive.ml[]..[])
                                                            Pexp_variant "Case"
                                                            Some
                                                              expression (derive.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "p" (derive.ml[]..[])
                                                                    None
                                                                    core_type (derive.ml[]..[])
                                                                      Ptyp_constr "Astfn.pat" (derive.ml[]..[])
                                                                      []
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_coerce
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "e" (derive.ml[]..[])
                                                                    None
                                                                    core_type (derive.ml[]..[])
                                                                      Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                                                      []
                                                                ]
                                                          None
                                                          core_type (derive.ml[]..[])
                                                            Ptyp_constr "Astfn.case" (derive.ml[]..[])
                                                            []
                                                core_type (derive.ml[]..[])
                                                  Ptyp_constr "case" (derive.ml[]..[])
                                                  []
                                          ]
                                    ]
                                    expression (derive.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[]..[])
                                            Ppat_var "simple" (derive.ml[]..[])
                                          expression (derive.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (derive.ml[]..[])
                                                  Ppat_constraint
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "lid" (derive.ml[]..[])
                                                  core_type (derive.ml[]..[])
                                                    Ptyp_constr "ident" (derive.ml[]..[])
                                                    []
                                                expression (derive.ml[]..[])
                                                  Pexp_constraint
                                                  expression (derive.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "e" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "+>" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[]..[])
Pexp_ident "lid" (derive.ml[]..[])
                                                                      None
                                                                      core_type (derive.ml[]..[])
Ptyp_constr "ctyp" (derive.ml[]..[])
[]
                                                                ]
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "names" (derive.ml[]..[])
                                                          ]
                                                    ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "f" (derive.ml[]..[])
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "a" (derive.ml[]..[])
                                                            ]
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "Ast_basic.N.view_app" (derive.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_construct "[]" (derive.ml[]..[])
                                                                  None
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "result" (derive.ml[]..[])
                                                            ]
                                                      ]
                                                      expression (derive.ml[]..[])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (derive.ml[]..[])
                                                              Ppat_var "annot" (derive.ml[]..[])
                                                            expression (derive.ml[]..[])
                                                              Pexp_apply
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "appl_of_list" (derive.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_construct "::" (derive.ml[]..[])
                                                                    Some
                                                                      expression (derive.ml[]..[])
Pexp_tuple
[
  expression (derive.ml[]..[])
    Pexp_ident "f" (derive.ml[]..[])
  expression (derive.ml[]..[])
    Pexp_apply
    expression (derive.ml[]..[])
      Pexp_ident "List.map" (derive.ml[]..[])
    [
      <label> ""
        expression (derive.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (derive.ml[]..[])
                Ppat_any
              expression (derive.ml[]..[])
                Pexp_variant "Any"
                None
          ]
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "a" (derive.ml[]..[])
    ]
]
                                                              ]
                                                        ]
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "gen_tuple_abbrev" (derive.ml[]..[])
                                                          [
                                                            <label> "arity"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "arity" (derive.ml[]..[])
                                                            <label> "annot"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "annot" (derive.ml[]..[])
                                                            <label> "destination"
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "destination" (derive.ml[]..[])
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "lid" (derive.ml[]..[])
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "e" (derive.ml[]..[])
                                                          ]
                                                  core_type (derive.ml[]..[])
                                                    Ptyp_constr "case" (derive.ml[]..[])
                                                    []
                                            ]
                                      ]
                                      expression (derive.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (derive.ml[]..[])
                                              Ppat_var "info" (derive.ml[]..[])
                                            expression (derive.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (derive.ml[]..[])
                                                  Pexp_construct "TyVrnEq" (derive.ml[]..[])
                                                  None
                                                expression (derive.ml[]..[])
                                                  Pexp_apply
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "List.length" (derive.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_apply
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "Ast_basic.N.list_of_bar" (derive.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "ty" (derive.ml[]..[])
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_construct "[]" (derive.ml[]..[])
                                                              None
                                                        ]
                                                  ]
                                              ]
                                        ]
                                        expression (derive.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (derive.ml[]..[])
                                                Ppat_var "ls" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_apply
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "Ctyp.view_variant" (derive.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "ty" (derive.ml[]..[])
                                                ]
                                          ]
                                          expression (derive.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[]..[])
                                                  Ppat_var "res" (derive.ml[]..[])
                                                expression (derive.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[]..[])
                                                        Ppat_var "res" (derive.ml[]..[])
                                                      expression (derive.ml[]..[])
                                                        Pexp_apply
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "List.fold_left" (derive.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_var "acc" (derive.ml[]..[])
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (derive.ml[]..[])
  Ppat_var "x" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_match
  expression (derive.ml[]..[])
    Pexp_ident "x" (derive.ml[]..[])
  [
    <case>
      pattern (derive.ml[]..[])
        Ppat_variant "variant"
        Some
          pattern (derive.ml[]..[])
            Ppat_tuple
            [
              pattern (derive.ml[]..[])
                Ppat_var "cons" (derive.ml[]..[])
              pattern (derive.ml[]..[])
                Ppat_var "args" (derive.ml[]..[])
            ]
      expression (derive.ml[]..[])
        Pexp_construct "::" (derive.ml[]..[])
        Some
          expression (derive.ml[]..[])
            Pexp_tuple
            [
              expression (derive.ml[]..[])
                Pexp_apply
                expression (derive.ml[]..[])
                  Pexp_ident "f" (derive.ml[]..[])
                [
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_tuple
                      [
                        expression (derive.ml[]..[])
                          Pexp_apply
                          expression (derive.ml[]..[])
                            Pexp_ident "^" (derive.ml[]..[])
                          [
                            <label> ""
                              expression (derive.ml[]..[])
                                Pexp_constant Const_string("`",None)
                            <label> ""
                              expression (derive.ml[]..[])
                                Pexp_ident "cons" (derive.ml[]..[])
                          ]
                        expression (derive.ml[]..[])
                          Pexp_ident "args" (derive.ml[]..[])
                      ]
                ]
              expression (derive.ml[]..[])
                Pexp_ident "acc" (derive.ml[]..[])
            ]
    <case>
      pattern (derive.ml[]..[])
        Ppat_variant "abbrev"
        Some
          pattern (derive.ml[]..[])
            Ppat_var "lid" (derive.ml[]..[])
      expression (derive.ml[]..[])
        Pexp_construct "::" (derive.ml[]..[])
        Some
          expression (derive.ml[]..[])
            Pexp_tuple
            [
              expression (derive.ml[]..[])
                Pexp_apply
                expression (derive.ml[]..[])
                  Pexp_ident "simple" (derive.ml[]..[])
                [
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "lid" (derive.ml[]..[])
                ]
              expression (derive.ml[]..[])
                Pexp_ident "acc" (derive.ml[]..[])
            ]
  ]
                                                                    ]
                                                              ]
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_construct "[]" (derive.ml[]..[])
                                                              None
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "ls" (derive.ml[]..[])
                                                        ]
                                                  ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "t" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_ifthenelse
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "&&" (derive.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident ">=" (derive.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_apply
expression (derive.ml[]..[])
  Pexp_ident "List.length" (derive.ml[]..[])
[
  <label> ""
    expression (derive.ml[]..[])
      Pexp_ident "res" (derive.ml[]..[])
]
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_constant Const_int 2
                                                                  ]
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident ">=" (derive.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "arity" (derive.ml[]..[])
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_constant Const_int 2
                                                                  ]
                                                            ]
                                                          expression (derive.ml[]..[])
                                                            Pexp_match
                                                            expression (derive.ml[]..[])
                                                              Pexp_apply
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "default" (derive.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "info" (derive.ml[]..[])
                                                              ]
                                                            [
                                                              <case>
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_construct "Some" (derive.ml[]..[])
                                                                  Some
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "x" (derive.ml[]..[])
                                                                expression (derive.ml[]..[])
                                                                  Pexp_construct "::" (derive.ml[]..[])
                                                                  Some
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (derive.ml[]..[])
  Pexp_ident "x" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_ident "res" (derive.ml[]..[])
                                                                      ]
                                                              <case>
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_construct "None" (derive.ml[]..[])
                                                                  None
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "res" (derive.ml[]..[])
                                                            ]
                                                          Some
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "res" (derive.ml[]..[])
                                                    ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "List.rev" (derive.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "t" (derive.ml[]..[])
                                                      ]
                                            ]
                                            expression (derive.ml[]..[])
                                              Pexp_apply
                                              expression (derive.ml[]..[])
                                                Pexp_ident "ExpN.currying" (derive.ml[]..[])
                                              [
                                                <label> "arity"
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "arity" (derive.ml[]..[])
                                                <label> ""
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "res" (derive.ml[]..[])
                                              ]
                              ]
                      ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "mk_prefix" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (derive.ml[]..[])
                Ppat_constraint
                pattern (derive.ml[]..[])
                  Ppat_var "vars" (derive.ml[]..[])
                core_type (derive.ml[]..[])
                  Ptyp_constr "opt_decl_params" (derive.ml[]..[])
                  []
              expression (derive.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[]..[])
                      Ppat_constraint
                      pattern (derive.ml[]..[])
                        Ppat_var "acc" (derive.ml[]..[])
                      core_type (derive.ml[]..[])
                        Ptyp_constr "exp" (derive.ml[]..[])
                        []
                    expression (derive.ml[]..[])
                      Pexp_fun "?names"
                      Some
                        expression (derive.ml[]..[])
                          Pexp_construct "[]" (derive.ml[]..[])
                          None
                      pattern (derive.ml[]..[])
                        Ppat_var "names" (derive.ml[]..[])
                      expression (derive.ml[]..[])
                        Pexp_fun "left_type_variable"
                        None
                        pattern (derive.ml[]..[])
                          Ppat_var "left_type_variable" (derive.ml[]..[])
                        expression (derive.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (derive.ml[]..[])
                                Ppat_var "varf" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_apply
                                expression (derive.ml[]..[])
                                  Pexp_ident "basic_transform" (derive.ml[]..[])
                                [
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_ident "left_type_variable" (derive.ml[]..[])
                                ]
                          ]
                          expression (derive.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (derive.ml[]..[])
                                  Ppat_var "f" (derive.ml[]..[])
                                expression (derive.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (derive.ml[]..[])
                                        Ppat_constraint
                                        pattern (derive.ml[]..[])
                                          Ppat_var "var" (derive.ml[]..[])
                                        core_type (derive.ml[]..[])
                                          Ptyp_constr "decl_params" (derive.ml[]..[])
                                          []
                                      expression (derive.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (derive.ml[]..[])
                                              Ppat_var "acc" (derive.ml[]..[])
                                            expression (derive.ml[]..[])
                                              Pexp_match
                                              expression (derive.ml[]..[])
                                                Pexp_ident "var" (derive.ml[]..[])
                                              [
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_variant "Quote"
                                                    Some
                                                      pattern (derive.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[]..[])
                                                            Ppat_any
                                                          pattern (derive.ml[]..[])
                                                            Ppat_variant "Lid"
                                                            Some
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "s" (derive.ml[]..[])
                                                        ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_coerce
                                                    expression (derive.ml[]..[])
                                                      Pexp_variant "Fun"
                                                      Some
                                                        expression (derive.ml[]..[])
                                                          Pexp_variant "Case"
                                                          Some
                                                            expression (derive.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (derive.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "varf" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "s" (derive.ml[]..[])
                                                                      ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "acc" (derive.ml[]..[])
                                                                  None
                                                                  core_type (derive.ml[]..[])
                                                                    Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                                                    []
                                                              ]
                                                    None
                                                    core_type (derive.ml[]..[])
                                                      Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                                      []
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "t" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "failwithf" (derive.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_constant Const_string("mk_prefix: %s",None)
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "ObjsN.dump_decl_params" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "t" (derive.ml[]..[])
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                            expression (derive.ml[]..[])
                              Pexp_match
                              expression (derive.ml[]..[])
                                Pexp_ident "vars" (derive.ml[]..[])
                              [
                                <case>
                                  pattern (derive.ml[]..[])
                                    Ppat_variant "None"
                                    None
                                  expression (derive.ml[]..[])
                                    Pexp_apply
                                    expression (derive.ml[]..[])
                                      Pexp_ident "ExpN.mkfun" (derive.ml[]..[])
                                    [
                                      <label> ""
                                        expression (derive.ml[]..[])
                                          Pexp_ident "names" (derive.ml[]..[])
                                      <label> ""
                                        expression (derive.ml[]..[])
                                          Pexp_ident "acc" (derive.ml[]..[])
                                    ]
                                <case>
                                  pattern (derive.ml[]..[])
                                    Ppat_variant "Some"
                                    Some
                                      pattern (derive.ml[]..[])
                                        Ppat_var "xs" (derive.ml[]..[])
                                  expression (derive.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[]..[])
                                          Ppat_var "vars" (derive.ml[]..[])
                                        expression (derive.ml[]..[])
                                          Pexp_apply
                                          expression (derive.ml[]..[])
                                            Pexp_ident "Ast_basic.N.list_of_com" (derive.ml[]..[])
                                          [
                                            <label> ""
                                              expression (derive.ml[]..[])
                                                Pexp_ident "xs" (derive.ml[]..[])
                                            <label> ""
                                              expression (derive.ml[]..[])
                                                Pexp_construct "[]" (derive.ml[]..[])
                                                None
                                          ]
                                    ]
                                    expression (derive.ml[]..[])
                                      Pexp_apply
                                      expression (derive.ml[]..[])
                                        Pexp_ident "List.fold_right" (derive.ml[]..[])
                                      [
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "f" (derive.ml[]..[])
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "vars" (derive.ml[]..[])
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_apply
                                            expression (derive.ml[]..[])
                                              Pexp_ident "ExpN.mkfun" (derive.ml[]..[])
                                            [
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "names" (derive.ml[]..[])
                                              <label> ""
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "acc" (derive.ml[]..[])
                                            ]
                                      ]
                              ]
                ]
          ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "fun_of_tydcl" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?names"
          Some
            expression (derive.ml[]..[])
              Pexp_construct "[]" (derive.ml[]..[])
              None
          pattern (derive.ml[]..[])
            Ppat_var "names" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[]..[])
                Pexp_constant Const_int 1
            pattern (derive.ml[]..[])
              Ppat_var "arity" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "left_type_variable"
              None
              pattern (derive.ml[]..[])
                Ppat_var "left_type_variable" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "mk_record"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "mk_record" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "result"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "result" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (derive.ml[]..[])
                          Ppat_var "simple_exp_of_ctyp" (derive.ml[]..[])
                        expression (derive.ml[]..[])
                          Pexp_function
                          [
                            <case>
                              pattern (derive.ml[]..[])
                                Ppat_var "exp_of_ctyp" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (derive.ml[]..[])
                                      Ppat_var "exp_of_variant" (derive.ml[]..[])
                                    expression (derive.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (derive.ml[]..[])
                                            Ppat_var "tydcl" (derive.ml[]..[])
                                          expression (derive.ml[]..[])
                                            Pexp_constraint
                                            expression (derive.ml[]..[])
                                              Pexp_match
                                              expression (derive.ml[]..[])
                                                Pexp_constraint
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "tydcl" (derive.ml[]..[])
                                                core_type (derive.ml[]..[])
                                                  Ptyp_constr "typedecl" (derive.ml[]..[])
                                                  []
                                              [
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_variant "TyDcl"
                                                    Some
                                                      pattern (derive.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[]..[])
                                                            Ppat_any
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "tyvars" (derive.ml[]..[])
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "ctyp" (derive.ml[]..[])
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "_constraints" (derive.ml[]..[])
                                                        ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_match
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "ctyp" (derive.ml[]..[])
                                                    [
                                                      <case>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_or
                                                          pattern (derive.ml[]..[])
                                                            Ppat_variant "TyMan"
                                                            Some
                                                              pattern (derive.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_var "repr" (derive.ml[]..[])
                                                                ]
                                                          pattern (derive.ml[]..[])
                                                            Ppat_variant "TyRepr"
                                                            Some
                                                              pattern (derive.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_var "repr" (derive.ml[]..[])
                                                                ]
                                                        expression (derive.ml[]..[])
                                                          Pexp_match
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "repr" (derive.ml[]..[])
                                                          [
                                                            <case>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_variant "Record"
                                                                Some
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_var "t" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "cols" (derive.ml[]..[])
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "Ctyp.list_of_record" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "t" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (derive.ml[]..[])
Ppat_var "pat" (derive.ml[]..[])
                                                                      expression (derive.ml[]..[])
Pexp_coerce
expression (derive.ml[]..[])
  Pexp_apply
  expression (derive.ml[]..[])
    Pexp_ident "EpN.mk_record" (derive.ml[]..[])
  [
    <label> "arity"
      expression (derive.ml[]..[])
        Pexp_ident "arity" (derive.ml[]..[])
    <label> ""
      expression (derive.ml[]..[])
        Pexp_ident "cols" (derive.ml[]..[])
  ]
None
core_type (derive.ml[]..[])
  Ptyp_constr "pat" (derive.ml[]..[])
  []
                                                                  ]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (derive.ml[]..[])
  Ppat_var "info" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_apply
  expression (derive.ml[]..[])
    Pexp_ident "List.mapi" (derive.ml[]..[])
  [
    <label> ""
      expression (derive.ml[]..[])
        Pexp_function
        [
          <case>
            pattern (derive.ml[]..[])
              Ppat_var "i" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_function
              [
                <case>
                  pattern (derive.ml[]..[])
                    Ppat_var "x" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_match
                    expression (derive.ml[]..[])
                      Pexp_constraint
                      expression (derive.ml[]..[])
                        Pexp_ident "x" (derive.ml[]..[])
                      core_type (derive.ml[]..[])
                        Ptyp_constr "Ctyp.col" (derive.ml[]..[])
                        []
                    [
                      <case>
                        pattern (derive.ml[]..[])
                          Ppat_record Closed
                          [
                            "label" (derive.ml[]..[])
                              pattern (derive.ml[]..[])
                                Ppat_var "label" (derive.ml[]..[])
                            "is_mutable" (derive.ml[]..[])
                              pattern (derive.ml[]..[])
                                Ppat_var "is_mutable" (derive.ml[]..[])
                            "ty" (derive.ml[]..[])
                              pattern (derive.ml[]..[])
                                Ppat_var "ty" (derive.ml[]..[])
                          ]
                        expression (derive.ml[]..[])
                          Pexp_record
                          [
                            "info" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_apply
                                expression (derive.ml[]..[])
                                  Pexp_ident "mapi_exp" (derive.ml[]..[])
                                [
                                  <label> "arity"
                                    expression (derive.ml[]..[])
                                      Pexp_ident "arity" (derive.ml[]..[])
                                  <label> "names"
                                    expression (derive.ml[]..[])
                                      Pexp_ident "names" (derive.ml[]..[])
                                  <label> "f"
                                    expression (derive.ml[]..[])
                                      Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_ident "i" (derive.ml[]..[])
                                  <label> ""
                                    expression (derive.ml[]..[])
                                      Pexp_ident "ty" (derive.ml[]..[])
                                ]
                            "label" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_ident "label" (derive.ml[]..[])
                            "is_mutable" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_ident "is_mutable" (derive.ml[]..[])
                          ]
                          None
                    ]
              ]
        ]
    <label> ""
      expression (derive.ml[]..[])
        Pexp_ident "cols" (derive.ml[]..[])
  ]
                                                                    ]
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "mk_prefix" (derive.ml[]..[])
                                                                      [
<label> "names"
  expression (derive.ml[]..[])
    Pexp_ident "names" (derive.ml[]..[])
<label> "left_type_variable"
  expression (derive.ml[]..[])
    Pexp_ident "left_type_variable" (derive.ml[]..[])
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "tyvars" (derive.ml[]..[])
<label> ""
  expression (derive.ml[]..[])
    Pexp_apply
    expression (derive.ml[]..[])
      Pexp_ident "ExpN.currying" (derive.ml[]..[])
    [
      <label> "arity"
        expression (derive.ml[]..[])
          Pexp_ident "arity" (derive.ml[]..[])
      <label> ""
        expression (derive.ml[]..[])
          Pexp_construct "::" (derive.ml[]..[])
          Some
            expression (derive.ml[]..[])
              Pexp_tuple
              [
                expression (derive.ml[]..[])
                  Pexp_coerce
                  expression (derive.ml[]..[])
                    Pexp_variant "Case"
                    Some
                      expression (derive.ml[]..[])
                        Pexp_tuple
                        [
                          expression (derive.ml[]..[])
                            Pexp_coerce
                            expression (derive.ml[]..[])
                              Pexp_ident "pat" (derive.ml[]..[])
                            None
                            core_type (derive.ml[]..[])
                              Ptyp_constr "Astfn.pat" (derive.ml[]..[])
                              []
                          expression (derive.ml[]..[])
                            Pexp_coerce
                            expression (derive.ml[]..[])
                              Pexp_apply
                              expression (derive.ml[]..[])
                                Pexp_ident "mk_record" (derive.ml[]..[])
                              [
                                <label> ""
                                  expression (derive.ml[]..[])
                                    Pexp_ident "info" (derive.ml[]..[])
                              ]
                            None
                            core_type (derive.ml[]..[])
                              Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                              []
                        ]
                  None
                  core_type (derive.ml[]..[])
                    Ptyp_constr "Astfn.case" (derive.ml[]..[])
                    []
                expression (derive.ml[]..[])
                  Pexp_construct "[]" (derive.ml[]..[])
                  None
              ]
    ]
                                                                      ]
                                                            <case>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_variant "Sum"
                                                                Some
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_var "ctyp" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "funct" (derive.ml[]..[])
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "exp_of_ctyp" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "ctyp" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "mk_prefix" (derive.ml[]..[])
                                                                  [
                                                                    <label> "names"
                                                                      expression (derive.ml[]..[])
Pexp_ident "names" (derive.ml[]..[])
                                                                    <label> "left_type_variable"
                                                                      expression (derive.ml[]..[])
Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "tyvars" (derive.ml[]..[])
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "funct" (derive.ml[]..[])
                                                                  ]
                                                            <case>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "t" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "failwithf" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_constant Const_string("fun_of_tydcl outer %s",None)
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "ObjsN.dump_type_repr" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "t" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                          ]
                                                      <case>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_variant "TyEq"
                                                          Some
                                                            pattern (derive.ml[]..[])
                                                              Ppat_tuple
                                                              [
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_any
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_var "ctyp" (derive.ml[]..[])
                                                              ]
                                                        expression (derive.ml[]..[])
                                                          Pexp_match
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "ctyp" (derive.ml[]..[])
                                                          [
                                                            <case>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_alias "x" (derive.ml[]..[])
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (derive.ml[]..[])
Ppat_or
pattern (derive.ml[]..[])
  Ppat_type
  "ident'" (derive.ml[]..[])
pattern (derive.ml[]..[])
  Ppat_variant "Par"
  Some
    pattern (derive.ml[]..[])
      Ppat_any
                                                                      pattern (derive.ml[]..[])
Ppat_variant "Quote"
Some
  pattern (derive.ml[]..[])
    Ppat_any
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_variant "Arrow"
                                                                      Some
pattern (derive.ml[]..[])
  Ppat_any
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_variant "App"
                                                                    Some
                                                                      pattern (derive.ml[]..[])
Ppat_any
                                                              expression (derive.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "exp" (derive.ml[]..[])
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "x" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (derive.ml[]..[])
Ppat_var "funct" (derive.ml[]..[])
                                                                      expression (derive.ml[]..[])
Pexp_apply
expression (derive.ml[]..[])
  Pexp_ident "ExpN.eta_expand" (derive.ml[]..[])
[
  <label> ""
    expression (derive.ml[]..[])
      Pexp_apply
      expression (derive.ml[]..[])
        Pexp_ident "+>" (derive.ml[]..[])
      [
        <label> ""
          expression (derive.ml[]..[])
            Pexp_ident "exp" (derive.ml[]..[])
        <label> ""
          expression (derive.ml[]..[])
            Pexp_ident "names" (derive.ml[]..[])
      ]
  <label> ""
    expression (derive.ml[]..[])
      Pexp_ident "arity" (derive.ml[]..[])
]
                                                                  ]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "mk_prefix" (derive.ml[]..[])
                                                                    [
                                                                      <label> "names"
expression (derive.ml[]..[])
  Pexp_ident "names" (derive.ml[]..[])
                                                                      <label> "left_type_variable"
expression (derive.ml[]..[])
  Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "tyvars" (derive.ml[]..[])
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "funct" (derive.ml[]..[])
                                                                    ]
                                                            <case>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_or
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_variant "PolyEq"
                                                                      Some
pattern (derive.ml[]..[])
  Ppat_var "t" (derive.ml[]..[])
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_variant "PolySup"
                                                                      Some
pattern (derive.ml[]..[])
  Ppat_var "t" (derive.ml[]..[])
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_variant "PolyInf"
                                                                    Some
                                                                      pattern (derive.ml[]..[])
Ppat_var "t" (derive.ml[]..[])
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_variant "PolyInfSup"
                                                                  Some
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_tuple
                                                                      [
pattern (derive.ml[]..[])
  Ppat_var "t" (derive.ml[]..[])
pattern (derive.ml[]..[])
  Ppat_any
                                                                      ]
                                                              expression (derive.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "case" (derive.ml[]..[])
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "exp_of_variant" (derive.ml[]..[])
                                                                      [
<label> "result"
  expression (derive.ml[]..[])
    Pexp_ident "result" (derive.ml[]..[])
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "t" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "mk_prefix" (derive.ml[]..[])
                                                                  [
                                                                    <label> "names"
                                                                      expression (derive.ml[]..[])
Pexp_ident "names" (derive.ml[]..[])
                                                                    <label> "left_type_variable"
                                                                      expression (derive.ml[]..[])
Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "tyvars" (derive.ml[]..[])
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "case" (derive.ml[]..[])
                                                                  ]
                                                            <case>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "t" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "failwithf" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_constant Const_string("fun_of_tydcl inner %s",None)
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "ObjsN.dump_ctyp" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "t" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                          ]
                                                      <case>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "t" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "failwithf" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_constant Const_string("fun_of_tydcl middle %s",None)
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "ObjsN.dump_type_info" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "t" (derive.ml[]..[])
                                                                ]
                                                          ]
                                                    ]
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "t" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "failwithf" (derive.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_constant Const_string("fun_of_tydcl outer %s",None)
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "ObjsN.dump_typedecl" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "t" (derive.ml[]..[])
                                                          ]
                                                    ]
                                              ]
                                            core_type (derive.ml[]..[])
                                              Ptyp_constr "exp" (derive.ml[]..[])
                                              []
                                      ]
                                ]
                          ]
                    ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "bind_of_tydcl" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?cons_transform"
          None
          pattern (derive.ml[]..[])
            Ppat_var "cons_transform" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (derive.ml[]..[])
                  Ppat_var "simple_exp_of_ctyp" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "?arity"
                  Some
                    expression (derive.ml[]..[])
                      Pexp_constant Const_int 1
                  pattern (derive.ml[]..[])
                    Ppat_var "arity" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_fun "?names"
                    Some
                      expression (derive.ml[]..[])
                        Pexp_construct "[]" (derive.ml[]..[])
                        None
                    pattern (derive.ml[]..[])
                      Ppat_var "names" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_fun "?destination"
                      Some
                        expression (derive.ml[]..[])
                          Pexp_construct "Str_item" (derive.ml[]..[])
                          None
                      pattern (derive.ml[]..[])
                        Ppat_var "destination" (derive.ml[]..[])
                      expression (derive.ml[]..[])
                        Pexp_fun "?annot"
                        None
                        pattern (derive.ml[]..[])
                          Ppat_var "annot" (derive.ml[]..[])
                        expression (derive.ml[]..[])
                          Pexp_fun "default"
                          None
                          pattern (derive.ml[]..[])
                            Ppat_var "default" (derive.ml[]..[])
                          expression (derive.ml[]..[])
                            Pexp_fun "mk_variant"
                            None
                            pattern (derive.ml[]..[])
                              Ppat_var "mk_variant" (derive.ml[]..[])
                            expression (derive.ml[]..[])
                              Pexp_fun "left_type_id"
                              None
                              pattern (derive.ml[]..[])
                                Ppat_constraint
                                pattern (derive.ml[]..[])
                                  Ppat_var "left_type_id" (derive.ml[]..[])
                                core_type (derive.ml[]..[])
                                  Ptyp_constr "basic_id_transform" (derive.ml[]..[])
                                  []
                              expression (derive.ml[]..[])
                                Pexp_fun "left_type_variable"
                                None
                                pattern (derive.ml[]..[])
                                  Ppat_constraint
                                  pattern (derive.ml[]..[])
                                    Ppat_var "left_type_variable" (derive.ml[]..[])
                                  core_type (derive.ml[]..[])
                                    Ptyp_constr "basic_id_transform" (derive.ml[]..[])
                                    []
                                expression (derive.ml[]..[])
                                  Pexp_fun "mk_record"
                                  None
                                  pattern (derive.ml[]..[])
                                    Ppat_var "mk_record" (derive.ml[]..[])
                                  expression (derive.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (derive.ml[]..[])
                                          Ppat_var "tydcl" (derive.ml[]..[])
                                        expression (derive.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (derive.ml[]..[])
                                                Ppat_var "tctor_var" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_apply
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "basic_transform" (derive.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "left_type_id" (derive.ml[]..[])
                                                ]
                                          ]
                                          expression (derive.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (derive.ml[]..[])
                                                      Ppat_var "name" (derive.ml[]..[])
                                                    pattern (derive.ml[]..[])
                                                      Ppat_var "len" (derive.ml[]..[])
                                                  ]
                                                expression (derive.ml[]..[])
                                                  Pexp_apply
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "Ctyp.name_length_of_tydcl" (derive.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "tydcl" (derive.ml[]..[])
                                                  ]
                                            ]
                                            expression (derive.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "fname" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_apply
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "tctor_var" (derive.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "name" (derive.ml[]..[])
                                                    ]
                                              ]
                                              expression (derive.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (derive.ml[]..[])
                                                      Ppat_tuple
                                                      [
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "_ty" (derive.ml[]..[])
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "result" (derive.ml[]..[])
                                                      ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "Ctyp.mk_method_type_of_name" (derive.ml[]..[])
                                                      [
                                                        <label> "number"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "arity" (derive.ml[]..[])
                                                        <label> "prefix"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "names" (derive.ml[]..[])
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "name" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "len" (derive.ml[]..[])
                                                            ]
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "destination" (derive.ml[]..[])
                                                      ]
                                                ]
                                                expression (derive.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "annot" (derive.ml[]..[])
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "result" (derive.ml[]..[])
                                                        ]
                                                      expression (derive.ml[]..[])
                                                        Pexp_match
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "annot" (derive.ml[]..[])
                                                        [
                                                          <case>
                                                            pattern (derive.ml[]..[])
                                                              Ppat_construct "None" (derive.ml[]..[])
                                                              None
                                                            expression (derive.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (derive.ml[]..[])
                                                                  Pexp_construct "None" (derive.ml[]..[])
                                                                  None
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "result" (derive.ml[]..[])
                                                              ]
                                                          <case>
                                                            pattern (derive.ml[]..[])
                                                              Ppat_construct "Some" (derive.ml[]..[])
                                                              Some
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_var "f" (derive.ml[]..[])
                                                            expression (derive.ml[]..[])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (derive.ml[]..[])
Ppat_var "a" (derive.ml[]..[])
                                                                      pattern (derive.ml[]..[])
Ppat_var "b" (derive.ml[]..[])
                                                                    ]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "f" (derive.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "name" (derive.ml[]..[])
                                                                    ]
                                                              ]
                                                              expression (derive.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_construct "Some" (derive.ml[]..[])
                                                                    Some
                                                                      expression (derive.ml[]..[])
Pexp_ident "a" (derive.ml[]..[])
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "b" (derive.ml[]..[])
                                                                ]
                                                        ]
                                                  ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "fun_exp" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_ifthenelse
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "@@" (derive.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "not" (derive.ml[]..[])
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "Ctyp.is_abstract" (derive.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "tydcl" (derive.ml[]..[])
                                                                  ]
                                                            ]
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "fun_of_tydcl" (derive.ml[]..[])
                                                            [
                                                              <label> "names"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "names" (derive.ml[]..[])
                                                              <label> "arity"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "arity" (derive.ml[]..[])
                                                              <label> "left_type_variable"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                              <label> "mk_record"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "mk_record" (derive.ml[]..[])
                                                              <label> "result"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "result" (derive.ml[]..[])
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "exp_of_ctyp" (derive.ml[]..[])
                                                                  [
                                                                    <label> "?cons_transform"
                                                                      expression (derive.ml[]..[])
Pexp_ident "cons_transform" (derive.ml[]..[])
                                                                    <label> "arity"
                                                                      expression (derive.ml[]..[])
Pexp_ident "arity" (derive.ml[]..[])
                                                                    <label> "names"
                                                                      expression (derive.ml[]..[])
Pexp_ident "names" (derive.ml[]..[])
                                                                    <label> "default"
                                                                      expression (derive.ml[]..[])
Pexp_ident "default" (derive.ml[]..[])
                                                                    <label> "mk_variant"
                                                                      expression (derive.ml[]..[])
Pexp_ident "mk_variant" (derive.ml[]..[])
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
                                                                  ]
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "exp_of_variant" (derive.ml[]..[])
                                                                  [
                                                                    <label> "?cons_transform"
                                                                      expression (derive.ml[]..[])
Pexp_ident "cons_transform" (derive.ml[]..[])
                                                                    <label> "arity"
                                                                      expression (derive.ml[]..[])
Pexp_ident "arity" (derive.ml[]..[])
                                                                    <label> "names"
                                                                      expression (derive.ml[]..[])
Pexp_ident "names" (derive.ml[]..[])
                                                                    <label> "default"
                                                                      expression (derive.ml[]..[])
Pexp_ident "default" (derive.ml[]..[])
                                                                    <label> "mk_variant"
                                                                      expression (derive.ml[]..[])
Pexp_ident "mk_variant" (derive.ml[]..[])
                                                                    <label> "destination"
                                                                      expression (derive.ml[]..[])
Pexp_ident "destination" (derive.ml[]..[])
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
                                                                  ]
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "tydcl" (derive.ml[]..[])
                                                            ]
                                                          Some
                                                            expression (derive.ml[]..[])
                                                              Pexp_sequence
                                                              expression (derive.ml[]..[])
                                                                Pexp_apply
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "@@" (derive.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "eprintf" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_constant Const_string("Warning: %s as a abstract type no structure generated\n",None)
                                                                      ]
                                                                  <label> ""
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "ObjsN.dump_typedecl" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "tydcl" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                              expression (derive.ml[]..[])
                                                                Pexp_coerce
                                                                expression (derive.ml[]..[])
                                                                  Pexp_variant "App"
                                                                  Some
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (derive.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (derive.ml[]..[])
      Pexp_constant Const_string("failwith",None)
expression (derive.ml[]..[])
  Pexp_variant "Str"
  Some
    expression (derive.ml[]..[])
      Pexp_constant Const_string("Abstract data type not implemented",None)
                                                                      ]
                                                                None
                                                                core_type (derive.ml[]..[])
                                                                  Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                                                  []
                                                    ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_match
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "annot" (derive.ml[]..[])
                                                      [
                                                        <case>
                                                          pattern (derive.ml[]..[])
                                                            Ppat_construct "None" (derive.ml[]..[])
                                                            None
                                                          expression (derive.ml[]..[])
                                                            Pexp_coerce
                                                            expression (derive.ml[]..[])
                                                              Pexp_variant "Bind"
                                                              Some
                                                                expression (derive.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (derive.ml[]..[])
  Pexp_ident "fname" (derive.ml[]..[])
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[]..[])
Pexp_ident "fun_exp" (derive.ml[]..[])
                                                                      None
                                                                      core_type (derive.ml[]..[])
Ptyp_constr "Astfn.exp" (derive.ml[]..[])
[]
                                                                  ]
                                                            None
                                                            core_type (derive.ml[]..[])
                                                              Ptyp_constr "Astfn.bind" (derive.ml[]..[])
                                                              []
                                                        <case>
                                                          pattern (derive.ml[]..[])
                                                            Ppat_construct "Some" (derive.ml[]..[])
                                                            Some
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "x" (derive.ml[]..[])
                                                          expression (derive.ml[]..[])
                                                            Pexp_coerce
                                                            expression (derive.ml[]..[])
                                                              Pexp_variant "Bind"
                                                              Some
                                                                expression (derive.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (derive.ml[]..[])
  Pexp_ident "fname" (derive.ml[]..[])
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_variant "Constraint"
                                                                      Some
expression (derive.ml[]..[])
  Pexp_tuple
  [
    expression (derive.ml[]..[])
      Pexp_coerce
      expression (derive.ml[]..[])
        Pexp_ident "fun_exp" (derive.ml[]..[])
      None
      core_type (derive.ml[]..[])
        Ptyp_constr "Astfn.exp" (derive.ml[]..[])
        []
    expression (derive.ml[]..[])
      Pexp_coerce
      expression (derive.ml[]..[])
        Pexp_ident "x" (derive.ml[]..[])
      None
      core_type (derive.ml[]..[])
        Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
        []
  ]
                                                                  ]
                                                            None
                                                            core_type (derive.ml[]..[])
                                                              Ptyp_constr "Astfn.bind" (derive.ml[]..[])
                                                              []
                                                      ]
                                    ]
            ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "stru_of_mtyps" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?module_name"
          None
          pattern (derive.ml[]..[])
            Ppat_var "module_name" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?cons_transform"
            None
            pattern (derive.ml[]..[])
              Ppat_var "cons_transform" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "?annot"
              None
              pattern (derive.ml[]..[])
                Ppat_var "annot" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "?arity"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "arity" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "?names"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "names" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_fun "default"
                    None
                    pattern (derive.ml[]..[])
                      Ppat_var "default" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_fun "mk_variant"
                      None
                      pattern (derive.ml[]..[])
                        Ppat_var "mk_variant" (derive.ml[]..[])
                      expression (derive.ml[]..[])
                        Pexp_fun "left_type_id"
                        None
                        pattern (derive.ml[]..[])
                          Ppat_var "left_type_id" (derive.ml[]..[])
                        expression (derive.ml[]..[])
                          Pexp_fun "left_type_variable"
                          None
                          pattern (derive.ml[]..[])
                            Ppat_var "left_type_variable" (derive.ml[]..[])
                          expression (derive.ml[]..[])
                            Pexp_fun "mk_record"
                            None
                            pattern (derive.ml[]..[])
                              Ppat_var "mk_record" (derive.ml[]..[])
                            expression (derive.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (derive.ml[]..[])
                                    Ppat_var "simple_exp_of_ctyp_with_cxt" (derive.ml[]..[])
                                  expression (derive.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (derive.ml[]..[])
                                          Ppat_constraint
                                          pattern (derive.ml[]..[])
                                            Ppat_var "lst" (derive.ml[]..[])
                                          core_type (derive.ml[]..[])
                                            Ptyp_constr "mtyps" (derive.ml[]..[])
                                            []
                                        expression (derive.ml[]..[])
                                          Pexp_constraint
                                          expression (derive.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[]..[])
                                                  Ppat_var "cxt" (derive.ml[]..[])
                                                expression (derive.ml[]..[])
                                                  Pexp_apply
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "Hashset.create" (derive.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_constant Const_int 50
                                                  ]
                                            ]
                                            expression (derive.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "mk_bind" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_constraint
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "bind_of_tydcl" (derive.ml[]..[])
                                                      [
                                                        <label> "?cons_transform"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "cons_transform" (derive.ml[]..[])
                                                        <label> "?arity"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "arity" (derive.ml[]..[])
                                                        <label> "?annot"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "annot" (derive.ml[]..[])
                                                        <label> "?names"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "names" (derive.ml[]..[])
                                                        <label> "default"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "default" (derive.ml[]..[])
                                                        <label> "mk_variant"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "mk_variant" (derive.ml[]..[])
                                                        <label> "left_type_id"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "left_type_id" (derive.ml[]..[])
                                                        <label> "left_type_variable"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                        <label> "mk_record"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "mk_record" (derive.ml[]..[])
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "simple_exp_of_ctyp_with_cxt" (derive.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "cxt" (derive.ml[]..[])
                                                            ]
                                                      ]
                                                    core_type (derive.ml[]..[])
                                                      Ptyp_arrow
                                                      ""
                                                      core_type (derive.ml[]..[])
                                                        Ptyp_constr "typedecl" (derive.ml[]..[])
                                                        []
                                                      core_type (derive.ml[]..[])
                                                        Ptyp_constr "bind" (derive.ml[]..[])
                                                        []
                                              ]
                                              expression (derive.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (derive.ml[]..[])
                                                      Ppat_var "fs" (derive.ml[]..[])
                                                    expression (derive.ml[]..[])
                                                      Pexp_function
                                                      [
                                                        <case>
                                                          pattern (derive.ml[]..[])
                                                            Ppat_constraint
                                                            pattern (derive.ml[]..[])
                                                              Ppat_var "ty" (derive.ml[]..[])
                                                            core_type (derive.ml[]..[])
                                                              Ptyp_constr "types" (derive.ml[]..[])
                                                              []
                                                          expression (derive.ml[]..[])
                                                            Pexp_constraint
                                                            expression (derive.ml[]..[])
                                                              Pexp_match
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "ty" (derive.ml[]..[])
                                                              [
                                                                <case>
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_variant "Mutual"
                                                                    Some
                                                                      pattern (derive.ml[]..[])
Ppat_var "named_types" (derive.ml[]..[])
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_match
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "named_types" (derive.ml[]..[])
                                                                    [
                                                                      <case>
pattern (derive.ml[]..[])
  Ppat_construct "[]" (derive.ml[]..[])
  None
expression (derive.ml[]..[])
  Pexp_coerce
  expression (derive.ml[]..[])
    Pexp_variant "StExp"
    Some
      expression (derive.ml[]..[])
        Pexp_variant "Unit"
        None
  None
  core_type (derive.ml[]..[])
    Ptyp_constr "Astfn.stru" (derive.ml[]..[])
    []
                                                                      <case>
pattern (derive.ml[]..[])
  Ppat_var "xs" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_sequence
  expression (derive.ml[]..[])
    Pexp_apply
    expression (derive.ml[]..[])
      Pexp_ident "List.iter" (derive.ml[]..[])
    [
      <label> ""
        expression (derive.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (derive.ml[]..[])
                Ppat_tuple
                [
                  pattern (derive.ml[]..[])
                    Ppat_var "name" (derive.ml[]..[])
                  pattern (derive.ml[]..[])
                    Ppat_var "_ty" (derive.ml[]..[])
                ]
              expression (derive.ml[]..[])
                Pexp_apply
                expression (derive.ml[]..[])
                  Pexp_ident "Hashset.add" (derive.ml[]..[])
                [
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "cxt" (derive.ml[]..[])
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "name" (derive.ml[]..[])
                ]
          ]
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "xs" (derive.ml[]..[])
    ]
  expression (derive.ml[]..[])
    Pexp_let Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "bind" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_apply
          expression (derive.ml[]..[])
            Pexp_ident "Listf.reduce_right_with" (derive.ml[]..[])
          [
            <label> "compose"
              expression (derive.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[]..[])
                      Ppat_var "x" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[]..[])
                            Ppat_var "y" (derive.ml[]..[])
                          expression (derive.ml[]..[])
                            Pexp_coerce
                            expression (derive.ml[]..[])
                              Pexp_variant "And"
                              Some
                                expression (derive.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (derive.ml[]..[])
                                      Pexp_coerce
                                      expression (derive.ml[]..[])
                                        Pexp_ident "x" (derive.ml[]..[])
                                      None
                                      core_type (derive.ml[]..[])
                                        Ptyp_constr "Astfn.bind" (derive.ml[]..[])
                                        []
                                    expression (derive.ml[]..[])
                                      Pexp_coerce
                                      expression (derive.ml[]..[])
                                        Pexp_ident "y" (derive.ml[]..[])
                                      None
                                      core_type (derive.ml[]..[])
                                        Ptyp_constr "Astfn.bind" (derive.ml[]..[])
                                        []
                                  ]
                            None
                            core_type (derive.ml[]..[])
                              Ptyp_constr "Astfn.bind" (derive.ml[]..[])
                              []
                      ]
                ]
            <label> "f"
              expression (derive.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[]..[])
                      Ppat_tuple
                      [
                        pattern (derive.ml[]..[])
                          Ppat_var "_name" (derive.ml[]..[])
                        pattern (derive.ml[]..[])
                          Ppat_var "ty" (derive.ml[]..[])
                      ]
                    expression (derive.ml[]..[])
                      Pexp_apply
                      expression (derive.ml[]..[])
                        Pexp_ident "mk_bind" (derive.ml[]..[])
                      [
                        <label> ""
                          expression (derive.ml[]..[])
                            Pexp_ident "ty" (derive.ml[]..[])
                      ]
                ]
            <label> ""
              expression (derive.ml[]..[])
                Pexp_ident "xs" (derive.ml[]..[])
          ]
    ]
    expression (derive.ml[]..[])
      Pexp_coerce
      expression (derive.ml[]..[])
        Pexp_variant "Value"
        Some
          expression (derive.ml[]..[])
            Pexp_tuple
            [
              expression (derive.ml[]..[])
                Pexp_variant "Positive"
                None
              expression (derive.ml[]..[])
                Pexp_coerce
                expression (derive.ml[]..[])
                  Pexp_ident "bind" (derive.ml[]..[])
                None
                core_type (derive.ml[]..[])
                  Ptyp_constr "Astfn.bind" (derive.ml[]..[])
                  []
            ]
      None
      core_type (derive.ml[]..[])
        Ptyp_constr "Astfn.stru" (derive.ml[]..[])
        []
                                                                    ]
                                                                <case>
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_variant "Single"
                                                                    Some
                                                                      pattern (derive.ml[]..[])
Ppat_tuple
[
  pattern (derive.ml[]..[])
    Ppat_var "name" (derive.ml[]..[])
  pattern (derive.ml[]..[])
    Ppat_var "tydcl" (derive.ml[]..[])
]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_sequence
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "Hashset.add" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "cxt" (derive.ml[]..[])
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "name" (derive.ml[]..[])
                                                                      ]
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_let Nonrec
                                                                      [
<def>
  pattern (derive.ml[]..[])
    Ppat_var "flag" (derive.ml[]..[])
  expression (derive.ml[]..[])
    Pexp_ifthenelse
    expression (derive.ml[]..[])
      Pexp_apply
      expression (derive.ml[]..[])
        Pexp_ident "Ctyp.is_recursive" (derive.ml[]..[])
      [
        <label> ""
          expression (derive.ml[]..[])
            Pexp_ident "tydcl" (derive.ml[]..[])
      ]
    expression (derive.ml[]..[])
      Pexp_variant "Positive"
      None
    Some
      expression (derive.ml[]..[])
        Pexp_variant "Negative"
        None
<def>
  pattern (derive.ml[]..[])
    Ppat_var "bind" (derive.ml[]..[])
  expression (derive.ml[]..[])
    Pexp_apply
    expression (derive.ml[]..[])
      Pexp_ident "mk_bind" (derive.ml[]..[])
    [
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "tydcl" (derive.ml[]..[])
    ]
                                                                      ]
                                                                      expression (derive.ml[]..[])
Pexp_coerce
expression (derive.ml[]..[])
  Pexp_variant "Value"
  Some
    expression (derive.ml[]..[])
      Pexp_tuple
      [
        expression (derive.ml[]..[])
          Pexp_coerce
          expression (derive.ml[]..[])
            Pexp_ident "flag" (derive.ml[]..[])
          None
          core_type (derive.ml[]..[])
            Ptyp_constr "Astfn.flag" (derive.ml[]..[])
            []
        expression (derive.ml[]..[])
          Pexp_coerce
          expression (derive.ml[]..[])
            Pexp_ident "bind" (derive.ml[]..[])
          None
          core_type (derive.ml[]..[])
            Ptyp_constr "Astfn.bind" (derive.ml[]..[])
            []
      ]
None
core_type (derive.ml[]..[])
  Ptyp_constr "Astfn.stru" (derive.ml[]..[])
  []
                                                              ]
                                                            core_type (derive.ml[]..[])
                                                              Ptyp_constr "stru" (derive.ml[]..[])
                                                              []
                                                      ]
                                                ]
                                                expression (derive.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[]..[])
                                                        Ppat_var "item" (derive.ml[]..[])
                                                      expression (derive.ml[]..[])
                                                        Pexp_match
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "lst" (derive.ml[]..[])
                                                        [
                                                          <case>
                                                            pattern (derive.ml[]..[])
                                                              Ppat_construct "[]" (derive.ml[]..[])
                                                              None
                                                            expression (derive.ml[]..[])
                                                              Pexp_coerce
                                                              expression (derive.ml[]..[])
                                                                Pexp_variant "StExp"
                                                                Some
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_variant "Unit"
                                                                    None
                                                              None
                                                              core_type (derive.ml[]..[])
                                                                Ptyp_constr "Astfn.stru" (derive.ml[]..[])
                                                                []
                                                          <case>
                                                            pattern (derive.ml[]..[])
                                                              Ppat_any
                                                            expression (derive.ml[]..[])
                                                              Pexp_apply
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "sem_of_list" (derive.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident "List.map" (derive.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "fs" (derive.ml[]..[])
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "lst" (derive.ml[]..[])
                                                                    ]
                                                              ]
                                                        ]
                                                  ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_match
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "module_name" (derive.ml[]..[])
                                                    [
                                                      <case>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_construct "None" (derive.ml[]..[])
                                                          None
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "item" (derive.ml[]..[])
                                                      <case>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_construct "Some" (derive.ml[]..[])
                                                          Some
                                                            pattern (derive.ml[]..[])
                                                              Ppat_var "m" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_coerce
                                                          expression (derive.ml[]..[])
                                                            Pexp_variant "Module"
                                                            Some
                                                              expression (derive.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_variant "Uid"
                                                                    Some
                                                                      expression (derive.ml[]..[])
Pexp_ident "m" (derive.ml[]..[])
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_variant "Struct"
                                                                    Some
                                                                      expression (derive.ml[]..[])
Pexp_coerce
expression (derive.ml[]..[])
  Pexp_ident "item" (derive.ml[]..[])
None
core_type (derive.ml[]..[])
  Ptyp_constr "Astfn.stru" (derive.ml[]..[])
  []
                                                                ]
                                                          None
                                                          core_type (derive.ml[]..[])
                                                            Ptyp_constr "Astfn.stru" (derive.ml[]..[])
                                                            []
                                                    ]
                                          core_type (derive.ml[]..[])
                                            Ptyp_constr "stru" (derive.ml[]..[])
                                            []
                                    ]
                              ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "obj_of_mtyps" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?cons_transform"
          None
          pattern (derive.ml[]..[])
            Ppat_var "cons_transform" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?module_name"
            None
            pattern (derive.ml[]..[])
              Ppat_var "module_name" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "?arity"
              Some
                expression (derive.ml[]..[])
                  Pexp_constant Const_int 1
              pattern (derive.ml[]..[])
                Ppat_var "arity" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "?names"
                Some
                  expression (derive.ml[]..[])
                    Pexp_construct "[]" (derive.ml[]..[])
                    None
                pattern (derive.ml[]..[])
                  Ppat_var "names" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "default"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "default" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_fun "left_type_variable"
                    None
                    pattern (derive.ml[]..[])
                      Ppat_constraint
                      pattern (derive.ml[]..[])
                        Ppat_var "left_type_variable" (derive.ml[]..[])
                      core_type (derive.ml[]..[])
                        Ptyp_constr "basic_id_transform" (derive.ml[]..[])
                        []
                    expression (derive.ml[]..[])
                      Pexp_fun "mk_record"
                      None
                      pattern (derive.ml[]..[])
                        Ppat_var "mk_record" (derive.ml[]..[])
                      expression (derive.ml[]..[])
                        Pexp_fun "mk_variant"
                        None
                        pattern (derive.ml[]..[])
                          Ppat_var "mk_variant" (derive.ml[]..[])
                        expression (derive.ml[]..[])
                          Pexp_function
                          [
                            <case>
                              pattern (derive.ml[]..[])
                                Ppat_var "base" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (derive.ml[]..[])
                                      Ppat_var "class_name" (derive.ml[]..[])
                                    expression (derive.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (derive.ml[]..[])
                                            Ppat_var "simple_exp_of_ctyp" (derive.ml[]..[])
                                          expression (derive.ml[]..[])
                                            Pexp_fun "kind"
                                            None
                                            pattern (derive.ml[]..[])
                                              Ppat_constraint
                                              pattern (derive.ml[]..[])
                                                Ppat_var "k" (derive.ml[]..[])
                                              core_type (derive.ml[]..[])
                                                Ptyp_constr "kind" (derive.ml[]..[])
                                                []
                                            expression (derive.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_constraint
                                                    pattern (derive.ml[]..[])
                                                      Ppat_var "lst" (derive.ml[]..[])
                                                    core_type (derive.ml[]..[])
                                                      Ptyp_constr "mtyps" (derive.ml[]..[])
                                                      []
                                                  expression (derive.ml[]..[])
                                                    Pexp_constraint
                                                    expression (derive.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "tbl" (derive.ml[]..[])
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "Hashtbl.create" (derive.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[]..[])
                                                                  Pexp_constant Const_int 50
                                                            ]
                                                      ]
                                                      expression (derive.ml[]..[])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (derive.ml[]..[])
                                                              Ppat_var "f" (derive.ml[]..[])
                                                            expression (derive.ml[]..[])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_var "tydcl" (derive.ml[]..[])
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (derive.ml[]..[])
  Ppat_var "result" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_apply
  expression (derive.ml[]..[])
    Pexp_ident "fun_of_tydcl" (derive.ml[]..[])
  [
    <label> "names"
      expression (derive.ml[]..[])
        Pexp_ident "names" (derive.ml[]..[])
    <label> "arity"
      expression (derive.ml[]..[])
        Pexp_ident "arity" (derive.ml[]..[])
    <label> "left_type_variable"
      expression (derive.ml[]..[])
        Pexp_ident "left_type_variable" (derive.ml[]..[])
    <label> "mk_record"
      expression (derive.ml[]..[])
        Pexp_ident "mk_record" (derive.ml[]..[])
    <label> ""
      expression (derive.ml[]..[])
        Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
    <label> ""
      expression (derive.ml[]..[])
        Pexp_apply
        expression (derive.ml[]..[])
          Pexp_ident "exp_of_ctyp" (derive.ml[]..[])
        [
          <label> "?cons_transform"
            expression (derive.ml[]..[])
              Pexp_ident "cons_transform" (derive.ml[]..[])
          <label> "arity"
            expression (derive.ml[]..[])
              Pexp_ident "arity" (derive.ml[]..[])
          <label> "names"
            expression (derive.ml[]..[])
              Pexp_ident "names" (derive.ml[]..[])
          <label> "default"
            expression (derive.ml[]..[])
              Pexp_ident "default" (derive.ml[]..[])
          <label> "mk_variant"
            expression (derive.ml[]..[])
              Pexp_ident "mk_variant" (derive.ml[]..[])
          <label> ""
            expression (derive.ml[]..[])
              Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
        ]
    <label> ""
      expression (derive.ml[]..[])
        Pexp_apply
        expression (derive.ml[]..[])
          Pexp_ident "exp_of_variant" (derive.ml[]..[])
        [
          <label> "?cons_transform"
            expression (derive.ml[]..[])
              Pexp_ident "cons_transform" (derive.ml[]..[])
          <label> "destination"
            expression (derive.ml[]..[])
              Pexp_construct "Obj" (derive.ml[]..[])
              Some
                expression (derive.ml[]..[])
                  Pexp_ident "k" (derive.ml[]..[])
          <label> "arity"
            expression (derive.ml[]..[])
              Pexp_ident "arity" (derive.ml[]..[])
          <label> "names"
            expression (derive.ml[]..[])
              Pexp_ident "names" (derive.ml[]..[])
          <label> "default"
            expression (derive.ml[]..[])
              Pexp_ident "default" (derive.ml[]..[])
          <label> "mk_variant"
            expression (derive.ml[]..[])
              Pexp_ident "mk_variant" (derive.ml[]..[])
          <label> ""
            expression (derive.ml[]..[])
              Pexp_ident "simple_exp_of_ctyp" (derive.ml[]..[])
        ]
    <label> "result"
      expression (derive.ml[]..[])
        Pexp_ident "result" (derive.ml[]..[])
    <label> ""
      expression (derive.ml[]..[])
        Pexp_ident "tydcl" (derive.ml[]..[])
  ]
                                                                    ]
                                                              ]
                                                        ]
                                                        expression (derive.ml[]..[])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "mk_type" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_function
                                                                [
                                                                  <case>
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "tydcl" (derive.ml[]..[])
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_let Nonrec
                                                                      [
<def>
  pattern (derive.ml[]..[])
    Ppat_tuple
    [
      pattern (derive.ml[]..[])
        Ppat_var "name" (derive.ml[]..[])
      pattern (derive.ml[]..[])
        Ppat_var "len" (derive.ml[]..[])
    ]
  expression (derive.ml[]..[])
    Pexp_apply
    expression (derive.ml[]..[])
      Pexp_ident "Ctyp.name_length_of_tydcl" (derive.ml[]..[])
    [
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "tydcl" (derive.ml[]..[])
    ]
                                                                      ]
                                                                      expression (derive.ml[]..[])
Pexp_let Nonrec
[
  <def>
    pattern (derive.ml[]..[])
      Ppat_tuple
      [
        pattern (derive.ml[]..[])
          Ppat_var "ty" (derive.ml[]..[])
        pattern (derive.ml[]..[])
          Ppat_var "result_type" (derive.ml[]..[])
      ]
    expression (derive.ml[]..[])
      Pexp_apply
      expression (derive.ml[]..[])
        Pexp_ident "Ctyp.mk_method_type" (derive.ml[]..[])
      [
        <label> "number"
          expression (derive.ml[]..[])
            Pexp_ident "arity" (derive.ml[]..[])
        <label> "prefix"
          expression (derive.ml[]..[])
            Pexp_ident "names" (derive.ml[]..[])
        <label> ""
          expression (derive.ml[]..[])
            Pexp_tuple
            [
              expression (derive.ml[]..[])
                Pexp_coerce
                expression (derive.ml[]..[])
                  Pexp_variant "Lid"
                  Some
                    expression (derive.ml[]..[])
                      Pexp_ident "name" (derive.ml[]..[])
                None
                core_type (derive.ml[]..[])
                  Ptyp_constr "Astfn.ident" (derive.ml[]..[])
                  []
              expression (derive.ml[]..[])
                Pexp_ident "len" (derive.ml[]..[])
            ]
        <label> ""
          expression (derive.ml[]..[])
            Pexp_construct "Obj" (derive.ml[]..[])
            Some
              expression (derive.ml[]..[])
                Pexp_ident "k" (derive.ml[]..[])
      ]
]
expression (derive.ml[]..[])
  Pexp_tuple
  [
    expression (derive.ml[]..[])
      Pexp_ident "ty" (derive.ml[]..[])
    expression (derive.ml[]..[])
      Pexp_ident "result_type" (derive.ml[]..[])
  ]
                                                                ]
                                                          ]
                                                          expression (derive.ml[]..[])
                                                            Pexp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_var "mk_clfield" (derive.ml[]..[])
                                                                expression (derive.ml[]..[])
                                                                  Pexp_function
                                                                  [
                                                                    <case>
                                                                      pattern (derive.ml[]..[])
Ppat_tuple
[
  pattern (derive.ml[]..[])
    Ppat_var "name" (derive.ml[]..[])
  pattern (derive.ml[]..[])
    Ppat_var "tydcl" (derive.ml[]..[])
]
                                                                      expression (derive.ml[]..[])
Pexp_constraint
expression (derive.ml[]..[])
  Pexp_let Nonrec
  [
    <def>
      pattern (derive.ml[]..[])
        Ppat_tuple
        [
          pattern (derive.ml[]..[])
            Ppat_var "ty" (derive.ml[]..[])
          pattern (derive.ml[]..[])
            Ppat_var "result_type" (derive.ml[]..[])
        ]
      expression (derive.ml[]..[])
        Pexp_apply
        expression (derive.ml[]..[])
          Pexp_ident "mk_type" (derive.ml[]..[])
        [
          <label> ""
            expression (derive.ml[]..[])
              Pexp_ident "tydcl" (derive.ml[]..[])
        ]
  ]
  expression (derive.ml[]..[])
    Pexp_coerce
    expression (derive.ml[]..[])
      Pexp_variant "CrMth"
      Some
        expression (derive.ml[]..[])
          Pexp_tuple
          [
            expression (derive.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (derive.ml[]..[])
                  Pexp_ident "name" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_variant "Negative"
              None
            expression (derive.ml[]..[])
              Pexp_variant "Negative"
              None
            expression (derive.ml[]..[])
              Pexp_coerce
              expression (derive.ml[]..[])
                Pexp_apply
                expression (derive.ml[]..[])
                  Pexp_ident "f" (derive.ml[]..[])
                [
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "tydcl" (derive.ml[]..[])
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "result_type" (derive.ml[]..[])
                ]
              None
              core_type (derive.ml[]..[])
                Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                []
            expression (derive.ml[]..[])
              Pexp_coerce
              expression (derive.ml[]..[])
                Pexp_ident "ty" (derive.ml[]..[])
              None
              core_type (derive.ml[]..[])
                Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
                []
          ]
    None
    core_type (derive.ml[]..[])
      Ptyp_constr "Astfn.clfield" (derive.ml[]..[])
      []
core_type (derive.ml[]..[])
  Ptyp_constr "clfield" (derive.ml[]..[])
  []
                                                                  ]
                                                            ]
                                                            expression (derive.ml[]..[])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (derive.ml[]..[])
                                                                    Ppat_var "fs" (derive.ml[]..[])
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (derive.ml[]..[])
  Ppat_constraint
  pattern (derive.ml[]..[])
    Ppat_var "ty" (derive.ml[]..[])
  core_type (derive.ml[]..[])
    Ptyp_constr "types" (derive.ml[]..[])
    []
expression (derive.ml[]..[])
  Pexp_constraint
  expression (derive.ml[]..[])
    Pexp_match
    expression (derive.ml[]..[])
      Pexp_ident "ty" (derive.ml[]..[])
    [
      <case>
        pattern (derive.ml[]..[])
          Ppat_variant "Mutual"
          Some
            pattern (derive.ml[]..[])
              Ppat_var "named_types" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_apply
          expression (derive.ml[]..[])
            Pexp_ident "sem_of_list" (derive.ml[]..[])
          [
            <label> ""
              expression (derive.ml[]..[])
                Pexp_apply
                expression (derive.ml[]..[])
                  Pexp_ident "List.map" (derive.ml[]..[])
                [
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "mk_clfield" (derive.ml[]..[])
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "named_types" (derive.ml[]..[])
                ]
          ]
      <case>
        pattern (derive.ml[]..[])
          Ppat_variant "Single"
          Some
            pattern (derive.ml[]..[])
              Ppat_alias "named_type" (derive.ml[]..[])
              pattern (derive.ml[]..[])
                Ppat_tuple
                [
                  pattern (derive.ml[]..[])
                    Ppat_var "name" (derive.ml[]..[])
                  pattern (derive.ml[]..[])
                    Ppat_var "tydcl" (derive.ml[]..[])
                ]
        expression (derive.ml[]..[])
          Pexp_match
          expression (derive.ml[]..[])
            Pexp_apply
            expression (derive.ml[]..[])
              Pexp_ident "Ctyp.abstract_list" (derive.ml[]..[])
            [
              <label> ""
                expression (derive.ml[]..[])
                  Pexp_ident "tydcl" (derive.ml[]..[])
            ]
          [
            <case>
              pattern (derive.ml[]..[])
                Ppat_construct "Some" (derive.ml[]..[])
                Some
                  pattern (derive.ml[]..[])
                    Ppat_var "n" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (derive.ml[]..[])
                      Ppat_var "ty_str" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_constraint
                      expression (derive.ml[]..[])
                        Pexp_apply
                        expression (derive.ml[]..[])
                          Pexp_ident "ObjsN.dump_typedecl" (derive.ml[]..[])
                        [
                          <label> ""
                            expression (derive.ml[]..[])
                              Pexp_ident "tydcl" (derive.ml[]..[])
                        ]
                      core_type (derive.ml[]..[])
                        Ptyp_constr "string" (derive.ml[]..[])
                        []
                ]
                expression (derive.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (derive.ml[]..[])
                        Ppat_construct "()" (derive.ml[]..[])
                        None
                      expression (derive.ml[]..[])
                        Pexp_apply
                        expression (derive.ml[]..[])
                          Pexp_ident "Hashtbl.add" (derive.ml[]..[])
                        [
                          <label> ""
                            expression (derive.ml[]..[])
                              Pexp_ident "tbl" (derive.ml[]..[])
                          <label> ""
                            expression (derive.ml[]..[])
                              Pexp_ident "ty_str" (derive.ml[]..[])
                          <label> ""
                            expression (derive.ml[]..[])
                              Pexp_construct "Abstract" (derive.ml[]..[])
                              Some
                                expression (derive.ml[]..[])
                                  Pexp_ident "ty_str" (derive.ml[]..[])
                        ]
                  ]
                  expression (derive.ml[]..[])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (derive.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (derive.ml[]..[])
                              Ppat_var "ty" (derive.ml[]..[])
                            pattern (derive.ml[]..[])
                              Ppat_any
                          ]
                        expression (derive.ml[]..[])
                          Pexp_apply
                          expression (derive.ml[]..[])
                            Pexp_ident "mk_type" (derive.ml[]..[])
                          [
                            <label> ""
                              expression (derive.ml[]..[])
                                Pexp_ident "tydcl" (derive.ml[]..[])
                          ]
                    ]
                    expression (derive.ml[]..[])
                      Pexp_coerce
                      expression (derive.ml[]..[])
                        Pexp_variant "CrMth"
                        Some
                          expression (derive.ml[]..[])
                            Pexp_tuple
                            [
                              expression (derive.ml[]..[])
                                Pexp_variant "Lid"
                                Some
                                  expression (derive.ml[]..[])
                                    Pexp_ident "name" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_variant "Negative"
                                None
                              expression (derive.ml[]..[])
                                Pexp_variant "Negative"
                                None
                              expression (derive.ml[]..[])
                                Pexp_coerce
                                expression (derive.ml[]..[])
                                  Pexp_apply
                                  expression (derive.ml[]..[])
                                    Pexp_ident "ExpN.unknown" (derive.ml[]..[])
                                  [
                                    <label> ""
                                      expression (derive.ml[]..[])
                                        Pexp_ident "n" (derive.ml[]..[])
                                  ]
                                None
                                core_type (derive.ml[]..[])
                                  Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                  []
                              expression (derive.ml[]..[])
                                Pexp_coerce
                                expression (derive.ml[]..[])
                                  Pexp_ident "ty" (derive.ml[]..[])
                                None
                                core_type (derive.ml[]..[])
                                  Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
                                  []
                            ]
                      None
                      core_type (derive.ml[]..[])
                        Ptyp_constr "Astfn.clfield" (derive.ml[]..[])
                        []
            <case>
              pattern (derive.ml[]..[])
                Ppat_construct "None" (derive.ml[]..[])
                None
              expression (derive.ml[]..[])
                Pexp_apply
                expression (derive.ml[]..[])
                  Pexp_ident "mk_clfield" (derive.ml[]..[])
                [
                  <label> ""
                    expression (derive.ml[]..[])
                      Pexp_ident "named_type" (derive.ml[]..[])
                ]
          ]
    ]
  core_type (derive.ml[]..[])
    Ptyp_constr "clfield" (derive.ml[]..[])
    []
                                                                    ]
                                                              ]
                                                              expression (derive.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_tuple
                                                                      [
pattern (derive.ml[]..[])
  Ppat_var "extras" (derive.ml[]..[])
pattern (derive.ml[]..[])
  Ppat_var "lst" (derive.ml[]..[])
                                                                      ]
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "Sigs_util.transform_mtyps" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "lst" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (derive.ml[]..[])
Ppat_var "body" (derive.ml[]..[])
                                                                      expression (derive.ml[]..[])
Pexp_apply
expression (derive.ml[]..[])
  Pexp_ident "List.map" (derive.ml[]..[])
[
  <label> ""
    expression (derive.ml[]..[])
      Pexp_ident "fs" (derive.ml[]..[])
  <label> ""
    expression (derive.ml[]..[])
      Pexp_ident "lst" (derive.ml[]..[])
]
                                                                  ]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (derive.ml[]..[])
  Ppat_var "body" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_constraint
  expression (derive.ml[]..[])
    Pexp_let Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "items" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_apply
          expression (derive.ml[]..[])
            Pexp_ident "List.map" (derive.ml[]..[])
          [
            <label> ""
              expression (derive.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[]..[])
                      Ppat_tuple
                      [
                        pattern (derive.ml[]..[])
                          Ppat_var "dest" (derive.ml[]..[])
                        pattern (derive.ml[]..[])
                          Ppat_var "src" (derive.ml[]..[])
                        pattern (derive.ml[]..[])
                          Ppat_var "len" (derive.ml[]..[])
                      ]
                    expression (derive.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (derive.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (derive.ml[]..[])
                                Ppat_var "ty" (derive.ml[]..[])
                              pattern (derive.ml[]..[])
                                Ppat_var "_dest" (derive.ml[]..[])
                            ]
                          expression (derive.ml[]..[])
                            Pexp_apply
                            expression (derive.ml[]..[])
                              Pexp_ident "Ctyp.mk_method_type" (derive.ml[]..[])
                            [
                              <label> "number"
                                expression (derive.ml[]..[])
                                  Pexp_ident "arity" (derive.ml[]..[])
                              <label> "prefix"
                                expression (derive.ml[]..[])
                                  Pexp_ident "names" (derive.ml[]..[])
                              <label> ""
                                expression (derive.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (derive.ml[]..[])
                                      Pexp_ident "src" (derive.ml[]..[])
                                    expression (derive.ml[]..[])
                                      Pexp_ident "len" (derive.ml[]..[])
                                  ]
                              <label> ""
                                expression (derive.ml[]..[])
                                  Pexp_construct "Obj" (derive.ml[]..[])
                                  Some
                                    expression (derive.ml[]..[])
                                      Pexp_ident "k" (derive.ml[]..[])
                            ]
                      ]
                      expression (derive.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (derive.ml[]..[])
                              Ppat_construct "()" (derive.ml[]..[])
                              None
                            expression (derive.ml[]..[])
                              Pexp_apply
                              expression (derive.ml[]..[])
                                Pexp_ident "Hashtbl.add" (derive.ml[]..[])
                              [
                                <label> ""
                                  expression (derive.ml[]..[])
                                    Pexp_ident "tbl" (derive.ml[]..[])
                                <label> ""
                                  expression (derive.ml[]..[])
                                    Pexp_ident "dest" (derive.ml[]..[])
                                <label> ""
                                  expression (derive.ml[]..[])
                                    Pexp_construct "Qualified" (derive.ml[]..[])
                                    Some
                                      expression (derive.ml[]..[])
                                        Pexp_ident "dest" (derive.ml[]..[])
                              ]
                        ]
                        expression (derive.ml[]..[])
                          Pexp_coerce
                          expression (derive.ml[]..[])
                            Pexp_variant "CrMth"
                            Some
                              expression (derive.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (derive.ml[]..[])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (derive.ml[]..[])
                                        Pexp_ident "dest" (derive.ml[]..[])
                                  expression (derive.ml[]..[])
                                    Pexp_variant "Negative"
                                    None
                                  expression (derive.ml[]..[])
                                    Pexp_variant "Negative"
                                    None
                                  expression (derive.ml[]..[])
                                    Pexp_coerce
                                    expression (derive.ml[]..[])
                                      Pexp_apply
                                      expression (derive.ml[]..[])
                                        Pexp_ident "ExpN.unknown" (derive.ml[]..[])
                                      [
                                        <label> ""
                                          expression (derive.ml[]..[])
                                            Pexp_ident "len" (derive.ml[]..[])
                                      ]
                                    None
                                    core_type (derive.ml[]..[])
                                      Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                      []
                                  expression (derive.ml[]..[])
                                    Pexp_coerce
                                    expression (derive.ml[]..[])
                                      Pexp_ident "ty" (derive.ml[]..[])
                                    None
                                    core_type (derive.ml[]..[])
                                      Ptyp_constr "Astfn.ctyp" (derive.ml[]..[])
                                      []
                                ]
                          None
                          core_type (derive.ml[]..[])
                            Ptyp_constr "Astfn.clfield" (derive.ml[]..[])
                            []
                ]
            <label> ""
              expression (derive.ml[]..[])
                Pexp_ident "extras" (derive.ml[]..[])
          ]
    ]
    expression (derive.ml[]..[])
      Pexp_apply
      expression (derive.ml[]..[])
        Pexp_ident "sem_of_list" (derive.ml[]..[])
      [
        <label> ""
          expression (derive.ml[]..[])
            Pexp_apply
            expression (derive.ml[]..[])
              Pexp_ident "@" (derive.ml[]..[])
            [
              <label> ""
                expression (derive.ml[]..[])
                  Pexp_ident "body" (derive.ml[]..[])
              <label> ""
                expression (derive.ml[]..[])
                  Pexp_ident "items" (derive.ml[]..[])
            ]
      ]
  core_type (derive.ml[]..[])
    Ptyp_constr "clfield" (derive.ml[]..[])
    []
                                                                    ]
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_let Nonrec
                                                                      [
<def>
  pattern (derive.ml[]..[])
    Ppat_var "v" (derive.ml[]..[])
  expression (derive.ml[]..[])
    Pexp_apply
    expression (derive.ml[]..[])
      Pexp_ident "Ctyp.mk_obj" (derive.ml[]..[])
    [
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "class_name" (derive.ml[]..[])
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "base" (derive.ml[]..[])
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "body" (derive.ml[]..[])
    ]
                                                                      ]
                                                                      expression (derive.ml[]..[])
Pexp_sequence
expression (derive.ml[]..[])
  Pexp_apply
  expression (derive.ml[]..[])
    Pexp_ident "Hashtbl.iter" (derive.ml[]..[])
  [
    <label> ""
      expression (derive.ml[]..[])
        Pexp_function
        [
          <case>
            pattern (derive.ml[]..[])
              Ppat_any
            expression (derive.ml[]..[])
              Pexp_function
              [
                <case>
                  pattern (derive.ml[]..[])
                    Ppat_var "v" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_apply
                    expression (derive.ml[]..[])
                      Pexp_ident "eprintf" (derive.ml[]..[])
                    [
                      <label> ""
                        expression (derive.ml[]..[])
                          Pexp_constant Const_string("@[%a@]@.",None)
                      <label> ""
                        expression (derive.ml[]..[])
                          Pexp_ident "pp_print_warning_type" (derive.ml[]..[])
                      <label> ""
                        expression (derive.ml[]..[])
                          Pexp_ident "v" (derive.ml[]..[])
                    ]
              ]
        ]
    <label> ""
      expression (derive.ml[]..[])
        Pexp_ident "tbl" (derive.ml[]..[])
  ]
expression (derive.ml[]..[])
  Pexp_match
  expression (derive.ml[]..[])
    Pexp_ident "module_name" (derive.ml[]..[])
  [
    <case>
      pattern (derive.ml[]..[])
        Ppat_construct "None" (derive.ml[]..[])
        None
      expression (derive.ml[]..[])
        Pexp_ident "v" (derive.ml[]..[])
    <case>
      pattern (derive.ml[]..[])
        Ppat_construct "Some" (derive.ml[]..[])
        Some
          pattern (derive.ml[]..[])
            Ppat_var "u" (derive.ml[]..[])
      expression (derive.ml[]..[])
        Pexp_coerce
        expression (derive.ml[]..[])
          Pexp_variant "Module"
          Some
            expression (derive.ml[]..[])
              Pexp_tuple
              [
                expression (derive.ml[]..[])
                  Pexp_variant "Uid"
                  Some
                    expression (derive.ml[]..[])
                      Pexp_ident "u" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_variant "Struct"
                  Some
                    expression (derive.ml[]..[])
                      Pexp_coerce
                      expression (derive.ml[]..[])
                        Pexp_ident "v" (derive.ml[]..[])
                      None
                      core_type (derive.ml[]..[])
                        Ptyp_constr "Astfn.stru" (derive.ml[]..[])
                        []
              ]
        None
        core_type (derive.ml[]..[])
          Ptyp_constr "Astfn.stru" (derive.ml[]..[])
          []
  ]
                                                    core_type (derive.ml[]..[])
                                                      Ptyp_constr "stru" (derive.ml[]..[])
                                                      []
                                              ]
                                      ]
                                ]
                          ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "gen_stru" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?module_name"
          None
          pattern (derive.ml[]..[])
            Ppat_var "module_name" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[]..[])
                Pexp_constant Const_int 1
            pattern (derive.ml[]..[])
              Ppat_var "arity" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "?default"
              Some
                expression (derive.ml[]..[])
                  Pexp_coerce
                  expression (derive.ml[]..[])
                    Pexp_variant "App"
                    Some
                      expression (derive.ml[]..[])
                        Pexp_tuple
                        [
                          expression (derive.ml[]..[])
                            Pexp_variant "Lid"
                            Some
                              expression (derive.ml[]..[])
                                Pexp_constant Const_string("failwith",None)
                          expression (derive.ml[]..[])
                            Pexp_variant "Str"
                            Some
                              expression (derive.ml[]..[])
                                Pexp_constant Const_string("arity >= 2 in other branches",None)
                        ]
                  None
                  core_type (derive.ml[]..[])
                    Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                    []
              pattern (derive.ml[]..[])
                Ppat_var "default" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "?cons_transform"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "cons_transform" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "?annot"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "annot" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_fun "id"
                    None
                    pattern (derive.ml[]..[])
                      Ppat_constraint
                      pattern (derive.ml[]..[])
                        Ppat_var "id" (derive.ml[]..[])
                      core_type (derive.ml[]..[])
                        Ptyp_constr "basic_id_transform" (derive.ml[]..[])
                        []
                    expression (derive.ml[]..[])
                      Pexp_fun "?names"
                      Some
                        expression (derive.ml[]..[])
                          Pexp_construct "[]" (derive.ml[]..[])
                          None
                      pattern (derive.ml[]..[])
                        Ppat_var "names" (derive.ml[]..[])
                      expression (derive.ml[]..[])
                        Pexp_fun "mk_tuple"
                        None
                        pattern (derive.ml[]..[])
                          Ppat_var "mk_tuple" (derive.ml[]..[])
                        expression (derive.ml[]..[])
                          Pexp_fun "mk_record"
                          None
                          pattern (derive.ml[]..[])
                            Ppat_var "mk_record" (derive.ml[]..[])
                          expression (derive.ml[]..[])
                            Pexp_fun "mk_variant"
                            None
                            pattern (derive.ml[]..[])
                              Ppat_var "mk_variant" (derive.ml[]..[])
                            expression (derive.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (derive.ml[]..[])
                                    Ppat_construct "()" (derive.ml[]..[])
                                    None
                                  expression (derive.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[]..[])
                                          Ppat_var "left_type_variable" (derive.ml[]..[])
                                        expression (derive.ml[]..[])
                                          Pexp_variant "Pre"
                                          Some
                                            expression (derive.ml[]..[])
                                              Pexp_constant Const_string("mf_",None)
                                    ]
                                    expression (derive.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[]..[])
                                            Ppat_var "right_type_variable" (derive.ml[]..[])
                                          expression (derive.ml[]..[])
                                            Pexp_variant "Pre"
                                            Some
                                              expression (derive.ml[]..[])
                                                Pexp_constant Const_string("mf_",None)
                                      ]
                                      expression (derive.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (derive.ml[]..[])
                                              Ppat_var "left_type_id" (derive.ml[]..[])
                                            expression (derive.ml[]..[])
                                              Pexp_ident "id" (derive.ml[]..[])
                                        ]
                                        expression (derive.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (derive.ml[]..[])
                                                Ppat_var "right_type_id" (derive.ml[]..[])
                                              expression (derive.ml[]..[])
                                                Pexp_match
                                                expression (derive.ml[]..[])
                                                  Pexp_ident "module_name" (derive.ml[]..[])
                                                [
                                                  <case>
                                                    pattern (derive.ml[]..[])
                                                      Ppat_construct "None" (derive.ml[]..[])
                                                      None
                                                    expression (derive.ml[]..[])
                                                      Pexp_coerce
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "id" (derive.ml[]..[])
                                                      None
                                                      core_type (derive.ml[]..[])
                                                        Ptyp_constr "full_id_transform" (derive.ml[]..[])
                                                        []
                                                  <case>
                                                    pattern (derive.ml[]..[])
                                                      Ppat_construct "Some" (derive.ml[]..[])
                                                      Some
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "m" (derive.ml[]..[])
                                                    expression (derive.ml[]..[])
                                                      Pexp_variant "Last"
                                                      Some
                                                        expression (derive.ml[]..[])
                                                          Pexp_function
                                                          [
                                                            <case>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "s" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_variant "Dot"
                                                                Some
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (derive.ml[]..[])
Pexp_variant "Uid"
Some
  expression (derive.ml[]..[])
    Pexp_ident "m" (derive.ml[]..[])
                                                                      expression (derive.ml[]..[])
Pexp_variant "Lid"
Some
  expression (derive.ml[]..[])
    Pexp_apply
    expression (derive.ml[]..[])
      Pexp_ident "basic_transform" (derive.ml[]..[])
    [
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "id" (derive.ml[]..[])
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "s" (derive.ml[]..[])
    ]
                                                                    ]
                                                          ]
                                                ]
                                          ]
                                          expression (derive.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[]..[])
                                                  Ppat_var "default" (derive.ml[]..[])
                                                expression (derive.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (derive.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[]..[])
                                                            Ppat_any
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "number" (derive.ml[]..[])
                                                        ]
                                                      expression (derive.ml[]..[])
                                                        Pexp_ifthenelse
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident ">" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "number" (derive.ml[]..[])
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_constant Const_int 1
                                                          ]
                                                        expression (derive.ml[]..[])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "pat" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_coerce
                                                                expression (derive.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "EpN.tuple_of_number" (derive.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_variant "Any"
None
                                                                    <label> ""
                                                                      expression (derive.ml[]..[])
Pexp_ident "arity" (derive.ml[]..[])
                                                                  ]
                                                                None
                                                                core_type (derive.ml[]..[])
                                                                  Ptyp_constr "pat" (derive.ml[]..[])
                                                                  []
                                                          ]
                                                          expression (derive.ml[]..[])
                                                            Pexp_construct "Some" (derive.ml[]..[])
                                                            Some
                                                              expression (derive.ml[]..[])
                                                                Pexp_coerce
                                                                expression (derive.ml[]..[])
                                                                  Pexp_variant "Case"
                                                                  Some
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (derive.ml[]..[])
  Pexp_coerce
  expression (derive.ml[]..[])
    Pexp_ident "pat" (derive.ml[]..[])
  None
  core_type (derive.ml[]..[])
    Ptyp_constr "Astfn.pat" (derive.ml[]..[])
    []
expression (derive.ml[]..[])
  Pexp_coerce
  expression (derive.ml[]..[])
    Pexp_ident "default" (derive.ml[]..[])
  None
  core_type (derive.ml[]..[])
    Ptyp_constr "Astfn.exp" (derive.ml[]..[])
    []
                                                                      ]
                                                                None
                                                                core_type (derive.ml[]..[])
                                                                  Ptyp_constr "Astfn.case" (derive.ml[]..[])
                                                                  []
                                                        Some
                                                          expression (derive.ml[]..[])
                                                            Pexp_construct "None" (derive.ml[]..[])
                                                            None
                                                  ]
                                            ]
                                            expression (derive.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "names" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "names" (derive.ml[]..[])
                                              ]
                                              expression (derive.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (derive.ml[]..[])
                                                      Ppat_var "mk_record" (derive.ml[]..[])
                                                    expression (derive.ml[]..[])
                                                      Pexp_ident "mk_record" (derive.ml[]..[])
                                                ]
                                                expression (derive.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[]..[])
                                                        Ppat_var "cons_transform" (derive.ml[]..[])
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "cons_transform" (derive.ml[]..[])
                                                  ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_construct "()" (derive.ml[]..[])
                                                          None
                                                        expression (derive.ml[]..[])
                                                          Pexp_apply
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "check" (derive.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "names" (derive.ml[]..[])
                                                          ]
                                                    ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_apply
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "stru_of_mtyps" (derive.ml[]..[])
                                                      [
                                                        <label> "?module_name"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "module_name" (derive.ml[]..[])
                                                        <label> "?cons_transform"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "cons_transform" (derive.ml[]..[])
                                                        <label> "?annot"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "annot" (derive.ml[]..[])
                                                        <label> "arity"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "arity" (derive.ml[]..[])
                                                        <label> "names"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "names" (derive.ml[]..[])
                                                        <label> "default"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "default" (derive.ml[]..[])
                                                        <label> "mk_variant"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "mk_variant" (derive.ml[]..[])
                                                        <label> "left_type_id"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "left_type_id" (derive.ml[]..[])
                                                        <label> "left_type_variable"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                        <label> "mk_record"
                                                          expression (derive.ml[]..[])
                                                            Pexp_ident "mk_record" (derive.ml[]..[])
                                                        <label> ""
                                                          expression (derive.ml[]..[])
                                                            Pexp_apply
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "normal_simple_exp_of_ctyp" (derive.ml[]..[])
                                                            [
                                                              <label> "arity"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "arity" (derive.ml[]..[])
                                                              <label> "names"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "names" (derive.ml[]..[])
                                                              <label> "mk_tuple"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "mk_tuple" (derive.ml[]..[])
                                                              <label> "right_type_id"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "right_type_id" (derive.ml[]..[])
                                                              <label> "left_type_id"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "left_type_id" (derive.ml[]..[])
                                                              <label> "right_type_variable"
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ident "right_type_variable" (derive.ml[]..[])
                                                            ]
                                                      ]
                              ]
    ]
  structure_item (derive.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[]..[])
          Ppat_var "gen_object" (derive.ml[]..[])
        expression (derive.ml[]..[])
          Pexp_fun "?module_name"
          None
          pattern (derive.ml[]..[])
            Ppat_var "module_name" (derive.ml[]..[])
          expression (derive.ml[]..[])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[]..[])
                Pexp_constant Const_int 1
            pattern (derive.ml[]..[])
              Ppat_var "arity" (derive.ml[]..[])
            expression (derive.ml[]..[])
              Pexp_fun "?default"
              Some
                expression (derive.ml[]..[])
                  Pexp_coerce
                  expression (derive.ml[]..[])
                    Pexp_variant "App"
                    Some
                      expression (derive.ml[]..[])
                        Pexp_tuple
                        [
                          expression (derive.ml[]..[])
                            Pexp_variant "Lid"
                            Some
                              expression (derive.ml[]..[])
                                Pexp_constant Const_string("failwith",None)
                          expression (derive.ml[]..[])
                            Pexp_variant "Str"
                            Some
                              expression (derive.ml[]..[])
                                Pexp_constant Const_string("arity >= 2 in other branches",None)
                        ]
                  None
                  core_type (derive.ml[]..[])
                    Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                    []
              pattern (derive.ml[]..[])
                Ppat_var "default" (derive.ml[]..[])
              expression (derive.ml[]..[])
                Pexp_fun "?cons_transform"
                None
                pattern (derive.ml[]..[])
                  Ppat_var "cons_transform" (derive.ml[]..[])
                expression (derive.ml[]..[])
                  Pexp_fun "kind"
                  None
                  pattern (derive.ml[]..[])
                    Ppat_var "kind" (derive.ml[]..[])
                  expression (derive.ml[]..[])
                    Pexp_fun "base"
                    None
                    pattern (derive.ml[]..[])
                      Ppat_var "base" (derive.ml[]..[])
                    expression (derive.ml[]..[])
                      Pexp_fun "class_name"
                      None
                      pattern (derive.ml[]..[])
                        Ppat_var "class_name" (derive.ml[]..[])
                      expression (derive.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (derive.ml[]..[])
                              Ppat_var "make" (derive.ml[]..[])
                            expression (derive.ml[]..[])
                              Pexp_fun "?names"
                              Some
                                expression (derive.ml[]..[])
                                  Pexp_construct "[]" (derive.ml[]..[])
                                  None
                              pattern (derive.ml[]..[])
                                Ppat_var "names" (derive.ml[]..[])
                              expression (derive.ml[]..[])
                                Pexp_fun "mk_tuple"
                                None
                                pattern (derive.ml[]..[])
                                  Ppat_var "mk_tuple" (derive.ml[]..[])
                                expression (derive.ml[]..[])
                                  Pexp_fun "mk_record"
                                  None
                                  pattern (derive.ml[]..[])
                                    Ppat_var "mk_record" (derive.ml[]..[])
                                  expression (derive.ml[]..[])
                                    Pexp_fun "mk_variant"
                                    None
                                    pattern (derive.ml[]..[])
                                      Ppat_var "mk_variant" (derive.ml[]..[])
                                    expression (derive.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (derive.ml[]..[])
                                            Ppat_construct "()" (derive.ml[]..[])
                                            None
                                          expression (derive.ml[]..[])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[]..[])
                                                  Ppat_construct "()" (derive.ml[]..[])
                                                  None
                                                expression (derive.ml[]..[])
                                                  Pexp_apply
                                                  expression (derive.ml[]..[])
                                                    Pexp_ident "check" (derive.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[]..[])
                                                        Pexp_ident "names" (derive.ml[]..[])
                                                  ]
                                            ]
                                            expression (derive.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (derive.ml[]..[])
                                                    Ppat_var "left_type_variable" (derive.ml[]..[])
                                                  expression (derive.ml[]..[])
                                                    Pexp_variant "Pre"
                                                    Some
                                                      expression (derive.ml[]..[])
                                                        Pexp_constant Const_string("mf_",None)
                                              ]
                                              expression (derive.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (derive.ml[]..[])
                                                      Ppat_var "right_type_variable" (derive.ml[]..[])
                                                    expression (derive.ml[]..[])
                                                      Pexp_variant "Exp"
                                                      Some
                                                        expression (derive.ml[]..[])
                                                          Pexp_function
                                                          [
                                                            <case>
                                                              pattern (derive.ml[]..[])
                                                                Ppat_var "v" (derive.ml[]..[])
                                                              expression (derive.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "v" (derive.ml[]..[])
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (derive.ml[]..[])
Pexp_ident "basic_transform" (derive.ml[]..[])
                                                                      [
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "left_type_variable" (derive.ml[]..[])
<label> ""
  expression (derive.ml[]..[])
    Pexp_ident "v" (derive.ml[]..[])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_coerce
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_variant "App"
                                                                    Some
                                                                      expression (derive.ml[]..[])
Pexp_tuple
[
  expression (derive.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (derive.ml[]..[])
        Pexp_ident "v" (derive.ml[]..[])
  expression (derive.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (derive.ml[]..[])
        Pexp_constant Const_string("self",None)
]
                                                                  None
                                                                  core_type (derive.ml[]..[])
                                                                    Ptyp_constr "Astfn.exp" (derive.ml[]..[])
                                                                    []
                                                          ]
                                                ]
                                                expression (derive.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[]..[])
                                                        Ppat_var "left_type_id" (derive.ml[]..[])
                                                      expression (derive.ml[]..[])
                                                        Pexp_variant "Pre"
                                                        Some
                                                          expression (derive.ml[]..[])
                                                            Pexp_constant Const_string("",None)
                                                  ]
                                                  expression (derive.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[]..[])
                                                          Ppat_var "right_type_id" (derive.ml[]..[])
                                                        expression (derive.ml[]..[])
                                                          Pexp_variant "Obj"
                                                          Some
                                                            expression (derive.ml[]..[])
                                                              Pexp_apply
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "basic_transform" (derive.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "left_type_id" (derive.ml[]..[])
                                                              ]
                                                    ]
                                                    expression (derive.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[]..[])
                                                            Ppat_var "default" (derive.ml[]..[])
                                                          expression (derive.ml[]..[])
                                                            Pexp_function
                                                            [
                                                              <case>
                                                                pattern (derive.ml[]..[])
                                                                  Ppat_tuple
                                                                  [
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_any
                                                                    pattern (derive.ml[]..[])
                                                                      Ppat_var "number" (derive.ml[]..[])
                                                                  ]
                                                                expression (derive.ml[]..[])
                                                                  Pexp_ifthenelse
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_ident ">" (derive.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_ident "number" (derive.ml[]..[])
                                                                      <label> ""
expression (derive.ml[]..[])
  Pexp_constant Const_int 1
                                                                    ]
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (derive.ml[]..[])
  Ppat_var "pat" (derive.ml[]..[])
expression (derive.ml[]..[])
  Pexp_coerce
  expression (derive.ml[]..[])
    Pexp_apply
    expression (derive.ml[]..[])
      Pexp_ident "EpN.tuple_of_number" (derive.ml[]..[])
    [
      <label> ""
        expression (derive.ml[]..[])
          Pexp_variant "Any"
          None
      <label> ""
        expression (derive.ml[]..[])
          Pexp_ident "arity" (derive.ml[]..[])
    ]
  None
  core_type (derive.ml[]..[])
    Ptyp_constr "pat" (derive.ml[]..[])
    []
                                                                    ]
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_construct "Some" (derive.ml[]..[])
                                                                      Some
expression (derive.ml[]..[])
  Pexp_coerce
  expression (derive.ml[]..[])
    Pexp_variant "Case"
    Some
      expression (derive.ml[]..[])
        Pexp_tuple
        [
          expression (derive.ml[]..[])
            Pexp_coerce
            expression (derive.ml[]..[])
              Pexp_ident "pat" (derive.ml[]..[])
            None
            core_type (derive.ml[]..[])
              Ptyp_constr "Astfn.pat" (derive.ml[]..[])
              []
          expression (derive.ml[]..[])
            Pexp_coerce
            expression (derive.ml[]..[])
              Pexp_ident "default" (derive.ml[]..[])
            None
            core_type (derive.ml[]..[])
              Ptyp_constr "Astfn.exp" (derive.ml[]..[])
              []
        ]
  None
  core_type (derive.ml[]..[])
    Ptyp_constr "Astfn.case" (derive.ml[]..[])
    []
                                                                  Some
                                                                    expression (derive.ml[]..[])
                                                                      Pexp_construct "None" (derive.ml[]..[])
                                                                      None
                                                            ]
                                                      ]
                                                      expression (derive.ml[]..[])
                                                        Pexp_apply
                                                        expression (derive.ml[]..[])
                                                          Pexp_ident "obj_of_mtyps" (derive.ml[]..[])
                                                        [
                                                          <label> "?cons_transform"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "cons_transform" (derive.ml[]..[])
                                                          <label> "?module_name"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "module_name" (derive.ml[]..[])
                                                          <label> "arity"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "arity" (derive.ml[]..[])
                                                          <label> "names"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "names" (derive.ml[]..[])
                                                          <label> "default"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "default" (derive.ml[]..[])
                                                          <label> "left_type_variable"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                          <label> "mk_record"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "mk_record" (derive.ml[]..[])
                                                          <label> "mk_variant"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "mk_variant" (derive.ml[]..[])
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "base" (derive.ml[]..[])
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "class_name" (derive.ml[]..[])
                                                          <label> ""
                                                            expression (derive.ml[]..[])
                                                              Pexp_apply
                                                              expression (derive.ml[]..[])
                                                                Pexp_ident "obj_simple_exp_of_ctyp" (derive.ml[]..[])
                                                              [
                                                                <label> "right_type_id"
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "right_type_id" (derive.ml[]..[])
                                                                <label> "left_type_variable"
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "left_type_variable" (derive.ml[]..[])
                                                                <label> "right_type_variable"
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "right_type_variable" (derive.ml[]..[])
                                                                <label> "names"
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "names" (derive.ml[]..[])
                                                                <label> "arity"
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "arity" (derive.ml[]..[])
                                                                <label> "mk_tuple"
                                                                  expression (derive.ml[]..[])
                                                                    Pexp_ident "mk_tuple" (derive.ml[]..[])
                                                              ]
                                                          <label> "kind"
                                                            expression (derive.ml[]..[])
                                                              Pexp_ident "kind" (derive.ml[]..[])
                                                        ]
                                      ]
                        ]
                        expression (derive.ml[]..[])
                          Pexp_ident "make" (derive.ml[]..[])
    ]
]
