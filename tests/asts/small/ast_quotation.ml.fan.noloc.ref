[
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "pp_print_string" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_ident "Format.pp_print_string" (ast_quotation.ml[]..[])
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "bprintf" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_ident "Format.bprintf" (ast_quotation.ml[]..[])
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "fprintf" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_ident "Format.fprintf" (ast_quotation.ml[]..[])
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "paths" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_constraint
          expression (ast_quotation.ml[]..[])
            Pexp_apply
            expression (ast_quotation.ml[]..[])
              Pexp_ident "ref" (ast_quotation.ml[]..[])
            [
              <label> ""
                expression (ast_quotation.ml[]..[])
                  Pexp_construct "::" (ast_quotation.ml[]..[])
                  Some
                    expression (ast_quotation.ml[]..[])
                      Pexp_tuple
                      [
                        expression (ast_quotation.ml[]..[])
                          Pexp_variant "Absolute"
                          Some
                            expression (ast_quotation.ml[]..[])
                              Pexp_construct "::" (ast_quotation.ml[]..[])
                              Some
                                expression (ast_quotation.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_constant Const_string("Fan",None)
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_construct "::" (ast_quotation.ml[]..[])
                                      Some
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_constant Const_string("Lang",None)
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_construct "[]" (ast_quotation.ml[]..[])
                                              None
                                          ]
                                  ]
                        expression (ast_quotation.ml[]..[])
                          Pexp_construct "::" (ast_quotation.ml[]..[])
                          Some
                            expression (ast_quotation.ml[]..[])
                              Pexp_tuple
                              [
                                expression (ast_quotation.ml[]..[])
                                  Pexp_variant "Absolute"
                                  Some
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_construct "::" (ast_quotation.ml[]..[])
                                      Some
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_constant Const_string("Fan",None)
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_construct "::" (ast_quotation.ml[]..[])
                                              Some
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_constant Const_string("Lang",None)
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_construct "::" (ast_quotation.ml[]..[])
                                                      Some
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_constant Const_string("Meta",None)
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_construct "[]" (ast_quotation.ml[]..[])
                                                              None
                                                          ]
                                                  ]
                                          ]
                                expression (ast_quotation.ml[]..[])
                                  Pexp_construct "::" (ast_quotation.ml[]..[])
                                  Some
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_variant "Absolute"
                                          Some
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_construct "::" (ast_quotation.ml[]..[])
                                              Some
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_constant Const_string("Fan",None)
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_construct "::" (ast_quotation.ml[]..[])
                                                      Some
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_constant Const_string("Lang",None)
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_construct "::" (ast_quotation.ml[]..[])
                                                              Some
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (ast_quotation.ml[]..[])
                                                                      Pexp_constant Const_string("Filter",None)
                                                                    expression (ast_quotation.ml[]..[])
                                                                      Pexp_construct "[]" (ast_quotation.ml[]..[])
                                                                      None
                                                                  ]
                                                          ]
                                                  ]
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_construct "[]" (ast_quotation.ml[]..[])
                                          None
                                      ]
                              ]
                      ]
            ]
          core_type (ast_quotation.ml[]..[])
            Ptyp_constr "ref" (ast_quotation.ml[]..[])
            [
              core_type (ast_quotation.ml[]..[])
                Ptyp_constr "list" (ast_quotation.ml[]..[])
                [
                  core_type (ast_quotation.ml[]..[])
                    Ptyp_constr "Tokenf.domain" (ast_quotation.ml[]..[])
                    []
                ]
            ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "concat_domain" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_tuple
                [
                  pattern (ast_quotation.ml[]..[])
                    Ppat_variant "Absolute"
                    Some
                      pattern (ast_quotation.ml[]..[])
                        Ppat_var "xs" (ast_quotation.ml[]..[])
                  pattern (ast_quotation.ml[]..[])
                    Ppat_variant "Sub"
                    Some
                      pattern (ast_quotation.ml[]..[])
                        Ppat_var "ys" (ast_quotation.ml[]..[])
                ]
              expression (ast_quotation.ml[]..[])
                Pexp_variant "Absolute"
                Some
                  expression (ast_quotation.ml[]..[])
                    Pexp_apply
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "@" (ast_quotation.ml[]..[])
                    [
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "xs" (ast_quotation.ml[]..[])
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "ys" (ast_quotation.ml[]..[])
                    ]
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_any
              expression (ast_quotation.ml[]..[])
                Pexp_apply
                expression (ast_quotation.ml[]..[])
                  Pexp_ident "invalid_arg" (ast_quotation.ml[]..[])
                [
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_constant Const_string("concat_domain",None)
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "names_tbl" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_constraint
          expression (ast_quotation.ml[]..[])
            Pexp_apply
            expression (ast_quotation.ml[]..[])
              Pexp_ident "Hashtbl.create" (ast_quotation.ml[]..[])
            [
              <label> ""
                expression (ast_quotation.ml[]..[])
                  Pexp_constant Const_int 30
            ]
          core_type (ast_quotation.ml[]..[])
            Ptyp_constr "Hashtbl.t" (ast_quotation.ml[]..[])
            [
              core_type (ast_quotation.ml[]..[])
                Ptyp_constr "Tokenf.domain" (ast_quotation.ml[]..[])
                []
              core_type (ast_quotation.ml[]..[])
                Ptyp_constr "Setf.String.t" (ast_quotation.ml[]..[])
                []
            ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "dump_names_tbl" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_construct "()" (ast_quotation.ml[]..[])
                None
              expression (ast_quotation.ml[]..[])
                Pexp_apply
                expression (ast_quotation.ml[]..[])
                  Pexp_ident "|>" (ast_quotation.ml[]..[])
                [
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "names_tbl" (ast_quotation.ml[]..[])
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "Hashtbl.iter" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_var "k" (ast_quotation.ml[]..[])
                                expression (ast_quotation.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_var "s" (ast_quotation.ml[]..[])
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_sequence
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_apply
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "fprintf" (ast_quotation.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "Format.std_formatter" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_constant Const_string("Domain:%a\n",None)
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "Tokenf.pp_print_domains" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "k" (ast_quotation.ml[]..[])
                                          ]
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_apply
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "Setf.String.iter" (ast_quotation.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (ast_quotation.ml[]..[])
                                                      Ppat_var "v" (ast_quotation.ml[]..[])
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_ident "fprintf" (ast_quotation.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "Format.std_formatter" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_constant Const_string("\t%s\n",None)
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "v" (ast_quotation.ml[]..[])
                                                      ]
                                                ]
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "s" (ast_quotation.ml[]..[])
                                          ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "resolve_name" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_constraint
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "n" (ast_quotation.ml[]..[])
                core_type (ast_quotation.ml[]..[])
                  Ptyp_constr "Tokenf.name" (ast_quotation.ml[]..[])
                  []
              expression (ast_quotation.ml[]..[])
                Pexp_match
                expression (ast_quotation.ml[]..[])
                  Pexp_ident "n" (ast_quotation.ml[]..[])
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_record Closed
                      [
                        "domain" (ast_quotation.ml[]..[])
                          pattern (ast_quotation.ml[]..[])
                            Ppat_alias "x" (ast_quotation.ml[]..[])
                            pattern (ast_quotation.ml[]..[])
                              Ppat_variant "Sub"
                              Some
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_any
                        "name" (ast_quotation.ml[]..[])
                          pattern (ast_quotation.ml[]..[])
                            Ppat_var "v" (ast_quotation.ml[]..[])
                      ]
                    expression (ast_quotation.ml[]..[])
                      Pexp_match
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "Listf.find_opt" (ast_quotation.ml[]..[])
                        [
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "path" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_match
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_apply
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "@@" (ast_quotation.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_apply
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "Hashtblf.find_opt" (ast_quotation.ml[]..[])
                                            [
                                              <label> ""
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_ident "names_tbl" (ast_quotation.ml[]..[])
                                            ]
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_apply
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "concat_domain" (ast_quotation.ml[]..[])
                                            [
                                              <label> ""
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "path" (ast_quotation.ml[]..[])
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "x" (ast_quotation.ml[]..[])
                                                  ]
                                            ]
                                      ]
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_construct "None" (ast_quotation.ml[]..[])
                                          None
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_construct "false" (ast_quotation.ml[]..[])
                                          None
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_construct "Some" (ast_quotation.ml[]..[])
                                          Some
                                            pattern (ast_quotation.ml[]..[])
                                              Ppat_var "set" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_apply
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "Setf.String.mem" (ast_quotation.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "v" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "set" (ast_quotation.ml[]..[])
                                          ]
                                    ]
                              ]
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "!" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "paths" (ast_quotation.ml[]..[])
                              ]
                        ]
                      [
                        <case>
                          pattern (ast_quotation.ml[]..[])
                            Ppat_construct "None" (ast_quotation.ml[]..[])
                            None
                          expression (ast_quotation.ml[]..[])
                            Pexp_construct "None" (ast_quotation.ml[]..[])
                            None
                        <case>
                          pattern (ast_quotation.ml[]..[])
                            Ppat_construct "Some" (ast_quotation.ml[]..[])
                            Some
                              pattern (ast_quotation.ml[]..[])
                                Ppat_var "r" (ast_quotation.ml[]..[])
                          expression (ast_quotation.ml[]..[])
                            Pexp_construct "Some" (ast_quotation.ml[]..[])
                            Some
                              expression (ast_quotation.ml[]..[])
                                Pexp_record
                                [
                                  "domain" (ast_quotation.ml[]..[])
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_apply
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "concat_domain" (ast_quotation.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "r" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "x" (ast_quotation.ml[]..[])
                                            ]
                                      ]
                                ]
                                Some
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "n" (ast_quotation.ml[]..[])
                      ]
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_var "x" (ast_quotation.ml[]..[])
                    expression (ast_quotation.ml[]..[])
                      Pexp_construct "Some" (ast_quotation.ml[]..[])
                      Some
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "x" (ast_quotation.ml[]..[])
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_module
    "ExpKey" (ast_quotation.ml[]..[])
      module_expr (ast_quotation.ml[]..[])
        Pmod_apply
        module_expr (ast_quotation.ml[]..[])
          Pmod_ident "Dyn_tag.Pack" (ast_quotation.ml[]..[])
        module_expr (ast_quotation.ml[]..[])
          Pmod_structure
          [
            structure_item (ast_quotation.ml[]..[])
              Pstr_type
              [
                type_declaration "t" (ast_quotation.ml[]..[]) (ast_quotation.ml[]..[])
                  ptype_params =
                    [
                      core_type (ast_quotation.ml[]..[])
                        Ptyp_var a
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (ast_quotation.ml[]..[])
                        Ptyp_constr "unit" (ast_quotation.ml[]..[])
                        []
              ]
          ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_module
    "ExpFun" (ast_quotation.ml[]..[])
      module_expr (ast_quotation.ml[]..[])
        Pmod_apply
        module_expr (ast_quotation.ml[]..[])
          Pmod_ident "Dyn_tag.Pack" (ast_quotation.ml[]..[])
        module_expr (ast_quotation.ml[]..[])
          Pmod_structure
          [
            structure_item (ast_quotation.ml[]..[])
              Pstr_type
              [
                type_declaration "t" (ast_quotation.ml[]..[]) (ast_quotation.ml[]..[])
                  ptype_params =
                    [
                      core_type (ast_quotation.ml[]..[])
                        Ptyp_var a
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (ast_quotation.ml[]..[])
                        Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[]..[])
                        [
                          core_type (ast_quotation.ml[]..[])
                            Ptyp_var a
                        ]
              ]
          ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "current_loc_name" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_apply
          expression (ast_quotation.ml[]..[])
            Pexp_ident "ref" (ast_quotation.ml[]..[])
          [
            <label> ""
              expression (ast_quotation.ml[]..[])
                Pexp_construct "None" (ast_quotation.ml[]..[])
                None
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "stack" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_apply
          expression (ast_quotation.ml[]..[])
            Pexp_ident "Stack.create" (ast_quotation.ml[]..[])
          [
            <label> ""
              expression (ast_quotation.ml[]..[])
                Pexp_construct "()" (ast_quotation.ml[]..[])
                None
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "current_quot" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_construct "()" (ast_quotation.ml[]..[])
                None
              expression (ast_quotation.ml[]..[])
                Pexp_try
                expression (ast_quotation.ml[]..[])
                  Pexp_apply
                  expression (ast_quotation.ml[]..[])
                    Pexp_ident "Stack.pop" (ast_quotation.ml[]..[])
                  [
                    <label> ""
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "stack" (ast_quotation.ml[]..[])
                  ]
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_construct "Stack.Empty" (ast_quotation.ml[]..[])
                      None
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "failwith" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_constant Const_string("it's not in a quotation context",None)
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "dump_file" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_apply
          expression (ast_quotation.ml[]..[])
            Pexp_ident "ref" (ast_quotation.ml[]..[])
          [
            <label> ""
              expression (ast_quotation.ml[]..[])
                Pexp_construct "None" (ast_quotation.ml[]..[])
                None
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_type
    [
      type_declaration "key" (ast_quotation.ml[]..[]) (ast_quotation.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (ast_quotation.ml[]..[])
              Ptyp_tuple
              [
                core_type (ast_quotation.ml[]..[])
                  Ptyp_constr "Tokenf.name" (ast_quotation.ml[]..[])
                  []
                core_type (ast_quotation.ml[]..[])
                  Ptyp_constr "ExpKey.pack" (ast_quotation.ml[]..[])
                  []
              ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_module
    "QMap" (ast_quotation.ml[]..[])
      module_expr (ast_quotation.ml[]..[])
        Pmod_apply
        module_expr (ast_quotation.ml[]..[])
          Pmod_ident "Mapf.Make" (ast_quotation.ml[]..[])
        module_expr (ast_quotation.ml[]..[])
          Pmod_structure
          [
            structure_item (ast_quotation.ml[]..[])
              Pstr_type
              [
                type_declaration "t" (ast_quotation.ml[]..[]) (ast_quotation.ml[]..[])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (ast_quotation.ml[]..[])
                        Ptyp_constr "key" (ast_quotation.ml[]..[])
                        []
              ]
            structure_item (ast_quotation.ml[]..[])
              Pstr_value Nonrec
              [
                <def>
                  pattern (ast_quotation.ml[]..[])
                    Ppat_var "compare" (ast_quotation.ml[]..[])
                  expression (ast_quotation.ml[]..[])
                    Pexp_ident "compare" (ast_quotation.ml[]..[])
              ]
          ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "map" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_apply
          expression (ast_quotation.ml[]..[])
            Pexp_ident "ref" (ast_quotation.ml[]..[])
          [
            <label> ""
              expression (ast_quotation.ml[]..[])
                Pexp_ident "Mapf.String.empty" (ast_quotation.ml[]..[])
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "update" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_tuple
                [
                  pattern (ast_quotation.ml[]..[])
                    Ppat_var "pos" (ast_quotation.ml[]..[])
                  pattern (ast_quotation.ml[]..[])
                    Ppat_constraint
                    pattern (ast_quotation.ml[]..[])
                      Ppat_var "str" (ast_quotation.ml[]..[])
                    core_type (ast_quotation.ml[]..[])
                      Ptyp_constr "Tokenf.name" (ast_quotation.ml[]..[])
                      []
                ]
              expression (ast_quotation.ml[]..[])
                Pexp_apply
                expression (ast_quotation.ml[]..[])
                  Pexp_ident ":=" (ast_quotation.ml[]..[])
                [
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "map" (ast_quotation.ml[]..[])
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "Mapf.String.add" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "pos" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "str" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "!" (ast_quotation.ml[]..[])
                            [
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "map" (ast_quotation.ml[]..[])
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "default_at_pos" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_var "pos" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_var "str" (ast_quotation.ml[]..[])
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "update" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_tuple
                            [
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "pos" (ast_quotation.ml[]..[])
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "str" (ast_quotation.ml[]..[])
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "default" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_constraint
          expression (ast_quotation.ml[]..[])
            Pexp_apply
            expression (ast_quotation.ml[]..[])
              Pexp_ident "ref" (ast_quotation.ml[]..[])
            [
              <label> ""
                expression (ast_quotation.ml[]..[])
                  Pexp_construct "None" (ast_quotation.ml[]..[])
                  None
            ]
          core_type (ast_quotation.ml[]..[])
            Ptyp_constr "ref" (ast_quotation.ml[]..[])
            [
              core_type (ast_quotation.ml[]..[])
                Ptyp_constr "option" (ast_quotation.ml[]..[])
                [
                  core_type (ast_quotation.ml[]..[])
                    Ptyp_constr "Tokenf.name" (ast_quotation.ml[]..[])
                    []
                ]
            ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "set_default" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_var "s" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_apply
                expression (ast_quotation.ml[]..[])
                  Pexp_ident ":=" (ast_quotation.ml[]..[])
                [
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "default" (ast_quotation.ml[]..[])
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_construct "Some" (ast_quotation.ml[]..[])
                      Some
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "s" (ast_quotation.ml[]..[])
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "clear_map" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_construct "()" (ast_quotation.ml[]..[])
                None
              expression (ast_quotation.ml[]..[])
                Pexp_apply
                expression (ast_quotation.ml[]..[])
                  Pexp_ident ":=" (ast_quotation.ml[]..[])
                [
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "map" (ast_quotation.ml[]..[])
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "Mapf.String.empty" (ast_quotation.ml[]..[])
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "clear_default" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_construct "()" (ast_quotation.ml[]..[])
                None
              expression (ast_quotation.ml[]..[])
                Pexp_apply
                expression (ast_quotation.ml[]..[])
                  Pexp_ident ":=" (ast_quotation.ml[]..[])
                [
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "default" (ast_quotation.ml[]..[])
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_construct "None" (ast_quotation.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "expander_name" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "pos"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "pos" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ast_quotation.ml[]..[])
                  Ppat_constraint
                  pattern (ast_quotation.ml[]..[])
                    Ppat_var "name" (ast_quotation.ml[]..[])
                  core_type (ast_quotation.ml[]..[])
                    Ptyp_constr "Tokenf.name" (ast_quotation.ml[]..[])
                    []
                expression (ast_quotation.ml[]..[])
                  Pexp_match
                  expression (ast_quotation.ml[]..[])
                    Pexp_ident "name" (ast_quotation.ml[]..[])
                  [
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_record Closed
                        [
                          "domain" (ast_quotation.ml[]..[])
                            pattern (ast_quotation.ml[]..[])
                              Ppat_variant "Sub"
                              Some
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_construct "[]" (ast_quotation.ml[]..[])
                                  None
                          "name" (ast_quotation.ml[]..[])
                            pattern (ast_quotation.ml[]..[])
                              Ppat_constant Const_string("",None)
                        ]
                      expression (ast_quotation.ml[]..[])
                        Pexp_try
                        expression (ast_quotation.ml[]..[])
                          Pexp_construct "Some" (ast_quotation.ml[]..[])
                          Some
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "Mapf.String.find" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "pos" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_apply
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_ident "!" (ast_quotation.ml[]..[])
                                    [
                                      <label> ""
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "map" (ast_quotation.ml[]..[])
                                    ]
                              ]
                        [
                          <case>
                            pattern (ast_quotation.ml[]..[])
                              Ppat_construct "Not_found" (ast_quotation.ml[]..[])
                              None
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "!" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "default" (ast_quotation.ml[]..[])
                              ]
                        ]
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_record Open
                        [
                          "domain" (ast_quotation.ml[]..[])
                            pattern (ast_quotation.ml[]..[])
                              Ppat_variant "Sub"
                              Some
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_any
                        ]
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "resolve_name" (ast_quotation.ml[]..[])
                        [
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "name" (ast_quotation.ml[]..[])
                        ]
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_record Open
                        [
                          "domain" (ast_quotation.ml[]..[])
                            pattern (ast_quotation.ml[]..[])
                              Ppat_variant "Absolute"
                              Some
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_any
                        ]
                      expression (ast_quotation.ml[]..[])
                        Pexp_construct "Some" (ast_quotation.ml[]..[])
                        Some
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "name" (ast_quotation.ml[]..[])
                  ]
            ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "expanders_table" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_apply
          expression (ast_quotation.ml[]..[])
            Pexp_ident "ref" (ast_quotation.ml[]..[])
          [
            <label> ""
              expression (ast_quotation.ml[]..[])
                Pexp_ident "QMap.empty" (ast_quotation.ml[]..[])
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "add" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_constraint
                pattern (ast_quotation.ml[]..[])
                  Ppat_alias "name" (ast_quotation.ml[]..[])
                  pattern (ast_quotation.ml[]..[])
                    Ppat_record Closed
                    [
                      "domain" (ast_quotation.ml[]..[])
                        pattern (ast_quotation.ml[]..[])
                          Ppat_var "domain" (ast_quotation.ml[]..[])
                      "name" (ast_quotation.ml[]..[])
                        pattern (ast_quotation.ml[]..[])
                          Ppat_var "n" (ast_quotation.ml[]..[])
                    ]
                core_type (ast_quotation.ml[]..[])
                  Ptyp_constr "Tokenf.name" (ast_quotation.ml[]..[])
                  []
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_constraint
                      pattern (ast_quotation.ml[]..[])
                        Ppat_var "tag" (ast_quotation.ml[]..[])
                      core_type (ast_quotation.ml[]..[])
                        Ptyp_constr "Dyn_tag.t" (ast_quotation.ml[]..[])
                        [
                          core_type (ast_quotation.ml[]..[])
                            Ptyp_var a
                        ]
                    expression (ast_quotation.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (ast_quotation.ml[]..[])
                            Ppat_constraint
                            pattern (ast_quotation.ml[]..[])
                              Ppat_var "f" (ast_quotation.ml[]..[])
                            core_type (ast_quotation.ml[]..[])
                              Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[]..[])
                              [
                                core_type (ast_quotation.ml[]..[])
                                  Ptyp_var a
                              ]
                          expression (ast_quotation.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (ast_quotation.ml[]..[])
                                      Ppat_var "k" (ast_quotation.ml[]..[])
                                    pattern (ast_quotation.ml[]..[])
                                      Ppat_var "v" (ast_quotation.ml[]..[])
                                  ]
                                expression (ast_quotation.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "name" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_apply
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "ExpKey.pack" (ast_quotation.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "tag" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_construct "()" (ast_quotation.ml[]..[])
                                                None
                                          ]
                                      ]
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_apply
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "ExpFun.pack" (ast_quotation.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "tag" (ast_quotation.ml[]..[])
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "f" (ast_quotation.ml[]..[])
                                      ]
                                  ]
                            ]
                            expression (ast_quotation.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "s" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_try
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_apply
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "Hashtbl.find" (ast_quotation.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "names_tbl" (ast_quotation.ml[]..[])
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_field
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "name" (ast_quotation.ml[]..[])
                                            "domain" (ast_quotation.ml[]..[])
                                      ]
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_construct "Not_found" (ast_quotation.ml[]..[])
                                          None
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "Setf.String.empty" (ast_quotation.ml[]..[])
                                    ]
                              ]
                              expression (ast_quotation.ml[]..[])
                                Pexp_sequence
                                expression (ast_quotation.ml[]..[])
                                  Pexp_apply
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "Hashtbl.replace" (ast_quotation.ml[]..[])
                                  [
                                    <label> ""
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "names_tbl" (ast_quotation.ml[]..[])
                                    <label> ""
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "domain" (ast_quotation.ml[]..[])
                                    <label> ""
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_apply
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "Setf.String.add" (ast_quotation.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "n" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "s" (ast_quotation.ml[]..[])
                                        ]
                                  ]
                                expression (ast_quotation.ml[]..[])
                                  Pexp_apply
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident ":=" (ast_quotation.ml[]..[])
                                  [
                                    <label> ""
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "expanders_table" (ast_quotation.ml[]..[])
                                    <label> ""
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_apply
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "QMap.add" (ast_quotation.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "k" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "v" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_apply
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "!" (ast_quotation.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_ident "expanders_table" (ast_quotation.ml[]..[])
                                              ]
                                        ]
                                  ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "expand" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_constraint
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "x" (ast_quotation.ml[]..[])
                core_type (ast_quotation.ml[]..[])
                  Ptyp_constr "Tokenf.quot" (ast_quotation.ml[]..[])
                  []
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_constraint
                      pattern (ast_quotation.ml[]..[])
                        Ppat_var "tag" (ast_quotation.ml[]..[])
                      core_type (ast_quotation.ml[]..[])
                        Ptyp_constr "Dyn_tag.t" (ast_quotation.ml[]..[])
                        [
                          core_type (ast_quotation.ml[]..[])
                            Ptyp_var a
                        ]
                    expression (ast_quotation.ml[]..[])
                      Pexp_constraint
                      expression (ast_quotation.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (ast_quotation.ml[]..[])
                              Ppat_var "pos_tag" (ast_quotation.ml[]..[])
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "Dyn_tag.to_string" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "tag" (ast_quotation.ml[]..[])
                              ]
                        ]
                        expression (ast_quotation.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (ast_quotation.ml[]..[])
                                Ppat_var "name" (ast_quotation.ml[]..[])
                              expression (ast_quotation.ml[]..[])
                                Pexp_field
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "x" (ast_quotation.ml[]..[])
                                "name" (ast_quotation.ml[]..[])
                          ]
                          expression (ast_quotation.ml[]..[])
                            Pexp_match
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "expander_name" (ast_quotation.ml[]..[])
                              [
                                <label> "pos"
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "pos_tag" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "name" (ast_quotation.ml[]..[])
                              ]
                            [
                              <case>
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_construct "None" (ast_quotation.ml[]..[])
                                  None
                                expression (ast_quotation.ml[]..[])
                                  Pexp_apply
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "@@" (ast_quotation.ml[]..[])
                                  [
                                    <label> ""
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_apply
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "Locf.failf" (ast_quotation.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_field
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "x" (ast_quotation.ml[]..[])
                                              "loc" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_constant Const_string("DDSL `%s' not found",None)
                                        ]
                                    <label> ""
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_apply
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "Tokenf.string_of_name" (ast_quotation.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "name" (ast_quotation.ml[]..[])
                                        ]
                                  ]
                              <case>
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_construct "Some" (ast_quotation.ml[]..[])
                                  Some
                                    pattern (ast_quotation.ml[]..[])
                                      Ppat_var "absolute_name" (ast_quotation.ml[]..[])
                                expression (ast_quotation.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_var "pack" (ast_quotation.ml[]..[])
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_try
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_apply
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "QMap.find" (ast_quotation.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_ident "absolute_name" (ast_quotation.ml[]..[])
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_apply
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "ExpKey.pack" (ast_quotation.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_ident "tag" (ast_quotation.ml[]..[])
                                                      <label> ""
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_construct "()" (ast_quotation.ml[]..[])
                                                          None
                                                    ]
                                                ]
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_apply
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_ident "!" (ast_quotation.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "expanders_table" (ast_quotation.ml[]..[])
                                                ]
                                          ]
                                        [
                                          <case>
                                            pattern (ast_quotation.ml[]..[])
                                              Ppat_construct "Not_found" (ast_quotation.ml[]..[])
                                              None
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_apply
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "Locf.failf" (ast_quotation.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_field
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "x" (ast_quotation.ml[]..[])
                                                    "loc" (ast_quotation.ml[]..[])
                                                <label> ""
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_constant Const_string("DDSL expander `%s' at position `%s' not found",None)
                                                <label> ""
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_apply
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "Tokenf.string_of_name" (ast_quotation.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_ident "name" (ast_quotation.ml[]..[])
                                                    ]
                                                <label> ""
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_ident "pos_tag" (ast_quotation.ml[]..[])
                                              ]
                                        ]
                                  ]
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "expander" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_apply
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "ExpFun.unpack" (ast_quotation.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "tag" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "pack" (ast_quotation.ml[]..[])
                                          ]
                                    ]
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_apply
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "Tokenf.quot_expand" (ast_quotation.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "expander" (ast_quotation.ml[]..[])
                                        <label> ""
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "x" (ast_quotation.ml[]..[])
                                      ]
                            ]
                      core_type (ast_quotation.ml[]..[])
                        Ptyp_var a
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "add_quotation" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          Some
            expression (ast_quotation.ml[]..[])
              Pexp_ident "Lex_fan.from_stream" (ast_quotation.ml[]..[])
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "exp_filter"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "exp_filter" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "pat_filter"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "pat_filter" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_fun "mexp"
                None
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "mexp" (ast_quotation.ml[]..[])
                expression (ast_quotation.ml[]..[])
                  Pexp_fun "mpat"
                  None
                  pattern (ast_quotation.ml[]..[])
                    Ppat_var "mpat" (ast_quotation.ml[]..[])
                  expression (ast_quotation.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ast_quotation.ml[]..[])
                          Ppat_var "name" (ast_quotation.ml[]..[])
                        expression (ast_quotation.ml[]..[])
                          Pexp_function
                          [
                            <case>
                              pattern (ast_quotation.ml[]..[])
                                Ppat_var "entry" (ast_quotation.ml[]..[])
                              expression (ast_quotation.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (ast_quotation.ml[]..[])
                                      Ppat_var "expand_exp" (ast_quotation.ml[]..[])
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (ast_quotation.ml[]..[])
                                            Ppat_var "loc" (ast_quotation.ml[]..[])
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (ast_quotation.ml[]..[])
                                                  Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (ast_quotation.ml[]..[])
                                                        Ppat_var "s" (ast_quotation.ml[]..[])
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_apply
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_ident "Ref.protect2" (ast_quotation.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "Configf.antiquotations" (ast_quotation.ml[]..[])
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_construct "true" (ast_quotation.ml[]..[])
                                                                  None
                                                              ]
                                                          <label> ""
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "current_loc_name" (ast_quotation.ml[]..[])
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                              ]
                                                          <label> ""
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (ast_quotation.ml[]..[])
                                                                    Ppat_any
                                                                  expression (ast_quotation.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (ast_quotation.ml[]..[])
                                                                      Pexp_ident "|>" (ast_quotation.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (ast_quotation.ml[]..[])
  Pexp_apply
  expression (ast_quotation.ml[]..[])
    Pexp_ident "|>" (ast_quotation.ml[]..[])
  [
    <label> ""
      expression (ast_quotation.ml[]..[])
        Pexp_apply
        expression (ast_quotation.ml[]..[])
          Pexp_ident "Gramlib.parse_string_eoi" (ast_quotation.ml[]..[])
        [
          <label> "lexer"
            expression (ast_quotation.ml[]..[])
              Pexp_ident "lexer" (ast_quotation.ml[]..[])
          <label> ""
            expression (ast_quotation.ml[]..[])
              Pexp_ident "entry" (ast_quotation.ml[]..[])
          <label> "loc"
            expression (ast_quotation.ml[]..[])
              Pexp_ident "loc" (ast_quotation.ml[]..[])
          <label> ""
            expression (ast_quotation.ml[]..[])
              Pexp_ident "s" (ast_quotation.ml[]..[])
        ]
    <label> ""
      expression (ast_quotation.ml[]..[])
        Pexp_apply
        expression (ast_quotation.ml[]..[])
          Pexp_ident "mexp" (ast_quotation.ml[]..[])
        [
          <label> ""
            expression (ast_quotation.ml[]..[])
              Pexp_ident "loc" (ast_quotation.ml[]..[])
        ]
  ]
                                                                      <label> ""
expression (ast_quotation.ml[]..[])
  Pexp_ident "exp_filter" (ast_quotation.ml[]..[])
                                                                    ]
                                                              ]
                                                        ]
                                                  ]
                                            ]
                                      ]
                                ]
                                expression (ast_quotation.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_var "expand_stru" (ast_quotation.ml[]..[])
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (ast_quotation.ml[]..[])
                                              Ppat_var "loc" (ast_quotation.ml[]..[])
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (ast_quotation.ml[]..[])
                                                    Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_function
                                                    [
                                                      <case>
                                                        pattern (ast_quotation.ml[]..[])
                                                          Ppat_var "s" (ast_quotation.ml[]..[])
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (ast_quotation.ml[]..[])
                                                                Ppat_var "exp_ast" (ast_quotation.ml[]..[])
                                                              expression (ast_quotation.ml[]..[])
                                                                Pexp_apply
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "expand_exp" (ast_quotation.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (ast_quotation.ml[]..[])
                                                                      Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                                  <label> ""
                                                                    expression (ast_quotation.ml[]..[])
                                                                      Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                                  <label> ""
                                                                    expression (ast_quotation.ml[]..[])
                                                                      Pexp_ident "s" (ast_quotation.ml[]..[])
                                                                ]
                                                          ]
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_variant "StExp"
                                                            Some
                                                              expression (ast_quotation.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (ast_quotation.ml[]..[])
                                                                    Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                                  expression (ast_quotation.ml[]..[])
                                                                    Pexp_ident "exp_ast" (ast_quotation.ml[]..[])
                                                                ]
                                                    ]
                                              ]
                                        ]
                                  ]
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "expand_pat" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "_loc" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (ast_quotation.ml[]..[])
                                                      Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_function
                                                      [
                                                        <case>
                                                          pattern (ast_quotation.ml[]..[])
                                                            Ppat_var "s" (ast_quotation.ml[]..[])
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_apply
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_ident "Ref.protect" (ast_quotation.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "Configf.antiquotations" (ast_quotation.ml[]..[])
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_construct "true" (ast_quotation.ml[]..[])
                                                                  None
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_function
                                                                  [
                                                                    <case>
                                                                      pattern (ast_quotation.ml[]..[])
Ppat_any
                                                                      expression (ast_quotation.ml[]..[])
Pexp_let Nonrec
[
  <def>
    pattern (ast_quotation.ml[]..[])
      Ppat_var "ast" (ast_quotation.ml[]..[])
    expression (ast_quotation.ml[]..[])
      Pexp_apply
      expression (ast_quotation.ml[]..[])
        Pexp_ident "Gramlib.parse_string_eoi" (ast_quotation.ml[]..[])
      [
        <label> "lexer"
          expression (ast_quotation.ml[]..[])
            Pexp_ident "lexer" (ast_quotation.ml[]..[])
        <label> ""
          expression (ast_quotation.ml[]..[])
            Pexp_ident "entry" (ast_quotation.ml[]..[])
        <label> "loc"
          expression (ast_quotation.ml[]..[])
            Pexp_ident "_loc" (ast_quotation.ml[]..[])
        <label> ""
          expression (ast_quotation.ml[]..[])
            Pexp_ident "s" (ast_quotation.ml[]..[])
      ]
]
expression (ast_quotation.ml[]..[])
  Pexp_let Nonrec
  [
    <def>
      pattern (ast_quotation.ml[]..[])
        Ppat_var "meta_ast" (ast_quotation.ml[]..[])
      expression (ast_quotation.ml[]..[])
        Pexp_apply
        expression (ast_quotation.ml[]..[])
          Pexp_ident "mpat" (ast_quotation.ml[]..[])
        [
          <label> ""
            expression (ast_quotation.ml[]..[])
              Pexp_ident "_loc" (ast_quotation.ml[]..[])
          <label> ""
            expression (ast_quotation.ml[]..[])
              Pexp_ident "ast" (ast_quotation.ml[]..[])
        ]
  ]
  expression (ast_quotation.ml[]..[])
    Pexp_let Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "exp_ast" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_apply
          expression (ast_quotation.ml[]..[])
            Pexp_ident "pat_filter" (ast_quotation.ml[]..[])
          [
            <label> ""
              expression (ast_quotation.ml[]..[])
                Pexp_ident "meta_ast" (ast_quotation.ml[]..[])
          ]
    ]
    expression (ast_quotation.ml[]..[])
      Pexp_let Rec
      [
        <def>
          pattern (ast_quotation.ml[]..[])
            Ppat_var "subst_first_loc" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "name" (ast_quotation.ml[]..[])
                expression (ast_quotation.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_constraint
                        pattern (ast_quotation.ml[]..[])
                          Ppat_var "x" (ast_quotation.ml[]..[])
                        core_type (ast_quotation.ml[]..[])
                          Ptyp_constr "Astf.pat" (ast_quotation.ml[]..[])
                          []
                      expression (ast_quotation.ml[]..[])
                        Pexp_constraint
                        expression (ast_quotation.ml[]..[])
                          Pexp_match
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "x" (ast_quotation.ml[]..[])
                          [
                            <case>
                              pattern (ast_quotation.ml[]..[])
                                Ppat_variant "App"
                                Some
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_var "loc" (ast_quotation.ml[]..[])
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_variant "Vrn"
                                        Some
                                          pattern (ast_quotation.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_any
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "u" (ast_quotation.ml[]..[])
                                            ]
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_variant "Par"
                                        Some
                                          pattern (ast_quotation.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_any
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_variant "Com"
                                                Some
                                                  pattern (ast_quotation.ml[]..[])
                                                    Ppat_tuple
                                                    [
                                                      pattern (ast_quotation.ml[]..[])
                                                        Ppat_any
                                                      pattern (ast_quotation.ml[]..[])
                                                        Ppat_variant "Any"
                                                        Some
                                                          pattern (ast_quotation.ml[]..[])
                                                            Ppat_any
                                                      pattern (ast_quotation.ml[]..[])
                                                        Ppat_var "rest" (ast_quotation.ml[]..[])
                                                    ]
                                            ]
                                    ]
                              expression (ast_quotation.ml[]..[])
                                Pexp_variant "App"
                                Some
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "loc" (ast_quotation.ml[]..[])
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_variant "Vrn"
                                        Some
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "loc" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "u" (ast_quotation.ml[]..[])
                                            ]
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_variant "Par"
                                        Some
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "loc" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_variant "Com"
                                                Some
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_variant "Lid"
                                                        Some
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (ast_quotation.ml[]..[])
                                                                Pexp_ident "_loc" (ast_quotation.ml[]..[])
                                                              expression (ast_quotation.ml[]..[])
                                                                Pexp_ident "name" (ast_quotation.ml[]..[])
                                                            ]
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_ident "rest" (ast_quotation.ml[]..[])
                                                    ]
                                            ]
                                    ]
                            <case>
                              pattern (ast_quotation.ml[]..[])
                                Ppat_variant "App"
                                Some
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_var "_loc" (ast_quotation.ml[]..[])
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_variant "Vrn"
                                        Some
                                          pattern (ast_quotation.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_any
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "u" (ast_quotation.ml[]..[])
                                            ]
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_variant "Any"
                                        Some
                                          pattern (ast_quotation.ml[]..[])
                                            Ppat_any
                                    ]
                              expression (ast_quotation.ml[]..[])
                                Pexp_variant "App"
                                Some
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "_loc" (ast_quotation.ml[]..[])
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_variant "Vrn"
                                        Some
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "_loc" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "u" (ast_quotation.ml[]..[])
                                            ]
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_variant "Lid"
                                        Some
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "_loc" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "name" (ast_quotation.ml[]..[])
                                            ]
                                    ]
                            <case>
                              pattern (ast_quotation.ml[]..[])
                                Ppat_variant "Constraint"
                                Some
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_var "_loc" (ast_quotation.ml[]..[])
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_var "a" (ast_quotation.ml[]..[])
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_var "ty" (ast_quotation.ml[]..[])
                                    ]
                              expression (ast_quotation.ml[]..[])
                                Pexp_variant "Constraint"
                                Some
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "_loc" (ast_quotation.ml[]..[])
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_apply
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "subst_first_loc" (ast_quotation.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "name" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "a" (ast_quotation.ml[]..[])
                                        ]
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_ident "ty" (ast_quotation.ml[]..[])
                                    ]
                            <case>
                              pattern (ast_quotation.ml[]..[])
                                Ppat_var "p" (ast_quotation.ml[]..[])
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "p" (ast_quotation.ml[]..[])
                          ]
                        core_type (ast_quotation.ml[]..[])
                          Ptyp_constr "Astf.pat" (ast_quotation.ml[]..[])
                          []
                  ]
            ]
      ]
      expression (ast_quotation.ml[]..[])
        Pexp_match
        expression (ast_quotation.ml[]..[])
          Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
        [
          <case>
            pattern (ast_quotation.ml[]..[])
              Ppat_construct "None" (ast_quotation.ml[]..[])
              None
            expression (ast_quotation.ml[]..[])
              Pexp_apply
              expression (ast_quotation.ml[]..[])
                Pexp_ident "subst_first_loc" (ast_quotation.ml[]..[])
              [
                <label> ""
                  expression (ast_quotation.ml[]..[])
                    Pexp_apply
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "!" (ast_quotation.ml[]..[])
                    [
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "Locf.name" (ast_quotation.ml[]..[])
                    ]
                <label> ""
                  expression (ast_quotation.ml[]..[])
                    Pexp_ident "exp_ast" (ast_quotation.ml[]..[])
              ]
          <case>
            pattern (ast_quotation.ml[]..[])
              Ppat_construct "Some" (ast_quotation.ml[]..[])
              Some
                pattern (ast_quotation.ml[]..[])
                  Ppat_constant Const_string("_",None)
            expression (ast_quotation.ml[]..[])
              Pexp_ident "exp_ast" (ast_quotation.ml[]..[])
          <case>
            pattern (ast_quotation.ml[]..[])
              Ppat_construct "Some" (ast_quotation.ml[]..[])
              Some
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_apply
              expression (ast_quotation.ml[]..[])
                Pexp_ident "subst_first_loc" (ast_quotation.ml[]..[])
              [
                <label> ""
                  expression (ast_quotation.ml[]..[])
                    Pexp_ident "name" (ast_quotation.ml[]..[])
                <label> ""
                  expression (ast_quotation.ml[]..[])
                    Pexp_ident "exp_ast" (ast_quotation.ml[]..[])
              ]
        ]
                                                                  ]
                                                            ]
                                                      ]
                                                ]
                                          ]
                                    ]
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_sequence
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_apply
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "add" (ast_quotation.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "name" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "Dyn_tag.exp" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "expand_exp" (ast_quotation.ml[]..[])
                                        ]
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_sequence
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_apply
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "add" (ast_quotation.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "name" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "Dyn_tag.pat" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "expand_pat" (ast_quotation.ml[]..[])
                                          ]
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_apply
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "add" (ast_quotation.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "name" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[]..[])
                                            <label> ""
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "expand_stru" (ast_quotation.ml[]..[])
                                          ]
                          ]
                    ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "make_parser" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          Some
            expression (ast_quotation.ml[]..[])
              Pexp_ident "Lex_fan.from_stream" (ast_quotation.ml[]..[])
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "entry" (ast_quotation.ml[]..[])
                expression (ast_quotation.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_var "loc" (ast_quotation.ml[]..[])
                      expression (ast_quotation.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (ast_quotation.ml[]..[])
                              Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "s" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_apply
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_ident "Ref.protect2" (ast_quotation.ml[]..[])
                                    [
                                      <label> ""
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "Configf.antiquotations" (ast_quotation.ml[]..[])
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_construct "true" (ast_quotation.ml[]..[])
                                              None
                                          ]
                                      <label> ""
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "current_loc_name" (ast_quotation.ml[]..[])
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                          ]
                                      <label> ""
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_any
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_apply
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_ident "Gramlib.parse_string_eoi" (ast_quotation.ml[]..[])
                                                [
                                                  <label> "lexer"
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "lexer" (ast_quotation.ml[]..[])
                                                  <label> ""
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "entry" (ast_quotation.ml[]..[])
                                                  <label> "loc"
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                  <label> ""
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_ident "s" (ast_quotation.ml[]..[])
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
            ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_stru" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_construct "()" (ast_quotation.ml[]..[])
                      None
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "add" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "name" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "lexer" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "entry" (ast_quotation.ml[]..[])
                            ]
                      ]
                ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_stru_with_filter" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "filter" (ast_quotation.ml[]..[])
                expression (ast_quotation.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_construct "()" (ast_quotation.ml[]..[])
                        None
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "add" (ast_quotation.ml[]..[])
                        [
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "name" (ast_quotation.ml[]..[])
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[]..[])
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "loc" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "s" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_apply
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_ident "filter" (ast_quotation.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "lexer" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "entry" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "s" (ast_quotation.ml[]..[])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_pat" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_construct "()" (ast_quotation.ml[]..[])
                      None
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "add" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "name" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "Dyn_tag.pat" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "lexer" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "entry" (ast_quotation.ml[]..[])
                            ]
                      ]
                ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_exp" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_construct "()" (ast_quotation.ml[]..[])
                      None
                    expression (ast_quotation.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (ast_quotation.ml[]..[])
                            Ppat_var "expand_fun" (ast_quotation.ml[]..[])
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "lexer" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "entry" (ast_quotation.ml[]..[])
                            ]
                      ]
                      expression (ast_quotation.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (ast_quotation.ml[]..[])
                              Ppat_var "mk_fun" (ast_quotation.ml[]..[])
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "loc" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "s" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_constraint
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_variant "StExp"
                                                  Some
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_apply
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "expand_fun" (ast_quotation.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (ast_quotation.ml[]..[])
                                                                Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                            <label> ""
                                                              expression (ast_quotation.ml[]..[])
                                                                Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                            <label> ""
                                                              expression (ast_quotation.ml[]..[])
                                                                Pexp_ident "s" (ast_quotation.ml[]..[])
                                                          ]
                                                      ]
                                                core_type (ast_quotation.ml[]..[])
                                                  Ptyp_constr "Astf.stru" (ast_quotation.ml[]..[])
                                                  []
                                          ]
                                    ]
                              ]
                        ]
                        expression (ast_quotation.ml[]..[])
                          Pexp_sequence
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "add" (ast_quotation.ml[]..[])
                            [
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "name" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "Dyn_tag.exp" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "expand_fun" (ast_quotation.ml[]..[])
                            ]
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "add" (ast_quotation.ml[]..[])
                            [
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "name" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "mk_fun" (ast_quotation.ml[]..[])
                            ]
                ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_ep" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_construct "()" (ast_quotation.ml[]..[])
                      None
                    expression (ast_quotation.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (ast_quotation.ml[]..[])
                            Ppat_constraint
                            pattern (ast_quotation.ml[]..[])
                              Ppat_var "expand_fun" (ast_quotation.ml[]..[])
                            core_type (ast_quotation.ml[]..[])
                              Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[]..[])
                              [
                                core_type (ast_quotation.ml[]..[])
                                  Ptyp_constr "Astf.ep" (ast_quotation.ml[]..[])
                                  []
                              ]
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "lexer" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "entry" (ast_quotation.ml[]..[])
                            ]
                      ]
                      expression (ast_quotation.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (ast_quotation.ml[]..[])
                              Ppat_var "mk_fun" (ast_quotation.ml[]..[])
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "loc" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "s" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_coerce
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_variant "StExp"
                                                  Some
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                        expression (ast_quotation.ml[]..[])
                                                          Pexp_coerce
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_apply
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_ident "expand_fun" (ast_quotation.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "s" (ast_quotation.ml[]..[])
                                                            ]
                                                          None
                                                          core_type (ast_quotation.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (ast_quotation.ml[]..[])
                                                            []
                                                      ]
                                                None
                                                core_type (ast_quotation.ml[]..[])
                                                  Ptyp_constr "Astf.stru" (ast_quotation.ml[]..[])
                                                  []
                                          ]
                                    ]
                              ]
                        ]
                        expression (ast_quotation.ml[]..[])
                          Pexp_sequence
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "add" (ast_quotation.ml[]..[])
                            [
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "name" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "Dyn_tag.pat" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_coerce
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_apply
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                                    [
                                      <label> "?lexer"
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "lexer" (ast_quotation.ml[]..[])
                                      <label> ""
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "entry" (ast_quotation.ml[]..[])
                                    ]
                                  Some
                                    core_type (ast_quotation.ml[]..[])
                                      Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[]..[])
                                      [
                                        core_type (ast_quotation.ml[]..[])
                                          Ptyp_constr "Astf.ep" (ast_quotation.ml[]..[])
                                          []
                                      ]
                                  core_type (ast_quotation.ml[]..[])
                                    Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[]..[])
                                    [
                                      core_type (ast_quotation.ml[]..[])
                                        Ptyp_constr "Astf.pat" (ast_quotation.ml[]..[])
                                        []
                                    ]
                            ]
                          expression (ast_quotation.ml[]..[])
                            Pexp_sequence
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "add" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "name" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "Dyn_tag.exp" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_coerce
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_ident "expand_fun" (ast_quotation.ml[]..[])
                                    Some
                                      core_type (ast_quotation.ml[]..[])
                                        Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[]..[])
                                        [
                                          core_type (ast_quotation.ml[]..[])
                                            Ptyp_constr "Astf.ep" (ast_quotation.ml[]..[])
                                            []
                                        ]
                                    core_type (ast_quotation.ml[]..[])
                                      Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[]..[])
                                      [
                                        core_type (ast_quotation.ml[]..[])
                                          Ptyp_constr "Astf.exp" (ast_quotation.ml[]..[])
                                          []
                                      ]
                              ]
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "add" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "name" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "mk_fun" (ast_quotation.ml[]..[])
                              ]
                ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_pat_with_filter" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "filter" (ast_quotation.ml[]..[])
                expression (ast_quotation.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_construct "()" (ast_quotation.ml[]..[])
                        None
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "add" (ast_quotation.ml[]..[])
                        [
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "name" (ast_quotation.ml[]..[])
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "Dyn_tag.pat" (ast_quotation.ml[]..[])
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "loc" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "s" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_apply
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_ident "filter" (ast_quotation.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "lexer" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "entry" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "s" (ast_quotation.ml[]..[])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_clfield" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_construct "()" (ast_quotation.ml[]..[])
                      None
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "add" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "name" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "Dyn_tag.clfield" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "lexer" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "entry" (ast_quotation.ml[]..[])
                            ]
                      ]
                ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_clfield_with_filter" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "filter" (ast_quotation.ml[]..[])
                expression (ast_quotation.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_construct "()" (ast_quotation.ml[]..[])
                        None
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "@@" (ast_quotation.ml[]..[])
                        [
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "add" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "name" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "Dyn_tag.clfield" (ast_quotation.ml[]..[])
                              ]
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "loc" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "s" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_apply
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_ident "filter" (ast_quotation.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "lexer" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "entry" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "s" (ast_quotation.ml[]..[])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_case" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[]..[])
                      Ppat_construct "()" (ast_quotation.ml[]..[])
                      None
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "add" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "name" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "Dyn_tag.case" (ast_quotation.ml[]..[])
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_apply
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "lexer" (ast_quotation.ml[]..[])
                              <label> ""
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "entry" (ast_quotation.ml[]..[])
                            ]
                      ]
                ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_case_with_filter" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "filter" (ast_quotation.ml[]..[])
                expression (ast_quotation.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_construct "()" (ast_quotation.ml[]..[])
                        None
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "add" (ast_quotation.ml[]..[])
                        [
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "name" (ast_quotation.ml[]..[])
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "Dyn_tag.case" (ast_quotation.ml[]..[])
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "loc" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "s" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_apply
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_ident "filter" (ast_quotation.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "lexer" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "entry" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "s" (ast_quotation.ml[]..[])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "of_exp_with_filter" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[]..[])
              Ppat_var "name" (ast_quotation.ml[]..[])
            expression (ast_quotation.ml[]..[])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[]..[])
                Ppat_var "entry" (ast_quotation.ml[]..[])
              expression (ast_quotation.ml[]..[])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "filter" (ast_quotation.ml[]..[])
                expression (ast_quotation.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_construct "()" (ast_quotation.ml[]..[])
                        None
                      expression (ast_quotation.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (ast_quotation.ml[]..[])
                              Ppat_var "expand_fun" (ast_quotation.ml[]..[])
                            expression (ast_quotation.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "loc" (ast_quotation.ml[]..[])
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[]..[])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[]..[])
                                                Ppat_var "s" (ast_quotation.ml[]..[])
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_apply
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_ident "filter" (ast_quotation.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[]..[])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "lexer" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "entry" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                        <label> ""
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "s" (ast_quotation.ml[]..[])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                        expression (ast_quotation.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (ast_quotation.ml[]..[])
                                Ppat_var "mk_fun" (ast_quotation.ml[]..[])
                              expression (ast_quotation.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (ast_quotation.ml[]..[])
                                      Ppat_var "loc" (ast_quotation.ml[]..[])
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (ast_quotation.ml[]..[])
                                            Ppat_var "loc_name_opt" (ast_quotation.ml[]..[])
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (ast_quotation.ml[]..[])
                                                  Ppat_var "s" (ast_quotation.ml[]..[])
                                                expression (ast_quotation.ml[]..[])
                                                  Pexp_constraint
                                                  expression (ast_quotation.ml[]..[])
                                                    Pexp_variant "StExp"
                                                    Some
                                                      expression (ast_quotation.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                          expression (ast_quotation.ml[]..[])
                                                            Pexp_apply
                                                            expression (ast_quotation.ml[]..[])
                                                              Pexp_ident "expand_fun" (ast_quotation.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "loc" (ast_quotation.ml[]..[])
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "loc_name_opt" (ast_quotation.ml[]..[])
                                                              <label> ""
                                                                expression (ast_quotation.ml[]..[])
                                                                  Pexp_ident "s" (ast_quotation.ml[]..[])
                                                            ]
                                                        ]
                                                  core_type (ast_quotation.ml[]..[])
                                                    Ptyp_constr "Astf.stru" (ast_quotation.ml[]..[])
                                                    []
                                            ]
                                      ]
                                ]
                          ]
                          expression (ast_quotation.ml[]..[])
                            Pexp_sequence
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "add" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "name" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "Dyn_tag.exp" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "expand_fun" (ast_quotation.ml[]..[])
                              ]
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "add" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "name" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[]..[])
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_ident "mk_fun" (ast_quotation.ml[]..[])
                              ]
                  ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "dir_table" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_constraint
          expression (ast_quotation.ml[]..[])
            Pexp_apply
            expression (ast_quotation.ml[]..[])
              Pexp_ident "Hashtbl.create" (ast_quotation.ml[]..[])
            [
              <label> ""
                expression (ast_quotation.ml[]..[])
                  Pexp_constant Const_int 50
            ]
          core_type (ast_quotation.ml[]..[])
            Ptyp_constr "Hashtbl.t" (ast_quotation.ml[]..[])
            [
              core_type (ast_quotation.ml[]..[])
                Ptyp_constr "Tokenf.name" (ast_quotation.ml[]..[])
                []
              core_type (ast_quotation.ml[]..[])
                Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[]..[])
                [
                  core_type (ast_quotation.ml[]..[])
                    Ptyp_constr "unit" (ast_quotation.ml[]..[])
                    []
                ]
            ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "dump_directives" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_construct "()" (ast_quotation.ml[]..[])
                None
              expression (ast_quotation.ml[]..[])
                Pexp_apply
                expression (ast_quotation.ml[]..[])
                  Pexp_ident "|>" (ast_quotation.ml[]..[])
                [
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "dir_table" (ast_quotation.ml[]..[])
                  <label> ""
                    expression (ast_quotation.ml[]..[])
                      Pexp_apply
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "Hashtbl.iter" (ast_quotation.ml[]..[])
                      [
                        <label> ""
                          expression (ast_quotation.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (ast_quotation.ml[]..[])
                                  Ppat_constraint
                                  pattern (ast_quotation.ml[]..[])
                                    Ppat_var "n" (ast_quotation.ml[]..[])
                                  core_type (ast_quotation.ml[]..[])
                                    Ptyp_constr "Tokenf.name" (ast_quotation.ml[]..[])
                                    []
                                expression (ast_quotation.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ast_quotation.ml[]..[])
                                        Ppat_any
                                      expression (ast_quotation.ml[]..[])
                                        Pexp_apply
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_ident "fprintf" (ast_quotation.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "Format.std_formatter" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_constant Const_string("%a.%s@.",None)
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_ident "Tokenf.pp_print_domains" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_field
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "n" (ast_quotation.ml[]..[])
                                              "domain" (ast_quotation.ml[]..[])
                                          <label> ""
                                            expression (ast_quotation.ml[]..[])
                                              Pexp_field
                                              expression (ast_quotation.ml[]..[])
                                                Pexp_ident "n" (ast_quotation.ml[]..[])
                                              "name" (ast_quotation.ml[]..[])
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "handle_quot" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_constraint
                pattern (ast_quotation.ml[]..[])
                  Ppat_var "x" (ast_quotation.ml[]..[])
                core_type (ast_quotation.ml[]..[])
                  Ptyp_constr "Tokenf.quot" (ast_quotation.ml[]..[])
                  []
              expression (ast_quotation.ml[]..[])
                Pexp_constraint
                expression (ast_quotation.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_var "handler" (ast_quotation.ml[]..[])
                      expression (ast_quotation.ml[]..[])
                        Pexp_try
                        expression (ast_quotation.ml[]..[])
                          Pexp_apply
                          expression (ast_quotation.ml[]..[])
                            Pexp_ident "Hashtbl.find" (ast_quotation.ml[]..[])
                          [
                            <label> ""
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "dir_table" (ast_quotation.ml[]..[])
                            <label> ""
                              expression (ast_quotation.ml[]..[])
                                Pexp_field
                                expression (ast_quotation.ml[]..[])
                                  Pexp_ident "x" (ast_quotation.ml[]..[])
                                "name" (ast_quotation.ml[]..[])
                          ]
                        [
                          <case>
                            pattern (ast_quotation.ml[]..[])
                              Ppat_construct "Not_found" (ast_quotation.ml[]..[])
                              None
                            expression (ast_quotation.ml[]..[])
                              Pexp_apply
                              expression (ast_quotation.ml[]..[])
                                Pexp_ident "@@" (ast_quotation.ml[]..[])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_apply
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_ident "Locf.failf" (ast_quotation.ml[]..[])
                                    [
                                      <label> ""
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_field
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "x" (ast_quotation.ml[]..[])
                                          "loc" (ast_quotation.ml[]..[])
                                      <label> ""
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_constant Const_string("Unfound directive language %s",None)
                                    ]
                                <label> ""
                                  expression (ast_quotation.ml[]..[])
                                    Pexp_apply
                                    expression (ast_quotation.ml[]..[])
                                      Pexp_ident "Tokenf.string_of_name" (ast_quotation.ml[]..[])
                                    [
                                      <label> ""
                                        expression (ast_quotation.ml[]..[])
                                          Pexp_field
                                          expression (ast_quotation.ml[]..[])
                                            Pexp_ident "x" (ast_quotation.ml[]..[])
                                          "name" (ast_quotation.ml[]..[])
                                    ]
                              ]
                        ]
                  ]
                  expression (ast_quotation.ml[]..[])
                    Pexp_apply
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "Tokenf.quot_expand" (ast_quotation.ml[]..[])
                    [
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "handler" (ast_quotation.ml[]..[])
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "x" (ast_quotation.ml[]..[])
                    ]
                core_type (ast_quotation.ml[]..[])
                  Ptyp_constr "unit" (ast_quotation.ml[]..[])
                  []
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "register" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[]..[])
                Ppat_tuple
                [
                  pattern (ast_quotation.ml[]..[])
                    Ppat_var "v" (ast_quotation.ml[]..[])
                  pattern (ast_quotation.ml[]..[])
                    Ppat_var "f" (ast_quotation.ml[]..[])
                ]
              expression (ast_quotation.ml[]..[])
                Pexp_ifthenelse
                expression (ast_quotation.ml[]..[])
                  Pexp_apply
                  expression (ast_quotation.ml[]..[])
                    Pexp_ident "Hashtbl.mem" (ast_quotation.ml[]..[])
                  [
                    <label> ""
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "dir_table" (ast_quotation.ml[]..[])
                    <label> ""
                      expression (ast_quotation.ml[]..[])
                        Pexp_ident "v" (ast_quotation.ml[]..[])
                  ]
                expression (ast_quotation.ml[]..[])
                  Pexp_apply
                  expression (ast_quotation.ml[]..[])
                    Pexp_ident "@@" (ast_quotation.ml[]..[])
                  [
                    <label> ""
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "Format.eprintf" (ast_quotation.ml[]..[])
                        [
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_constant Const_string("%s already registered",None)
                        ]
                    <label> ""
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "Tokenf.string_of_name" (ast_quotation.ml[]..[])
                        [
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "v" (ast_quotation.ml[]..[])
                        ]
                  ]
                Some
                  expression (ast_quotation.ml[]..[])
                    Pexp_apply
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "Hashtbl.add" (ast_quotation.ml[]..[])
                    [
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "dir_table" (ast_quotation.ml[]..[])
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "v" (ast_quotation.ml[]..[])
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "f" (ast_quotation.ml[]..[])
                    ]
          ]
    ]
  structure_item (ast_quotation.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[]..[])
          Ppat_var "register_unit_parser" (ast_quotation.ml[]..[])
        expression (ast_quotation.ml[]..[])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[]..[])
            Ppat_var "lexer" (ast_quotation.ml[]..[])
          expression (ast_quotation.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ast_quotation.ml[]..[])
                  Ppat_tuple
                  [
                    pattern (ast_quotation.ml[]..[])
                      Ppat_var "v" (ast_quotation.ml[]..[])
                    pattern (ast_quotation.ml[]..[])
                      Ppat_var "entry" (ast_quotation.ml[]..[])
                  ]
                expression (ast_quotation.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (ast_quotation.ml[]..[])
                        Ppat_var "expand" (ast_quotation.ml[]..[])
                      expression (ast_quotation.ml[]..[])
                        Pexp_apply
                        expression (ast_quotation.ml[]..[])
                          Pexp_ident "make_parser" (ast_quotation.ml[]..[])
                        [
                          <label> "?lexer"
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "lexer" (ast_quotation.ml[]..[])
                          <label> ""
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "entry" (ast_quotation.ml[]..[])
                        ]
                  ]
                  expression (ast_quotation.ml[]..[])
                    Pexp_apply
                    expression (ast_quotation.ml[]..[])
                      Pexp_ident "register" (ast_quotation.ml[]..[])
                    [
                      <label> ""
                        expression (ast_quotation.ml[]..[])
                          Pexp_tuple
                          [
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "v" (ast_quotation.ml[]..[])
                            expression (ast_quotation.ml[]..[])
                              Pexp_ident "expand" (ast_quotation.ml[]..[])
                          ]
                    ]
            ]
    ]
]
