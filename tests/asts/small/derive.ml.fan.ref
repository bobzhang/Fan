[
  structure_item (derive.ml[1,0+0]..[1,0+11])
    Pstr_open Fresh "Format" (derive.ml[1,0+5]..[1,0+11])
  structure_item (derive.ml[2,12+0]..[2,12+9])
    Pstr_open Fresh "Util" (derive.ml[2,12+5]..[2,12+9])
  structure_item (derive.ml[3,22+0]..[3,22+14])
    Pstr_open Fresh "Astn_util" (derive.ml[3,22+5]..[3,22+14])
  structure_item (derive.ml[4,37+0]..[4,37+10])
    Pstr_open Fresh "Astfn" (derive.ml[4,37+5]..[4,37+10])
  structure_item (derive.ml[5,48+0]..[5,48+8])
    Pstr_open Fresh "Fid" (derive.ml[5,48+5]..[5,48+8])
  structure_item (derive.ml[6,57+0]..[6,57+9])
    Pstr_open Fresh "Ctyp" (derive.ml[6,57+5]..[6,57+9])
  structure_item (derive.ml[7,67+0]..[7,67+14])
    Pstr_open Fresh "Sigs_util" (derive.ml[7,67+5]..[7,67+14])
  structure_item (derive.ml[8,82+0]..[21,503+16])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[8,82+4]..[8,82+15])
          Ppat_var "check_valid" (derive.ml[8,82+4]..[8,82+15])
        expression (derive.ml[9,100+2]..[21,503+16])
          Pexp_function
          [
            <case>
              pattern (derive.ml[10,111+4]..[10,111+7])
                Ppat_var "str" (derive.ml[10,111+4]..[10,111+7])
              expression (derive.ml[11,122+6]..[21,503+16])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (derive.ml[11,122+10]..[11,122+13])
                      Ppat_var "len" (derive.ml[11,122+10]..[11,122+13])
                    expression (derive.ml[11,122+16]..[11,122+33])
                      Pexp_apply
                      expression (derive.ml[11,122+16]..[11,122+29])
                        Pexp_ident "String.length" (derive.ml[11,122+16]..[11,122+29])
                      [
                        <label> ""
                          expression (derive.ml[11,122+30]..[11,122+33])
                            Pexp_ident "str" (derive.ml[11,122+30]..[11,122+33])
                      ]
                ]
                expression (derive.ml[12,159+6]..[21,503+16])
                  Pexp_ifthenelse
                  expression (derive.ml[13,168+8]..[16,257+59])
                    Pexp_apply
                    expression (derive.ml[13,168+8]..[13,168+11])
                      Pexp_ident "not" (derive.ml[13,168+8]..[13,168+11])
                    [
                      <label> ""
                        expression (derive.ml[14,180+11]..[16,257+58])
                          Pexp_apply
                          expression (derive.ml[14,180+21]..[14,180+23])
                            Pexp_ident "&&" (derive.ml[14,180+21]..[14,180+23])
                          [
                            <label> ""
                              expression (derive.ml[14,180+12]..[14,180+19])
                                Pexp_apply
                                expression (derive.ml[14,180+16]..[14,180+17])
                                  Pexp_ident ">" (derive.ml[14,180+16]..[14,180+17])
                                [
                                  <label> ""
                                    expression (derive.ml[14,180+12]..[14,180+15])
                                      Pexp_ident "len" (derive.ml[14,180+12]..[14,180+15])
                                  <label> ""
                                    expression (derive.ml[14,180+18]..[14,180+19])
                                      Pexp_constant Const_int 1
                                ]
                            <label> ""
                              expression (derive.ml[15,204+14]..[16,257+57])
                                Pexp_apply
                                expression (derive.ml[15,204+50]..[15,204+52])
                                  Pexp_ident "&&" (derive.ml[15,204+50]..[15,204+52])
                                [
                                  <label> ""
                                    expression (derive.ml[15,204+15]..[15,204+48])
                                      Pexp_apply
                                      expression (derive.ml[15,204+19]..[15,204+21])
                                        Pexp_ident "@@" (derive.ml[15,204+19]..[15,204+21])
                                      [
                                        <label> ""
                                          expression (derive.ml[15,204+15]..[15,204+18])
                                            Pexp_ident "not" (derive.ml[15,204+15]..[15,204+18])
                                        <label> ""
                                          expression (derive.ml[15,204+23]..[15,204+47])
                                            Pexp_apply
                                            expression (derive.ml[15,204+23]..[15,204+37])
                                              Pexp_ident "Charf.is_digit" (derive.ml[15,204+23]..[15,204+37])
                                            [
                                              <label> ""
                                                expression (derive.ml[15,204+39]..[15,204+46])
                                                  Pexp_apply
                                                  expression (derive.ml[15,204+39]..[15,204+46])
                                                    Pexp_ident "String.get" (derive.ml[15,204+39]..[15,204+46])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[15,204+39]..[15,204+42])
                                                        Pexp_ident "str" (derive.ml[15,204+39]..[15,204+42])
                                                    <label> ""
                                                      expression (derive.ml[15,204+44]..[15,204+45])
                                                        Pexp_constant Const_int 1
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (derive.ml[16,257+17]..[16,257+56])
                                      Pexp_apply
                                      expression (derive.ml[16,257+21]..[16,257+23])
                                        Pexp_ident "@@" (derive.ml[16,257+21]..[16,257+23])
                                      [
                                        <label> ""
                                          expression (derive.ml[16,257+17]..[16,257+20])
                                            Pexp_ident "not" (derive.ml[16,257+17]..[16,257+20])
                                        <label> ""
                                          expression (derive.ml[16,257+25]..[16,257+55])
                                            Pexp_apply
                                            expression (derive.ml[16,257+25]..[16,257+44])
                                              Pexp_ident "Stringf.starts_with" (derive.ml[16,257+25]..[16,257+44])
                                            [
                                              <label> ""
                                                expression (derive.ml[16,257+45]..[16,257+48])
                                                  Pexp_ident "str" (derive.ml[16,257+45]..[16,257+48])
                                              <label> ""
                                                expression (derive.ml[16,257+49]..[16,257+55])
                                                  Pexp_constant Const_string("all_",None)
                                            ]
                                      ]
                                ]
                          ]
                    ]
                  expression (derive.ml[18,328+8]..[21,503+16])
                    Pexp_sequence
                    expression (derive.ml[18,328+9]..[18,328+45])
                      Pexp_apply
                      expression (derive.ml[18,328+9]..[18,328+16])
                        Pexp_ident "eprintf" (derive.ml[18,328+9]..[18,328+16])
                      [
                        <label> ""
                          expression (derive.ml[18,328+17]..[18,328+41])
                            Pexp_constant Const_string("%s is not a valid name",None)
                        <label> ""
                          expression (derive.ml[18,328+42]..[18,328+45])
                            Pexp_ident "str" (derive.ml[18,328+42]..[18,328+45])
                      ]
                    expression (derive.ml[18,328+8]..[21,503+16])
                      Pexp_sequence
                      expression (derive.ml[19,375+9]..[20,392+109])
                        Pexp_apply
                        expression (derive.ml[19,375+9]..[19,375+16])
                          Pexp_ident "eprintf" (derive.ml[19,375+9]..[19,375+16])
                        [
                          <label> ""
                            expression (derive.ml[20,392+11]..[20,392+109])
                              Pexp_constant Const_string("For valid name its length should be more than 1\ncan not be a-[digit], can not start with [all_]",None)
                        ]
                      expression (derive.ml[18,328+8]..[21,503+16])
                        Pexp_apply
                        expression (derive.ml[21,503+9]..[21,503+13])
                          Pexp_ident "exit" (derive.ml[21,503+9]..[21,503+13])
                        [
                          <label> ""
                            expression (derive.ml[21,503+14]..[21,503+15])
                              Pexp_constant Const_int 2
                        ]
                  None
          ]
    ]
  structure_item (derive.ml[22,520+0]..[22,520+54])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[22,520+4]..[22,520+12])
          Ppat_var "preserve" (derive.ml[22,520+4]..[22,520+12])
        expression (derive.ml[22,520+16]..[22,520+53])
          Pexp_construct "::" (derive.ml[22,520+16]..[22,520+53])
          Some
            expression (derive.ml[22,520+16]..[22,520+53])
              Pexp_tuple
              [
                expression (derive.ml[22,520+16]..[22,520+22])
                  Pexp_constant Const_string("self",None)
                expression (derive.ml[22,520+24]..[22,520+53])
                  Pexp_construct "::" (derive.ml[22,520+24]..[22,520+53])
                  Some
                    expression (derive.ml[22,520+24]..[22,520+53])
                      Pexp_tuple
                      [
                        expression (derive.ml[22,520+24]..[22,520+35])
                          Pexp_constant Const_string("self_type",None)
                        expression (derive.ml[22,520+37]..[22,520+53])
                          Pexp_construct "::" (derive.ml[22,520+37]..[22,520+53])
                          Some
                            expression (derive.ml[22,520+37]..[22,520+53])
                              Pexp_tuple
                              [
                                expression (derive.ml[22,520+37]..[22,520+43])
                                  Pexp_constant Const_string("unit",None)
                                expression (derive.ml[22,520+45]..[22,520+53])
                                  Pexp_construct "::" (derive.ml[22,520+45]..[22,520+53])
                                  Some
                                    expression (derive.ml[22,520+45]..[22,520+53])
                                      Pexp_tuple
                                      [
                                        expression (derive.ml[22,520+45]..[22,520+53])
                                          Pexp_constant Const_string("result",None)
                                        expression (derive.ml[22,520+45]..[22,520+53])
                                          Pexp_construct "[]" (derive.ml[22,520+45]..[22,520+53])
                                          None
                                      ]
                              ]
                      ]
              ]
    ]
  structure_item (derive.ml[23,575+0]..[35,922+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[23,575+4]..[23,575+9])
          Ppat_var "check" (derive.ml[23,575+4]..[23,575+9])
        expression (derive.ml[24,587+2]..[35,922+41])
          Pexp_function
          [
            <case>
              pattern (derive.ml[25,598+4]..[25,598+9])
                Ppat_var "names" (derive.ml[25,598+4]..[25,598+9])
              expression (derive.ml[26,611+6]..[35,922+41])
                Pexp_apply
                expression (derive.ml[26,611+6]..[26,611+15])
                  Pexp_ident "List.iter" (derive.ml[26,611+6]..[26,611+15])
                [
                  <label> ""
                    expression (derive.ml[27,627+9]..[35,922+34])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[28,645+11]..[28,645+15])
                            Ppat_var "name" (derive.ml[28,645+11]..[28,645+15])
                          expression (derive.ml[29,664+13]..[35,922+34])
                            Pexp_ifthenelse
                            expression (derive.ml[29,664+16]..[29,664+38])
                              Pexp_apply
                              expression (derive.ml[29,664+16]..[29,664+24])
                                Pexp_ident "List.mem" (derive.ml[29,664+16]..[29,664+24])
                              [
                                <label> ""
                                  expression (derive.ml[29,664+25]..[29,664+29])
                                    Pexp_ident "name" (derive.ml[29,664+25]..[29,664+29])
                                <label> ""
                                  expression (derive.ml[29,664+30]..[29,664+38])
                                    Pexp_ident "preserve" (derive.ml[29,664+30]..[29,664+38])
                              ]
                            expression (derive.ml[31,721+15]..[34,898+23])
                              Pexp_sequence
                              expression (derive.ml[31,721+16]..[31,721+55])
                                Pexp_apply
                                expression (derive.ml[31,721+16]..[31,721+23])
                                  Pexp_ident "eprintf" (derive.ml[31,721+16]..[31,721+23])
                                [
                                  <label> ""
                                    expression (derive.ml[31,721+24]..[31,721+50])
                                      Pexp_constant Const_string("%s is not a valid name\n",None)
                                  <label> ""
                                    expression (derive.ml[31,721+51]..[31,721+55])
                                      Pexp_ident "name" (derive.ml[31,721+51]..[31,721+55])
                                ]
                              expression (derive.ml[31,721+15]..[34,898+23])
                                Pexp_sequence
                                expression (derive.ml[32,778+16]..[32,778+47])
                                  Pexp_apply
                                  expression (derive.ml[32,778+16]..[32,778+23])
                                    Pexp_ident "eprintf" (derive.ml[32,778+16]..[32,778+23])
                                  [
                                    <label> ""
                                      expression (derive.ml[32,778+24]..[32,778+47])
                                        Pexp_constant Const_string("preserved keywords:\n",None)
                                  ]
                                expression (derive.ml[31,721+15]..[34,898+23])
                                  Pexp_sequence
                                  expression (derive.ml[33,827+16]..[33,827+69])
                                    Pexp_apply
                                    expression (derive.ml[33,827+16]..[33,827+25])
                                      Pexp_ident "List.iter" (derive.ml[33,827+16]..[33,827+25])
                                    [
                                      <label> ""
                                        expression (derive.ml[33,827+27]..[33,827+59])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (derive.ml[33,827+38]..[33,827+39])
                                                Ppat_var "s" (derive.ml[33,827+38]..[33,827+39])
                                              expression (derive.ml[33,827+43]..[33,827+59])
                                                Pexp_apply
                                                expression (derive.ml[33,827+43]..[33,827+50])
                                                  Pexp_ident "eprintf" (derive.ml[33,827+43]..[33,827+50])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[33,827+51]..[33,827+57])
                                                      Pexp_constant Const_string("%s\n",None)
                                                  <label> ""
                                                    expression (derive.ml[33,827+58]..[33,827+59])
                                                      Pexp_ident "s" (derive.ml[33,827+58]..[33,827+59])
                                                ]
                                          ]
                                      <label> ""
                                        expression (derive.ml[33,827+61]..[33,827+69])
                                          Pexp_ident "preserve" (derive.ml[33,827+61]..[33,827+69])
                                    ]
                                  expression (derive.ml[31,721+15]..[34,898+23])
                                    Pexp_apply
                                    expression (derive.ml[34,898+16]..[34,898+20])
                                      Pexp_ident "exit" (derive.ml[34,898+16]..[34,898+20])
                                    [
                                      <label> ""
                                        expression (derive.ml[34,898+21]..[34,898+22])
                                          Pexp_constant Const_int 2
                                    ]
                            Some
                              expression (derive.ml[35,922+18]..[35,922+34])
                                Pexp_apply
                                expression (derive.ml[35,922+18]..[35,922+29])
                                  Pexp_ident "check_valid" (derive.ml[35,922+18]..[35,922+29])
                                [
                                  <label> ""
                                    expression (derive.ml[35,922+30]..[35,922+34])
                                      Pexp_ident "name" (derive.ml[35,922+30]..[35,922+34])
                                ]
                      ]
                  <label> ""
                    expression (derive.ml[35,922+36]..[35,922+41])
                      Pexp_ident "names" (derive.ml[35,922+36]..[35,922+41])
                ]
          ]
    ]
  structure_item (derive.ml[36,964+0]..[48,1431+76])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[36,964+4]..[36,964+12])
          Ppat_var "mapi_exp" (derive.ml[36,964+4]..[36,964+12])
        expression (derive.ml[36,964+13]..[48,1431+76])
          Pexp_fun "?arity"
          Some
            expression (derive.ml[36,964+22]..[36,964+23])
              Pexp_constant Const_int 1
          pattern (derive.ml[36,964+15]..[36,964+20])
            Ppat_var "arity" (derive.ml[36,964+15]..[36,964+20])
          expression (derive.ml[36,964+26]..[48,1431+76])
            Pexp_fun "?names"
            Some
              expression (derive.ml[36,964+35]..[36,964+37])
                Pexp_construct "[]" (derive.ml[36,964+35]..[36,964+37])
                None
            pattern (derive.ml[36,964+28]..[36,964+33])
              Ppat_var "names" (derive.ml[36,964+28]..[36,964+33])
            expression (derive.ml[36,964+40]..[48,1431+76])
              Pexp_fun "f"
              None
              pattern (derive.ml[36,964+43]..[36,964+60])
                Ppat_constraint
                pattern (derive.ml[36,964+44]..[36,964+45])
                  Ppat_var "f" (derive.ml[36,964+44]..[36,964+45])
                core_type (derive.ml[36,964+48]..[36,964+59])
                  Ptyp_arrow
                  ""
                  core_type (derive.ml[36,964+48]..[36,964+52])
                    Ptyp_constr "ctyp" (derive.ml[36,964+48]..[36,964+52])
                    []
                  core_type (derive.ml[36,964+56]..[36,964+59])
                    Ptyp_constr "exp" (derive.ml[36,964+56]..[36,964+59])
                    []
              expression (derive.ml[37,1028+2]..[48,1431+76])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[38,1039+4]..[38,1039+13])
                      Ppat_constraint
                      pattern (derive.ml[38,1039+5]..[38,1039+6])
                        Ppat_var "i" (derive.ml[38,1039+5]..[38,1039+6])
                      core_type (derive.ml[38,1039+9]..[38,1039+12])
                        Ptyp_constr "int" (derive.ml[38,1039+9]..[38,1039+12])
                        []
                    expression (derive.ml[39,1056+7]..[48,1431+75])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[40,1072+9]..[40,1072+20])
                            Ppat_constraint
                            pattern (derive.ml[40,1072+10]..[40,1072+12])
                              Ppat_var "ty" (derive.ml[40,1072+10]..[40,1072+12])
                            core_type (derive.ml[40,1072+15]..[40,1072+19])
                              Ptyp_constr "ctyp" (derive.ml[40,1072+15]..[40,1072+19])
                              []
                          expression (derive.ml[41,1096+11]..[48,1431+75])
                            Pexp_constraint
                            expression (derive.ml[41,1096+12]..[48,1431+64])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (derive.ml[41,1096+16]..[41,1096+24])
                                    Ppat_var "name_exp" (derive.ml[41,1096+16]..[41,1096+24])
                                  expression (derive.ml[41,1096+27]..[41,1096+31])
                                    Pexp_apply
                                    expression (derive.ml[41,1096+27]..[41,1096+28])
                                      Pexp_ident "f" (derive.ml[41,1096+27]..[41,1096+28])
                                    [
                                      <label> ""
                                        expression (derive.ml[41,1096+29]..[41,1096+31])
                                          Pexp_ident "ty" (derive.ml[41,1096+29]..[41,1096+31])
                                    ]
                              ]
                              expression (derive.ml[42,1131+12]..[48,1431+64])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (derive.ml[42,1131+16]..[42,1131+20])
                                      Ppat_var "base" (derive.ml[42,1131+16]..[42,1131+20])
                                    expression (derive.ml[42,1131+23]..[42,1131+40])
                                      Pexp_apply
                                      expression (derive.ml[42,1131+32]..[42,1131+34])
                                        Pexp_ident "+>" (derive.ml[42,1131+32]..[42,1131+34])
                                      [
                                        <label> ""
                                          expression (derive.ml[42,1131+23]..[42,1131+31])
                                            Pexp_ident "name_exp" (derive.ml[42,1131+23]..[42,1131+31])
                                        <label> ""
                                          expression (derive.ml[42,1131+35]..[42,1131+40])
                                            Pexp_ident "names" (derive.ml[42,1131+35]..[42,1131+40])
                                      ]
                                ]
                                expression (derive.ml[43,1175+12]..[48,1431+64])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (derive.ml[43,1175+16]..[43,1175+22])
                                        Ppat_var "id_eps" (derive.ml[43,1175+16]..[43,1175+22])
                                      expression (derive.ml[44,1200+14]..[44,1200+74])
                                        Pexp_apply
                                        expression (derive.ml[44,1200+33]..[44,1200+35])
                                          Pexp_ident "@@" (derive.ml[44,1200+33]..[44,1200+35])
                                        [
                                          <label> ""
                                            expression (derive.ml[44,1200+15]..[44,1200+31])
                                              Pexp_apply
                                              expression (derive.ml[44,1200+15]..[44,1200+25])
                                                Pexp_ident "Listf.init" (derive.ml[44,1200+15]..[44,1200+25])
                                              [
                                                <label> ""
                                                  expression (derive.ml[44,1200+26]..[44,1200+31])
                                                    Pexp_ident "arity" (derive.ml[44,1200+26]..[44,1200+31])
                                              ]
                                          <label> ""
                                            expression (derive.ml[44,1200+37]..[44,1200+73])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (derive.ml[44,1200+48]..[44,1200+53])
                                                    Ppat_var "index" (derive.ml[44,1200+48]..[44,1200+53])
                                                  expression (derive.ml[44,1200+57]..[44,1200+73])
                                                    Pexp_apply
                                                    expression (derive.ml[44,1200+57]..[44,1200+60])
                                                      Pexp_ident "xid" (derive.ml[44,1200+57]..[44,1200+60])
                                                    [
                                                      <label> "off"
                                                        expression (derive.ml[44,1200+66]..[44,1200+71])
                                                          Pexp_ident "index" (derive.ml[44,1200+66]..[44,1200+71])
                                                      <label> ""
                                                        expression (derive.ml[44,1200+72]..[44,1200+73])
                                                          Pexp_ident "i" (derive.ml[44,1200+72]..[44,1200+73])
                                                    ]
                                              ]
                                        ]
                                  ]
                                  expression (derive.ml[45,1278+12]..[48,1431+64])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[45,1278+16]..[45,1278+19])
                                          Ppat_var "ep0" (derive.ml[45,1278+16]..[45,1278+19])
                                        expression (derive.ml[45,1278+22]..[45,1278+36])
                                          Pexp_apply
                                          expression (derive.ml[45,1278+22]..[45,1278+29])
                                            Pexp_ident "List.hd" (derive.ml[45,1278+22]..[45,1278+29])
                                          [
                                            <label> ""
                                              expression (derive.ml[45,1278+30]..[45,1278+36])
                                                Pexp_ident "id_eps" (derive.ml[45,1278+30]..[45,1278+36])
                                          ]
                                    ]
                                    expression (derive.ml[46,1318+12]..[48,1431+64])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[46,1318+16]..[46,1318+21])
                                            Ppat_var "id_ep" (derive.ml[46,1318+16]..[46,1318+21])
                                          expression (derive.ml[46,1318+24]..[46,1318+40])
                                            Pexp_apply
                                            expression (derive.ml[46,1318+24]..[46,1318+33])
                                              Pexp_ident "tuple_com" (derive.ml[46,1318+24]..[46,1318+33])
                                            [
                                              <label> ""
                                                expression (derive.ml[46,1318+34]..[46,1318+40])
                                                  Pexp_ident "id_eps" (derive.ml[46,1318+34]..[46,1318+40])
                                            ]
                                      ]
                                      expression (derive.ml[47,1362+12]..[48,1431+64])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (derive.ml[47,1362+16]..[47,1362+19])
                                              Ppat_var "exp" (derive.ml[47,1362+16]..[47,1362+19])
                                            expression (derive.ml[47,1362+22]..[47,1362+65])
                                              Pexp_apply
                                              expression (derive.ml[47,1362+22]..[47,1362+34])
                                                Pexp_ident "appl_of_list" (derive.ml[47,1362+22]..[47,1362+34])
                                              [
                                                <label> ""
                                                  expression (derive.ml[47,1362+36]..[47,1362+64])
                                                    Pexp_construct "::" (derive.ml[47,1362+41]..[47,1362+43])
                                                    Some
                                                      expression (derive.ml[47,1362+36]..[47,1362+64])
                                                        Pexp_tuple
                                                        [
                                                          expression (derive.ml[47,1362+36]..[47,1362+40])
                                                            Pexp_ident "base" (derive.ml[47,1362+36]..[47,1362+40])
                                                          expression (derive.ml[47,1362+44]..[47,1362+64])
                                                            Pexp_coerce
                                                            expression (derive.ml[47,1362+45]..[47,1362+51])
                                                              Pexp_ident "id_eps" (derive.ml[47,1362+45]..[47,1362+51])
                                                            None
                                                            core_type (derive.ml[47,1362+55]..[47,1362+63])
                                                              Ptyp_constr "list" (derive.ml[47,1362+59]..[47,1362+63])
                                                              [
                                                                core_type (derive.ml[47,1362+55]..[47,1362+58])
                                                                  Ptyp_constr "exp" (derive.ml[47,1362+55]..[47,1362+58])
                                                                  []
                                                              ]
                                                        ]
                                              ]
                                        ]
                                        expression (derive.ml[48,1431+12]..[48,1431+64])
                                          Pexp_record
                                          [
                                            "name_exp" (derive.ml[48,1431+14]..[48,1431+22])
                                              expression (derive.ml[48,1431+14]..[48,1431+22])
                                                Pexp_ident "name_exp" (derive.ml[48,1431+14]..[48,1431+22])
                                            "info_exp" (derive.ml[48,1431+24]..[48,1431+32])
                                              expression (derive.ml[48,1431+35]..[48,1431+38])
                                                Pexp_ident "exp" (derive.ml[48,1431+35]..[48,1431+38])
                                            "id_ep" (derive.ml[48,1431+40]..[48,1431+45])
                                              expression (derive.ml[48,1431+40]..[48,1431+45])
                                                Pexp_ident "id_ep" (derive.ml[48,1431+40]..[48,1431+45])
                                            "id_eps" (derive.ml[48,1431+47]..[48,1431+53])
                                              expression (derive.ml[48,1431+47]..[48,1431+53])
                                                Pexp_ident "id_eps" (derive.ml[48,1431+47]..[48,1431+53])
                                            "ep0" (derive.ml[48,1431+55]..[48,1431+58])
                                              expression (derive.ml[48,1431+55]..[48,1431+58])
                                                Pexp_ident "ep0" (derive.ml[48,1431+55]..[48,1431+58])
                                            "ty" (derive.ml[48,1431+60]..[48,1431+62])
                                              expression (derive.ml[48,1431+60]..[48,1431+62])
                                                Pexp_ident "ty" (derive.ml[48,1431+60]..[48,1431+62])
                                          ]
                                          None
                            core_type (derive.ml[48,1431+67]..[48,1431+74])
                              Ptyp_constr "ty_info" (derive.ml[48,1431+67]..[48,1431+74])
                              []
                      ]
                ]
    ]
  structure_item (derive.ml[49,1508+0]..[63,2122+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[49,1508+4]..[49,1508+21])
          Ppat_var "tuple_exp_of_ctyp" (derive.ml[49,1508+4]..[49,1508+21])
        expression (derive.ml[49,1508+22]..[63,2122+10])
          Pexp_fun "?arity"
          Some
            expression (derive.ml[49,1508+31]..[49,1508+32])
              Pexp_constant Const_int 1
          pattern (derive.ml[49,1508+24]..[49,1508+29])
            Ppat_var "arity" (derive.ml[49,1508+24]..[49,1508+29])
          expression (derive.ml[49,1508+35]..[63,2122+10])
            Pexp_fun "?names"
            Some
              expression (derive.ml[49,1508+44]..[49,1508+46])
                Pexp_construct "[]" (derive.ml[49,1508+44]..[49,1508+46])
                None
            pattern (derive.ml[49,1508+37]..[49,1508+42])
              Ppat_var "names" (derive.ml[49,1508+37]..[49,1508+42])
            expression (derive.ml[49,1508+49]..[63,2122+10])
              Pexp_fun "mk_tuple"
              None
              pattern (derive.ml[49,1508+50]..[49,1508+58])
                Ppat_var "mk_tuple" (derive.ml[49,1508+50]..[49,1508+58])
              expression (derive.ml[49,1508+60]..[63,2122+10])
                Pexp_fun "f"
                None
                pattern (derive.ml[49,1508+61]..[49,1508+62])
                  Ppat_var "f" (derive.ml[49,1508+61]..[49,1508+62])
                expression (derive.ml[50,1574+2]..[63,2122+10])
                  Pexp_function
                  [
                    <case>
                      pattern (derive.ml[51,1585+4]..[51,1585+15])
                        Ppat_constraint
                        pattern (derive.ml[51,1585+5]..[51,1585+7])
                          Ppat_var "ty" (derive.ml[51,1585+5]..[51,1585+7])
                        core_type (derive.ml[51,1585+10]..[51,1585+14])
                          Ptyp_constr "ctyp" (derive.ml[51,1585+10]..[51,1585+14])
                          []
                      expression (derive.ml[52,1604+6]..[63,2122+10])
                        Pexp_constraint
                        expression (derive.ml[52,1604+8]..[62,2049+68])
                          Pexp_match
                          expression (derive.ml[52,1604+14]..[52,1604+16])
                            Pexp_ident "ty" (derive.ml[52,1604+14]..[52,1604+16])
                          [
                            <case>
                              pattern (derive.ml[53,1626+10]..[53,1626+16])
                                Ppat_variant "Par"
                                Some
                                  pattern (derive.ml[53,1626+15]..[53,1626+16])
                                    Ppat_var "t" (derive.ml[53,1626+15]..[53,1626+16])
                              expression (derive.ml[54,1646+12]..[61,2011+37])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (derive.ml[54,1646+16]..[54,1646+18])
                                      Ppat_var "ls" (derive.ml[54,1646+16]..[54,1646+18])
                                    expression (derive.ml[54,1646+21]..[54,1646+50])
                                      Pexp_apply
                                      expression (derive.ml[54,1646+21]..[54,1646+45])
                                        Pexp_ident "Ast_basic.N.list_of_star" (derive.ml[54,1646+21]..[54,1646+45])
                                      [
                                        <label> ""
                                          expression (derive.ml[54,1646+46]..[54,1646+47])
                                            Pexp_ident "t" (derive.ml[54,1646+46]..[54,1646+47])
                                        <label> ""
                                          expression (derive.ml[54,1646+48]..[54,1646+50])
                                            Pexp_construct "[]" (derive.ml[54,1646+48]..[54,1646+50])
                                            None
                                      ]
                                ]
                                expression (derive.ml[55,1700+12]..[61,2011+37])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (derive.ml[55,1700+16]..[55,1700+19])
                                        Ppat_var "len" (derive.ml[55,1700+16]..[55,1700+19])
                                      expression (derive.ml[55,1700+22]..[55,1700+36])
                                        Pexp_apply
                                        expression (derive.ml[55,1700+22]..[55,1700+33])
                                          Pexp_ident "List.length" (derive.ml[55,1700+22]..[55,1700+33])
                                        [
                                          <label> ""
                                            expression (derive.ml[55,1700+34]..[55,1700+36])
                                              Pexp_ident "ls" (derive.ml[55,1700+34]..[55,1700+36])
                                        ]
                                  ]
                                  expression (derive.ml[56,1740+12]..[61,2011+37])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[56,1740+16]..[56,1740+19])
                                          Ppat_var "pat" (derive.ml[56,1740+16]..[56,1740+19])
                                        expression (derive.ml[56,1740+22]..[56,1740+62])
                                          Pexp_coerce
                                          expression (derive.ml[56,1740+23]..[56,1740+54])
                                            Pexp_apply
                                            expression (derive.ml[56,1740+23]..[56,1740+35])
                                              Pexp_ident "EpN.mk_tuple" (derive.ml[56,1740+23]..[56,1740+35])
                                            [
                                              <label> "arity"
                                                expression (derive.ml[56,1740+37]..[56,1740+42])
                                                  Pexp_ident "arity" (derive.ml[56,1740+37]..[56,1740+42])
                                              <label> "number"
                                                expression (derive.ml[56,1740+51]..[56,1740+54])
                                                  Pexp_ident "len" (derive.ml[56,1740+51]..[56,1740+54])
                                            ]
                                          None
                                          core_type (derive.ml[56,1740+58]..[56,1740+61])
                                            Ptyp_constr "pat" (derive.ml[56,1740+58]..[56,1740+61])
                                            []
                                    ]
                                    expression (derive.ml[57,1806+12]..[61,2011+37])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[57,1806+16]..[57,1806+19])
                                            Ppat_var "tys" (derive.ml[57,1806+16]..[57,1806+19])
                                          expression (derive.ml[57,1806+22]..[57,1806+73])
                                            Pexp_apply
                                            expression (derive.ml[57,1806+22]..[57,1806+30])
                                              Pexp_ident "mk_tuple" (derive.ml[57,1806+22]..[57,1806+30])
                                            [
                                              <label> ""
                                                expression (derive.ml[57,1806+32]..[57,1806+72])
                                                  Pexp_apply
                                                  expression (derive.ml[57,1806+32]..[57,1806+41])
                                                    Pexp_ident "List.mapi" (derive.ml[57,1806+32]..[57,1806+41])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[57,1806+43]..[57,1806+68])
                                                        Pexp_apply
                                                        expression (derive.ml[57,1806+43]..[57,1806+51])
                                                          Pexp_ident "mapi_exp" (derive.ml[57,1806+43]..[57,1806+51])
                                                        [
                                                          <label> "arity"
                                                            expression (derive.ml[57,1806+53]..[57,1806+58])
                                                              Pexp_ident "arity" (derive.ml[57,1806+53]..[57,1806+58])
                                                          <label> "names"
                                                            expression (derive.ml[57,1806+60]..[57,1806+65])
                                                              Pexp_ident "names" (derive.ml[57,1806+60]..[57,1806+65])
                                                          <label> "f"
                                                            expression (derive.ml[57,1806+67]..[57,1806+68])
                                                              Pexp_ident "f" (derive.ml[57,1806+67]..[57,1806+68])
                                                        ]
                                                    <label> ""
                                                      expression (derive.ml[57,1806+70]..[57,1806+72])
                                                        Pexp_ident "ls" (derive.ml[57,1806+70]..[57,1806+72])
                                                  ]
                                            ]
                                      ]
                                      expression (derive.ml[58,1883+12]..[61,2011+37])
                                        Pexp_apply
                                        expression (derive.ml[58,1883+12]..[58,1883+22])
                                          Pexp_ident "ExpN.mkfun" (derive.ml[58,1883+12]..[58,1883+22])
                                        [
                                          <label> ""
                                            expression (derive.ml[58,1883+23]..[58,1883+28])
                                              Pexp_ident "names" (derive.ml[58,1883+23]..[58,1883+28])
                                          <label> ""
                                            expression (derive.ml[59,1912+15]..[61,2011+36])
                                              Pexp_apply
                                              expression (derive.ml[59,1912+15]..[59,1912+28])
                                                Pexp_ident "ExpN.currying" (derive.ml[59,1912+15]..[59,1912+28])
                                              [
                                                <label> ""
                                                  expression (derive.ml[60,1941+18]..[61,2011+28])
                                                    Pexp_construct "::" (derive.ml[60,1941+18]..[61,2011+28])
                                                    Some
                                                      expression (derive.ml[60,1941+18]..[61,2011+28])
                                                        Pexp_tuple
                                                        [
                                                          expression (derive.ml[60,1941+18]..[61,2011+28])
                                                            Pexp_coerce
                                                            expression (derive.ml[60,1941+19]..[60,1941+65])
                                                              Pexp_variant "Case"
                                                              Some
                                                                expression (derive.ml[60,1941+25]..[60,1941+65])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (derive.ml[60,1941+26]..[60,1941+44])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[60,1941+27]..[60,1941+30])
Pexp_ident "pat" (derive.ml[60,1941+27]..[60,1941+30])
                                                                      None
                                                                      core_type (derive.ml[60,1941+34]..[60,1941+43])
Ptyp_constr "Astfn.pat" (derive.ml[60,1941+34]..[60,1941+43])
[]
                                                                    expression (derive.ml[60,1941+46]..[60,1941+64])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[60,1941+47]..[60,1941+50])
Pexp_ident "tys" (derive.ml[60,1941+47]..[60,1941+50])
                                                                      None
                                                                      core_type (derive.ml[60,1941+54]..[60,1941+63])
Ptyp_constr "Astfn.exp" (derive.ml[60,1941+54]..[60,1941+63])
[]
                                                                  ]
                                                            None
                                                            core_type (derive.ml[61,2011+17]..[61,2011+27])
                                                              Ptyp_constr "Astfn.case" (derive.ml[61,2011+17]..[61,2011+27])
                                                              []
                                                          expression (derive.ml[60,1941+18]..[61,2011+28])
                                                            Pexp_construct "[]" (derive.ml[60,1941+18]..[61,2011+28])
                                                            None
                                                        ]
                                                <label> "arity"
                                                  expression (derive.ml[61,2011+31]..[61,2011+36])
                                                    Pexp_ident "arity" (derive.ml[61,2011+31]..[61,2011+36])
                                              ]
                                        ]
                            <case>
                              pattern (derive.ml[62,2049+10]..[62,2049+11])
                                Ppat_any
                              expression (derive.ml[62,2049+15]..[62,2049+68])
                                Pexp_apply
                                expression (derive.ml[62,2049+15]..[62,2049+24])
                                  Pexp_ident "failwithf" (derive.ml[62,2049+15]..[62,2049+24])
                                [
                                  <label> ""
                                    expression (derive.ml[62,2049+25]..[62,2049+47])
                                      Pexp_constant Const_string("tuple_exp_of_ctyp %s",None)
                                  <label> ""
                                    expression (derive.ml[62,2049+49]..[62,2049+67])
                                      Pexp_apply
                                      expression (derive.ml[62,2049+49]..[62,2049+64])
                                        Pexp_ident "ObjsN.dump_ctyp" (derive.ml[62,2049+49]..[62,2049+64])
                                      [
                                        <label> ""
                                          expression (derive.ml[62,2049+65]..[62,2049+67])
                                            Pexp_ident "ty" (derive.ml[62,2049+65]..[62,2049+67])
                                      ]
                                ]
                          ]
                        core_type (derive.ml[63,2122+6]..[63,2122+9])
                          Ptyp_constr "exp" (derive.ml[63,2122+6]..[63,2122+9])
                          []
                  ]
    ]
  structure_item (derive.ml[64,2133+0]..[97,3536+18])
    Pstr_value Rec
    [
      <def>
        pattern (derive.ml[64,2133+8]..[64,2133+33])
          Ppat_var "normal_simple_exp_of_ctyp" (derive.ml[64,2133+8]..[64,2133+33])
        expression (derive.ml[64,2133+34]..[97,3536+18])
          Pexp_fun "?arity"
          None
          pattern (derive.ml[64,2133+35]..[64,2133+40])
            Ppat_var "arity" (derive.ml[64,2133+35]..[64,2133+40])
          expression (derive.ml[64,2133+42]..[97,3536+18])
            Pexp_fun "?names"
            None
            pattern (derive.ml[64,2133+43]..[64,2133+48])
              Ppat_var "names" (derive.ml[64,2133+43]..[64,2133+48])
            expression (derive.ml[64,2133+50]..[97,3536+18])
              Pexp_fun "mk_tuple"
              None
              pattern (derive.ml[64,2133+51]..[64,2133+59])
                Ppat_var "mk_tuple" (derive.ml[64,2133+51]..[64,2133+59])
              expression (derive.ml[64,2133+61]..[97,3536+18])
                Pexp_fun "right_type_id"
                None
                pattern (derive.ml[64,2133+62]..[64,2133+75])
                  Ppat_var "right_type_id" (derive.ml[64,2133+62]..[64,2133+75])
                expression (derive.ml[65,2210+2]..[97,3536+18])
                  Pexp_fun "left_type_id"
                  None
                  pattern (derive.ml[65,2210+3]..[65,2210+15])
                    Ppat_var "left_type_id" (derive.ml[65,2210+3]..[65,2210+15])
                  expression (derive.ml[65,2210+17]..[97,3536+18])
                    Pexp_fun "right_type_variable"
                    None
                    pattern (derive.ml[65,2210+18]..[65,2210+37])
                      Ppat_var "right_type_variable" (derive.ml[65,2210+18]..[65,2210+37])
                    expression (derive.ml[66,2251+2]..[97,3536+18])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[67,2262+4]..[67,2262+7])
                            Ppat_var "cxt" (derive.ml[67,2262+4]..[67,2262+7])
                          expression (derive.ml[68,2273+7]..[97,3536+17])
                            Pexp_function
                            [
                              <case>
                                pattern (derive.ml[69,2289+9]..[69,2289+20])
                                  Ppat_constraint
                                  pattern (derive.ml[69,2289+10]..[69,2289+12])
                                    Ppat_var "ty" (derive.ml[69,2289+10]..[69,2289+12])
                                  core_type (derive.ml[69,2289+15]..[69,2289+19])
                                    Ptyp_constr "ctyp" (derive.ml[69,2289+15]..[69,2289+19])
                                    []
                                expression (derive.ml[70,2313+11]..[97,3536+17])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (derive.ml[70,2313+15]..[70,2313+26])
                                        Ppat_var "right_trans" (derive.ml[70,2313+15]..[70,2313+26])
                                      expression (derive.ml[70,2313+29]..[70,2313+52])
                                        Pexp_apply
                                        expression (derive.ml[70,2313+29]..[70,2313+38])
                                          Pexp_ident "transform" (derive.ml[70,2313+29]..[70,2313+38])
                                        [
                                          <label> ""
                                            expression (derive.ml[70,2313+39]..[70,2313+52])
                                              Pexp_ident "right_type_id" (derive.ml[70,2313+39]..[70,2313+52])
                                        ]
                                  ]
                                  expression (derive.ml[71,2369+11]..[97,3536+17])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[71,2369+15]..[71,2369+25])
                                          Ppat_var "left_trans" (derive.ml[71,2369+15]..[71,2369+25])
                                        expression (derive.ml[71,2369+28]..[71,2369+56])
                                          Pexp_apply
                                          expression (derive.ml[71,2369+28]..[71,2369+43])
                                            Pexp_ident "basic_transform" (derive.ml[71,2369+28]..[71,2369+43])
                                          [
                                            <label> ""
                                              expression (derive.ml[71,2369+44]..[71,2369+56])
                                                Pexp_ident "left_type_id" (derive.ml[71,2369+44]..[71,2369+56])
                                          ]
                                    ]
                                    expression (derive.ml[72,2429+11]..[97,3536+17])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[72,2429+15]..[72,2429+20])
                                            Ppat_var "tyvar" (derive.ml[72,2429+15]..[72,2429+20])
                                          expression (derive.ml[72,2429+23]..[72,2429+58])
                                            Pexp_apply
                                            expression (derive.ml[72,2429+23]..[72,2429+38])
                                              Pexp_ident "right_transform" (derive.ml[72,2429+23]..[72,2429+38])
                                            [
                                              <label> ""
                                                expression (derive.ml[72,2429+39]..[72,2429+58])
                                                  Pexp_ident "right_type_variable" (derive.ml[72,2429+39]..[72,2429+58])
                                            ]
                                      ]
                                      expression (derive.ml[73,2491+11]..[97,3536+17])
                                        Pexp_let Rec
                                        [
                                          <def>
                                            pattern (derive.ml[73,2491+19]..[73,2491+22])
                                              Ppat_var "aux" (derive.ml[73,2491+19]..[73,2491+22])
                                            expression (derive.ml[74,2516+13]..[96,3493+39])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (derive.ml[75,2538+15]..[75,2538+22])
                                                    Ppat_variant "Lid"
                                                    Some
                                                      pattern (derive.ml[75,2538+20]..[75,2538+22])
                                                        Ppat_var "id" (derive.ml[75,2538+20]..[75,2538+22])
                                                  expression (derive.ml[76,2564+17]..[78,2645+43])
                                                    Pexp_ifthenelse
                                                    expression (derive.ml[76,2564+20]..[76,2564+38])
                                                      Pexp_apply
                                                      expression (derive.ml[76,2564+20]..[76,2564+31])
                                                        Pexp_ident "Hashset.mem" (derive.ml[76,2564+20]..[76,2564+31])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[76,2564+32]..[76,2564+35])
                                                            Pexp_ident "cxt" (derive.ml[76,2564+32]..[76,2564+35])
                                                        <label> ""
                                                          expression (derive.ml[76,2564+36]..[76,2564+38])
                                                            Pexp_ident "id" (derive.ml[76,2564+36]..[76,2564+38])
                                                      ]
                                                    expression (derive.ml[77,2603+22]..[77,2603+41])
                                                      Pexp_apply
                                                      expression (derive.ml[77,2603+22]..[77,2603+25])
                                                        Pexp_ident "lid" (derive.ml[77,2603+22]..[77,2603+25])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[77,2603+27]..[77,2603+40])
                                                            Pexp_apply
                                                            expression (derive.ml[77,2603+27]..[77,2603+37])
                                                              Pexp_ident "left_trans" (derive.ml[77,2603+27]..[77,2603+37])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[77,2603+38]..[77,2603+40])
                                                                  Pexp_ident "id" (derive.ml[77,2603+38]..[77,2603+40])
                                                            ]
                                                      ]
                                                    Some
                                                      expression (derive.ml[78,2645+22]..[78,2645+43])
                                                        Pexp_apply
                                                        expression (derive.ml[78,2645+22]..[78,2645+33])
                                                          Pexp_ident "right_trans" (derive.ml[78,2645+22]..[78,2645+33])
                                                        [
                                                          <label> ""
                                                            expression (derive.ml[78,2645+35]..[78,2645+42])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (derive.ml[78,2645+40]..[78,2645+42])
                                                                  Pexp_ident "id" (derive.ml[78,2645+40]..[78,2645+42])
                                                        ]
                                                <case>
                                                  pattern (derive.ml[79,2689+15]..[79,2689+28])
                                                    Ppat_alias "id" (derive.ml[79,2689+26]..[79,2689+28])
                                                    pattern (derive.ml[79,2689+15]..[79,2689+22])
                                                      Ppat_type
                                                      "ident'" (derive.ml[79,2689+16]..[79,2689+22])
                                                  expression (derive.ml[79,2689+32]..[79,2689+59])
                                                    Pexp_apply
                                                    expression (derive.ml[79,2689+32]..[79,2689+43])
                                                      Pexp_ident "right_trans" (derive.ml[79,2689+32]..[79,2689+43])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[79,2689+45]..[79,2689+58])
                                                          Pexp_apply
                                                          expression (derive.ml[79,2689+45]..[79,2689+55])
                                                            Pexp_ident "IdN.to_vid" (derive.ml[79,2689+45]..[79,2689+55])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[79,2689+56]..[79,2689+58])
                                                                Pexp_ident "id" (derive.ml[79,2689+56]..[79,2689+58])
                                                          ]
                                                    ]
                                                <case>
                                                  pattern (derive.ml[80,2749+15]..[80,2749+27])
                                                    Ppat_variant "App"
                                                    Some
                                                      pattern (derive.ml[80,2749+15]..[80,2749+27])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[80,2749+21]..[80,2749+23])
                                                            Ppat_var "t1" (derive.ml[80,2749+21]..[80,2749+23])
                                                          pattern (derive.ml[80,2749+24]..[80,2749+26])
                                                            Ppat_var "t2" (derive.ml[80,2749+24]..[80,2749+26])
                                                        ]
                                                  expression (derive.ml[81,2780+17]..[82,2854+27])
                                                    Pexp_coerce
                                                    expression (derive.ml[81,2780+18]..[81,2780+69])
                                                      Pexp_variant "App"
                                                      Some
                                                        expression (derive.ml[81,2780+23]..[81,2780+69])
                                                          Pexp_tuple
                                                          [
                                                            expression (derive.ml[81,2780+24]..[81,2780+45])
                                                              Pexp_coerce
                                                              expression (derive.ml[81,2780+25]..[81,2780+31])
                                                                Pexp_apply
                                                                expression (derive.ml[81,2780+25]..[81,2780+28])
                                                                  Pexp_ident "aux" (derive.ml[81,2780+25]..[81,2780+28])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[81,2780+29]..[81,2780+31])
                                                                      Pexp_ident "t1" (derive.ml[81,2780+29]..[81,2780+31])
                                                                ]
                                                              None
                                                              core_type (derive.ml[81,2780+35]..[81,2780+44])
                                                                Ptyp_constr "Astfn.exp" (derive.ml[81,2780+35]..[81,2780+44])
                                                                []
                                                            expression (derive.ml[81,2780+47]..[81,2780+68])
                                                              Pexp_coerce
                                                              expression (derive.ml[81,2780+48]..[81,2780+54])
                                                                Pexp_apply
                                                                expression (derive.ml[81,2780+48]..[81,2780+51])
                                                                  Pexp_ident "aux" (derive.ml[81,2780+48]..[81,2780+51])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[81,2780+52]..[81,2780+54])
                                                                      Pexp_ident "t2" (derive.ml[81,2780+52]..[81,2780+54])
                                                                ]
                                                              None
                                                              core_type (derive.ml[81,2780+58]..[81,2780+67])
                                                                Ptyp_constr "Astfn.exp" (derive.ml[81,2780+58]..[81,2780+67])
                                                                []
                                                          ]
                                                    None
                                                    core_type (derive.ml[82,2854+17]..[82,2854+26])
                                                      Ptyp_constr "Astfn.exp" (derive.ml[82,2854+17]..[82,2854+26])
                                                      []
                                                <case>
                                                  pattern (derive.ml[83,2882+15]..[83,2882+32])
                                                    Ppat_variant "Quote"
                                                    Some
                                                      pattern (derive.ml[83,2882+15]..[83,2882+32])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[83,2882+23]..[83,2882+24])
                                                            Ppat_any
                                                          pattern (derive.ml[83,2882+25]..[83,2882+31])
                                                            Ppat_variant "Lid"
                                                            Some
                                                              pattern (derive.ml[83,2882+30]..[83,2882+31])
                                                                Ppat_var "s" (derive.ml[83,2882+30]..[83,2882+31])
                                                        ]
                                                  expression (derive.ml[83,2882+36]..[83,2882+43])
                                                    Pexp_apply
                                                    expression (derive.ml[83,2882+36]..[83,2882+41])
                                                      Pexp_ident "tyvar" (derive.ml[83,2882+36]..[83,2882+41])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[83,2882+42]..[83,2882+43])
                                                          Pexp_ident "s" (derive.ml[83,2882+42]..[83,2882+43])
                                                    ]
                                                <case>
                                                  pattern (derive.ml[84,2926+15]..[84,2926+29])
                                                    Ppat_variant "Arrow"
                                                    Some
                                                      pattern (derive.ml[84,2926+15]..[84,2926+29])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[84,2926+23]..[84,2926+25])
                                                            Ppat_var "t1" (derive.ml[84,2926+23]..[84,2926+25])
                                                          pattern (derive.ml[84,2926+26]..[84,2926+28])
                                                            Ppat_var "t2" (derive.ml[84,2926+26]..[84,2926+28])
                                                        ]
                                                  expression (derive.ml[85,2959+17]..[88,3073+58])
                                                    Pexp_apply
                                                    expression (derive.ml[85,2959+17]..[85,2959+20])
                                                      Pexp_ident "aux" (derive.ml[85,2959+17]..[85,2959+20])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[86,2980+19]..[88,3073+58])
                                                          Pexp_coerce
                                                          expression (derive.ml[86,2980+20]..[88,3073+43])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (derive.ml[87,3005+22]..[88,3073+43])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[87,3005+24]..[87,3005+65])
                                                                    Pexp_variant "App"
                                                                    Some
                                                                      expression (derive.ml[87,3005+29]..[87,3005+65])
Pexp_tuple
[
  expression (derive.ml[87,3005+31]..[87,3005+43])
    Pexp_variant "Lid"
    Some
      expression (derive.ml[87,3005+36]..[87,3005+43])
        Pexp_constant Const_string("arrow",None)
  expression (derive.ml[87,3005+46]..[87,3005+64])
    Pexp_coerce
    expression (derive.ml[87,3005+47]..[87,3005+49])
      Pexp_ident "t1" (derive.ml[87,3005+47]..[87,3005+49])
    None
    core_type (derive.ml[87,3005+53]..[87,3005+63])
      Ptyp_constr "Astfn.ctyp" (derive.ml[87,3005+53]..[87,3005+63])
      []
]
                                                                  expression (derive.ml[88,3073+24]..[88,3073+42])
                                                                    Pexp_coerce
                                                                    expression (derive.ml[88,3073+25]..[88,3073+27])
                                                                      Pexp_ident "t2" (derive.ml[88,3073+25]..[88,3073+27])
                                                                    None
                                                                    core_type (derive.ml[88,3073+31]..[88,3073+41])
                                                                      Ptyp_constr "Astfn.ctyp" (derive.ml[88,3073+31]..[88,3073+41])
                                                                      []
                                                                ]
                                                          None
                                                          core_type (derive.ml[88,3073+47]..[88,3073+57])
                                                            Ptyp_constr "Astfn.ctyp" (derive.ml[88,3073+47]..[88,3073+57])
                                                            []
                                                    ]
                                                <case>
                                                  pattern (derive.ml[89,3132+15]..[89,3132+27])
                                                    Ppat_alias "ty" (derive.ml[89,3132+25]..[89,3132+27])
                                                    pattern (derive.ml[89,3132+15]..[89,3132+21])
                                                      Ppat_variant "Par"
                                                      Some
                                                        pattern (derive.ml[89,3132+20]..[89,3132+21])
                                                          Ppat_any
                                                  expression (derive.ml[90,3163+17]..[93,3370+32])
                                                    Pexp_apply
                                                    expression (derive.ml[90,3163+17]..[90,3163+34])
                                                      Pexp_ident "tuple_exp_of_ctyp" (derive.ml[90,3163+17]..[90,3163+34])
                                                    [
                                                      <label> "?arity"
                                                        expression (derive.ml[90,3163+35]..[90,3163+41])
                                                          Pexp_ident "arity" (derive.ml[90,3163+35]..[90,3163+41])
                                                      <label> "?names"
                                                        expression (derive.ml[90,3163+42]..[90,3163+48])
                                                          Pexp_ident "names" (derive.ml[90,3163+42]..[90,3163+48])
                                                      <label> "mk_tuple"
                                                        expression (derive.ml[90,3163+50]..[90,3163+58])
                                                          Pexp_ident "mk_tuple" (derive.ml[90,3163+50]..[90,3163+58])
                                                      <label> "f"
                                                        expression (derive.ml[91,3222+23]..[93,3370+28])
                                                          Pexp_apply
                                                          expression (derive.ml[91,3222+23]..[91,3222+48])
                                                            Pexp_ident "normal_simple_exp_of_ctyp" (derive.ml[91,3222+23]..[91,3222+48])
                                                          [
                                                            <label> "?arity"
                                                              expression (derive.ml[91,3222+49]..[91,3222+55])
                                                                Pexp_ident "arity" (derive.ml[91,3222+49]..[91,3222+55])
                                                            <label> "?names"
                                                              expression (derive.ml[91,3222+56]..[91,3222+62])
                                                                Pexp_ident "names" (derive.ml[91,3222+56]..[91,3222+62])
                                                            <label> "mk_tuple"
                                                              expression (derive.ml[91,3222+64]..[91,3222+72])
                                                                Pexp_ident "mk_tuple" (derive.ml[91,3222+64]..[91,3222+72])
                                                            <label> "right_type_id"
                                                              expression (derive.ml[92,3295+26]..[92,3295+39])
                                                                Pexp_ident "right_type_id" (derive.ml[92,3295+26]..[92,3295+39])
                                                            <label> "left_type_id"
                                                              expression (derive.ml[92,3295+41]..[92,3295+53])
                                                                Pexp_ident "left_type_id" (derive.ml[92,3295+41]..[92,3295+53])
                                                            <label> "right_type_variable"
                                                              expression (derive.ml[92,3295+55]..[92,3295+74])
                                                                Pexp_ident "right_type_variable" (derive.ml[92,3295+55]..[92,3295+74])
                                                            <label> ""
                                                              expression (derive.ml[93,3370+25]..[93,3370+28])
                                                                Pexp_ident "cxt" (derive.ml[93,3370+25]..[93,3370+28])
                                                          ]
                                                      <label> ""
                                                        expression (derive.ml[93,3370+30]..[93,3370+32])
                                                          Pexp_ident "ty" (derive.ml[93,3370+30]..[93,3370+32])
                                                    ]
                                                <case>
                                                  pattern (derive.ml[94,3403+15]..[94,3403+26])
                                                    Ppat_constraint
                                                    pattern (derive.ml[94,3403+16]..[94,3403+18])
                                                      Ppat_var "ty" (derive.ml[94,3403+16]..[94,3403+18])
                                                    core_type (derive.ml[94,3403+21]..[94,3403+25])
                                                      Ptyp_constr "ctyp" (derive.ml[94,3403+21]..[94,3403+25])
                                                      []
                                                  expression (derive.ml[95,3433+17]..[96,3493+39])
                                                    Pexp_apply
                                                    expression (derive.ml[95,3433+17]..[95,3433+26])
                                                      Pexp_ident "failwithf" (derive.ml[95,3433+17]..[95,3433+26])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[95,3433+27]..[95,3433+59])
                                                          Pexp_constant Const_string("normal_simple_exp_of_ctyp : %s",None)
                                                      <label> ""
                                                        expression (derive.ml[96,3493+20]..[96,3493+38])
                                                          Pexp_apply
                                                          expression (derive.ml[96,3493+20]..[96,3493+35])
                                                            Pexp_ident "ObjsN.dump_ctyp" (derive.ml[96,3493+20]..[96,3493+35])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[96,3493+36]..[96,3493+38])
                                                                Pexp_ident "ty" (derive.ml[96,3493+36]..[96,3493+38])
                                                          ]
                                                    ]
                                              ]
                                        ]
                                        expression (derive.ml[97,3536+11]..[97,3536+17])
                                          Pexp_apply
                                          expression (derive.ml[97,3536+11]..[97,3536+14])
                                            Pexp_ident "aux" (derive.ml[97,3536+11]..[97,3536+14])
                                          [
                                            <label> ""
                                              expression (derive.ml[97,3536+15]..[97,3536+17])
                                                Pexp_ident "ty" (derive.ml[97,3536+15]..[97,3536+17])
                                          ]
                            ]
                      ]
    ]
  structure_item (derive.ml[98,3555+0]..[134,5157+12])
    Pstr_value Rec
    [
      <def>
        pattern (derive.ml[98,3555+8]..[98,3555+30])
          Ppat_var "obj_simple_exp_of_ctyp" (derive.ml[98,3555+8]..[98,3555+30])
        expression (derive.ml[98,3555+31]..[134,5157+12])
          Pexp_fun "right_type_id"
          None
          pattern (derive.ml[98,3555+32]..[98,3555+45])
            Ppat_var "right_type_id" (derive.ml[98,3555+32]..[98,3555+45])
          expression (derive.ml[98,3555+47]..[134,5157+12])
            Pexp_fun "left_type_variable"
            None
            pattern (derive.ml[98,3555+48]..[98,3555+66])
              Ppat_var "left_type_variable" (derive.ml[98,3555+48]..[98,3555+66])
            expression (derive.ml[99,3623+2]..[134,5157+12])
              Pexp_fun "right_type_variable"
              None
              pattern (derive.ml[99,3623+3]..[99,3623+22])
                Ppat_var "right_type_variable" (derive.ml[99,3623+3]..[99,3623+22])
              expression (derive.ml[99,3623+24]..[134,5157+12])
                Pexp_fun "?names"
                None
                pattern (derive.ml[99,3623+25]..[99,3623+30])
                  Ppat_var "names" (derive.ml[99,3623+25]..[99,3623+30])
                expression (derive.ml[99,3623+32]..[134,5157+12])
                  Pexp_fun "?arity"
                  None
                  pattern (derive.ml[99,3623+33]..[99,3623+38])
                    Ppat_var "arity" (derive.ml[99,3623+33]..[99,3623+38])
                  expression (derive.ml[99,3623+40]..[134,5157+12])
                    Pexp_fun "mk_tuple"
                    None
                    pattern (derive.ml[99,3623+41]..[99,3623+49])
                      Ppat_var "mk_tuple" (derive.ml[99,3623+41]..[99,3623+49])
                    expression (derive.ml[100,3676+2]..[134,5157+12])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[101,3687+4]..[101,3687+6])
                            Ppat_var "ty" (derive.ml[101,3687+4]..[101,3687+6])
                          expression (derive.ml[102,3697+6]..[134,5157+12])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (derive.ml[102,3697+10]..[102,3697+15])
                                  Ppat_var "trans" (derive.ml[102,3697+10]..[102,3697+15])
                                expression (derive.ml[102,3697+18]..[102,3697+41])
                                  Pexp_apply
                                  expression (derive.ml[102,3697+18]..[102,3697+27])
                                    Pexp_ident "transform" (derive.ml[102,3697+18]..[102,3697+27])
                                  [
                                    <label> ""
                                      expression (derive.ml[102,3697+28]..[102,3697+41])
                                        Pexp_ident "right_type_id" (derive.ml[102,3697+28]..[102,3697+41])
                                  ]
                            ]
                            expression (derive.ml[103,3742+6]..[134,5157+12])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (derive.ml[103,3742+10]..[103,3742+13])
                                    Ppat_var "var" (derive.ml[103,3742+10]..[103,3742+13])
                                  expression (derive.ml[103,3742+16]..[103,3742+50])
                                    Pexp_apply
                                    expression (derive.ml[103,3742+16]..[103,3742+31])
                                      Pexp_ident "basic_transform" (derive.ml[103,3742+16]..[103,3742+31])
                                    [
                                      <label> ""
                                        expression (derive.ml[103,3742+32]..[103,3742+50])
                                          Pexp_ident "left_type_variable" (derive.ml[103,3742+32]..[103,3742+50])
                                    ]
                              ]
                              expression (derive.ml[104,3796+6]..[134,5157+12])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (derive.ml[104,3796+10]..[104,3796+15])
                                      Ppat_var "tyvar" (derive.ml[104,3796+10]..[104,3796+15])
                                    expression (derive.ml[104,3796+18]..[104,3796+53])
                                      Pexp_apply
                                      expression (derive.ml[104,3796+18]..[104,3796+33])
                                        Pexp_ident "right_transform" (derive.ml[104,3796+18]..[104,3796+33])
                                      [
                                        <label> ""
                                          expression (derive.ml[104,3796+34]..[104,3796+53])
                                            Pexp_ident "right_type_variable" (derive.ml[104,3796+34]..[104,3796+53])
                                      ]
                                ]
                                expression (derive.ml[105,3853+6]..[134,5157+12])
                                  Pexp_let Rec
                                  [
                                    <def>
                                      pattern (derive.ml[105,3853+14]..[105,3853+17])
                                        Ppat_var "aux" (derive.ml[105,3853+14]..[105,3853+17])
                                      expression (derive.ml[105,3853+17]..[133,5078+75])
                                        Pexp_constraint
                                        expression (derive.ml[106,3886+8]..[133,5078+75])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (derive.ml[107,3903+10]..[107,3903+23])
                                                Ppat_alias "id" (derive.ml[107,3903+21]..[107,3903+23])
                                                pattern (derive.ml[107,3903+10]..[107,3903+17])
                                                  Ppat_type
                                                  "ident'" (derive.ml[107,3903+11]..[107,3903+17])
                                              expression (derive.ml[107,3903+27]..[107,3903+48])
                                                Pexp_apply
                                                expression (derive.ml[107,3903+27]..[107,3903+32])
                                                  Pexp_ident "trans" (derive.ml[107,3903+27]..[107,3903+32])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[107,3903+34]..[107,3903+47])
                                                      Pexp_apply
                                                      expression (derive.ml[107,3903+34]..[107,3903+44])
                                                        Pexp_ident "IdN.to_vid" (derive.ml[107,3903+34]..[107,3903+44])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[107,3903+45]..[107,3903+47])
                                                            Pexp_ident "id" (derive.ml[107,3903+45]..[107,3903+47])
                                                      ]
                                                ]
                                            <case>
                                              pattern (derive.ml[108,3952+10]..[108,3952+27])
                                                Ppat_variant "Quote"
                                                Some
                                                  pattern (derive.ml[108,3952+10]..[108,3952+27])
                                                    Ppat_tuple
                                                    [
                                                      pattern (derive.ml[108,3952+18]..[108,3952+19])
                                                        Ppat_any
                                                      pattern (derive.ml[108,3952+20]..[108,3952+26])
                                                        Ppat_variant "Lid"
                                                        Some
                                                          pattern (derive.ml[108,3952+25]..[108,3952+26])
                                                            Ppat_var "s" (derive.ml[108,3952+25]..[108,3952+26])
                                                    ]
                                              expression (derive.ml[108,3952+31]..[108,3952+38])
                                                Pexp_apply
                                                expression (derive.ml[108,3952+31]..[108,3952+36])
                                                  Pexp_ident "tyvar" (derive.ml[108,3952+31]..[108,3952+36])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[108,3952+37]..[108,3952+38])
                                                      Pexp_ident "s" (derive.ml[108,3952+37]..[108,3952+38])
                                                ]
                                            <case>
                                              pattern (derive.ml[109,3991+10]..[109,3991+22])
                                                Ppat_alias "ty" (derive.ml[109,3991+20]..[109,3991+22])
                                                pattern (derive.ml[109,3991+10]..[109,3991+16])
                                                  Ppat_variant "App"
                                                  Some
                                                    pattern (derive.ml[109,3991+15]..[109,3991+16])
                                                      Ppat_any
                                              expression (derive.ml[110,4017+13]..[123,4631+39])
                                                Pexp_match
                                                expression (derive.ml[110,4017+19]..[110,4017+48])
                                                  Pexp_apply
                                                  expression (derive.ml[110,4017+19]..[110,4017+42])
                                                    Pexp_ident "Ast_basic.N.list_of_app" (derive.ml[110,4017+19]..[110,4017+42])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[110,4017+43]..[110,4017+45])
                                                        Pexp_ident "ty" (derive.ml[110,4017+43]..[110,4017+45])
                                                    <label> ""
                                                      expression (derive.ml[110,4017+46]..[110,4017+48])
                                                        Pexp_construct "[]" (derive.ml[110,4017+46]..[110,4017+48])
                                                        None
                                                  ]
                                                [
                                                  <case>
                                                    pattern (derive.ml[111,4071+15]..[111,4071+37])
                                                      Ppat_construct "::" (derive.ml[111,4071+15]..[111,4071+37])
                                                      Some
                                                        pattern (derive.ml[111,4071+15]..[111,4071+37])
                                                          Ppat_tuple
                                                          [
                                                            pattern (derive.ml[111,4071+15]..[111,4071+33])
                                                              Ppat_alias "tctor" (derive.ml[111,4071+27]..[111,4071+32])
                                                              pattern (derive.ml[111,4071+16]..[111,4071+23])
                                                                Ppat_type
                                                                "ident'" (derive.ml[111,4071+17]..[111,4071+23])
                                                            pattern (derive.ml[111,4071+35]..[111,4071+37])
                                                              Ppat_var "ls" (derive.ml[111,4071+35]..[111,4071+37])
                                                          ]
                                                    expression (derive.ml[112,4112+17]..[120,4495+44])
                                                      Pexp_apply
                                                      expression (derive.ml[112,4112+17]..[112,4112+29])
                                                        Pexp_ident "appl_of_list" (derive.ml[112,4112+17]..[112,4112+29])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[112,4112+31]..[120,4495+43])
                                                            Pexp_construct "::" (derive.ml[112,4112+58]..[112,4112+60])
                                                            Some
                                                              expression (derive.ml[112,4112+31]..[120,4495+43])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[112,4112+32]..[112,4112+56])
                                                                    Pexp_apply
                                                                    expression (derive.ml[112,4112+32]..[112,4112+37])
                                                                      Pexp_ident "trans" (derive.ml[112,4112+32]..[112,4112+37])
                                                                    [
                                                                      <label> ""
expression (derive.ml[112,4112+39]..[112,4112+55])
  Pexp_apply
  expression (derive.ml[112,4112+39]..[112,4112+49])
    Pexp_ident "IdN.to_vid" (derive.ml[112,4112+39]..[112,4112+49])
  [
    <label> ""
      expression (derive.ml[112,4112+50]..[112,4112+55])
        Pexp_ident "tctor" (derive.ml[112,4112+50]..[112,4112+55])
  ]
                                                                    ]
                                                                  expression (derive.ml[113,4173+20]..[120,4495+42])
                                                                    Pexp_apply
                                                                    expression (derive.ml[113,4173+23]..[113,4173+25])
                                                                      Pexp_ident "|>" (derive.ml[113,4173+23]..[113,4173+25])
                                                                    [
                                                                      <label> ""
expression (derive.ml[113,4173+20]..[113,4173+22])
  Pexp_ident "ls" (derive.ml[113,4173+20]..[113,4173+22])
                                                                      <label> ""
expression (derive.ml[114,4199+23]..[120,4495+41])
  Pexp_apply
  expression (derive.ml[114,4199+23]..[114,4199+31])
    Pexp_ident "List.map" (derive.ml[114,4199+23]..[114,4199+31])
  [
    <label> ""
      expression (derive.ml[115,4231+26]..[120,4495+40])
        Pexp_function
        [
          <case>
            pattern (derive.ml[116,4266+28]..[116,4266+45])
              Ppat_variant "Quote"
              Some
                pattern (derive.ml[116,4266+28]..[116,4266+45])
                  Ppat_tuple
                  [
                    pattern (derive.ml[116,4266+36]..[116,4266+37])
                      Ppat_any
                    pattern (derive.ml[116,4266+38]..[116,4266+44])
                      Ppat_variant "Lid"
                      Some
                        pattern (derive.ml[116,4266+43]..[116,4266+44])
                          Ppat_var "s" (derive.ml[116,4266+43]..[116,4266+44])
                  ]
            expression (derive.ml[116,4266+49]..[116,4266+76])
              Pexp_coerce
              expression (derive.ml[116,4266+50]..[116,4266+62])
                Pexp_variant "Lid"
                Some
                  expression (derive.ml[116,4266+56]..[116,4266+61])
                    Pexp_apply
                    expression (derive.ml[116,4266+56]..[116,4266+59])
                      Pexp_ident "var" (derive.ml[116,4266+56]..[116,4266+59])
                    [
                      <label> ""
                        expression (derive.ml[116,4266+60]..[116,4266+61])
                          Pexp_ident "s" (derive.ml[116,4266+60]..[116,4266+61])
                    ]
              None
              core_type (derive.ml[116,4266+66]..[116,4266+75])
                Ptyp_constr "Astfn.exp" (derive.ml[116,4266+66]..[116,4266+75])
                []
          <case>
            pattern (derive.ml[117,4343+28]..[117,4343+29])
              Ppat_var "t" (derive.ml[117,4343+28]..[117,4343+29])
            expression (derive.ml[118,4376+30]..[120,4495+40])
              Pexp_coerce
              expression (derive.ml[118,4376+31]..[119,4412+78])
                Pexp_variant "Fun"
                Some
                  expression (derive.ml[119,4412+34]..[119,4412+77])
                    Pexp_variant "Case"
                    Some
                      expression (derive.ml[119,4412+40]..[119,4412+77])
                        Pexp_tuple
                        [
                          expression (derive.ml[119,4412+42]..[119,4412+53])
                            Pexp_variant "Lid"
                            Some
                              expression (derive.ml[119,4412+47]..[119,4412+53])
                                Pexp_constant Const_string("self",None)
                          expression (derive.ml[119,4412+56]..[119,4412+76])
                            Pexp_coerce
                            expression (derive.ml[119,4412+57]..[119,4412+62])
                              Pexp_apply
                              expression (derive.ml[119,4412+57]..[119,4412+60])
                                Pexp_ident "aux" (derive.ml[119,4412+57]..[119,4412+60])
                              [
                                <label> ""
                                  expression (derive.ml[119,4412+61]..[119,4412+62])
                                    Pexp_ident "t" (derive.ml[119,4412+61]..[119,4412+62])
                              ]
                            None
                            core_type (derive.ml[119,4412+66]..[119,4412+75])
                              Ptyp_constr "Astfn.exp" (derive.ml[119,4412+66]..[119,4412+75])
                              []
                        ]
              None
              core_type (derive.ml[120,4495+30]..[120,4495+39])
                Ptyp_constr "Astfn.exp" (derive.ml[120,4495+30]..[120,4495+39])
                []
        ]
  ]
                                                                    ]
                                                                ]
                                                      ]
                                                  <case>
                                                    pattern (derive.ml[121,4540+15]..[121,4540+16])
                                                      Ppat_any
                                                    expression (derive.ml[122,4560+17]..[123,4631+39])
                                                      Pexp_apply
                                                      expression (derive.ml[122,4560+17]..[122,4560+26])
                                                        Pexp_ident "failwithf" (derive.ml[122,4560+17]..[122,4560+26])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[122,4560+27]..[122,4560+70])
                                                            Pexp_constant Const_string("list_of_app in obj_simple_exp_of_ctyp: %s",None)
                                                        <label> ""
                                                          expression (derive.ml[123,4631+20]..[123,4631+38])
                                                            Pexp_apply
                                                            expression (derive.ml[123,4631+20]..[123,4631+35])
                                                              Pexp_ident "ObjsN.dump_ctyp" (derive.ml[123,4631+20]..[123,4631+35])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[123,4631+36]..[123,4631+38])
                                                                  Pexp_ident "ty" (derive.ml[123,4631+36]..[123,4631+38])
                                                            ]
                                                      ]
                                                ]
                                            <case>
                                              pattern (derive.ml[124,4672+10]..[124,4672+24])
                                                Ppat_variant "Arrow"
                                                Some
                                                  pattern (derive.ml[124,4672+10]..[124,4672+24])
                                                    Ppat_tuple
                                                    [
                                                      pattern (derive.ml[124,4672+18]..[124,4672+20])
                                                        Ppat_var "t1" (derive.ml[124,4672+18]..[124,4672+20])
                                                      pattern (derive.ml[124,4672+21]..[124,4672+23])
                                                        Ppat_var "t2" (derive.ml[124,4672+21]..[124,4672+23])
                                                    ]
                                              expression (derive.ml[125,4700+12]..[128,4799+53])
                                                Pexp_apply
                                                expression (derive.ml[125,4700+12]..[125,4700+15])
                                                  Pexp_ident "aux" (derive.ml[125,4700+12]..[125,4700+15])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[126,4716+14]..[128,4799+53])
                                                      Pexp_coerce
                                                      expression (derive.ml[126,4716+15]..[128,4799+38])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (derive.ml[127,4736+17]..[128,4799+38])
                                                            Pexp_tuple
                                                            [
                                                              expression (derive.ml[127,4736+19]..[127,4736+60])
                                                                Pexp_variant "App"
                                                                Some
                                                                  expression (derive.ml[127,4736+24]..[127,4736+60])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (derive.ml[127,4736+26]..[127,4736+38])
Pexp_variant "Lid"
Some
  expression (derive.ml[127,4736+31]..[127,4736+38])
    Pexp_constant Const_string("arrow",None)
                                                                      expression (derive.ml[127,4736+41]..[127,4736+59])
Pexp_coerce
expression (derive.ml[127,4736+42]..[127,4736+44])
  Pexp_ident "t1" (derive.ml[127,4736+42]..[127,4736+44])
None
core_type (derive.ml[127,4736+48]..[127,4736+58])
  Ptyp_constr "Astfn.ctyp" (derive.ml[127,4736+48]..[127,4736+58])
  []
                                                                    ]
                                                              expression (derive.ml[128,4799+19]..[128,4799+37])
                                                                Pexp_coerce
                                                                expression (derive.ml[128,4799+20]..[128,4799+22])
                                                                  Pexp_ident "t2" (derive.ml[128,4799+20]..[128,4799+22])
                                                                None
                                                                core_type (derive.ml[128,4799+26]..[128,4799+36])
                                                                  Ptyp_constr "Astfn.ctyp" (derive.ml[128,4799+26]..[128,4799+36])
                                                                  []
                                                            ]
                                                      None
                                                      core_type (derive.ml[128,4799+42]..[128,4799+52])
                                                        Ptyp_constr "Astfn.ctyp" (derive.ml[128,4799+42]..[128,4799+52])
                                                        []
                                                ]
                                            <case>
                                              pattern (derive.ml[129,4853+10]..[129,4853+22])
                                                Ppat_alias "ty" (derive.ml[129,4853+20]..[129,4853+22])
                                                pattern (derive.ml[129,4853+10]..[129,4853+16])
                                                  Ppat_variant "Par"
                                                  Some
                                                    pattern (derive.ml[129,4853+15]..[129,4853+16])
                                                      Ppat_any
                                              expression (derive.ml[130,4879+12]..[132,5009+68])
                                                Pexp_apply
                                                expression (derive.ml[130,4879+12]..[130,4879+29])
                                                  Pexp_ident "tuple_exp_of_ctyp" (derive.ml[130,4879+12]..[130,4879+29])
                                                [
                                                  <label> "?arity"
                                                    expression (derive.ml[130,4879+30]..[130,4879+36])
                                                      Pexp_ident "arity" (derive.ml[130,4879+30]..[130,4879+36])
                                                  <label> "?names"
                                                    expression (derive.ml[130,4879+37]..[130,4879+43])
                                                      Pexp_ident "names" (derive.ml[130,4879+37]..[130,4879+43])
                                                  <label> "mk_tuple"
                                                    expression (derive.ml[130,4879+45]..[130,4879+53])
                                                      Pexp_ident "mk_tuple" (derive.ml[130,4879+45]..[130,4879+53])
                                                  <label> "f"
                                                    expression (derive.ml[131,4933+18]..[132,5009+64])
                                                      Pexp_apply
                                                      expression (derive.ml[131,4933+18]..[131,4933+40])
                                                        Pexp_ident "obj_simple_exp_of_ctyp" (derive.ml[131,4933+18]..[131,4933+40])
                                                      [
                                                        <label> "right_type_id"
                                                          expression (derive.ml[131,4933+42]..[131,4933+55])
                                                            Pexp_ident "right_type_id" (derive.ml[131,4933+42]..[131,4933+55])
                                                        <label> "left_type_variable"
                                                          expression (derive.ml[131,4933+57]..[131,4933+75])
                                                            Pexp_ident "left_type_variable" (derive.ml[131,4933+57]..[131,4933+75])
                                                        <label> "right_type_variable"
                                                          expression (derive.ml[132,5009+21]..[132,5009+40])
                                                            Pexp_ident "right_type_variable" (derive.ml[132,5009+21]..[132,5009+40])
                                                        <label> "?names"
                                                          expression (derive.ml[132,5009+41]..[132,5009+47])
                                                            Pexp_ident "names" (derive.ml[132,5009+41]..[132,5009+47])
                                                        <label> "?arity"
                                                          expression (derive.ml[132,5009+48]..[132,5009+54])
                                                            Pexp_ident "arity" (derive.ml[132,5009+48]..[132,5009+54])
                                                        <label> "mk_tuple"
                                                          expression (derive.ml[132,5009+56]..[132,5009+64])
                                                            Pexp_ident "mk_tuple" (derive.ml[132,5009+56]..[132,5009+64])
                                                      ]
                                                  <label> ""
                                                    expression (derive.ml[132,5009+66]..[132,5009+68])
                                                      Pexp_ident "ty" (derive.ml[132,5009+66]..[132,5009+68])
                                                ]
                                            <case>
                                              pattern (derive.ml[133,5078+10]..[133,5078+12])
                                                Ppat_var "ty" (derive.ml[133,5078+10]..[133,5078+12])
                                              expression (derive.ml[133,5078+16]..[133,5078+75])
                                                Pexp_apply
                                                expression (derive.ml[133,5078+16]..[133,5078+25])
                                                  Pexp_ident "failwithf" (derive.ml[133,5078+16]..[133,5078+25])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[133,5078+26]..[133,5078+54])
                                                      Pexp_constant Const_string("obj_simple_exp_of_ctyp: %s",None)
                                                  <label> ""
                                                    expression (derive.ml[133,5078+56]..[133,5078+74])
                                                      Pexp_apply
                                                      expression (derive.ml[133,5078+56]..[133,5078+71])
                                                        Pexp_ident "ObjsN.dump_ctyp" (derive.ml[133,5078+56]..[133,5078+71])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[133,5078+72]..[133,5078+74])
                                                            Pexp_ident "ty" (derive.ml[133,5078+72]..[133,5078+74])
                                                      ]
                                                ]
                                          ]
                                        core_type (derive.ml[105,3853+19]..[105,3853+30])
                                          Ptyp_arrow
                                          ""
                                          core_type (derive.ml[105,3853+19]..[105,3853+23])
                                            Ptyp_constr "ctyp" (derive.ml[105,3853+19]..[105,3853+23])
                                            []
                                          core_type (derive.ml[105,3853+27]..[105,3853+30])
                                            Ptyp_constr "exp" (derive.ml[105,3853+27]..[105,3853+30])
                                            []
                                  ]
                                  expression (derive.ml[134,5157+6]..[134,5157+12])
                                    Pexp_apply
                                    expression (derive.ml[134,5157+6]..[134,5157+9])
                                      Pexp_ident "aux" (derive.ml[134,5157+6]..[134,5157+9])
                                    [
                                      <label> ""
                                        expression (derive.ml[134,5157+10]..[134,5157+12])
                                          Pexp_ident "ty" (derive.ml[134,5157+10]..[134,5157+12])
                                    ]
                      ]
    ]
  structure_item (derive.ml[135,5170+0]..[170,6655+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[135,5170+4]..[135,5170+15])
          Ppat_var "exp_of_ctyp" (derive.ml[135,5170+4]..[135,5170+15])
        expression (derive.ml[135,5170+16]..[170,6655+36])
          Pexp_fun "?cons_transform"
          None
          pattern (derive.ml[135,5170+17]..[135,5170+31])
            Ppat_var "cons_transform" (derive.ml[135,5170+17]..[135,5170+31])
          expression (derive.ml[135,5170+33]..[170,6655+36])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[135,5170+42]..[135,5170+43])
                Pexp_constant Const_int 1
            pattern (derive.ml[135,5170+35]..[135,5170+40])
              Ppat_var "arity" (derive.ml[135,5170+35]..[135,5170+40])
            expression (derive.ml[135,5170+46]..[170,6655+36])
              Pexp_fun "?names"
              Some
                expression (derive.ml[135,5170+55]..[135,5170+57])
                  Pexp_construct "[]" (derive.ml[135,5170+55]..[135,5170+57])
                  None
              pattern (derive.ml[135,5170+48]..[135,5170+53])
                Ppat_var "names" (derive.ml[135,5170+48]..[135,5170+53])
              expression (derive.ml[135,5170+60]..[170,6655+36])
                Pexp_fun "default"
                None
                pattern (derive.ml[135,5170+61]..[135,5170+68])
                  Ppat_var "default" (derive.ml[135,5170+61]..[135,5170+68])
                expression (derive.ml[136,5240+2]..[170,6655+36])
                  Pexp_fun "mk_variant"
                  None
                  pattern (derive.ml[136,5240+3]..[136,5240+13])
                    Ppat_var "mk_variant" (derive.ml[136,5240+3]..[136,5240+13])
                  expression (derive.ml[137,5257+2]..[170,6655+36])
                    Pexp_function
                    [
                      <case>
                        pattern (derive.ml[138,5268+4]..[138,5268+22])
                          Ppat_var "simple_exp_of_ctyp" (derive.ml[138,5268+4]..[138,5268+22])
                        expression (derive.ml[139,5294+7]..[170,6655+35])
                          Pexp_function
                          [
                            <case>
                              pattern (derive.ml[140,5310+9]..[140,5310+23])
                                Ppat_constraint
                                pattern (derive.ml[140,5310+10]..[140,5310+12])
                                  Ppat_var "ty" (derive.ml[140,5310+10]..[140,5310+12])
                                core_type (derive.ml[140,5310+15]..[140,5310+22])
                                  Ptyp_constr "or_ctyp" (derive.ml[140,5310+15]..[140,5310+22])
                                  []
                              expression (derive.ml[141,5337+11]..[170,6655+35])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (derive.ml[141,5337+15]..[141,5337+16])
                                      Ppat_var "f" (derive.ml[141,5337+15]..[141,5337+16])
                                    expression (derive.ml[142,5356+13]..[160,6196+45])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (derive.ml[143,5378+15]..[143,5378+30])
                                            Ppat_constraint
                                            pattern (derive.ml[143,5378+16]..[143,5378+20])
                                              Ppat_var "cons" (derive.ml[143,5378+16]..[143,5378+20])
                                            core_type (derive.ml[143,5378+23]..[143,5378+29])
                                              Ptyp_constr "string" (derive.ml[143,5378+23]..[143,5378+29])
                                              []
                                          expression (derive.ml[144,5412+18]..[160,6196+44])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (derive.ml[145,5439+20]..[145,5439+40])
                                                  Ppat_constraint
                                                  pattern (derive.ml[145,5439+21]..[145,5439+27])
                                                    Ppat_var "tyargs" (derive.ml[145,5439+21]..[145,5439+27])
                                                  core_type (derive.ml[145,5439+30]..[145,5439+39])
                                                    Ptyp_constr "list" (derive.ml[145,5439+35]..[145,5439+39])
                                                    [
                                                      core_type (derive.ml[145,5439+30]..[145,5439+34])
                                                        Ptyp_constr "ctyp" (derive.ml[145,5439+30]..[145,5439+34])
                                                        []
                                                    ]
                                                expression (derive.ml[146,5483+22]..[160,6196+44])
                                                  Pexp_constraint
                                                  expression (derive.ml[146,5483+23]..[160,6196+36])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[146,5483+27]..[146,5483+38])
                                                          Ppat_var "args_length" (derive.ml[146,5483+27]..[146,5483+38])
                                                        expression (derive.ml[146,5483+41]..[146,5483+59])
                                                          Pexp_apply
                                                          expression (derive.ml[146,5483+41]..[146,5483+52])
                                                            Pexp_ident "List.length" (derive.ml[146,5483+41]..[146,5483+52])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[146,5483+53]..[146,5483+59])
                                                                Pexp_ident "tyargs" (derive.ml[146,5483+53]..[146,5483+59])
                                                          ]
                                                    ]
                                                    expression (derive.ml[147,5546+23]..[160,6196+36])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[147,5546+27]..[147,5546+28])
                                                            Ppat_var "p" (derive.ml[147,5546+27]..[147,5546+28])
                                                          expression (derive.ml[147,5546+28]..[149,5652+47])
                                                            Pexp_constraint
                                                            expression (derive.ml[148,5582+25]..[149,5652+47])
                                                              Pexp_coerce
                                                              expression (derive.ml[148,5582+26]..[149,5652+39])
                                                                Pexp_apply
                                                                expression (derive.ml[148,5582+26]..[148,5582+41])
                                                                  Pexp_ident "EpN.gen_tuple_n" (derive.ml[148,5582+26]..[148,5582+41])
                                                                [
                                                                  <label> "?cons_transform"
                                                                    expression (derive.ml[148,5582+42]..[148,5582+57])
                                                                      Pexp_ident "cons_transform" (derive.ml[148,5582+42]..[148,5582+57])
                                                                  <label> "arity"
                                                                    expression (derive.ml[148,5582+59]..[148,5582+64])
                                                                      Pexp_ident "arity" (derive.ml[148,5582+59]..[148,5582+64])
                                                                  <label> ""
                                                                    expression (derive.ml[148,5582+65]..[148,5582+69])
                                                                      Pexp_ident "cons" (derive.ml[148,5582+65]..[148,5582+69])
                                                                  <label> ""
                                                                    expression (derive.ml[149,5652+28]..[149,5652+39])
                                                                      Pexp_ident "args_length" (derive.ml[149,5652+28]..[149,5652+39])
                                                                ]
                                                              None
                                                              core_type (derive.ml[149,5652+43]..[149,5652+46])
                                                                Ptyp_constr "pat" (derive.ml[149,5652+43]..[149,5652+46])
                                                                []
                                                            core_type (derive.ml[147,5546+30]..[147,5546+33])
                                                              Ptyp_constr "pat" (derive.ml[147,5546+30]..[147,5546+33])
                                                              []
                                                      ]
                                                      expression (derive.ml[150,5703+23]..[160,6196+36])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (derive.ml[150,5703+27]..[150,5703+29])
                                                              Ppat_var "mk" (derive.ml[150,5703+27]..[150,5703+29])
                                                            expression (derive.ml[151,5735+25]..[157,6020+49])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (derive.ml[152,5769+27]..[152,5769+40])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (derive.ml[152,5769+28]..[152,5769+32])
Ppat_var "cons" (derive.ml[152,5769+28]..[152,5769+32])
                                                                      pattern (derive.ml[152,5769+33]..[152,5769+39])
Ppat_var "tyargs" (derive.ml[152,5769+33]..[152,5769+39])
                                                                    ]
                                                                  expression (derive.ml[153,5813+29]..[157,6020+49])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (derive.ml[153,5813+33]..[153,5813+37])
  Ppat_var "exps" (derive.ml[153,5813+33]..[153,5813+37])
expression (derive.ml[154,5853+31]..[156,5951+65])
  Pexp_apply
  expression (derive.ml[154,5853+31]..[154,5853+40])
    Pexp_ident "List.mapi" (derive.ml[154,5853+31]..[154,5853+40])
  [
    <label> ""
      expression (derive.ml[155,5894+34]..[156,5951+57])
        Pexp_apply
        expression (derive.ml[155,5894+34]..[155,5894+42])
          Pexp_ident "mapi_exp" (derive.ml[155,5894+34]..[155,5894+42])
        [
          <label> "arity"
            expression (derive.ml[155,5894+44]..[155,5894+49])
              Pexp_ident "arity" (derive.ml[155,5894+44]..[155,5894+49])
          <label> "names"
            expression (derive.ml[155,5894+51]..[155,5894+56])
              Pexp_ident "names" (derive.ml[155,5894+51]..[155,5894+56])
          <label> "f"
            expression (derive.ml[156,5951+39]..[156,5951+57])
              Pexp_ident "simple_exp_of_ctyp" (derive.ml[156,5951+39]..[156,5951+57])
        ]
    <label> ""
      expression (derive.ml[156,5951+59]..[156,5951+65])
        Pexp_ident "tyargs" (derive.ml[156,5951+59]..[156,5951+65])
  ]
                                                                    ]
                                                                    expression (derive.ml[157,6020+29]..[157,6020+49])
                                                                      Pexp_apply
                                                                      expression (derive.ml[157,6020+29]..[157,6020+39])
Pexp_ident "mk_variant" (derive.ml[157,6020+29]..[157,6020+39])
                                                                      [
<label> ""
  expression (derive.ml[157,6020+40]..[157,6020+44])
    Pexp_ident "cons" (derive.ml[157,6020+40]..[157,6020+44])
<label> ""
  expression (derive.ml[157,6020+45]..[157,6020+49])
    Pexp_ident "exps" (derive.ml[157,6020+45]..[157,6020+49])
                                                                      ]
                                                              ]
                                                        ]
                                                        expression (derive.ml[158,6073+23]..[160,6196+36])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (derive.ml[158,6073+27]..[158,6073+28])
                                                                Ppat_var "e" (derive.ml[158,6073+27]..[158,6073+28])
                                                              expression (derive.ml[158,6073+31]..[158,6073+48])
                                                                Pexp_apply
                                                                expression (derive.ml[158,6073+31]..[158,6073+33])
                                                                  Pexp_ident "mk" (derive.ml[158,6073+31]..[158,6073+33])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[158,6073+34]..[158,6073+48])
                                                                      Pexp_tuple
                                                                      [
expression (derive.ml[158,6073+35]..[158,6073+39])
  Pexp_ident "cons" (derive.ml[158,6073+35]..[158,6073+39])
expression (derive.ml[158,6073+41]..[158,6073+47])
  Pexp_ident "tyargs" (derive.ml[158,6073+41]..[158,6073+47])
                                                                      ]
                                                                ]
                                                          ]
                                                          expression (derive.ml[159,6125+23]..[160,6196+36])
                                                            Pexp_coerce
                                                            expression (derive.ml[159,6125+24]..[159,6125+66])
                                                              Pexp_variant "Case"
                                                              Some
                                                                expression (derive.ml[159,6125+30]..[159,6125+66])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (derive.ml[159,6125+31]..[159,6125+47])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[159,6125+32]..[159,6125+33])
Pexp_ident "p" (derive.ml[159,6125+32]..[159,6125+33])
                                                                      None
                                                                      core_type (derive.ml[159,6125+37]..[159,6125+46])
Ptyp_constr "Astfn.pat" (derive.ml[159,6125+37]..[159,6125+46])
[]
                                                                    expression (derive.ml[159,6125+49]..[159,6125+65])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[159,6125+50]..[159,6125+51])
Pexp_ident "e" (derive.ml[159,6125+50]..[159,6125+51])
                                                                      None
                                                                      core_type (derive.ml[159,6125+55]..[159,6125+64])
Ptyp_constr "Astfn.exp" (derive.ml[159,6125+55]..[159,6125+64])
[]
                                                                  ]
                                                            None
                                                            core_type (derive.ml[160,6196+25]..[160,6196+35])
                                                              Ptyp_constr "Astfn.case" (derive.ml[160,6196+25]..[160,6196+35])
                                                              []
                                                  core_type (derive.ml[160,6196+39]..[160,6196+43])
                                                    Ptyp_constr "case" (derive.ml[160,6196+39]..[160,6196+43])
                                                    []
                                            ]
                                      ]
                                ]
                                expression (derive.ml[161,6245+11]..[170,6655+35])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (derive.ml[161,6245+15]..[161,6245+19])
                                        Ppat_var "info" (derive.ml[161,6245+15]..[161,6245+19])
                                      expression (derive.ml[161,6245+22]..[161,6245+74])
                                        Pexp_tuple
                                        [
                                          expression (derive.ml[161,6245+23]..[161,6245+26])
                                            Pexp_construct "Sum" (derive.ml[161,6245+23]..[161,6245+26])
                                            None
                                          expression (derive.ml[161,6245+29]..[161,6245+72])
                                            Pexp_apply
                                            expression (derive.ml[161,6245+29]..[161,6245+40])
                                              Pexp_ident "List.length" (derive.ml[161,6245+29]..[161,6245+40])
                                            [
                                              <label> ""
                                                expression (derive.ml[161,6245+42]..[161,6245+71])
                                                  Pexp_apply
                                                  expression (derive.ml[161,6245+42]..[161,6245+65])
                                                    Pexp_ident "Ast_basic.N.list_of_bar" (derive.ml[161,6245+42]..[161,6245+65])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[161,6245+66]..[161,6245+68])
                                                        Pexp_ident "ty" (derive.ml[161,6245+66]..[161,6245+68])
                                                    <label> ""
                                                      expression (derive.ml[161,6245+69]..[161,6245+71])
                                                        Pexp_construct "[]" (derive.ml[161,6245+69]..[161,6245+71])
                                                        None
                                                  ]
                                            ]
                                        ]
                                  ]
                                  expression (derive.ml[162,6323+11]..[170,6655+35])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[162,6323+15]..[162,6323+18])
                                          Ppat_var "res" (derive.ml[162,6323+15]..[162,6323+18])
                                        expression (derive.ml[162,6323+18]..[162,6323+76])
                                          Pexp_constraint
                                          expression (derive.ml[162,6323+32]..[162,6323+76])
                                            Pexp_apply
                                            expression (derive.ml[162,6323+32]..[162,6323+54])
                                              Pexp_ident "Ctyp.reduce_data_ctors" (derive.ml[162,6323+32]..[162,6323+54])
                                            [
                                              <label> ""
                                                expression (derive.ml[162,6323+55]..[162,6323+57])
                                                  Pexp_ident "ty" (derive.ml[162,6323+55]..[162,6323+57])
                                              <label> ""
                                                expression (derive.ml[162,6323+58]..[162,6323+60])
                                                  Pexp_construct "[]" (derive.ml[162,6323+58]..[162,6323+60])
                                                  None
                                              <label> ""
                                                expression (derive.ml[162,6323+61]..[162,6323+62])
                                                  Pexp_ident "f" (derive.ml[162,6323+61]..[162,6323+62])
                                              <label> "compose"
                                                expression (derive.ml[162,6323+72]..[162,6323+76])
                                                  Pexp_ident "cons" (derive.ml[162,6323+72]..[162,6323+76])
                                            ]
                                          core_type (derive.ml[162,6323+20]..[162,6323+29])
                                            Ptyp_constr "list" (derive.ml[162,6323+25]..[162,6323+29])
                                            [
                                              core_type (derive.ml[162,6323+20]..[162,6323+24])
                                                Ptyp_constr "case" (derive.ml[162,6323+20]..[162,6323+24])
                                                []
                                            ]
                                    ]
                                    expression (derive.ml[163,6403+11]..[170,6655+35])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[163,6403+15]..[163,6403+18])
                                            Ppat_var "res" (derive.ml[163,6403+15]..[163,6403+18])
                                          expression (derive.ml[164,6424+13]..[169,6628+23])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[164,6424+17]..[164,6424+18])
                                                  Ppat_var "t" (derive.ml[164,6424+17]..[164,6424+18])
                                                expression (derive.ml[165,6445+15]..[168,6601+23])
                                                  Pexp_ifthenelse
                                                  expression (derive.ml[165,6445+18]..[165,6445+58])
                                                    Pexp_apply
                                                    expression (derive.ml[165,6445+43]..[165,6445+45])
                                                      Pexp_ident "&&" (derive.ml[165,6445+43]..[165,6445+45])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[165,6445+19]..[165,6445+41])
                                                          Pexp_apply
                                                          expression (derive.ml[165,6445+37]..[165,6445+39])
                                                            Pexp_ident ">=" (derive.ml[165,6445+37]..[165,6445+39])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[165,6445+20]..[165,6445+35])
                                                                Pexp_apply
                                                                expression (derive.ml[165,6445+20]..[165,6445+31])
                                                                  Pexp_ident "List.length" (derive.ml[165,6445+20]..[165,6445+31])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[165,6445+32]..[165,6445+35])
                                                                      Pexp_ident "res" (derive.ml[165,6445+32]..[165,6445+35])
                                                                ]
                                                            <label> ""
                                                              expression (derive.ml[165,6445+40]..[165,6445+41])
                                                                Pexp_constant Const_int 2
                                                          ]
                                                      <label> ""
                                                        expression (derive.ml[165,6445+47]..[165,6445+57])
                                                          Pexp_apply
                                                          expression (derive.ml[165,6445+53]..[165,6445+55])
                                                            Pexp_ident ">=" (derive.ml[165,6445+53]..[165,6445+55])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[165,6445+47]..[165,6445+52])
                                                                Pexp_ident "arity" (derive.ml[165,6445+47]..[165,6445+52])
                                                            <label> ""
                                                              expression (derive.ml[165,6445+56]..[165,6445+57])
                                                                Pexp_constant Const_int 2
                                                          ]
                                                    ]
                                                  expression (derive.ml[167,6524+17]..[167,6524+76])
                                                    Pexp_match
                                                    expression (derive.ml[167,6524+23]..[167,6524+35])
                                                      Pexp_apply
                                                      expression (derive.ml[167,6524+23]..[167,6524+30])
                                                        Pexp_ident "default" (derive.ml[167,6524+23]..[167,6524+30])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[167,6524+31]..[167,6524+35])
                                                            Pexp_ident "info" (derive.ml[167,6524+31]..[167,6524+35])
                                                      ]
                                                    [
                                                      <case>
                                                        pattern (derive.ml[167,6524+43]..[167,6524+49])
                                                          Ppat_construct "Some" (derive.ml[167,6524+43]..[167,6524+47])
                                                          Some
                                                            pattern (derive.ml[167,6524+48]..[167,6524+49])
                                                              Ppat_var "x" (derive.ml[167,6524+48]..[167,6524+49])
                                                        expression (derive.ml[167,6524+53]..[167,6524+61])
                                                          Pexp_construct "::" (derive.ml[167,6524+55]..[167,6524+57])
                                                          Some
                                                            expression (derive.ml[167,6524+53]..[167,6524+61])
                                                              Pexp_tuple
                                                              [
                                                                expression (derive.ml[167,6524+53]..[167,6524+54])
                                                                  Pexp_ident "x" (derive.ml[167,6524+53]..[167,6524+54])
                                                                expression (derive.ml[167,6524+58]..[167,6524+61])
                                                                  Pexp_ident "res" (derive.ml[167,6524+58]..[167,6524+61])
                                                              ]
                                                      <case>
                                                        pattern (derive.ml[167,6524+64]..[167,6524+68])
                                                          Ppat_construct "None" (derive.ml[167,6524+64]..[167,6524+68])
                                                          None
                                                        expression (derive.ml[167,6524+73]..[167,6524+76])
                                                          Pexp_ident "res" (derive.ml[167,6524+73]..[167,6524+76])
                                                    ]
                                                  Some
                                                    expression (derive.ml[168,6601+20]..[168,6601+23])
                                                      Pexp_ident "res" (derive.ml[168,6601+20]..[168,6601+23])
                                            ]
                                            expression (derive.ml[169,6628+13]..[169,6628+23])
                                              Pexp_apply
                                              expression (derive.ml[169,6628+13]..[169,6628+21])
                                                Pexp_ident "List.rev" (derive.ml[169,6628+13]..[169,6628+21])
                                              [
                                                <label> ""
                                                  expression (derive.ml[169,6628+22]..[169,6628+23])
                                                    Pexp_ident "t" (derive.ml[169,6628+22]..[169,6628+23])
                                              ]
                                      ]
                                      expression (derive.ml[170,6655+11]..[170,6655+35])
                                        Pexp_apply
                                        expression (derive.ml[170,6655+11]..[170,6655+24])
                                          Pexp_ident "ExpN.currying" (derive.ml[170,6655+11]..[170,6655+24])
                                        [
                                          <label> "arity"
                                            expression (derive.ml[170,6655+26]..[170,6655+31])
                                              Pexp_ident "arity" (derive.ml[170,6655+26]..[170,6655+31])
                                          <label> ""
                                            expression (derive.ml[170,6655+32]..[170,6655+35])
                                              Pexp_ident "res" (derive.ml[170,6655+32]..[170,6655+35])
                                        ]
                          ]
                    ]
    ]
  structure_item (derive.ml[171,6692+0]..[227,8970+38])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[171,6692+4]..[171,6692+18])
          Ppat_var "exp_of_variant" (derive.ml[171,6692+4]..[171,6692+18])
        expression (derive.ml[171,6692+19]..[227,8970+38])
          Pexp_fun "?cons_transform"
          None
          pattern (derive.ml[171,6692+20]..[171,6692+34])
            Ppat_var "cons_transform" (derive.ml[171,6692+20]..[171,6692+34])
          expression (derive.ml[171,6692+36]..[227,8970+38])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[171,6692+45]..[171,6692+46])
                Pexp_constant Const_int 1
            pattern (derive.ml[171,6692+38]..[171,6692+43])
              Ppat_var "arity" (derive.ml[171,6692+38]..[171,6692+43])
            expression (derive.ml[171,6692+49]..[227,8970+38])
              Pexp_fun "?names"
              Some
                expression (derive.ml[171,6692+58]..[171,6692+60])
                  Pexp_construct "[]" (derive.ml[171,6692+58]..[171,6692+60])
                  None
              pattern (derive.ml[171,6692+51]..[171,6692+56])
                Ppat_var "names" (derive.ml[171,6692+51]..[171,6692+56])
              expression (derive.ml[171,6692+63]..[227,8970+38])
                Pexp_fun "default"
                None
                pattern (derive.ml[171,6692+64]..[171,6692+71])
                  Ppat_var "default" (derive.ml[171,6692+64]..[171,6692+71])
                expression (derive.ml[172,6765+2]..[227,8970+38])
                  Pexp_fun "mk_variant"
                  None
                  pattern (derive.ml[172,6765+3]..[172,6765+13])
                    Ppat_var "mk_variant" (derive.ml[172,6765+3]..[172,6765+13])
                  expression (derive.ml[172,6765+15]..[227,8970+38])
                    Pexp_fun "destination"
                    None
                    pattern (derive.ml[172,6765+16]..[172,6765+27])
                      Ppat_var "destination" (derive.ml[172,6765+16]..[172,6765+27])
                    expression (derive.ml[173,6796+2]..[227,8970+38])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[174,6807+4]..[174,6807+22])
                            Ppat_var "simple_exp_of_ctyp" (derive.ml[174,6807+4]..[174,6807+22])
                          expression (derive.ml[175,6833+11]..[175,6833+18])
                            Pexp_fun "result"
                            None
                            pattern (derive.ml[175,6833+12]..[175,6833+18])
                              Ppat_var "result" (derive.ml[175,6833+12]..[175,6833+18])
                            expression (derive.ml[176,6856+9]..[227,8970+37])
                              Pexp_function
                              [
                                <case>
                                  pattern (derive.ml[177,6874+11]..[177,6874+13])
                                    Ppat_var "ty" (derive.ml[177,6874+11]..[177,6874+13])
                                  expression (derive.ml[178,6891+13]..[227,8970+37])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[178,6891+17]..[178,6891+18])
                                          Ppat_var "f" (derive.ml[178,6891+17]..[178,6891+18])
                                        expression (derive.ml[179,6912+15]..[195,7629+24])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (derive.ml[180,6936+17]..[180,6936+30])
                                                Ppat_tuple
                                                [
                                                  pattern (derive.ml[180,6936+18]..[180,6936+22])
                                                    Ppat_var "cons" (derive.ml[180,6936+18]..[180,6936+22])
                                                  pattern (derive.ml[180,6936+23]..[180,6936+29])
                                                    Ppat_var "tyargs" (derive.ml[180,6936+23]..[180,6936+29])
                                                ]
                                              expression (derive.ml[181,6970+19]..[195,7629+24])
                                                Pexp_constraint
                                                expression (derive.ml[181,6970+20]..[194,7547+78])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[181,6970+24]..[181,6970+27])
                                                        Ppat_var "len" (derive.ml[181,6970+24]..[181,6970+27])
                                                      expression (derive.ml[181,6970+30]..[181,6970+48])
                                                        Pexp_apply
                                                        expression (derive.ml[181,6970+30]..[181,6970+41])
                                                          Pexp_ident "List.length" (derive.ml[181,6970+30]..[181,6970+41])
                                                        [
                                                          <label> ""
                                                            expression (derive.ml[181,6970+42]..[181,6970+48])
                                                              Pexp_ident "tyargs" (derive.ml[181,6970+42]..[181,6970+48])
                                                        ]
                                                  ]
                                                  expression (derive.ml[182,7022+20]..[194,7547+78])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[182,7022+24]..[182,7022+25])
                                                          Ppat_var "p" (derive.ml[182,7022+24]..[182,7022+25])
                                                        expression (derive.ml[183,7050+22]..[184,7125+26])
                                                          Pexp_coerce
                                                          expression (derive.ml[183,7050+23]..[183,7050+70])
                                                            Pexp_apply
                                                            expression (derive.ml[183,7050+23]..[183,7050+38])
                                                              Pexp_ident "EpN.gen_tuple_n" (derive.ml[183,7050+23]..[183,7050+38])
                                                            [
                                                              <label> "?cons_transform"
                                                                expression (derive.ml[183,7050+39]..[183,7050+54])
                                                                  Pexp_ident "cons_transform" (derive.ml[183,7050+39]..[183,7050+54])
                                                              <label> "arity"
                                                                expression (derive.ml[183,7050+56]..[183,7050+61])
                                                                  Pexp_ident "arity" (derive.ml[183,7050+56]..[183,7050+61])
                                                              <label> ""
                                                                expression (derive.ml[183,7050+62]..[183,7050+66])
                                                                  Pexp_ident "cons" (derive.ml[183,7050+62]..[183,7050+66])
                                                              <label> ""
                                                                expression (derive.ml[183,7050+67]..[183,7050+70])
                                                                  Pexp_ident "len" (derive.ml[183,7050+67]..[183,7050+70])
                                                            ]
                                                          None
                                                          core_type (derive.ml[184,7125+22]..[184,7125+25])
                                                            Ptyp_constr "pat" (derive.ml[184,7125+22]..[184,7125+25])
                                                            []
                                                    ]
                                                    expression (derive.ml[185,7155+20]..[194,7547+78])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[185,7155+24]..[185,7155+26])
                                                            Ppat_var "mk" (derive.ml[185,7155+24]..[185,7155+26])
                                                          expression (derive.ml[186,7184+22]..[192,7448+46])
                                                            Pexp_function
                                                            [
                                                              <case>
                                                                pattern (derive.ml[187,7215+24]..[187,7215+37])
                                                                  Ppat_tuple
                                                                  [
                                                                    pattern (derive.ml[187,7215+25]..[187,7215+29])
                                                                      Ppat_var "cons" (derive.ml[187,7215+25]..[187,7215+29])
                                                                    pattern (derive.ml[187,7215+30]..[187,7215+36])
                                                                      Ppat_var "tyargs" (derive.ml[187,7215+30]..[187,7215+36])
                                                                  ]
                                                                expression (derive.ml[188,7256+26]..[192,7448+46])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (derive.ml[188,7256+30]..[188,7256+34])
Ppat_var "exps" (derive.ml[188,7256+30]..[188,7256+34])
                                                                      expression (derive.ml[189,7293+28]..[191,7408+36])
Pexp_apply
expression (derive.ml[189,7293+28]..[189,7293+37])
  Pexp_ident "List.mapi" (derive.ml[189,7293+28]..[189,7293+37])
[
  <label> ""
    expression (derive.ml[190,7331+31]..[190,7331+75])
      Pexp_apply
      expression (derive.ml[190,7331+31]..[190,7331+39])
        Pexp_ident "mapi_exp" (derive.ml[190,7331+31]..[190,7331+39])
      [
        <label> "arity"
          expression (derive.ml[190,7331+41]..[190,7331+46])
            Pexp_ident "arity" (derive.ml[190,7331+41]..[190,7331+46])
        <label> "names"
          expression (derive.ml[190,7331+48]..[190,7331+53])
            Pexp_ident "names" (derive.ml[190,7331+48]..[190,7331+53])
        <label> "f"
          expression (derive.ml[190,7331+57]..[190,7331+75])
            Pexp_ident "simple_exp_of_ctyp" (derive.ml[190,7331+57]..[190,7331+75])
      ]
  <label> ""
    expression (derive.ml[191,7408+30]..[191,7408+36])
      Pexp_ident "tyargs" (derive.ml[191,7408+30]..[191,7408+36])
]
                                                                  ]
                                                                  expression (derive.ml[192,7448+26]..[192,7448+46])
                                                                    Pexp_apply
                                                                    expression (derive.ml[192,7448+26]..[192,7448+36])
                                                                      Pexp_ident "mk_variant" (derive.ml[192,7448+26]..[192,7448+36])
                                                                    [
                                                                      <label> ""
expression (derive.ml[192,7448+37]..[192,7448+41])
  Pexp_ident "cons" (derive.ml[192,7448+37]..[192,7448+41])
                                                                      <label> ""
expression (derive.ml[192,7448+42]..[192,7448+46])
  Pexp_ident "exps" (derive.ml[192,7448+42]..[192,7448+46])
                                                                    ]
                                                            ]
                                                      ]
                                                      expression (derive.ml[193,7498+20]..[194,7547+78])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (derive.ml[193,7498+24]..[193,7498+25])
                                                              Ppat_var "e" (derive.ml[193,7498+24]..[193,7498+25])
                                                            expression (derive.ml[193,7498+28]..[193,7498+45])
                                                              Pexp_apply
                                                              expression (derive.ml[193,7498+28]..[193,7498+30])
                                                                Pexp_ident "mk" (derive.ml[193,7498+28]..[193,7498+30])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[193,7498+31]..[193,7498+45])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (derive.ml[193,7498+32]..[193,7498+36])
Pexp_ident "cons" (derive.ml[193,7498+32]..[193,7498+36])
                                                                      expression (derive.ml[193,7498+38]..[193,7498+44])
Pexp_ident "tyargs" (derive.ml[193,7498+38]..[193,7498+44])
                                                                    ]
                                                              ]
                                                        ]
                                                        expression (derive.ml[194,7547+20]..[194,7547+78])
                                                          Pexp_coerce
                                                          expression (derive.ml[194,7547+21]..[194,7547+63])
                                                            Pexp_variant "Case"
                                                            Some
                                                              expression (derive.ml[194,7547+27]..[194,7547+63])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[194,7547+28]..[194,7547+44])
                                                                    Pexp_coerce
                                                                    expression (derive.ml[194,7547+29]..[194,7547+30])
                                                                      Pexp_ident "p" (derive.ml[194,7547+29]..[194,7547+30])
                                                                    None
                                                                    core_type (derive.ml[194,7547+34]..[194,7547+43])
                                                                      Ptyp_constr "Astfn.pat" (derive.ml[194,7547+34]..[194,7547+43])
                                                                      []
                                                                  expression (derive.ml[194,7547+46]..[194,7547+62])
                                                                    Pexp_coerce
                                                                    expression (derive.ml[194,7547+47]..[194,7547+48])
                                                                      Pexp_ident "e" (derive.ml[194,7547+47]..[194,7547+48])
                                                                    None
                                                                    core_type (derive.ml[194,7547+52]..[194,7547+61])
                                                                      Ptyp_constr "Astfn.exp" (derive.ml[194,7547+52]..[194,7547+61])
                                                                      []
                                                                ]
                                                          None
                                                          core_type (derive.ml[194,7547+67]..[194,7547+77])
                                                            Ptyp_constr "Astfn.case" (derive.ml[194,7547+67]..[194,7547+77])
                                                            []
                                                core_type (derive.ml[195,7629+19]..[195,7629+23])
                                                  Ptyp_constr "case" (derive.ml[195,7629+19]..[195,7629+23])
                                                  []
                                          ]
                                    ]
                                    expression (derive.ml[196,7657+13]..[227,8970+37])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[196,7657+17]..[196,7657+23])
                                            Ppat_var "simple" (derive.ml[196,7657+17]..[196,7657+23])
                                          expression (derive.ml[197,7683+15]..[204,8068+24])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (derive.ml[198,7707+17]..[198,7707+30])
                                                  Ppat_constraint
                                                  pattern (derive.ml[198,7707+18]..[198,7707+21])
                                                    Ppat_var "lid" (derive.ml[198,7707+18]..[198,7707+21])
                                                  core_type (derive.ml[198,7707+24]..[198,7707+29])
                                                    Ptyp_constr "ident" (derive.ml[198,7707+24]..[198,7707+29])
                                                    []
                                                expression (derive.ml[199,7741+19]..[204,8068+24])
                                                  Pexp_constraint
                                                  expression (derive.ml[199,7741+20]..[203,7995+69])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[199,7741+24]..[199,7741+25])
                                                          Ppat_var "e" (derive.ml[199,7741+24]..[199,7741+25])
                                                        expression (derive.ml[199,7741+28]..[199,7741+71])
                                                          Pexp_apply
                                                          expression (derive.ml[199,7741+63]..[199,7741+65])
                                                            Pexp_ident "+>" (derive.ml[199,7741+63]..[199,7741+65])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[199,7741+29]..[199,7741+61])
                                                                Pexp_apply
                                                                expression (derive.ml[199,7741+29]..[199,7741+47])
                                                                  Pexp_ident "simple_exp_of_ctyp" (derive.ml[199,7741+29]..[199,7741+47])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[199,7741+48]..[199,7741+61])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[199,7741+49]..[199,7741+52])
Pexp_ident "lid" (derive.ml[199,7741+49]..[199,7741+52])
                                                                      None
                                                                      core_type (derive.ml[199,7741+56]..[199,7741+60])
Ptyp_constr "ctyp" (derive.ml[199,7741+56]..[199,7741+60])
[]
                                                                ]
                                                            <label> ""
                                                              expression (derive.ml[199,7741+66]..[199,7741+71])
                                                                Pexp_ident "names" (derive.ml[199,7741+66]..[199,7741+71])
                                                          ]
                                                    ]
                                                    expression (derive.ml[200,7816+20]..[203,7995+69])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[200,7816+24]..[200,7816+29])
                                                            Ppat_tuple
                                                            [
                                                              pattern (derive.ml[200,7816+25]..[200,7816+26])
                                                                Ppat_var "f" (derive.ml[200,7816+25]..[200,7816+26])
                                                              pattern (derive.ml[200,7816+27]..[200,7816+28])
                                                                Ppat_var "a" (derive.ml[200,7816+27]..[200,7816+28])
                                                            ]
                                                          expression (derive.ml[200,7816+32]..[200,7816+62])
                                                            Pexp_apply
                                                            expression (derive.ml[200,7816+32]..[200,7816+52])
                                                              Pexp_ident "Ast_basic.N.view_app" (derive.ml[200,7816+32]..[200,7816+52])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[200,7816+53]..[200,7816+55])
                                                                  Pexp_construct "[]" (derive.ml[200,7816+53]..[200,7816+55])
                                                                  None
                                                              <label> ""
                                                                expression (derive.ml[200,7816+56]..[200,7816+62])
                                                                  Pexp_ident "result" (derive.ml[200,7816+56]..[200,7816+62])
                                                            ]
                                                      ]
                                                      expression (derive.ml[201,7882+20]..[203,7995+69])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (derive.ml[201,7882+24]..[201,7882+29])
                                                              Ppat_var "annot" (derive.ml[201,7882+24]..[201,7882+29])
                                                            expression (derive.ml[202,7914+22]..[202,7914+77])
                                                              Pexp_apply
                                                              expression (derive.ml[202,7914+22]..[202,7914+34])
                                                                Pexp_ident "appl_of_list" (derive.ml[202,7914+22]..[202,7914+34])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[202,7914+36]..[202,7914+76])
                                                                    Pexp_construct "::" (derive.ml[202,7914+38]..[202,7914+40])
                                                                    Some
                                                                      expression (derive.ml[202,7914+36]..[202,7914+76])
Pexp_tuple
[
  expression (derive.ml[202,7914+36]..[202,7914+37])
    Pexp_ident "f" (derive.ml[202,7914+36]..[202,7914+37])
  expression (derive.ml[202,7914+42]..[202,7914+75])
    Pexp_apply
    expression (derive.ml[202,7914+42]..[202,7914+50])
      Pexp_ident "List.map" (derive.ml[202,7914+42]..[202,7914+50])
    [
      <label> ""
        expression (derive.ml[202,7914+52]..[202,7914+72])
          Pexp_function
          [
            <case>
              pattern (derive.ml[202,7914+63]..[202,7914+64])
                Ppat_any
              expression (derive.ml[202,7914+68]..[202,7914+72])
                Pexp_variant "Any"
                None
          ]
      <label> ""
        expression (derive.ml[202,7914+74]..[202,7914+75])
          Pexp_ident "a" (derive.ml[202,7914+74]..[202,7914+75])
    ]
]
                                                              ]
                                                        ]
                                                        expression (derive.ml[203,7995+20]..[203,7995+69])
                                                          Pexp_apply
                                                          expression (derive.ml[203,7995+20]..[203,7995+36])
                                                            Pexp_ident "gen_tuple_abbrev" (derive.ml[203,7995+20]..[203,7995+36])
                                                          [
                                                            <label> "arity"
                                                              expression (derive.ml[203,7995+38]..[203,7995+43])
                                                                Pexp_ident "arity" (derive.ml[203,7995+38]..[203,7995+43])
                                                            <label> "annot"
                                                              expression (derive.ml[203,7995+45]..[203,7995+50])
                                                                Pexp_ident "annot" (derive.ml[203,7995+45]..[203,7995+50])
                                                            <label> "destination"
                                                              expression (derive.ml[203,7995+52]..[203,7995+63])
                                                                Pexp_ident "destination" (derive.ml[203,7995+52]..[203,7995+63])
                                                            <label> ""
                                                              expression (derive.ml[203,7995+64]..[203,7995+67])
                                                                Pexp_ident "lid" (derive.ml[203,7995+64]..[203,7995+67])
                                                            <label> ""
                                                              expression (derive.ml[203,7995+68]..[203,7995+69])
                                                                Pexp_ident "e" (derive.ml[203,7995+68]..[203,7995+69])
                                                          ]
                                                  core_type (derive.ml[204,8068+19]..[204,8068+23])
                                                    Ptyp_constr "case" (derive.ml[204,8068+19]..[204,8068+23])
                                                    []
                                            ]
                                      ]
                                      expression (derive.ml[205,8096+13]..[227,8970+37])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (derive.ml[205,8096+17]..[205,8096+21])
                                              Ppat_var "info" (derive.ml[205,8096+17]..[205,8096+21])
                                            expression (derive.ml[206,8120+15]..[206,8120+71])
                                              Pexp_tuple
                                              [
                                                expression (derive.ml[206,8120+16]..[206,8120+23])
                                                  Pexp_construct "TyVrnEq" (derive.ml[206,8120+16]..[206,8120+23])
                                                  None
                                                expression (derive.ml[206,8120+26]..[206,8120+69])
                                                  Pexp_apply
                                                  expression (derive.ml[206,8120+26]..[206,8120+37])
                                                    Pexp_ident "List.length" (derive.ml[206,8120+26]..[206,8120+37])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[206,8120+39]..[206,8120+68])
                                                        Pexp_apply
                                                        expression (derive.ml[206,8120+39]..[206,8120+62])
                                                          Pexp_ident "Ast_basic.N.list_of_bar" (derive.ml[206,8120+39]..[206,8120+62])
                                                        [
                                                          <label> ""
                                                            expression (derive.ml[206,8120+63]..[206,8120+65])
                                                              Pexp_ident "ty" (derive.ml[206,8120+63]..[206,8120+65])
                                                          <label> ""
                                                            expression (derive.ml[206,8120+66]..[206,8120+68])
                                                              Pexp_construct "[]" (derive.ml[206,8120+66]..[206,8120+68])
                                                              None
                                                        ]
                                                  ]
                                              ]
                                        ]
                                        expression (derive.ml[207,8195+13]..[227,8970+37])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (derive.ml[207,8195+17]..[207,8195+19])
                                                Ppat_var "ls" (derive.ml[207,8195+17]..[207,8195+19])
                                              expression (derive.ml[207,8195+22]..[207,8195+42])
                                                Pexp_apply
                                                expression (derive.ml[207,8195+22]..[207,8195+39])
                                                  Pexp_ident "Ctyp.view_variant" (derive.ml[207,8195+22]..[207,8195+39])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[207,8195+40]..[207,8195+42])
                                                      Pexp_ident "ty" (derive.ml[207,8195+40]..[207,8195+42])
                                                ]
                                          ]
                                          expression (derive.ml[208,8241+13]..[227,8970+37])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[208,8241+17]..[208,8241+20])
                                                  Ppat_var "res" (derive.ml[208,8241+17]..[208,8241+20])
                                                expression (derive.ml[209,8264+15]..[226,8941+25])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[209,8264+19]..[209,8264+22])
                                                        Ppat_var "res" (derive.ml[209,8264+19]..[209,8264+22])
                                                      expression (derive.ml[210,8289+17]..[218,8610+75])
                                                        Pexp_apply
                                                        expression (derive.ml[210,8289+17]..[210,8289+31])
                                                          Pexp_ident "List.fold_left" (derive.ml[210,8289+17]..[210,8289+31])
                                                        [
                                                          <label> ""
                                                            expression (derive.ml[211,8321+20]..[218,8610+68])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (derive.ml[212,8350+22]..[212,8350+25])
                                                                    Ppat_var "acc" (derive.ml[212,8350+22]..[212,8350+25])
                                                                  expression (derive.ml[213,8379+25]..[218,8610+67])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (derive.ml[214,8413+27]..[214,8413+28])
  Ppat_var "x" (derive.ml[214,8413+27]..[214,8413+28])
expression (derive.ml[215,8445+30]..[218,8610+66])
  Pexp_match
  expression (derive.ml[215,8445+36]..[215,8445+37])
    Pexp_ident "x" (derive.ml[215,8445+36]..[215,8445+37])
  [
    <case>
      pattern (derive.ml[216,8488+32]..[216,8488+52])
        Ppat_variant "variant"
        Some
          pattern (derive.ml[216,8488+32]..[216,8488+52])
            Ppat_tuple
            [
              pattern (derive.ml[216,8488+42]..[216,8488+46])
                Ppat_var "cons" (derive.ml[216,8488+42]..[216,8488+46])
              pattern (derive.ml[216,8488+47]..[216,8488+51])
                Ppat_var "args" (derive.ml[216,8488+47]..[216,8488+51])
            ]
      expression (derive.ml[217,8544+34]..[217,8544+65])
        Pexp_construct "::" (derive.ml[217,8544+59]..[217,8544+61])
        Some
          expression (derive.ml[217,8544+34]..[217,8544+65])
            Pexp_tuple
            [
              expression (derive.ml[217,8544+35]..[217,8544+57])
                Pexp_apply
                expression (derive.ml[217,8544+35]..[217,8544+36])
                  Pexp_ident "f" (derive.ml[217,8544+35]..[217,8544+36])
                [
                  <label> ""
                    expression (derive.ml[217,8544+37]..[217,8544+57])
                      Pexp_tuple
                      [
                        expression (derive.ml[217,8544+39]..[217,8544+49])
                          Pexp_apply
                          expression (derive.ml[217,8544+43]..[217,8544+44])
                            Pexp_ident "^" (derive.ml[217,8544+43]..[217,8544+44])
                          [
                            <label> ""
                              expression (derive.ml[217,8544+39]..[217,8544+42])
                                Pexp_constant Const_string("`",None)
                            <label> ""
                              expression (derive.ml[217,8544+45]..[217,8544+49])
                                Pexp_ident "cons" (derive.ml[217,8544+45]..[217,8544+49])
                          ]
                        expression (derive.ml[217,8544+52]..[217,8544+56])
                          Pexp_ident "args" (derive.ml[217,8544+52]..[217,8544+56])
                      ]
                ]
              expression (derive.ml[217,8544+62]..[217,8544+65])
                Pexp_ident "acc" (derive.ml[217,8544+62]..[217,8544+65])
            ]
    <case>
      pattern (derive.ml[218,8610+32]..[218,8610+43])
        Ppat_variant "abbrev"
        Some
          pattern (derive.ml[218,8610+40]..[218,8610+43])
            Ppat_var "lid" (derive.ml[218,8610+40]..[218,8610+43])
      expression (derive.ml[218,8610+47]..[218,8610+66])
        Pexp_construct "::" (derive.ml[218,8610+60]..[218,8610+62])
        Some
          expression (derive.ml[218,8610+47]..[218,8610+66])
            Pexp_tuple
            [
              expression (derive.ml[218,8610+48]..[218,8610+58])
                Pexp_apply
                expression (derive.ml[218,8610+48]..[218,8610+54])
                  Pexp_ident "simple" (derive.ml[218,8610+48]..[218,8610+54])
                [
                  <label> ""
                    expression (derive.ml[218,8610+55]..[218,8610+58])
                      Pexp_ident "lid" (derive.ml[218,8610+55]..[218,8610+58])
                ]
              expression (derive.ml[218,8610+63]..[218,8610+66])
                Pexp_ident "acc" (derive.ml[218,8610+63]..[218,8610+66])
            ]
  ]
                                                                    ]
                                                              ]
                                                          <label> ""
                                                            expression (derive.ml[218,8610+70]..[218,8610+72])
                                                              Pexp_construct "[]" (derive.ml[218,8610+70]..[218,8610+72])
                                                              None
                                                          <label> ""
                                                            expression (derive.ml[218,8610+73]..[218,8610+75])
                                                              Pexp_ident "ls" (derive.ml[218,8610+73]..[218,8610+75])
                                                        ]
                                                  ]
                                                  expression (derive.ml[219,8689+15]..[226,8941+25])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[219,8689+19]..[219,8689+20])
                                                          Ppat_var "t" (derive.ml[219,8689+19]..[219,8689+20])
                                                        expression (derive.ml[220,8712+17]..[225,8912+25])
                                                          Pexp_ifthenelse
                                                          expression (derive.ml[220,8712+20]..[220,8712+60])
                                                            Pexp_apply
                                                            expression (derive.ml[220,8712+45]..[220,8712+47])
                                                              Pexp_ident "&&" (derive.ml[220,8712+45]..[220,8712+47])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[220,8712+21]..[220,8712+43])
                                                                  Pexp_apply
                                                                  expression (derive.ml[220,8712+39]..[220,8712+41])
                                                                    Pexp_ident ">=" (derive.ml[220,8712+39]..[220,8712+41])
                                                                  [
                                                                    <label> ""
                                                                      expression (derive.ml[220,8712+22]..[220,8712+37])
Pexp_apply
expression (derive.ml[220,8712+22]..[220,8712+33])
  Pexp_ident "List.length" (derive.ml[220,8712+22]..[220,8712+33])
[
  <label> ""
    expression (derive.ml[220,8712+34]..[220,8712+37])
      Pexp_ident "res" (derive.ml[220,8712+34]..[220,8712+37])
]
                                                                    <label> ""
                                                                      expression (derive.ml[220,8712+42]..[220,8712+43])
Pexp_constant Const_int 2
                                                                  ]
                                                              <label> ""
                                                                expression (derive.ml[220,8712+49]..[220,8712+59])
                                                                  Pexp_apply
                                                                  expression (derive.ml[220,8712+55]..[220,8712+57])
                                                                    Pexp_ident ">=" (derive.ml[220,8712+55]..[220,8712+57])
                                                                  [
                                                                    <label> ""
                                                                      expression (derive.ml[220,8712+49]..[220,8712+54])
Pexp_ident "arity" (derive.ml[220,8712+49]..[220,8712+54])
                                                                    <label> ""
                                                                      expression (derive.ml[220,8712+58]..[220,8712+59])
Pexp_constant Const_int 2
                                                                  ]
                                                            ]
                                                          expression (derive.ml[222,8795+19]..[224,8878+33])
                                                            Pexp_match
                                                            expression (derive.ml[222,8795+25]..[222,8795+37])
                                                              Pexp_apply
                                                              expression (derive.ml[222,8795+25]..[222,8795+32])
                                                                Pexp_ident "default" (derive.ml[222,8795+25]..[222,8795+32])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[222,8795+33]..[222,8795+37])
                                                                    Pexp_ident "info" (derive.ml[222,8795+33]..[222,8795+37])
                                                              ]
                                                            [
                                                              <case>
                                                                pattern (derive.ml[223,8838+21]..[223,8838+27])
                                                                  Ppat_construct "Some" (derive.ml[223,8838+21]..[223,8838+25])
                                                                  Some
                                                                    pattern (derive.ml[223,8838+26]..[223,8838+27])
                                                                      Ppat_var "x" (derive.ml[223,8838+26]..[223,8838+27])
                                                                expression (derive.ml[223,8838+31]..[223,8838+39])
                                                                  Pexp_construct "::" (derive.ml[223,8838+33]..[223,8838+35])
                                                                  Some
                                                                    expression (derive.ml[223,8838+31]..[223,8838+39])
                                                                      Pexp_tuple
                                                                      [
expression (derive.ml[223,8838+31]..[223,8838+32])
  Pexp_ident "x" (derive.ml[223,8838+31]..[223,8838+32])
expression (derive.ml[223,8838+36]..[223,8838+39])
  Pexp_ident "res" (derive.ml[223,8838+36]..[223,8838+39])
                                                                      ]
                                                              <case>
                                                                pattern (derive.ml[224,8878+21]..[224,8878+25])
                                                                  Ppat_construct "None" (derive.ml[224,8878+21]..[224,8878+25])
                                                                  None
                                                                expression (derive.ml[224,8878+30]..[224,8878+33])
                                                                  Pexp_ident "res" (derive.ml[224,8878+30]..[224,8878+33])
                                                            ]
                                                          Some
                                                            expression (derive.ml[225,8912+22]..[225,8912+25])
                                                              Pexp_ident "res" (derive.ml[225,8912+22]..[225,8912+25])
                                                    ]
                                                    expression (derive.ml[226,8941+15]..[226,8941+25])
                                                      Pexp_apply
                                                      expression (derive.ml[226,8941+15]..[226,8941+23])
                                                        Pexp_ident "List.rev" (derive.ml[226,8941+15]..[226,8941+23])
                                                      [
                                                        <label> ""
                                                          expression (derive.ml[226,8941+24]..[226,8941+25])
                                                            Pexp_ident "t" (derive.ml[226,8941+24]..[226,8941+25])
                                                      ]
                                            ]
                                            expression (derive.ml[227,8970+13]..[227,8970+37])
                                              Pexp_apply
                                              expression (derive.ml[227,8970+13]..[227,8970+26])
                                                Pexp_ident "ExpN.currying" (derive.ml[227,8970+13]..[227,8970+26])
                                              [
                                                <label> "arity"
                                                  expression (derive.ml[227,8970+28]..[227,8970+33])
                                                    Pexp_ident "arity" (derive.ml[227,8970+28]..[227,8970+33])
                                                <label> ""
                                                  expression (derive.ml[227,8970+34]..[227,8970+37])
                                                    Pexp_ident "res" (derive.ml[227,8970+34]..[227,8970+37])
                                              ]
                              ]
                      ]
    ]
  structure_item (derive.ml[228,9009+0]..[254,10037+67])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[228,9009+4]..[228,9009+13])
          Ppat_var "mk_prefix" (derive.ml[228,9009+4]..[228,9009+13])
        expression (derive.ml[229,9025+2]..[254,10037+67])
          Pexp_function
          [
            <case>
              pattern (derive.ml[230,9036+4]..[230,9036+28])
                Ppat_constraint
                pattern (derive.ml[230,9036+5]..[230,9036+9])
                  Ppat_var "vars" (derive.ml[230,9036+5]..[230,9036+9])
                core_type (derive.ml[230,9036+12]..[230,9036+27])
                  Ptyp_constr "opt_decl_params" (derive.ml[230,9036+12]..[230,9036+27])
                  []
              expression (derive.ml[231,9068+7]..[254,10037+66])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[232,9084+9]..[232,9084+20])
                      Ppat_constraint
                      pattern (derive.ml[232,9084+10]..[232,9084+13])
                        Ppat_var "acc" (derive.ml[232,9084+10]..[232,9084+13])
                      core_type (derive.ml[232,9084+16]..[232,9084+19])
                        Ptyp_constr "exp" (derive.ml[232,9084+16]..[232,9084+19])
                        []
                    expression (derive.ml[233,9108+16]..[233,9108+28])
                      Pexp_fun "?names"
                      Some
                        expression (derive.ml[233,9108+25]..[233,9108+27])
                          Pexp_construct "[]" (derive.ml[233,9108+25]..[233,9108+27])
                          None
                      pattern (derive.ml[233,9108+18]..[233,9108+23])
                        Ppat_var "names" (derive.ml[233,9108+18]..[233,9108+23])
                      expression (derive.ml[234,9141+18]..[234,9141+37])
                        Pexp_fun "left_type_variable"
                        None
                        pattern (derive.ml[234,9141+19]..[234,9141+37])
                          Ppat_var "left_type_variable" (derive.ml[234,9141+19]..[234,9141+37])
                        expression (derive.ml[235,9183+16]..[254,10037+65])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (derive.ml[235,9183+20]..[235,9183+24])
                                Ppat_var "varf" (derive.ml[235,9183+20]..[235,9183+24])
                              expression (derive.ml[235,9183+27]..[235,9183+61])
                                Pexp_apply
                                expression (derive.ml[235,9183+27]..[235,9183+42])
                                  Pexp_ident "basic_transform" (derive.ml[235,9183+27]..[235,9183+42])
                                [
                                  <label> ""
                                    expression (derive.ml[235,9183+43]..[235,9183+61])
                                      Pexp_ident "left_type_variable" (derive.ml[235,9183+43]..[235,9183+61])
                                ]
                          ]
                          expression (derive.ml[236,9248+16]..[254,10037+65])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (derive.ml[236,9248+20]..[236,9248+21])
                                  Ppat_var "f" (derive.ml[236,9248+20]..[236,9248+21])
                                expression (derive.ml[237,9272+18]..[249,9797+62])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (derive.ml[238,9299+20]..[238,9299+39])
                                        Ppat_constraint
                                        pattern (derive.ml[238,9299+21]..[238,9299+24])
                                          Ppat_var "var" (derive.ml[238,9299+21]..[238,9299+24])
                                        core_type (derive.ml[238,9299+27]..[238,9299+38])
                                          Ptyp_constr "decl_params" (derive.ml[238,9299+27]..[238,9299+38])
                                          []
                                      expression (derive.ml[239,9342+23]..[249,9797+61])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (derive.ml[240,9374+25]..[240,9374+28])
                                              Ppat_var "acc" (derive.ml[240,9374+25]..[240,9374+28])
                                            expression (derive.ml[241,9406+28]..[249,9797+60])
                                              Pexp_match
                                              expression (derive.ml[241,9406+34]..[241,9406+37])
                                                Pexp_ident "var" (derive.ml[241,9406+34]..[241,9406+37])
                                              [
                                                <case>
                                                  pattern (derive.ml[242,9449+30]..[242,9449+47])
                                                    Ppat_variant "Quote"
                                                    Some
                                                      pattern (derive.ml[242,9449+30]..[242,9449+47])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[242,9449+38]..[242,9449+39])
                                                            Ppat_any
                                                          pattern (derive.ml[242,9449+40]..[242,9449+46])
                                                            Ppat_variant "Lid"
                                                            Some
                                                              pattern (derive.ml[242,9449+45]..[242,9449+46])
                                                                Ppat_var "s" (derive.ml[242,9449+45]..[242,9449+46])
                                                        ]
                                                  expression (derive.ml[243,9500+32]..[246,9661+42])
                                                    Pexp_coerce
                                                    expression (derive.ml[243,9500+33]..[245,9580+76])
                                                      Pexp_variant "Fun"
                                                      Some
                                                        expression (derive.ml[244,9538+36]..[245,9580+75])
                                                          Pexp_variant "Case"
                                                          Some
                                                            expression (derive.ml[245,9580+38]..[245,9580+75])
                                                              Pexp_tuple
                                                              [
                                                                expression (derive.ml[245,9580+40]..[245,9580+53])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (derive.ml[245,9580+46]..[245,9580+52])
                                                                      Pexp_apply
                                                                      expression (derive.ml[245,9580+46]..[245,9580+50])
Pexp_ident "varf" (derive.ml[245,9580+46]..[245,9580+50])
                                                                      [
<label> ""
  expression (derive.ml[245,9580+51]..[245,9580+52])
    Pexp_ident "s" (derive.ml[245,9580+51]..[245,9580+52])
                                                                      ]
                                                                expression (derive.ml[245,9580+56]..[245,9580+74])
                                                                  Pexp_coerce
                                                                  expression (derive.ml[245,9580+57]..[245,9580+60])
                                                                    Pexp_ident "acc" (derive.ml[245,9580+57]..[245,9580+60])
                                                                  None
                                                                  core_type (derive.ml[245,9580+64]..[245,9580+73])
                                                                    Ptyp_constr "Astfn.exp" (derive.ml[245,9580+64]..[245,9580+73])
                                                                    []
                                                              ]
                                                    None
                                                    core_type (derive.ml[246,9661+32]..[246,9661+41])
                                                      Ptyp_constr "Astfn.exp" (derive.ml[246,9661+32]..[246,9661+41])
                                                      []
                                                <case>
                                                  pattern (derive.ml[247,9704+30]..[247,9704+31])
                                                    Ppat_var "t" (derive.ml[247,9704+30]..[247,9704+31])
                                                  expression (derive.ml[248,9739+32]..[249,9797+60])
                                                    Pexp_apply
                                                    expression (derive.ml[248,9739+32]..[248,9739+41])
                                                      Pexp_ident "failwithf" (derive.ml[248,9739+32]..[248,9739+41])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[248,9739+42]..[248,9739+57])
                                                          Pexp_constant Const_string("mk_prefix: %s",None)
                                                      <label> ""
                                                        expression (derive.ml[249,9797+35]..[249,9797+59])
                                                          Pexp_apply
                                                          expression (derive.ml[249,9797+35]..[249,9797+57])
                                                            Pexp_ident "ObjsN.dump_decl_params" (derive.ml[249,9797+35]..[249,9797+57])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[249,9797+58]..[249,9797+59])
                                                                Pexp_ident "t" (derive.ml[249,9797+58]..[249,9797+59])
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                            expression (derive.ml[250,9863+16]..[254,10037+65])
                              Pexp_match
                              expression (derive.ml[250,9863+22]..[250,9863+26])
                                Pexp_ident "vars" (derive.ml[250,9863+22]..[250,9863+26])
                              [
                                <case>
                                  pattern (derive.ml[251,9895+18]..[251,9895+23])
                                    Ppat_variant "None"
                                    None
                                  expression (derive.ml[251,9895+27]..[251,9895+47])
                                    Pexp_apply
                                    expression (derive.ml[251,9895+27]..[251,9895+37])
                                      Pexp_ident "ExpN.mkfun" (derive.ml[251,9895+27]..[251,9895+37])
                                    [
                                      <label> ""
                                        expression (derive.ml[251,9895+38]..[251,9895+43])
                                          Pexp_ident "names" (derive.ml[251,9895+38]..[251,9895+43])
                                      <label> ""
                                        expression (derive.ml[251,9895+44]..[251,9895+47])
                                          Pexp_ident "acc" (derive.ml[251,9895+44]..[251,9895+47])
                                    ]
                                <case>
                                  pattern (derive.ml[252,9943+18]..[252,9943+26])
                                    Ppat_variant "Some"
                                    Some
                                      pattern (derive.ml[252,9943+24]..[252,9943+26])
                                        Ppat_var "xs" (derive.ml[252,9943+24]..[252,9943+26])
                                  expression (derive.ml[253,9973+20]..[254,10037+65])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[253,9973+24]..[253,9973+28])
                                          Ppat_var "vars" (derive.ml[253,9973+24]..[253,9973+28])
                                        expression (derive.ml[253,9973+31]..[253,9973+60])
                                          Pexp_apply
                                          expression (derive.ml[253,9973+31]..[253,9973+54])
                                            Pexp_ident "Ast_basic.N.list_of_com" (derive.ml[253,9973+31]..[253,9973+54])
                                          [
                                            <label> ""
                                              expression (derive.ml[253,9973+55]..[253,9973+57])
                                                Pexp_ident "xs" (derive.ml[253,9973+55]..[253,9973+57])
                                            <label> ""
                                              expression (derive.ml[253,9973+58]..[253,9973+60])
                                                Pexp_construct "[]" (derive.ml[253,9973+58]..[253,9973+60])
                                                None
                                          ]
                                    ]
                                    expression (derive.ml[254,10037+20]..[254,10037+65])
                                      Pexp_apply
                                      expression (derive.ml[254,10037+20]..[254,10037+35])
                                        Pexp_ident "List.fold_right" (derive.ml[254,10037+20]..[254,10037+35])
                                      [
                                        <label> ""
                                          expression (derive.ml[254,10037+36]..[254,10037+37])
                                            Pexp_ident "f" (derive.ml[254,10037+36]..[254,10037+37])
                                        <label> ""
                                          expression (derive.ml[254,10037+38]..[254,10037+42])
                                            Pexp_ident "vars" (derive.ml[254,10037+38]..[254,10037+42])
                                        <label> ""
                                          expression (derive.ml[254,10037+44]..[254,10037+64])
                                            Pexp_apply
                                            expression (derive.ml[254,10037+44]..[254,10037+54])
                                              Pexp_ident "ExpN.mkfun" (derive.ml[254,10037+44]..[254,10037+54])
                                            [
                                              <label> ""
                                                expression (derive.ml[254,10037+55]..[254,10037+60])
                                                  Pexp_ident "names" (derive.ml[254,10037+55]..[254,10037+60])
                                              <label> ""
                                                expression (derive.ml[254,10037+61]..[254,10037+64])
                                                  Pexp_ident "acc" (derive.ml[254,10037+61]..[254,10037+64])
                                            ]
                                      ]
                              ]
                ]
          ]
    ]
  structure_item (derive.ml[255,10105+0]..[329,14242+63])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[255,10105+4]..[255,10105+16])
          Ppat_var "fun_of_tydcl" (derive.ml[255,10105+4]..[255,10105+16])
        expression (derive.ml[255,10105+17]..[329,14242+63])
          Pexp_fun "?names"
          Some
            expression (derive.ml[255,10105+26]..[255,10105+28])
              Pexp_construct "[]" (derive.ml[255,10105+26]..[255,10105+28])
              None
          pattern (derive.ml[255,10105+19]..[255,10105+24])
            Ppat_var "names" (derive.ml[255,10105+19]..[255,10105+24])
          expression (derive.ml[255,10105+31]..[329,14242+63])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[255,10105+40]..[255,10105+41])
                Pexp_constant Const_int 1
            pattern (derive.ml[255,10105+33]..[255,10105+38])
              Ppat_var "arity" (derive.ml[255,10105+33]..[255,10105+38])
            expression (derive.ml[255,10105+44]..[329,14242+63])
              Pexp_fun "left_type_variable"
              None
              pattern (derive.ml[255,10105+45]..[255,10105+63])
                Ppat_var "left_type_variable" (derive.ml[255,10105+45]..[255,10105+63])
              expression (derive.ml[255,10105+65]..[329,14242+63])
                Pexp_fun "mk_record"
                None
                pattern (derive.ml[255,10105+66]..[255,10105+75])
                  Ppat_var "mk_record" (derive.ml[255,10105+66]..[255,10105+75])
                expression (derive.ml[256,10182+2]..[329,14242+63])
                  Pexp_fun "result"
                  None
                  pattern (derive.ml[256,10182+3]..[256,10182+9])
                    Ppat_var "result" (derive.ml[256,10182+3]..[256,10182+9])
                  expression (derive.ml[257,10195+2]..[329,14242+63])
                    Pexp_function
                    [
                      <case>
                        pattern (derive.ml[258,10206+4]..[258,10206+22])
                          Ppat_var "simple_exp_of_ctyp" (derive.ml[258,10206+4]..[258,10206+22])
                        expression (derive.ml[259,10232+7]..[329,14242+62])
                          Pexp_function
                          [
                            <case>
                              pattern (derive.ml[260,10248+9]..[260,10248+20])
                                Ppat_var "exp_of_ctyp" (derive.ml[260,10248+9]..[260,10248+20])
                              expression (derive.ml[261,10272+12]..[329,14242+61])
                                Pexp_function
                                [
                                  <case>
                                    pattern (derive.ml[262,10293+14]..[262,10293+28])
                                      Ppat_var "exp_of_variant" (derive.ml[262,10293+14]..[262,10293+28])
                                    expression (derive.ml[263,10325+17]..[329,14242+60])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (derive.ml[264,10351+19]..[264,10351+24])
                                            Ppat_var "tydcl" (derive.ml[264,10351+19]..[264,10351+24])
                                          expression (derive.ml[265,10379+21]..[329,14242+60])
                                            Pexp_constraint
                                            expression (derive.ml[265,10379+23]..[329,14242+52])
                                              Pexp_match
                                              expression (derive.ml[265,10379+29]..[265,10379+47])
                                                Pexp_constraint
                                                expression (derive.ml[265,10379+30]..[265,10379+35])
                                                  Pexp_ident "tydcl" (derive.ml[265,10379+30]..[265,10379+35])
                                                core_type (derive.ml[265,10379+38]..[265,10379+46])
                                                  Ptyp_constr "typedecl" (derive.ml[265,10379+38]..[265,10379+46])
                                                  []
                                              [
                                                <case>
                                                  pattern (derive.ml[266,10432+25]..[266,10432+60])
                                                    Ppat_variant "TyDcl"
                                                    Some
                                                      pattern (derive.ml[266,10432+25]..[266,10432+60])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[266,10432+33]..[266,10432+34])
                                                            Ppat_any
                                                          pattern (derive.ml[266,10432+35]..[266,10432+41])
                                                            Ppat_var "tyvars" (derive.ml[266,10432+35]..[266,10432+41])
                                                          pattern (derive.ml[266,10432+42]..[266,10432+46])
                                                            Ppat_var "ctyp" (derive.ml[266,10432+42]..[266,10432+46])
                                                          pattern (derive.ml[266,10432+47]..[266,10432+59])
                                                            Ppat_var "_constraints" (derive.ml[266,10432+47]..[266,10432+59])
                                                        ]
                                                  expression (derive.ml[267,10496+28]..[326,14091+58])
                                                    Pexp_match
                                                    expression (derive.ml[267,10496+34]..[267,10496+38])
                                                      Pexp_ident "ctyp" (derive.ml[267,10496+34]..[267,10496+38])
                                                    [
                                                      <case>
                                                        pattern (derive.ml[268,10540+30]..[268,10540+64])
                                                          Ppat_or
                                                          pattern (derive.ml[268,10540+30]..[268,10540+47])
                                                            Ppat_variant "TyMan"
                                                            Some
                                                              pattern (derive.ml[268,10540+30]..[268,10540+47])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (derive.ml[268,10540+38]..[268,10540+39])
                                                                    Ppat_any
                                                                  pattern (derive.ml[268,10540+40]..[268,10540+41])
                                                                    Ppat_any
                                                                  pattern (derive.ml[268,10540+42]..[268,10540+46])
                                                                    Ppat_var "repr" (derive.ml[268,10540+42]..[268,10540+46])
                                                                ]
                                                          pattern (derive.ml[268,10540+48]..[268,10540+64])
                                                            Ppat_variant "TyRepr"
                                                            Some
                                                              pattern (derive.ml[268,10540+48]..[268,10540+64])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (derive.ml[268,10540+57]..[268,10540+58])
                                                                    Ppat_any
                                                                  pattern (derive.ml[268,10540+59]..[268,10540+63])
                                                                    Ppat_var "repr" (derive.ml[268,10540+59]..[268,10540+63])
                                                                ]
                                                        expression (derive.ml[269,10608+33]..[306,12886+63])
                                                          Pexp_match
                                                          expression (derive.ml[269,10608+39]..[269,10608+43])
                                                            Pexp_ident "repr" (derive.ml[269,10608+39]..[269,10608+43])
                                                          [
                                                            <case>
                                                              pattern (derive.ml[270,10657+35]..[270,10657+44])
                                                                Ppat_variant "Record"
                                                                Some
                                                                  pattern (derive.ml[270,10657+43]..[270,10657+44])
                                                                    Ppat_var "t" (derive.ml[270,10657+43]..[270,10657+44])
                                                              expression (derive.ml[271,10705+37]..[299,12476+55])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[271,10705+41]..[271,10705+45])
                                                                      Ppat_var "cols" (derive.ml[271,10705+41]..[271,10705+45])
                                                                    expression (derive.ml[271,10705+48]..[271,10705+69])
                                                                      Pexp_apply
                                                                      expression (derive.ml[271,10705+48]..[271,10705+67])
Pexp_ident "Ctyp.list_of_record" (derive.ml[271,10705+48]..[271,10705+67])
                                                                      [
<label> ""
  expression (derive.ml[271,10705+68]..[271,10705+69])
    Pexp_ident "t" (derive.ml[271,10705+68]..[271,10705+69])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[272,10778+37]..[299,12476+55])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (derive.ml[272,10778+41]..[272,10778+44])
Ppat_var "pat" (derive.ml[272,10778+41]..[272,10778+44])
                                                                      expression (derive.ml[273,10825+39]..[274,10895+43])
Pexp_coerce
expression (derive.ml[273,10825+40]..[273,10825+65])
  Pexp_apply
  expression (derive.ml[273,10825+40]..[273,10825+53])
    Pexp_ident "EpN.mk_record" (derive.ml[273,10825+40]..[273,10825+53])
  [
    <label> "arity"
      expression (derive.ml[273,10825+55]..[273,10825+60])
        Pexp_ident "arity" (derive.ml[273,10825+55]..[273,10825+60])
    <label> ""
      expression (derive.ml[273,10825+61]..[273,10825+65])
        Pexp_ident "cols" (derive.ml[273,10825+61]..[273,10825+65])
  ]
None
core_type (derive.ml[274,10895+39]..[274,10895+42])
  Ptyp_constr "pat" (derive.ml[274,10895+39]..[274,10895+42])
  []
                                                                  ]
                                                                  expression (derive.ml[275,10942+37]..[299,12476+55])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (derive.ml[275,10942+41]..[275,10942+45])
  Ppat_var "info" (derive.ml[275,10942+41]..[275,10942+45])
expression (derive.ml[276,10990+39]..[292,12026+65])
  Pexp_apply
  expression (derive.ml[276,10990+39]..[276,10990+48])
    Pexp_ident "List.mapi" (derive.ml[276,10990+39]..[276,10990+48])
  [
    <label> ""
      expression (derive.ml[277,11039+42]..[292,12026+59])
        Pexp_function
        [
          <case>
            pattern (derive.ml[278,11090+44]..[278,11090+45])
              Ppat_var "i" (derive.ml[278,11090+44]..[278,11090+45])
            expression (derive.ml[279,11139+47]..[292,12026+58])
              Pexp_function
              [
                <case>
                  pattern (derive.ml[280,11195+49]..[280,11195+50])
                    Ppat_var "x" (derive.ml[280,11195+49]..[280,11195+50])
                  expression (derive.ml[281,11249+52]..[292,12026+57])
                    Pexp_match
                    expression (derive.ml[281,11249+58]..[281,11249+72])
                      Pexp_constraint
                      expression (derive.ml[281,11249+59]..[281,11249+60])
                        Pexp_ident "x" (derive.ml[281,11249+59]..[281,11249+60])
                      core_type (derive.ml[281,11249+63]..[281,11249+71])
                        Ptyp_constr "Ctyp.col" (derive.ml[281,11249+63]..[281,11249+71])
                        []
                    [
                      <case>
                        pattern (derive.ml[282,11327+54]..[283,11403+60])
                          Ppat_record Closed
                          [
                            "label" (derive.ml[282,11327+56]..[282,11327+61])
                              pattern (derive.ml[282,11327+56]..[282,11327+61])
                                Ppat_var "label" (derive.ml[282,11327+56]..[282,11327+61])
                            "is_mutable" (derive.ml[282,11327+63]..[282,11327+73])
                              pattern (derive.ml[282,11327+63]..[282,11327+73])
                                Ppat_var "is_mutable" (derive.ml[282,11327+63]..[282,11327+73])
                            "ty" (derive.ml[283,11403+56]..[283,11403+58])
                              pattern (derive.ml[283,11403+56]..[283,11403+58])
                                Ppat_var "ty" (derive.ml[283,11403+56]..[283,11403+58])
                          ]
                        expression (derive.ml[284,11467+56]..[292,12026+57])
                          Pexp_record
                          [
                            "info" (derive.ml[285,11525+58]..[285,11525+62])
                              expression (derive.ml[286,11590+61]..[289,11822+67])
                                Pexp_apply
                                expression (derive.ml[286,11590+61]..[286,11590+69])
                                  Pexp_ident "mapi_exp" (derive.ml[286,11590+61]..[286,11590+69])
                                [
                                  <label> "arity"
                                    expression (derive.ml[286,11590+71]..[286,11590+76])
                                      Pexp_ident "arity" (derive.ml[286,11590+71]..[286,11590+76])
                                  <label> "names"
                                    expression (derive.ml[287,11667+64]..[287,11667+69])
                                      Pexp_ident "names" (derive.ml[287,11667+64]..[287,11667+69])
                                  <label> "f"
                                    expression (derive.ml[288,11737+66]..[288,11737+84])
                                      Pexp_ident "simple_exp_of_ctyp" (derive.ml[288,11737+66]..[288,11737+84])
                                  <label> ""
                                    expression (derive.ml[289,11822+63]..[289,11822+64])
                                      Pexp_ident "i" (derive.ml[289,11822+63]..[289,11822+64])
                                  <label> ""
                                    expression (derive.ml[289,11822+65]..[289,11822+67])
                                      Pexp_ident "ty" (derive.ml[289,11822+65]..[289,11822+67])
                                ]
                            "label" (derive.ml[290,11892+58]..[290,11892+63])
                              expression (derive.ml[290,11892+58]..[290,11892+63])
                                Pexp_ident "label" (derive.ml[290,11892+58]..[290,11892+63])
                            "is_mutable" (derive.ml[291,11957+58]..[291,11957+68])
                              expression (derive.ml[291,11957+58]..[291,11957+68])
                                Pexp_ident "is_mutable" (derive.ml[291,11957+58]..[291,11957+68])
                          ]
                          None
                    ]
              ]
        ]
    <label> ""
      expression (derive.ml[292,12026+61]..[292,12026+65])
        Pexp_ident "cols" (derive.ml[292,12026+61]..[292,12026+65])
  ]
                                                                    ]
                                                                    expression (derive.ml[293,12095+37]..[299,12476+55])
                                                                      Pexp_apply
                                                                      expression (derive.ml[293,12095+37]..[293,12095+46])
Pexp_ident "mk_prefix" (derive.ml[293,12095+37]..[293,12095+46])
                                                                      [
<label> "names"
  expression (derive.ml[293,12095+48]..[293,12095+53])
    Pexp_ident "names" (derive.ml[293,12095+48]..[293,12095+53])
<label> "left_type_variable"
  expression (derive.ml[293,12095+55]..[293,12095+73])
    Pexp_ident "left_type_variable" (derive.ml[293,12095+55]..[293,12095+73])
<label> ""
  expression (derive.ml[294,12169+39]..[294,12169+45])
    Pexp_ident "tyvars" (derive.ml[294,12169+39]..[294,12169+45])
<label> ""
  expression (derive.ml[295,12215+40]..[299,12476+54])
    Pexp_apply
    expression (derive.ml[295,12215+40]..[295,12215+53])
      Pexp_ident "ExpN.currying" (derive.ml[295,12215+40]..[295,12215+53])
    [
      <label> "arity"
        expression (derive.ml[295,12215+55]..[295,12215+60])
          Pexp_ident "arity" (derive.ml[295,12215+55]..[295,12215+60])
      <label> ""
        expression (derive.ml[296,12276+43]..[299,12476+53])
          Pexp_construct "::" (derive.ml[296,12276+43]..[299,12476+53])
          Some
            expression (derive.ml[296,12276+43]..[299,12476+53])
              Pexp_tuple
              [
                expression (derive.ml[296,12276+43]..[299,12476+53])
                  Pexp_coerce
                  expression (derive.ml[296,12276+44]..[298,12393+78])
                    Pexp_variant "Case"
                    Some
                      expression (derive.ml[297,12326+46]..[298,12393+78])
                        Pexp_tuple
                        [
                          expression (derive.ml[297,12326+47]..[297,12326+65])
                            Pexp_coerce
                            expression (derive.ml[297,12326+48]..[297,12326+51])
                              Pexp_ident "pat" (derive.ml[297,12326+48]..[297,12326+51])
                            None
                            core_type (derive.ml[297,12326+55]..[297,12326+64])
                              Ptyp_constr "Astfn.pat" (derive.ml[297,12326+55]..[297,12326+64])
                              []
                          expression (derive.ml[298,12393+48]..[298,12393+77])
                            Pexp_coerce
                            expression (derive.ml[298,12393+49]..[298,12393+63])
                              Pexp_apply
                              expression (derive.ml[298,12393+49]..[298,12393+58])
                                Pexp_ident "mk_record" (derive.ml[298,12393+49]..[298,12393+58])
                              [
                                <label> ""
                                  expression (derive.ml[298,12393+59]..[298,12393+63])
                                    Pexp_ident "info" (derive.ml[298,12393+59]..[298,12393+63])
                              ]
                            None
                            core_type (derive.ml[298,12393+67]..[298,12393+76])
                              Ptyp_constr "Astfn.exp" (derive.ml[298,12393+67]..[298,12393+76])
                              []
                        ]
                  None
                  core_type (derive.ml[299,12476+42]..[299,12476+52])
                    Ptyp_constr "Astfn.case" (derive.ml[299,12476+42]..[299,12476+52])
                    []
                expression (derive.ml[296,12276+43]..[299,12476+53])
                  Pexp_construct "[]" (derive.ml[296,12276+43]..[299,12476+53])
                  None
              ]
    ]
                                                                      ]
                                                            <case>
                                                              pattern (derive.ml[300,12532+35]..[300,12532+44])
                                                                Ppat_variant "Sum"
                                                                Some
                                                                  pattern (derive.ml[300,12532+40]..[300,12532+44])
                                                                    Ppat_var "ctyp" (derive.ml[300,12532+40]..[300,12532+44])
                                                              expression (derive.ml[301,12580+37]..[303,12723+51])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[301,12580+41]..[301,12580+46])
                                                                      Ppat_var "funct" (derive.ml[301,12580+41]..[301,12580+46])
                                                                    expression (derive.ml[301,12580+49]..[301,12580+65])
                                                                      Pexp_apply
                                                                      expression (derive.ml[301,12580+49]..[301,12580+60])
Pexp_ident "exp_of_ctyp" (derive.ml[301,12580+49]..[301,12580+60])
                                                                      [
<label> ""
  expression (derive.ml[301,12580+61]..[301,12580+65])
    Pexp_ident "ctyp" (derive.ml[301,12580+61]..[301,12580+65])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[302,12649+37]..[303,12723+51])
                                                                  Pexp_apply
                                                                  expression (derive.ml[302,12649+37]..[302,12649+46])
                                                                    Pexp_ident "mk_prefix" (derive.ml[302,12649+37]..[302,12649+46])
                                                                  [
                                                                    <label> "names"
                                                                      expression (derive.ml[302,12649+48]..[302,12649+53])
Pexp_ident "names" (derive.ml[302,12649+48]..[302,12649+53])
                                                                    <label> "left_type_variable"
                                                                      expression (derive.ml[302,12649+55]..[302,12649+73])
Pexp_ident "left_type_variable" (derive.ml[302,12649+55]..[302,12649+73])
                                                                    <label> ""
                                                                      expression (derive.ml[303,12723+39]..[303,12723+45])
Pexp_ident "tyvars" (derive.ml[303,12723+39]..[303,12723+45])
                                                                    <label> ""
                                                                      expression (derive.ml[303,12723+46]..[303,12723+51])
Pexp_ident "funct" (derive.ml[303,12723+46]..[303,12723+51])
                                                                  ]
                                                            <case>
                                                              pattern (derive.ml[304,12775+35]..[304,12775+36])
                                                                Ppat_var "t" (derive.ml[304,12775+35]..[304,12775+36])
                                                              expression (derive.ml[305,12815+37]..[306,12886+63])
                                                                Pexp_apply
                                                                expression (derive.ml[305,12815+37]..[305,12815+46])
                                                                  Pexp_ident "failwithf" (derive.ml[305,12815+37]..[305,12815+46])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[305,12815+47]..[305,12815+70])
                                                                      Pexp_constant Const_string("fun_of_tydcl outer %s",None)
                                                                  <label> ""
                                                                    expression (derive.ml[306,12886+40]..[306,12886+62])
                                                                      Pexp_apply
                                                                      expression (derive.ml[306,12886+40]..[306,12886+60])
Pexp_ident "ObjsN.dump_type_repr" (derive.ml[306,12886+40]..[306,12886+60])
                                                                      [
<label> ""
  expression (derive.ml[306,12886+61]..[306,12886+62])
    Pexp_ident "t" (derive.ml[306,12886+61]..[306,12886+62])
                                                                      ]
                                                                ]
                                                          ]
                                                      <case>
                                                        pattern (derive.ml[307,12951+30]..[307,12951+44])
                                                          Ppat_variant "TyEq"
                                                          Some
                                                            pattern (derive.ml[307,12951+30]..[307,12951+44])
                                                              Ppat_tuple
                                                              [
                                                                pattern (derive.ml[307,12951+37]..[307,12951+38])
                                                                  Ppat_any
                                                                pattern (derive.ml[307,12951+39]..[307,12951+43])
                                                                  Ppat_var "ctyp" (derive.ml[307,12951+39]..[307,12951+43])
                                                              ]
                                                        expression (derive.ml[308,12999+33]..[323,13929+58])
                                                          Pexp_match
                                                          expression (derive.ml[308,12999+39]..[308,12999+43])
                                                            Pexp_ident "ctyp" (derive.ml[308,12999+39]..[308,12999+43])
                                                          [
                                                            <case>
                                                              pattern (derive.ml[309,13048+35]..[310,13126+38])
                                                                Ppat_alias "x" (derive.ml[310,13126+37]..[310,13126+38])
                                                                pattern (derive.ml[309,13048+35]..[309,13048+74])
                                                                  Ppat_or
                                                                  pattern (derive.ml[309,13048+35]..[309,13048+67])
                                                                    Ppat_or
                                                                    pattern (derive.ml[309,13048+35]..[309,13048+58])
                                                                      Ppat_or
                                                                      pattern (derive.ml[309,13048+35]..[309,13048+49])
Ppat_or
pattern (derive.ml[309,13048+35]..[309,13048+42])
  Ppat_type
  "ident'" (derive.ml[309,13048+36]..[309,13048+42])
pattern (derive.ml[309,13048+43]..[309,13048+49])
  Ppat_variant "Par"
  Some
    pattern (derive.ml[309,13048+48]..[309,13048+49])
      Ppat_any
                                                                      pattern (derive.ml[309,13048+50]..[309,13048+58])
Ppat_variant "Quote"
Some
  pattern (derive.ml[309,13048+57]..[309,13048+58])
    Ppat_any
                                                                    pattern (derive.ml[309,13048+59]..[309,13048+67])
                                                                      Ppat_variant "Arrow"
                                                                      Some
pattern (derive.ml[309,13048+66]..[309,13048+67])
  Ppat_any
                                                                  pattern (derive.ml[309,13048+68]..[309,13048+74])
                                                                    Ppat_variant "App"
                                                                    Some
                                                                      pattern (derive.ml[309,13048+73]..[309,13048+74])
Ppat_any
                                                              expression (derive.ml[311,13168+37]..[315,13441+51])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[311,13168+41]..[311,13168+44])
                                                                      Ppat_var "exp" (derive.ml[311,13168+41]..[311,13168+44])
                                                                    expression (derive.ml[311,13168+47]..[311,13168+67])
                                                                      Pexp_apply
                                                                      expression (derive.ml[311,13168+47]..[311,13168+65])
Pexp_ident "simple_exp_of_ctyp" (derive.ml[311,13168+47]..[311,13168+65])
                                                                      [
<label> ""
  expression (derive.ml[311,13168+66]..[311,13168+67])
    Pexp_ident "x" (derive.ml[311,13168+66]..[311,13168+67])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[312,13239+37]..[315,13441+51])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (derive.ml[312,13239+41]..[312,13239+46])
Ppat_var "funct" (derive.ml[312,13239+41]..[312,13239+46])
                                                                      expression (derive.ml[313,13288+39]..[313,13288+75])
Pexp_apply
expression (derive.ml[313,13288+39]..[313,13288+54])
  Pexp_ident "ExpN.eta_expand" (derive.ml[313,13288+39]..[313,13288+54])
[
  <label> ""
    expression (derive.ml[313,13288+56]..[313,13288+68])
      Pexp_apply
      expression (derive.ml[313,13288+60]..[313,13288+62])
        Pexp_ident "+>" (derive.ml[313,13288+60]..[313,13288+62])
      [
        <label> ""
          expression (derive.ml[313,13288+56]..[313,13288+59])
            Pexp_ident "exp" (derive.ml[313,13288+56]..[313,13288+59])
        <label> ""
          expression (derive.ml[313,13288+63]..[313,13288+68])
            Pexp_ident "names" (derive.ml[313,13288+63]..[313,13288+68])
      ]
  <label> ""
    expression (derive.ml[313,13288+70]..[313,13288+75])
      Pexp_ident "arity" (derive.ml[313,13288+70]..[313,13288+75])
]
                                                                  ]
                                                                  expression (derive.ml[314,13367+37]..[315,13441+51])
                                                                    Pexp_apply
                                                                    expression (derive.ml[314,13367+37]..[314,13367+46])
                                                                      Pexp_ident "mk_prefix" (derive.ml[314,13367+37]..[314,13367+46])
                                                                    [
                                                                      <label> "names"
expression (derive.ml[314,13367+48]..[314,13367+53])
  Pexp_ident "names" (derive.ml[314,13367+48]..[314,13367+53])
                                                                      <label> "left_type_variable"
expression (derive.ml[314,13367+55]..[314,13367+73])
  Pexp_ident "left_type_variable" (derive.ml[314,13367+55]..[314,13367+73])
                                                                      <label> ""
expression (derive.ml[315,13441+39]..[315,13441+45])
  Pexp_ident "tyvars" (derive.ml[315,13441+39]..[315,13441+45])
                                                                      <label> ""
expression (derive.ml[315,13441+46]..[315,13441+51])
  Pexp_ident "funct" (derive.ml[315,13441+46]..[315,13441+51])
                                                                    ]
                                                            <case>
                                                              pattern (derive.ml[316,13493+35]..[317,13560+53])
                                                                Ppat_or
                                                                pattern (derive.ml[316,13493+35]..[316,13493+66])
                                                                  Ppat_or
                                                                  pattern (derive.ml[316,13493+35]..[316,13493+55])
                                                                    Ppat_or
                                                                    pattern (derive.ml[316,13493+35]..[316,13493+44])
                                                                      Ppat_variant "PolyEq"
                                                                      Some
pattern (derive.ml[316,13493+43]..[316,13493+44])
  Ppat_var "t" (derive.ml[316,13493+43]..[316,13493+44])
                                                                    pattern (derive.ml[316,13493+45]..[316,13493+55])
                                                                      Ppat_variant "PolySup"
                                                                      Some
pattern (derive.ml[316,13493+54]..[316,13493+55])
  Ppat_var "t" (derive.ml[316,13493+54]..[316,13493+55])
                                                                  pattern (derive.ml[316,13493+56]..[316,13493+66])
                                                                    Ppat_variant "PolyInf"
                                                                    Some
                                                                      pattern (derive.ml[316,13493+65]..[316,13493+66])
Ppat_var "t" (derive.ml[316,13493+65]..[316,13493+66])
                                                                pattern (derive.ml[317,13560+36]..[317,13560+53])
                                                                  Ppat_variant "PolyInfSup"
                                                                  Some
                                                                    pattern (derive.ml[317,13560+36]..[317,13560+53])
                                                                      Ppat_tuple
                                                                      [
pattern (derive.ml[317,13560+49]..[317,13560+50])
  Ppat_var "t" (derive.ml[317,13560+49]..[317,13560+50])
pattern (derive.ml[317,13560+51]..[317,13560+52])
  Ppat_any
                                                                      ]
                                                              expression (derive.ml[318,13617+37]..[320,13767+50])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[318,13617+41]..[318,13617+45])
                                                                      Ppat_var "case" (derive.ml[318,13617+41]..[318,13617+45])
                                                                    expression (derive.ml[318,13617+48]..[318,13617+72])
                                                                      Pexp_apply
                                                                      expression (derive.ml[318,13617+48]..[318,13617+62])
Pexp_ident "exp_of_variant" (derive.ml[318,13617+48]..[318,13617+62])
                                                                      [
<label> "result"
  expression (derive.ml[318,13617+64]..[318,13617+70])
    Pexp_ident "result" (derive.ml[318,13617+64]..[318,13617+70])
<label> ""
  expression (derive.ml[318,13617+71]..[318,13617+72])
    Pexp_ident "t" (derive.ml[318,13617+71]..[318,13617+72])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[319,13693+37]..[320,13767+50])
                                                                  Pexp_apply
                                                                  expression (derive.ml[319,13693+37]..[319,13693+46])
                                                                    Pexp_ident "mk_prefix" (derive.ml[319,13693+37]..[319,13693+46])
                                                                  [
                                                                    <label> "names"
                                                                      expression (derive.ml[319,13693+48]..[319,13693+53])
Pexp_ident "names" (derive.ml[319,13693+48]..[319,13693+53])
                                                                    <label> "left_type_variable"
                                                                      expression (derive.ml[319,13693+55]..[319,13693+73])
Pexp_ident "left_type_variable" (derive.ml[319,13693+55]..[319,13693+73])
                                                                    <label> ""
                                                                      expression (derive.ml[320,13767+39]..[320,13767+45])
Pexp_ident "tyvars" (derive.ml[320,13767+39]..[320,13767+45])
                                                                    <label> ""
                                                                      expression (derive.ml[320,13767+46]..[320,13767+50])
Pexp_ident "case" (derive.ml[320,13767+46]..[320,13767+50])
                                                                  ]
                                                            <case>
                                                              pattern (derive.ml[321,13818+35]..[321,13818+36])
                                                                Ppat_var "t" (derive.ml[321,13818+35]..[321,13818+36])
                                                              expression (derive.ml[322,13858+37]..[323,13929+58])
                                                                Pexp_apply
                                                                expression (derive.ml[322,13858+37]..[322,13858+46])
                                                                  Pexp_ident "failwithf" (derive.ml[322,13858+37]..[322,13858+46])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[322,13858+47]..[322,13858+70])
                                                                      Pexp_constant Const_string("fun_of_tydcl inner %s",None)
                                                                  <label> ""
                                                                    expression (derive.ml[323,13929+40]..[323,13929+57])
                                                                      Pexp_apply
                                                                      expression (derive.ml[323,13929+40]..[323,13929+55])
Pexp_ident "ObjsN.dump_ctyp" (derive.ml[323,13929+40]..[323,13929+55])
                                                                      [
<label> ""
  expression (derive.ml[323,13929+56]..[323,13929+57])
    Pexp_ident "t" (derive.ml[323,13929+56]..[323,13929+57])
                                                                      ]
                                                                ]
                                                          ]
                                                      <case>
                                                        pattern (derive.ml[324,13989+30]..[324,13989+31])
                                                          Ppat_var "t" (derive.ml[324,13989+30]..[324,13989+31])
                                                        expression (derive.ml[325,14024+32]..[326,14091+58])
                                                          Pexp_apply
                                                          expression (derive.ml[325,14024+32]..[325,14024+41])
                                                            Pexp_ident "failwithf" (derive.ml[325,14024+32]..[325,14024+41])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[325,14024+42]..[325,14024+66])
                                                                Pexp_constant Const_string("fun_of_tydcl middle %s",None)
                                                            <label> ""
                                                              expression (derive.ml[326,14091+35]..[326,14091+57])
                                                                Pexp_apply
                                                                expression (derive.ml[326,14091+35]..[326,14091+55])
                                                                  Pexp_ident "ObjsN.dump_type_info" (derive.ml[326,14091+35]..[326,14091+55])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[326,14091+56]..[326,14091+57])
                                                                      Pexp_ident "t" (derive.ml[326,14091+56]..[326,14091+57])
                                                                ]
                                                          ]
                                                    ]
                                                <case>
                                                  pattern (derive.ml[327,14151+25]..[327,14151+26])
                                                    Ppat_var "t" (derive.ml[327,14151+25]..[327,14151+26])
                                                  expression (derive.ml[328,14181+27]..[329,14242+52])
                                                    Pexp_apply
                                                    expression (derive.ml[328,14181+27]..[328,14181+36])
                                                      Pexp_ident "failwithf" (derive.ml[328,14181+27]..[328,14181+36])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[328,14181+37]..[328,14181+60])
                                                          Pexp_constant Const_string("fun_of_tydcl outer %s",None)
                                                      <label> ""
                                                        expression (derive.ml[329,14242+30]..[329,14242+51])
                                                          Pexp_apply
                                                          expression (derive.ml[329,14242+30]..[329,14242+49])
                                                            Pexp_ident "ObjsN.dump_typedecl" (derive.ml[329,14242+30]..[329,14242+49])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[329,14242+50]..[329,14242+51])
                                                                Pexp_ident "t" (derive.ml[329,14242+50]..[329,14242+51])
                                                          ]
                                                    ]
                                              ]
                                            core_type (derive.ml[329,14242+56]..[329,14242+59])
                                              Ptyp_constr "exp" (derive.ml[329,14242+56]..[329,14242+59])
                                              []
                                      ]
                                ]
                          ]
                    ]
    ]
  structure_item (derive.ml[330,14306+0]..[388,17368+81])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[330,14306+4]..[330,14306+17])
          Ppat_var "bind_of_tydcl" (derive.ml[330,14306+4]..[330,14306+17])
        expression (derive.ml[330,14306+18]..[388,17368+81])
          Pexp_fun "?cons_transform"
          None
          pattern (derive.ml[330,14306+19]..[330,14306+33])
            Ppat_var "cons_transform" (derive.ml[330,14306+19]..[330,14306+33])
          expression (derive.ml[331,14343+2]..[388,17368+81])
            Pexp_function
            [
              <case>
                pattern (derive.ml[332,14354+4]..[332,14354+22])
                  Ppat_var "simple_exp_of_ctyp" (derive.ml[332,14354+4]..[332,14354+22])
                expression (derive.ml[333,14380+11]..[333,14380+22])
                  Pexp_fun "?arity"
                  Some
                    expression (derive.ml[333,14380+20]..[333,14380+21])
                      Pexp_constant Const_int 1
                  pattern (derive.ml[333,14380+13]..[333,14380+18])
                    Ppat_var "arity" (derive.ml[333,14380+13]..[333,14380+18])
                  expression (derive.ml[334,14407+13]..[334,14407+25])
                    Pexp_fun "?names"
                    Some
                      expression (derive.ml[334,14407+22]..[334,14407+24])
                        Pexp_construct "[]" (derive.ml[334,14407+22]..[334,14407+24])
                        None
                    pattern (derive.ml[334,14407+15]..[334,14407+20])
                      Ppat_var "names" (derive.ml[334,14407+15]..[334,14407+20])
                    expression (derive.ml[335,14437+15]..[335,14437+39])
                      Pexp_fun "?destination"
                      Some
                        expression (derive.ml[335,14437+30]..[335,14437+38])
                          Pexp_construct "Str_item" (derive.ml[335,14437+30]..[335,14437+38])
                          None
                      pattern (derive.ml[335,14437+17]..[335,14437+28])
                        Ppat_var "destination" (derive.ml[335,14437+17]..[335,14437+28])
                      expression (derive.ml[336,14481+17]..[336,14481+23])
                        Pexp_fun "?annot"
                        None
                        pattern (derive.ml[336,14481+18]..[336,14481+23])
                          Ppat_var "annot" (derive.ml[336,14481+18]..[336,14481+23])
                        expression (derive.ml[337,14509+19]..[337,14509+27])
                          Pexp_fun "default"
                          None
                          pattern (derive.ml[337,14509+20]..[337,14509+27])
                            Ppat_var "default" (derive.ml[337,14509+20]..[337,14509+27])
                          expression (derive.ml[338,14541+21]..[338,14541+32])
                            Pexp_fun "mk_variant"
                            None
                            pattern (derive.ml[338,14541+22]..[338,14541+32])
                              Ppat_var "mk_variant" (derive.ml[338,14541+22]..[338,14541+32])
                            expression (derive.ml[339,14578+23]..[339,14578+72])
                              Pexp_fun "left_type_id"
                              None
                              pattern (derive.ml[339,14578+37]..[339,14578+72])
                                Ppat_constraint
                                pattern (derive.ml[339,14578+38]..[339,14578+50])
                                  Ppat_var "left_type_id" (derive.ml[339,14578+38]..[339,14578+50])
                                core_type (derive.ml[339,14578+53]..[339,14578+71])
                                  Ptyp_constr "basic_id_transform" (derive.ml[339,14578+53]..[339,14578+71])
                                  []
                              expression (derive.ml[341,14680+23]..[342,14745+64])
                                Pexp_fun "left_type_variable"
                                None
                                pattern (derive.ml[341,14680+43]..[342,14745+64])
                                  Ppat_constraint
                                  pattern (derive.ml[341,14680+44]..[341,14680+62])
                                    Ppat_var "left_type_variable" (derive.ml[341,14680+44]..[341,14680+62])
                                  core_type (derive.ml[342,14745+45]..[342,14745+63])
                                    Ptyp_constr "basic_id_transform" (derive.ml[342,14745+45]..[342,14745+63])
                                    []
                                expression (derive.ml[344,14837+27]..[344,14837+37])
                                  Pexp_fun "mk_record"
                                  None
                                  pattern (derive.ml[344,14837+28]..[344,14837+37])
                                    Ppat_var "mk_record" (derive.ml[344,14837+28]..[344,14837+37])
                                  expression (derive.ml[345,14879+25]..[388,17368+80])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (derive.ml[346,14913+27]..[346,14913+32])
                                          Ppat_var "tydcl" (derive.ml[346,14913+27]..[346,14913+32])
                                        expression (derive.ml[347,14949+29]..[388,17368+80])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (derive.ml[347,14949+33]..[347,14949+42])
                                                Ppat_var "tctor_var" (derive.ml[347,14949+33]..[347,14949+42])
                                              expression (derive.ml[347,14949+45]..[347,14949+73])
                                                Pexp_apply
                                                expression (derive.ml[347,14949+45]..[347,14949+60])
                                                  Pexp_ident "basic_transform" (derive.ml[347,14949+45]..[347,14949+60])
                                                [
                                                  <label> ""
                                                    expression (derive.ml[347,14949+61]..[347,14949+73])
                                                      Pexp_ident "left_type_id" (derive.ml[347,14949+61]..[347,14949+73])
                                                ]
                                          ]
                                          expression (derive.ml[348,15026+29]..[388,17368+80])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[348,15026+33]..[348,15026+43])
                                                  Ppat_tuple
                                                  [
                                                    pattern (derive.ml[348,15026+34]..[348,15026+38])
                                                      Ppat_var "name" (derive.ml[348,15026+34]..[348,15026+38])
                                                    pattern (derive.ml[348,15026+39]..[348,15026+42])
                                                      Ppat_var "len" (derive.ml[348,15026+39]..[348,15026+42])
                                                  ]
                                                expression (derive.ml[348,15026+46]..[348,15026+77])
                                                  Pexp_apply
                                                  expression (derive.ml[348,15026+46]..[348,15026+71])
                                                    Pexp_ident "Ctyp.name_length_of_tydcl" (derive.ml[348,15026+46]..[348,15026+71])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[348,15026+72]..[348,15026+77])
                                                        Pexp_ident "tydcl" (derive.ml[348,15026+72]..[348,15026+77])
                                                  ]
                                            ]
                                            expression (derive.ml[349,15107+29]..[388,17368+80])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (derive.ml[349,15107+33]..[349,15107+38])
                                                    Ppat_var "fname" (derive.ml[349,15107+33]..[349,15107+38])
                                                  expression (derive.ml[349,15107+41]..[349,15107+55])
                                                    Pexp_apply
                                                    expression (derive.ml[349,15107+41]..[349,15107+50])
                                                      Pexp_ident "tctor_var" (derive.ml[349,15107+41]..[349,15107+50])
                                                    [
                                                      <label> ""
                                                        expression (derive.ml[349,15107+51]..[349,15107+55])
                                                          Pexp_ident "name" (derive.ml[349,15107+51]..[349,15107+55])
                                                    ]
                                              ]
                                              expression (derive.ml[350,15166+29]..[388,17368+80])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (derive.ml[350,15166+33]..[350,15166+45])
                                                      Ppat_tuple
                                                      [
                                                        pattern (derive.ml[350,15166+34]..[350,15166+37])
                                                          Ppat_var "_ty" (derive.ml[350,15166+34]..[350,15166+37])
                                                        pattern (derive.ml[350,15166+38]..[350,15166+44])
                                                          Ppat_var "result" (derive.ml[350,15166+38]..[350,15166+44])
                                                      ]
                                                    expression (derive.ml[351,15214+31]..[352,15287+70])
                                                      Pexp_apply
                                                      expression (derive.ml[351,15214+31]..[351,15214+58])
                                                        Pexp_ident "Ctyp.mk_method_type_of_name" (derive.ml[351,15214+31]..[351,15214+58])
                                                      [
                                                        <label> "number"
                                                          expression (derive.ml[351,15214+67]..[351,15214+72])
                                                            Pexp_ident "arity" (derive.ml[351,15214+67]..[351,15214+72])
                                                        <label> "prefix"
                                                          expression (derive.ml[352,15287+41]..[352,15287+46])
                                                            Pexp_ident "names" (derive.ml[352,15287+41]..[352,15287+46])
                                                        <label> ""
                                                          expression (derive.ml[352,15287+47]..[352,15287+58])
                                                            Pexp_tuple
                                                            [
                                                              expression (derive.ml[352,15287+48]..[352,15287+52])
                                                                Pexp_ident "name" (derive.ml[352,15287+48]..[352,15287+52])
                                                              expression (derive.ml[352,15287+54]..[352,15287+57])
                                                                Pexp_ident "len" (derive.ml[352,15287+54]..[352,15287+57])
                                                            ]
                                                        <label> ""
                                                          expression (derive.ml[352,15287+59]..[352,15287+70])
                                                            Pexp_ident "destination" (derive.ml[352,15287+59]..[352,15287+70])
                                                      ]
                                                ]
                                                expression (derive.ml[353,15361+29]..[388,17368+80])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[353,15361+33]..[353,15361+47])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[353,15361+34]..[353,15361+39])
                                                            Ppat_var "annot" (derive.ml[353,15361+34]..[353,15361+39])
                                                          pattern (derive.ml[353,15361+40]..[353,15361+46])
                                                            Ppat_var "result" (derive.ml[353,15361+40]..[353,15361+46])
                                                        ]
                                                      expression (derive.ml[354,15411+31]..[357,15559+70])
                                                        Pexp_match
                                                        expression (derive.ml[354,15411+37]..[354,15411+42])
                                                          Pexp_ident "annot" (derive.ml[354,15411+37]..[354,15411+42])
                                                        [
                                                          <case>
                                                            pattern (derive.ml[355,15459+33]..[355,15459+37])
                                                              Ppat_construct "None" (derive.ml[355,15459+33]..[355,15459+37])
                                                              None
                                                            expression (derive.ml[355,15459+42]..[355,15459+56])
                                                              Pexp_tuple
                                                              [
                                                                expression (derive.ml[355,15459+43]..[355,15459+47])
                                                                  Pexp_construct "None" (derive.ml[355,15459+43]..[355,15459+47])
                                                                  None
                                                                expression (derive.ml[355,15459+49]..[355,15459+55])
                                                                  Pexp_ident "result" (derive.ml[355,15459+49]..[355,15459+55])
                                                              ]
                                                          <case>
                                                            pattern (derive.ml[356,15516+33]..[356,15516+39])
                                                              Ppat_construct "Some" (derive.ml[356,15516+33]..[356,15516+37])
                                                              Some
                                                                pattern (derive.ml[356,15516+38]..[356,15516+39])
                                                                  Ppat_var "f" (derive.ml[356,15516+38]..[356,15516+39])
                                                            expression (derive.ml[357,15559+35]..[357,15559+70])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (derive.ml[357,15559+39]..[357,15559+44])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (derive.ml[357,15559+40]..[357,15559+41])
Ppat_var "a" (derive.ml[357,15559+40]..[357,15559+41])
                                                                      pattern (derive.ml[357,15559+42]..[357,15559+43])
Ppat_var "b" (derive.ml[357,15559+42]..[357,15559+43])
                                                                    ]
                                                                  expression (derive.ml[357,15559+47]..[357,15559+53])
                                                                    Pexp_apply
                                                                    expression (derive.ml[357,15559+47]..[357,15559+48])
                                                                      Pexp_ident "f" (derive.ml[357,15559+47]..[357,15559+48])
                                                                    [
                                                                      <label> ""
expression (derive.ml[357,15559+49]..[357,15559+53])
  Pexp_ident "name" (derive.ml[357,15559+49]..[357,15559+53])
                                                                    ]
                                                              ]
                                                              expression (derive.ml[357,15559+57]..[357,15559+70])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[357,15559+59]..[357,15559+65])
                                                                    Pexp_construct "Some" (derive.ml[357,15559+59]..[357,15559+63])
                                                                    Some
                                                                      expression (derive.ml[357,15559+64]..[357,15559+65])
Pexp_ident "a" (derive.ml[357,15559+64]..[357,15559+65])
                                                                  expression (derive.ml[357,15559+68]..[357,15559+69])
                                                                    Pexp_ident "b" (derive.ml[357,15559+68]..[357,15559+69])
                                                                ]
                                                        ]
                                                  ]
                                                  expression (derive.ml[358,15633+29]..[388,17368+80])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[358,15633+33]..[358,15633+40])
                                                          Ppat_var "fun_exp" (derive.ml[358,15633+33]..[358,15633+40])
                                                        expression (derive.ml[359,15676+31]..[377,16810+45])
                                                          Pexp_ifthenelse
                                                          expression (derive.ml[359,15676+34]..[359,15676+65])
                                                            Pexp_apply
                                                            expression (derive.ml[359,15676+38]..[359,15676+40])
                                                              Pexp_ident "@@" (derive.ml[359,15676+38]..[359,15676+40])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[359,15676+34]..[359,15676+37])
                                                                  Pexp_ident "not" (derive.ml[359,15676+34]..[359,15676+37])
                                                              <label> ""
                                                                expression (derive.ml[359,15676+42]..[359,15676+64])
                                                                  Pexp_apply
                                                                  expression (derive.ml[359,15676+42]..[359,15676+58])
                                                                    Pexp_ident "Ctyp.is_abstract" (derive.ml[359,15676+42]..[359,15676+58])
                                                                  [
                                                                    <label> ""
                                                                      expression (derive.ml[359,15676+59]..[359,15676+64])
Pexp_ident "tydcl" (derive.ml[359,15676+59]..[359,15676+64])
                                                                  ]
                                                            ]
                                                          expression (derive.ml[361,15778+33]..[368,16263+76])
                                                            Pexp_apply
                                                            expression (derive.ml[361,15778+33]..[361,15778+45])
                                                              Pexp_ident "fun_of_tydcl" (derive.ml[361,15778+33]..[361,15778+45])
                                                            [
                                                              <label> "names"
                                                                expression (derive.ml[361,15778+47]..[361,15778+52])
                                                                  Pexp_ident "names" (derive.ml[361,15778+47]..[361,15778+52])
                                                              <label> "arity"
                                                                expression (derive.ml[361,15778+54]..[361,15778+59])
                                                                  Pexp_ident "arity" (derive.ml[361,15778+54]..[361,15778+59])
                                                              <label> "left_type_variable"
                                                                expression (derive.ml[362,15838+36]..[362,15838+54])
                                                                  Pexp_ident "left_type_variable" (derive.ml[362,15838+36]..[362,15838+54])
                                                              <label> "mk_record"
                                                                expression (derive.ml[362,15838+56]..[362,15838+65])
                                                                  Pexp_ident "mk_record" (derive.ml[362,15838+56]..[362,15838+65])
                                                              <label> "result"
                                                                expression (derive.ml[362,15838+67]..[362,15838+73])
                                                                  Pexp_ident "result" (derive.ml[362,15838+67]..[362,15838+73])
                                                              <label> ""
                                                                expression (derive.ml[363,15912+35]..[363,15912+53])
                                                                  Pexp_ident "simple_exp_of_ctyp" (derive.ml[363,15912+35]..[363,15912+53])
                                                              <label> ""
                                                                expression (derive.ml[364,15966+36]..[365,16044+77])
                                                                  Pexp_apply
                                                                  expression (derive.ml[364,15966+36]..[364,15966+47])
                                                                    Pexp_ident "exp_of_ctyp" (derive.ml[364,15966+36]..[364,15966+47])
                                                                  [
                                                                    <label> "?cons_transform"
                                                                      expression (derive.ml[364,15966+48]..[364,15966+63])
Pexp_ident "cons_transform" (derive.ml[364,15966+48]..[364,15966+63])
                                                                    <label> "arity"
                                                                      expression (derive.ml[364,15966+65]..[364,15966+70])
Pexp_ident "arity" (derive.ml[364,15966+65]..[364,15966+70])
                                                                    <label> "names"
                                                                      expression (derive.ml[364,15966+72]..[364,15966+77])
Pexp_ident "names" (derive.ml[364,15966+72]..[364,15966+77])
                                                                    <label> "default"
                                                                      expression (derive.ml[365,16044+39]..[365,16044+46])
Pexp_ident "default" (derive.ml[365,16044+39]..[365,16044+46])
                                                                    <label> "mk_variant"
                                                                      expression (derive.ml[365,16044+48]..[365,16044+58])
Pexp_ident "mk_variant" (derive.ml[365,16044+48]..[365,16044+58])
                                                                    <label> ""
                                                                      expression (derive.ml[365,16044+59]..[365,16044+77])
Pexp_ident "simple_exp_of_ctyp" (derive.ml[365,16044+59]..[365,16044+77])
                                                                  ]
                                                              <label> ""
                                                                expression (derive.ml[366,16123+36]..[368,16263+69])
                                                                  Pexp_apply
                                                                  expression (derive.ml[366,16123+36]..[366,16123+50])
                                                                    Pexp_ident "exp_of_variant" (derive.ml[366,16123+36]..[366,16123+50])
                                                                  [
                                                                    <label> "?cons_transform"
                                                                      expression (derive.ml[366,16123+51]..[366,16123+66])
Pexp_ident "cons_transform" (derive.ml[366,16123+51]..[366,16123+66])
                                                                    <label> "arity"
                                                                      expression (derive.ml[366,16123+68]..[366,16123+73])
Pexp_ident "arity" (derive.ml[366,16123+68]..[366,16123+73])
                                                                    <label> "names"
                                                                      expression (derive.ml[367,16197+39]..[367,16197+44])
Pexp_ident "names" (derive.ml[367,16197+39]..[367,16197+44])
                                                                    <label> "default"
                                                                      expression (derive.ml[367,16197+46]..[367,16197+53])
Pexp_ident "default" (derive.ml[367,16197+46]..[367,16197+53])
                                                                    <label> "mk_variant"
                                                                      expression (derive.ml[367,16197+55]..[367,16197+65])
Pexp_ident "mk_variant" (derive.ml[367,16197+55]..[367,16197+65])
                                                                    <label> "destination"
                                                                      expression (derive.ml[368,16263+39]..[368,16263+50])
Pexp_ident "destination" (derive.ml[368,16263+39]..[368,16263+50])
                                                                    <label> ""
                                                                      expression (derive.ml[368,16263+51]..[368,16263+69])
Pexp_ident "simple_exp_of_ctyp" (derive.ml[368,16263+51]..[368,16263+69])
                                                                  ]
                                                              <label> ""
                                                                expression (derive.ml[368,16263+71]..[368,16263+76])
                                                                  Pexp_ident "tydcl" (derive.ml[368,16263+71]..[368,16263+76])
                                                            ]
                                                          Some
                                                            expression (derive.ml[370,16376+33]..[377,16810+45])
                                                              Pexp_sequence
                                                              expression (derive.ml[370,16376+34]..[372,16515+66])
                                                                Pexp_apply
                                                                expression (derive.ml[372,16515+36]..[372,16515+38])
                                                                  Pexp_ident "@@" (derive.ml[372,16515+36]..[372,16515+38])
                                                                [
                                                                  <label> ""
                                                                    expression (derive.ml[370,16376+35]..[371,16419+94])
                                                                      Pexp_apply
                                                                      expression (derive.ml[370,16376+35]..[370,16376+42])
Pexp_ident "eprintf" (derive.ml[370,16376+35]..[370,16376+42])
                                                                      [
<label> ""
  expression (derive.ml[371,16419+37]..[371,16419+94])
    Pexp_constant Const_string("Warning: %s as a abstract type no structure generated\n",None)
                                                                      ]
                                                                  <label> ""
                                                                    expression (derive.ml[372,16515+40]..[372,16515+65])
                                                                      Pexp_apply
                                                                      expression (derive.ml[372,16515+40]..[372,16515+59])
Pexp_ident "ObjsN.dump_typedecl" (derive.ml[372,16515+40]..[372,16515+59])
                                                                      [
<label> ""
  expression (derive.ml[372,16515+60]..[372,16515+65])
    Pexp_ident "tydcl" (derive.ml[372,16515+60]..[372,16515+65])
                                                                      ]
                                                                ]
                                                              expression (derive.ml[370,16376+33]..[377,16810+45])
                                                                Pexp_coerce
                                                                expression (derive.ml[373,16583+35]..[376,16725+80])
                                                                  Pexp_variant "App"
                                                                  Some
                                                                    expression (derive.ml[374,16623+37]..[376,16725+80])
                                                                      Pexp_tuple
                                                                      [
expression (derive.ml[374,16623+39]..[374,16623+54])
  Pexp_variant "Lid"
  Some
    expression (derive.ml[374,16623+44]..[374,16623+54])
      Pexp_constant Const_string("failwith",None)
expression (derive.ml[375,16680+40]..[376,16725+78])
  Pexp_variant "Str"
  Some
    expression (derive.ml[376,16725+42]..[376,16725+78])
      Pexp_constant Const_string("Abstract data type not implemented",None)
                                                                      ]
                                                                None
                                                                core_type (derive.ml[377,16810+34]..[377,16810+43])
                                                                  Ptyp_constr "Astfn.exp" (derive.ml[377,16810+34]..[377,16810+43])
                                                                  []
                                                    ]
                                                    expression (derive.ml[378,16859+30]..[388,17368+79])
                                                      Pexp_match
                                                      expression (derive.ml[378,16859+36]..[378,16859+41])
                                                        Pexp_ident "annot" (derive.ml[378,16859+36]..[378,16859+41])
                                                      [
                                                        <case>
                                                          pattern (derive.ml[379,16906+32]..[379,16906+36])
                                                            Ppat_construct "None" (derive.ml[379,16906+32]..[379,16906+36])
                                                            None
                                                          expression (derive.ml[380,16947+34]..[382,17068+45])
                                                            Pexp_coerce
                                                            expression (derive.ml[380,16947+35]..[381,16988+75])
                                                              Pexp_variant "Bind"
                                                              Some
                                                                expression (derive.ml[381,16988+37]..[381,16988+75])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (derive.ml[381,16988+39]..[381,16988+49])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (derive.ml[381,16988+44]..[381,16988+49])
  Pexp_ident "fname" (derive.ml[381,16988+44]..[381,16988+49])
                                                                    expression (derive.ml[381,16988+52]..[381,16988+74])
                                                                      Pexp_coerce
                                                                      expression (derive.ml[381,16988+53]..[381,16988+60])
Pexp_ident "fun_exp" (derive.ml[381,16988+53]..[381,16988+60])
                                                                      None
                                                                      core_type (derive.ml[381,16988+64]..[381,16988+73])
Ptyp_constr "Astfn.exp" (derive.ml[381,16988+64]..[381,16988+73])
[]
                                                                  ]
                                                            None
                                                            core_type (derive.ml[382,17068+34]..[382,17068+44])
                                                              Ptyp_constr "Astfn.bind" (derive.ml[382,17068+34]..[382,17068+44])
                                                              []
                                                        <case>
                                                          pattern (derive.ml[383,17114+32]..[383,17114+38])
                                                            Ppat_construct "Some" (derive.ml[383,17114+32]..[383,17114+36])
                                                            Some
                                                              pattern (derive.ml[383,17114+37]..[383,17114+38])
                                                                Ppat_var "x" (derive.ml[383,17114+37]..[383,17114+38])
                                                          expression (derive.ml[384,17156+34]..[388,17368+79])
                                                            Pexp_coerce
                                                            expression (derive.ml[384,17156+35]..[388,17368+64])
                                                              Pexp_variant "Bind"
                                                              Some
                                                                expression (derive.ml[385,17197+37]..[388,17368+64])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (derive.ml[385,17197+39]..[385,17197+49])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (derive.ml[385,17197+44]..[385,17197+49])
  Pexp_ident "fname" (derive.ml[385,17197+44]..[385,17197+49])
                                                                    expression (derive.ml[386,17249+40]..[388,17368+62])
                                                                      Pexp_variant "Constraint"
                                                                      Some
expression (derive.ml[387,17301+42]..[388,17368+62])
  Pexp_tuple
  [
    expression (derive.ml[387,17301+43]..[387,17301+65])
      Pexp_coerce
      expression (derive.ml[387,17301+44]..[387,17301+51])
        Pexp_ident "fun_exp" (derive.ml[387,17301+44]..[387,17301+51])
      None
      core_type (derive.ml[387,17301+55]..[387,17301+64])
        Ptyp_constr "Astfn.exp" (derive.ml[387,17301+55]..[387,17301+64])
        []
    expression (derive.ml[388,17368+44]..[388,17368+61])
      Pexp_coerce
      expression (derive.ml[388,17368+45]..[388,17368+46])
        Pexp_ident "x" (derive.ml[388,17368+45]..[388,17368+46])
      None
      core_type (derive.ml[388,17368+50]..[388,17368+60])
        Ptyp_constr "Astfn.ctyp" (derive.ml[388,17368+50]..[388,17368+60])
        []
  ]
                                                                  ]
                                                            None
                                                            core_type (derive.ml[388,17368+68]..[388,17368+78])
                                                              Ptyp_constr "Astfn.bind" (derive.ml[388,17368+68]..[388,17368+78])
                                                              []
                                                      ]
                                    ]
            ]
    ]
  structure_item (derive.ml[389,17450+0]..[443,20089+38])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[389,17450+4]..[389,17450+17])
          Ppat_var "stru_of_mtyps" (derive.ml[389,17450+4]..[389,17450+17])
        expression (derive.ml[389,17450+18]..[443,20089+38])
          Pexp_fun "?module_name"
          None
          pattern (derive.ml[389,17450+19]..[389,17450+30])
            Ppat_var "module_name" (derive.ml[389,17450+19]..[389,17450+30])
          expression (derive.ml[389,17450+32]..[443,20089+38])
            Pexp_fun "?cons_transform"
            None
            pattern (derive.ml[389,17450+33]..[389,17450+47])
              Ppat_var "cons_transform" (derive.ml[389,17450+33]..[389,17450+47])
            expression (derive.ml[389,17450+49]..[443,20089+38])
              Pexp_fun "?annot"
              None
              pattern (derive.ml[389,17450+50]..[389,17450+55])
                Ppat_var "annot" (derive.ml[389,17450+50]..[389,17450+55])
              expression (derive.ml[389,17450+57]..[443,20089+38])
                Pexp_fun "?arity"
                None
                pattern (derive.ml[389,17450+58]..[389,17450+63])
                  Ppat_var "arity" (derive.ml[389,17450+58]..[389,17450+63])
                expression (derive.ml[389,17450+65]..[443,20089+38])
                  Pexp_fun "?names"
                  None
                  pattern (derive.ml[389,17450+66]..[389,17450+71])
                    Ppat_var "names" (derive.ml[389,17450+66]..[389,17450+71])
                  expression (derive.ml[390,17523+2]..[443,20089+38])
                    Pexp_fun "default"
                    None
                    pattern (derive.ml[390,17523+3]..[390,17523+10])
                      Ppat_var "default" (derive.ml[390,17523+3]..[390,17523+10])
                    expression (derive.ml[390,17523+12]..[443,20089+38])
                      Pexp_fun "mk_variant"
                      None
                      pattern (derive.ml[390,17523+13]..[390,17523+23])
                        Ppat_var "mk_variant" (derive.ml[390,17523+13]..[390,17523+23])
                      expression (derive.ml[390,17523+25]..[443,20089+38])
                        Pexp_fun "left_type_id"
                        None
                        pattern (derive.ml[390,17523+26]..[390,17523+38])
                          Ppat_var "left_type_id" (derive.ml[390,17523+26]..[390,17523+38])
                        expression (derive.ml[390,17523+40]..[443,20089+38])
                          Pexp_fun "left_type_variable"
                          None
                          pattern (derive.ml[390,17523+41]..[390,17523+59])
                            Ppat_var "left_type_variable" (derive.ml[390,17523+41]..[390,17523+59])
                          expression (derive.ml[390,17523+61]..[443,20089+38])
                            Pexp_fun "mk_record"
                            None
                            pattern (derive.ml[390,17523+62]..[390,17523+71])
                              Ppat_var "mk_record" (derive.ml[390,17523+62]..[390,17523+71])
                            expression (derive.ml[391,17598+2]..[443,20089+38])
                              Pexp_function
                              [
                                <case>
                                  pattern (derive.ml[392,17609+4]..[392,17609+31])
                                    Ppat_var "simple_exp_of_ctyp_with_cxt" (derive.ml[392,17609+4]..[392,17609+31])
                                  expression (derive.ml[393,17644+7]..[443,20089+37])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (derive.ml[394,17660+9]..[394,17660+22])
                                          Ppat_constraint
                                          pattern (derive.ml[394,17660+10]..[394,17660+13])
                                            Ppat_var "lst" (derive.ml[394,17660+10]..[394,17660+13])
                                          core_type (derive.ml[394,17660+16]..[394,17660+21])
                                            Ptyp_constr "mtyps" (derive.ml[394,17660+16]..[394,17660+21])
                                            []
                                        expression (derive.ml[395,17686+11]..[443,20089+37])
                                          Pexp_constraint
                                          expression (derive.ml[395,17686+12]..[443,20089+29])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[395,17686+16]..[395,17686+19])
                                                  Ppat_var "cxt" (derive.ml[395,17686+16]..[395,17686+19])
                                                expression (derive.ml[395,17686+22]..[395,17686+39])
                                                  Pexp_apply
                                                  expression (derive.ml[395,17686+22]..[395,17686+36])
                                                    Pexp_ident "Hashset.create" (derive.ml[395,17686+22]..[395,17686+36])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[395,17686+37]..[395,17686+39])
                                                        Pexp_constant Const_int 50
                                                  ]
                                            ]
                                            expression (derive.ml[396,17729+12]..[443,20089+29])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (derive.ml[396,17729+16]..[396,17729+23])
                                                    Ppat_var "mk_bind" (derive.ml[396,17729+16]..[396,17729+23])
                                                  expression (derive.ml[396,17729+23]..[399,17920+49])
                                                    Pexp_constraint
                                                    expression (derive.ml[397,17773+14]..[399,17920+49])
                                                      Pexp_apply
                                                      expression (derive.ml[397,17773+14]..[397,17773+27])
                                                        Pexp_ident "bind_of_tydcl" (derive.ml[397,17773+14]..[397,17773+27])
                                                      [
                                                        <label> "?cons_transform"
                                                          expression (derive.ml[397,17773+28]..[397,17773+43])
                                                            Pexp_ident "cons_transform" (derive.ml[397,17773+28]..[397,17773+43])
                                                        <label> "?arity"
                                                          expression (derive.ml[397,17773+44]..[397,17773+50])
                                                            Pexp_ident "arity" (derive.ml[397,17773+44]..[397,17773+50])
                                                        <label> "?annot"
                                                          expression (derive.ml[397,17773+51]..[397,17773+57])
                                                            Pexp_ident "annot" (derive.ml[397,17773+51]..[397,17773+57])
                                                        <label> "?names"
                                                          expression (derive.ml[397,17773+58]..[397,17773+64])
                                                            Pexp_ident "names" (derive.ml[397,17773+58]..[397,17773+64])
                                                        <label> "default"
                                                          expression (derive.ml[397,17773+66]..[397,17773+73])
                                                            Pexp_ident "default" (derive.ml[397,17773+66]..[397,17773+73])
                                                        <label> "mk_variant"
                                                          expression (derive.ml[398,17847+17]..[398,17847+27])
                                                            Pexp_ident "mk_variant" (derive.ml[398,17847+17]..[398,17847+27])
                                                        <label> "left_type_id"
                                                          expression (derive.ml[398,17847+29]..[398,17847+41])
                                                            Pexp_ident "left_type_id" (derive.ml[398,17847+29]..[398,17847+41])
                                                        <label> "left_type_variable"
                                                          expression (derive.ml[398,17847+43]..[398,17847+61])
                                                            Pexp_ident "left_type_variable" (derive.ml[398,17847+43]..[398,17847+61])
                                                        <label> "mk_record"
                                                          expression (derive.ml[398,17847+63]..[398,17847+72])
                                                            Pexp_ident "mk_record" (derive.ml[398,17847+63]..[398,17847+72])
                                                        <label> ""
                                                          expression (derive.ml[399,17920+17]..[399,17920+48])
                                                            Pexp_apply
                                                            expression (derive.ml[399,17920+17]..[399,17920+44])
                                                              Pexp_ident "simple_exp_of_ctyp_with_cxt" (derive.ml[399,17920+17]..[399,17920+44])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[399,17920+45]..[399,17920+48])
                                                                  Pexp_ident "cxt" (derive.ml[399,17920+45]..[399,17920+48])
                                                            ]
                                                      ]
                                                    core_type (derive.ml[396,17729+25]..[396,17729+41])
                                                      Ptyp_arrow
                                                      ""
                                                      core_type (derive.ml[396,17729+25]..[396,17729+33])
                                                        Ptyp_constr "typedecl" (derive.ml[396,17729+25]..[396,17729+33])
                                                        []
                                                      core_type (derive.ml[396,17729+37]..[396,17729+41])
                                                        Ptyp_constr "bind" (derive.ml[396,17729+37]..[396,17729+41])
                                                        []
                                              ]
                                              expression (derive.ml[400,17973+12]..[443,20089+29])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (derive.ml[400,17973+16]..[400,17973+18])
                                                      Ppat_var "fs" (derive.ml[400,17973+16]..[400,17973+18])
                                                    expression (derive.ml[401,17994+14]..[434,19715+50])
                                                      Pexp_function
                                                      [
                                                        <case>
                                                          pattern (derive.ml[402,18017+16]..[402,18017+28])
                                                            Ppat_constraint
                                                            pattern (derive.ml[402,18017+17]..[402,18017+19])
                                                              Ppat_var "ty" (derive.ml[402,18017+17]..[402,18017+19])
                                                            core_type (derive.ml[402,18017+22]..[402,18017+27])
                                                              Ptyp_constr "types" (derive.ml[402,18017+22]..[402,18017+27])
                                                              []
                                                          expression (derive.ml[403,18049+18]..[434,19715+50])
                                                            Pexp_constraint
                                                            expression (derive.ml[403,18049+20]..[434,19715+41])
                                                              Pexp_match
                                                              expression (derive.ml[403,18049+26]..[403,18049+28])
                                                                Pexp_ident "ty" (derive.ml[403,18049+26]..[403,18049+28])
                                                              [
                                                                <case>
                                                                  pattern (derive.ml[404,18083+22]..[404,18083+41])
                                                                    Ppat_variant "Mutual"
                                                                    Some
                                                                      pattern (derive.ml[404,18083+30]..[404,18083+41])
Ppat_var "named_types" (derive.ml[404,18083+30]..[404,18083+41])
                                                                  expression (derive.ml[405,18128+25]..[424,19230+46])
                                                                    Pexp_match
                                                                    expression (derive.ml[405,18128+31]..[405,18128+42])
                                                                      Pexp_ident "named_types" (derive.ml[405,18128+31]..[405,18128+42])
                                                                    [
                                                                      <case>
pattern (derive.ml[406,18176+27]..[406,18176+29])
  Ppat_construct "[]" (derive.ml[406,18176+27]..[406,18176+29])
  None
expression (derive.ml[406,18176+33]..[406,18176+61])
  Pexp_coerce
  expression (derive.ml[406,18176+34]..[406,18176+46])
    Pexp_variant "StExp"
    Some
      expression (derive.ml[406,18176+41]..[406,18176+46])
        Pexp_variant "Unit"
        None
  None
  core_type (derive.ml[406,18176+50]..[406,18176+60])
    Ptyp_constr "Astfn.stru" (derive.ml[406,18176+50]..[406,18176+60])
    []
                                                                      <case>
pattern (derive.ml[407,18238+27]..[407,18238+29])
  Ppat_var "xs" (derive.ml[407,18238+27]..[407,18238+29])
expression (derive.ml[408,18271+29]..[424,19230+46])
  Pexp_sequence
  expression (derive.ml[408,18271+30]..[410,18353+73])
    Pexp_apply
    expression (derive.ml[408,18271+30]..[408,18271+39])
      Pexp_ident "List.iter" (derive.ml[408,18271+30]..[408,18271+39])
    [
      <label> ""
        expression (derive.ml[409,18311+33]..[410,18353+69])
          Pexp_function
          [
            <case>
              pattern (derive.ml[410,18353+35]..[410,18353+45])
                Ppat_tuple
                [
                  pattern (derive.ml[410,18353+36]..[410,18353+40])
                    Ppat_var "name" (derive.ml[410,18353+36]..[410,18353+40])
                  pattern (derive.ml[410,18353+41]..[410,18353+44])
                    Ppat_var "_ty" (derive.ml[410,18353+41]..[410,18353+44])
                ]
              expression (derive.ml[410,18353+49]..[410,18353+69])
                Pexp_apply
                expression (derive.ml[410,18353+49]..[410,18353+60])
                  Pexp_ident "Hashset.add" (derive.ml[410,18353+49]..[410,18353+60])
                [
                  <label> ""
                    expression (derive.ml[410,18353+61]..[410,18353+64])
                      Pexp_ident "cxt" (derive.ml[410,18353+61]..[410,18353+64])
                  <label> ""
                    expression (derive.ml[410,18353+65]..[410,18353+69])
                      Pexp_ident "name" (derive.ml[410,18353+65]..[410,18353+69])
                ]
          ]
      <label> ""
        expression (derive.ml[410,18353+71]..[410,18353+73])
          Pexp_ident "xs" (derive.ml[410,18353+71]..[410,18353+73])
    ]
  expression (derive.ml[408,18271+29]..[424,19230+46])
    Pexp_let Nonrec
    [
      <def>
        pattern (derive.ml[411,18428+35]..[411,18428+39])
          Ppat_var "bind" (derive.ml[411,18428+35]..[411,18428+39])
        expression (derive.ml[412,18470+33]..[422,19112+37])
          Pexp_apply
          expression (derive.ml[412,18470+33]..[412,18470+56])
            Pexp_ident "Listf.reduce_right_with" (derive.ml[412,18470+33]..[412,18470+56])
          [
            <label> "compose"
              expression (derive.ml[413,18527+45]..[420,18968+66])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[414,18581+47]..[414,18581+48])
                      Ppat_var "x" (derive.ml[414,18581+47]..[414,18581+48])
                    expression (derive.ml[415,18633+50]..[420,18968+65])
                      Pexp_function
                      [
                        <case>
                          pattern (derive.ml[416,18692+52]..[416,18692+53])
                            Ppat_var "y" (derive.ml[416,18692+52]..[416,18692+53])
                          expression (derive.ml[417,18749+54]..[420,18968+65])
                            Pexp_coerce
                            expression (derive.ml[417,18749+55]..[419,18886+77])
                              Pexp_variant "And"
                              Some
                                expression (derive.ml[418,18809+57]..[419,18886+77])
                                  Pexp_tuple
                                  [
                                    expression (derive.ml[418,18809+58]..[418,18809+75])
                                      Pexp_coerce
                                      expression (derive.ml[418,18809+59]..[418,18809+60])
                                        Pexp_ident "x" (derive.ml[418,18809+59]..[418,18809+60])
                                      None
                                      core_type (derive.ml[418,18809+64]..[418,18809+74])
                                        Ptyp_constr "Astfn.bind" (derive.ml[418,18809+64]..[418,18809+74])
                                        []
                                    expression (derive.ml[419,18886+59]..[419,18886+76])
                                      Pexp_coerce
                                      expression (derive.ml[419,18886+60]..[419,18886+61])
                                        Pexp_ident "y" (derive.ml[419,18886+60]..[419,18886+61])
                                      None
                                      core_type (derive.ml[419,18886+65]..[419,18886+75])
                                        Ptyp_constr "Astfn.bind" (derive.ml[419,18886+65]..[419,18886+75])
                                        []
                                  ]
                            None
                            core_type (derive.ml[420,18968+54]..[420,18968+64])
                              Ptyp_constr "Astfn.bind" (derive.ml[420,18968+54]..[420,18968+64])
                              []
                      ]
                ]
            <label> "f"
              expression (derive.ml[421,19036+39]..[421,19036+74])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[421,19036+50]..[421,19036+60])
                      Ppat_tuple
                      [
                        pattern (derive.ml[421,19036+51]..[421,19036+56])
                          Ppat_var "_name" (derive.ml[421,19036+51]..[421,19036+56])
                        pattern (derive.ml[421,19036+57]..[421,19036+59])
                          Ppat_var "ty" (derive.ml[421,19036+57]..[421,19036+59])
                      ]
                    expression (derive.ml[421,19036+64]..[421,19036+74])
                      Pexp_apply
                      expression (derive.ml[421,19036+64]..[421,19036+71])
                        Pexp_ident "mk_bind" (derive.ml[421,19036+64]..[421,19036+71])
                      [
                        <label> ""
                          expression (derive.ml[421,19036+72]..[421,19036+74])
                            Pexp_ident "ty" (derive.ml[421,19036+72]..[421,19036+74])
                      ]
                ]
            <label> ""
              expression (derive.ml[422,19112+35]..[422,19112+37])
                Pexp_ident "xs" (derive.ml[422,19112+35]..[422,19112+37])
          ]
    ]
    expression (derive.ml[423,19153+31]..[424,19230+44])
      Pexp_coerce
      expression (derive.ml[423,19153+32]..[423,19153+72])
        Pexp_variant "Value"
        Some
          expression (derive.ml[423,19153+39]..[423,19153+72])
            Pexp_tuple
            [
              expression (derive.ml[423,19153+40]..[423,19153+49])
                Pexp_variant "Positive"
                None
              expression (derive.ml[423,19153+51]..[423,19153+71])
                Pexp_coerce
                expression (derive.ml[423,19153+52]..[423,19153+56])
                  Pexp_ident "bind" (derive.ml[423,19153+52]..[423,19153+56])
                None
                core_type (derive.ml[423,19153+60]..[423,19153+70])
                  Ptyp_constr "Astfn.bind" (derive.ml[423,19153+60]..[423,19153+70])
                  []
            ]
      None
      core_type (derive.ml[424,19230+33]..[424,19230+43])
        Ptyp_constr "Astfn.stru" (derive.ml[424,19230+33]..[424,19230+43])
        []
                                                                    ]
                                                                <case>
                                                                  pattern (derive.ml[425,19278+22]..[425,19278+42])
                                                                    Ppat_variant "Single"
                                                                    Some
                                                                      pattern (derive.ml[425,19278+22]..[425,19278+42])
Ppat_tuple
[
  pattern (derive.ml[425,19278+31]..[425,19278+35])
    Ppat_var "name" (derive.ml[425,19278+31]..[425,19278+35])
  pattern (derive.ml[425,19278+36]..[425,19278+41])
    Ppat_var "tydcl" (derive.ml[425,19278+36]..[425,19278+41])
]
                                                                  expression (derive.ml[426,19324+24]..[434,19715+41])
                                                                    Pexp_sequence
                                                                    expression (derive.ml[426,19324+25]..[426,19324+45])
                                                                      Pexp_apply
                                                                      expression (derive.ml[426,19324+25]..[426,19324+36])
Pexp_ident "Hashset.add" (derive.ml[426,19324+25]..[426,19324+36])
                                                                      [
<label> ""
  expression (derive.ml[426,19324+37]..[426,19324+40])
    Pexp_ident "cxt" (derive.ml[426,19324+37]..[426,19324+40])
<label> ""
  expression (derive.ml[426,19324+41]..[426,19324+45])
    Pexp_ident "name" (derive.ml[426,19324+41]..[426,19324+45])
                                                                      ]
                                                                    expression (derive.ml[426,19324+24]..[434,19715+41])
                                                                      Pexp_let Nonrec
                                                                      [
<def>
  pattern (derive.ml[427,19371+30]..[427,19371+34])
    Ppat_var "flag" (derive.ml[427,19371+30]..[427,19371+34])
  expression (derive.ml[428,19408+28]..[430,19506+42])
    Pexp_ifthenelse
    expression (derive.ml[428,19408+31]..[428,19408+54])
      Pexp_apply
      expression (derive.ml[428,19408+31]..[428,19408+48])
        Pexp_ident "Ctyp.is_recursive" (derive.ml[428,19408+31]..[428,19408+48])
      [
        <label> ""
          expression (derive.ml[428,19408+49]..[428,19408+54])
            Pexp_ident "tydcl" (derive.ml[428,19408+49]..[428,19408+54])
      ]
    expression (derive.ml[429,19463+33]..[429,19463+42])
      Pexp_variant "Positive"
      None
    Some
      expression (derive.ml[430,19506+33]..[430,19506+42])
        Pexp_variant "Negative"
        None
<def>
  pattern (derive.ml[431,19549+30]..[431,19549+34])
    Ppat_var "bind" (derive.ml[431,19549+30]..[431,19549+34])
  expression (derive.ml[431,19549+37]..[431,19549+50])
    Pexp_apply
    expression (derive.ml[431,19549+37]..[431,19549+44])
      Pexp_ident "mk_bind" (derive.ml[431,19549+37]..[431,19549+44])
    [
      <label> ""
        expression (derive.ml[431,19549+45]..[431,19549+50])
          Pexp_ident "tydcl" (derive.ml[431,19549+45]..[431,19549+50])
    ]
                                                                      ]
                                                                      expression (derive.ml[432,19603+26]..[434,19715+39])
Pexp_coerce
expression (derive.ml[432,19603+27]..[433,19637+73])
  Pexp_variant "Value"
  Some
    expression (derive.ml[433,19637+29]..[433,19637+73])
      Pexp_tuple
      [
        expression (derive.ml[433,19637+30]..[433,19637+50])
          Pexp_coerce
          expression (derive.ml[433,19637+31]..[433,19637+35])
            Pexp_ident "flag" (derive.ml[433,19637+31]..[433,19637+35])
          None
          core_type (derive.ml[433,19637+39]..[433,19637+49])
            Ptyp_constr "Astfn.flag" (derive.ml[433,19637+39]..[433,19637+49])
            []
        expression (derive.ml[433,19637+52]..[433,19637+72])
          Pexp_coerce
          expression (derive.ml[433,19637+53]..[433,19637+57])
            Pexp_ident "bind" (derive.ml[433,19637+53]..[433,19637+57])
          None
          core_type (derive.ml[433,19637+61]..[433,19637+71])
            Ptyp_constr "Astfn.bind" (derive.ml[433,19637+61]..[433,19637+71])
            []
      ]
None
core_type (derive.ml[434,19715+28]..[434,19715+38])
  Ptyp_constr "Astfn.stru" (derive.ml[434,19715+28]..[434,19715+38])
  []
                                                              ]
                                                            core_type (derive.ml[434,19715+45]..[434,19715+49])
                                                              Ptyp_constr "stru" (derive.ml[434,19715+45]..[434,19715+49])
                                                              []
                                                      ]
                                                ]
                                                expression (derive.ml[435,19769+12]..[443,20089+29])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[435,19769+16]..[435,19769+20])
                                                        Ppat_var "item" (derive.ml[435,19769+16]..[435,19769+20])
                                                      expression (derive.ml[436,19792+14]..[438,19872+50])
                                                        Pexp_match
                                                        expression (derive.ml[436,19792+20]..[436,19792+23])
                                                          Pexp_ident "lst" (derive.ml[436,19792+20]..[436,19792+23])
                                                        [
                                                          <case>
                                                            pattern (derive.ml[437,19821+16]..[437,19821+18])
                                                              Ppat_construct "[]" (derive.ml[437,19821+16]..[437,19821+18])
                                                              None
                                                            expression (derive.ml[437,19821+22]..[437,19821+50])
                                                              Pexp_coerce
                                                              expression (derive.ml[437,19821+23]..[437,19821+35])
                                                                Pexp_variant "StExp"
                                                                Some
                                                                  expression (derive.ml[437,19821+30]..[437,19821+35])
                                                                    Pexp_variant "Unit"
                                                                    None
                                                              None
                                                              core_type (derive.ml[437,19821+39]..[437,19821+49])
                                                                Ptyp_constr "Astfn.stru" (derive.ml[437,19821+39]..[437,19821+49])
                                                                []
                                                          <case>
                                                            pattern (derive.ml[438,19872+16]..[438,19872+17])
                                                              Ppat_any
                                                            expression (derive.ml[438,19872+21]..[438,19872+50])
                                                              Pexp_apply
                                                              expression (derive.ml[438,19872+21]..[438,19872+32])
                                                                Pexp_ident "sem_of_list" (derive.ml[438,19872+21]..[438,19872+32])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[438,19872+34]..[438,19872+49])
                                                                    Pexp_apply
                                                                    expression (derive.ml[438,19872+34]..[438,19872+42])
                                                                      Pexp_ident "List.map" (derive.ml[438,19872+34]..[438,19872+42])
                                                                    [
                                                                      <label> ""
expression (derive.ml[438,19872+43]..[438,19872+45])
  Pexp_ident "fs" (derive.ml[438,19872+43]..[438,19872+45])
                                                                      <label> ""
expression (derive.ml[438,19872+46]..[438,19872+49])
  Pexp_ident "lst" (derive.ml[438,19872+46]..[438,19872+49])
                                                                    ]
                                                              ]
                                                        ]
                                                  ]
                                                  expression (derive.ml[439,19926+13]..[443,20089+28])
                                                    Pexp_match
                                                    expression (derive.ml[439,19926+19]..[439,19926+30])
                                                      Pexp_ident "module_name" (derive.ml[439,19926+19]..[439,19926+30])
                                                    [
                                                      <case>
                                                        pattern (derive.ml[440,19962+15]..[440,19962+19])
                                                          Ppat_construct "None" (derive.ml[440,19962+15]..[440,19962+19])
                                                          None
                                                        expression (derive.ml[440,19962+24]..[440,19962+28])
                                                          Pexp_ident "item" (derive.ml[440,19962+24]..[440,19962+28])
                                                      <case>
                                                        pattern (derive.ml[441,19991+15]..[441,19991+21])
                                                          Ppat_construct "Some" (derive.ml[441,19991+15]..[441,19991+19])
                                                          Some
                                                            pattern (derive.ml[441,19991+20]..[441,19991+21])
                                                              Ppat_var "m" (derive.ml[441,19991+20]..[441,19991+21])
                                                        expression (derive.ml[442,20016+17]..[443,20089+28])
                                                          Pexp_coerce
                                                          expression (derive.ml[442,20016+18]..[442,20016+68])
                                                            Pexp_variant "Module"
                                                            Some
                                                              expression (derive.ml[442,20016+26]..[442,20016+68])
                                                                Pexp_tuple
                                                                [
                                                                  expression (derive.ml[442,20016+28]..[442,20016+34])
                                                                    Pexp_variant "Uid"
                                                                    Some
                                                                      expression (derive.ml[442,20016+33]..[442,20016+34])
Pexp_ident "m" (derive.ml[442,20016+33]..[442,20016+34])
                                                                  expression (derive.ml[442,20016+38]..[442,20016+66])
                                                                    Pexp_variant "Struct"
                                                                    Some
                                                                      expression (derive.ml[442,20016+46]..[442,20016+66])
Pexp_coerce
expression (derive.ml[442,20016+47]..[442,20016+51])
  Pexp_ident "item" (derive.ml[442,20016+47]..[442,20016+51])
None
core_type (derive.ml[442,20016+55]..[442,20016+65])
  Ptyp_constr "Astfn.stru" (derive.ml[442,20016+55]..[442,20016+65])
  []
                                                                ]
                                                          None
                                                          core_type (derive.ml[443,20089+17]..[443,20089+27])
                                                            Ptyp_constr "Astfn.stru" (derive.ml[443,20089+17]..[443,20089+27])
                                                            []
                                                    ]
                                          core_type (derive.ml[443,20089+32]..[443,20089+36])
                                            Ptyp_constr "stru" (derive.ml[443,20089+32]..[443,20089+36])
                                            []
                                    ]
                              ]
    ]
  structure_item (derive.ml[444,20128+0]..[547,25561+54])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[444,20128+4]..[444,20128+16])
          Ppat_var "obj_of_mtyps" (derive.ml[444,20128+4]..[444,20128+16])
        expression (derive.ml[444,20128+17]..[547,25561+54])
          Pexp_fun "?cons_transform"
          None
          pattern (derive.ml[444,20128+18]..[444,20128+32])
            Ppat_var "cons_transform" (derive.ml[444,20128+18]..[444,20128+32])
          expression (derive.ml[444,20128+34]..[547,25561+54])
            Pexp_fun "?module_name"
            None
            pattern (derive.ml[444,20128+35]..[444,20128+46])
              Ppat_var "module_name" (derive.ml[444,20128+35]..[444,20128+46])
            expression (derive.ml[444,20128+48]..[547,25561+54])
              Pexp_fun "?arity"
              Some
                expression (derive.ml[444,20128+57]..[444,20128+58])
                  Pexp_constant Const_int 1
              pattern (derive.ml[444,20128+50]..[444,20128+55])
                Ppat_var "arity" (derive.ml[444,20128+50]..[444,20128+55])
              expression (derive.ml[444,20128+61]..[547,25561+54])
                Pexp_fun "?names"
                Some
                  expression (derive.ml[444,20128+70]..[444,20128+72])
                    Pexp_construct "[]" (derive.ml[444,20128+70]..[444,20128+72])
                    None
                pattern (derive.ml[444,20128+63]..[444,20128+68])
                  Ppat_var "names" (derive.ml[444,20128+63]..[444,20128+68])
                expression (derive.ml[445,20203+2]..[547,25561+54])
                  Pexp_fun "default"
                  None
                  pattern (derive.ml[445,20203+3]..[445,20203+10])
                    Ppat_var "default" (derive.ml[445,20203+3]..[445,20203+10])
                  expression (derive.ml[445,20203+12]..[547,25561+54])
                    Pexp_fun "left_type_variable"
                    None
                    pattern (derive.ml[445,20203+32]..[445,20203+73])
                      Ppat_constraint
                      pattern (derive.ml[445,20203+33]..[445,20203+51])
                        Ppat_var "left_type_variable" (derive.ml[445,20203+33]..[445,20203+51])
                      core_type (derive.ml[445,20203+54]..[445,20203+72])
                        Ptyp_constr "basic_id_transform" (derive.ml[445,20203+54]..[445,20203+72])
                        []
                    expression (derive.ml[446,20278+2]..[547,25561+54])
                      Pexp_fun "mk_record"
                      None
                      pattern (derive.ml[446,20278+3]..[446,20278+12])
                        Ppat_var "mk_record" (derive.ml[446,20278+3]..[446,20278+12])
                      expression (derive.ml[446,20278+14]..[547,25561+54])
                        Pexp_fun "mk_variant"
                        None
                        pattern (derive.ml[446,20278+15]..[446,20278+25])
                          Ppat_var "mk_variant" (derive.ml[446,20278+15]..[446,20278+25])
                        expression (derive.ml[447,20307+2]..[547,25561+54])
                          Pexp_function
                          [
                            <case>
                              pattern (derive.ml[448,20318+4]..[448,20318+8])
                                Ppat_var "base" (derive.ml[448,20318+4]..[448,20318+8])
                              expression (derive.ml[449,20330+7]..[547,25561+53])
                                Pexp_function
                                [
                                  <case>
                                    pattern (derive.ml[450,20346+9]..[450,20346+19])
                                      Ppat_var "class_name" (derive.ml[450,20346+9]..[450,20346+19])
                                    expression (derive.ml[451,20369+12]..[547,25561+52])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (derive.ml[452,20390+14]..[452,20390+32])
                                            Ppat_var "simple_exp_of_ctyp" (derive.ml[452,20390+14]..[452,20390+32])
                                          expression (derive.ml[453,20426+21]..[453,20426+37])
                                            Pexp_fun "kind"
                                            None
                                            pattern (derive.ml[453,20426+27]..[453,20426+37])
                                              Ppat_constraint
                                              pattern (derive.ml[453,20426+28]..[453,20426+29])
                                                Ppat_var "k" (derive.ml[453,20426+28]..[453,20426+29])
                                              core_type (derive.ml[453,20426+32]..[453,20426+36])
                                                Ptyp_constr "kind" (derive.ml[453,20426+32]..[453,20426+36])
                                                []
                                            expression (derive.ml[454,20468+19]..[547,25561+51])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (derive.ml[455,20496+21]..[455,20496+34])
                                                    Ppat_constraint
                                                    pattern (derive.ml[455,20496+22]..[455,20496+25])
                                                      Ppat_var "lst" (derive.ml[455,20496+22]..[455,20496+25])
                                                    core_type (derive.ml[455,20496+28]..[455,20496+33])
                                                      Ptyp_constr "mtyps" (derive.ml[455,20496+28]..[455,20496+33])
                                                      []
                                                  expression (derive.ml[456,20534+23]..[547,25561+51])
                                                    Pexp_constraint
                                                    expression (derive.ml[456,20534+24]..[547,25561+43])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[456,20534+28]..[456,20534+31])
                                                            Ppat_var "tbl" (derive.ml[456,20534+28]..[456,20534+31])
                                                          expression (derive.ml[456,20534+34]..[456,20534+51])
                                                            Pexp_apply
                                                            expression (derive.ml[456,20534+34]..[456,20534+48])
                                                              Pexp_ident "Hashtbl.create" (derive.ml[456,20534+34]..[456,20534+48])
                                                            [
                                                              <label> ""
                                                                expression (derive.ml[456,20534+49]..[456,20534+51])
                                                                  Pexp_constant Const_int 50
                                                            ]
                                                      ]
                                                      expression (derive.ml[457,20589+24]..[547,25561+43])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (derive.ml[457,20589+28]..[457,20589+29])
                                                              Ppat_var "f" (derive.ml[457,20589+28]..[457,20589+29])
                                                            expression (derive.ml[458,20621+26]..[471,21368+74])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (derive.ml[459,20656+28]..[459,20656+33])
                                                                    Ppat_var "tydcl" (derive.ml[459,20656+28]..[459,20656+33])
                                                                  expression (derive.ml[460,20693+31]..[471,21368+73])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (derive.ml[461,20733+33]..[461,20733+39])
  Ppat_var "result" (derive.ml[461,20733+33]..[461,20733+39])
expression (derive.ml[462,20776+35]..[471,21368+73])
  Pexp_apply
  expression (derive.ml[462,20776+35]..[462,20776+47])
    Pexp_ident "fun_of_tydcl" (derive.ml[462,20776+35]..[462,20776+47])
  [
    <label> "names"
      expression (derive.ml[462,20776+49]..[462,20776+54])
        Pexp_ident "names" (derive.ml[462,20776+49]..[462,20776+54])
    <label> "arity"
      expression (derive.ml[462,20776+56]..[462,20776+61])
        Pexp_ident "arity" (derive.ml[462,20776+56]..[462,20776+61])
    <label> "left_type_variable"
      expression (derive.ml[463,20838+38]..[463,20838+56])
        Pexp_ident "left_type_variable" (derive.ml[463,20838+38]..[463,20838+56])
    <label> "mk_record"
      expression (derive.ml[463,20838+58]..[463,20838+67])
        Pexp_ident "mk_record" (derive.ml[463,20838+58]..[463,20838+67])
    <label> ""
      expression (derive.ml[464,20906+37]..[464,20906+55])
        Pexp_ident "simple_exp_of_ctyp" (derive.ml[464,20906+37]..[464,20906+55])
    <label> ""
      expression (derive.ml[465,20962+38]..[467,21103+58])
        Pexp_apply
        expression (derive.ml[465,20962+38]..[465,20962+49])
          Pexp_ident "exp_of_ctyp" (derive.ml[465,20962+38]..[465,20962+49])
        [
          <label> "?cons_transform"
            expression (derive.ml[465,20962+50]..[465,20962+65])
              Pexp_ident "cons_transform" (derive.ml[465,20962+50]..[465,20962+65])
          <label> "arity"
            expression (derive.ml[465,20962+67]..[465,20962+72])
              Pexp_ident "arity" (derive.ml[465,20962+67]..[465,20962+72])
          <label> "names"
            expression (derive.ml[466,21035+41]..[466,21035+46])
              Pexp_ident "names" (derive.ml[466,21035+41]..[466,21035+46])
          <label> "default"
            expression (derive.ml[466,21035+48]..[466,21035+55])
              Pexp_ident "default" (derive.ml[466,21035+48]..[466,21035+55])
          <label> "mk_variant"
            expression (derive.ml[466,21035+57]..[466,21035+67])
              Pexp_ident "mk_variant" (derive.ml[466,21035+57]..[466,21035+67])
          <label> ""
            expression (derive.ml[467,21103+40]..[467,21103+58])
              Pexp_ident "simple_exp_of_ctyp" (derive.ml[467,21103+40]..[467,21103+58])
        ]
    <label> ""
      expression (derive.ml[468,21163+38]..[471,21368+58])
        Pexp_apply
        expression (derive.ml[468,21163+38]..[468,21163+52])
          Pexp_ident "exp_of_variant" (derive.ml[468,21163+38]..[468,21163+52])
        [
          <label> "?cons_transform"
            expression (derive.ml[468,21163+53]..[468,21163+68])
              Pexp_ident "cons_transform" (derive.ml[468,21163+53]..[468,21163+68])
          <label> "destination"
            expression (derive.ml[469,21232+54]..[469,21232+59])
              Pexp_construct "Obj" (derive.ml[469,21232+54]..[469,21232+57])
              Some
                expression (derive.ml[469,21232+58]..[469,21232+59])
                  Pexp_ident "k" (derive.ml[469,21232+58]..[469,21232+59])
          <label> "arity"
            expression (derive.ml[469,21232+62]..[469,21232+67])
              Pexp_ident "arity" (derive.ml[469,21232+62]..[469,21232+67])
          <label> "names"
            expression (derive.ml[469,21232+69]..[469,21232+74])
              Pexp_ident "names" (derive.ml[469,21232+69]..[469,21232+74])
          <label> "default"
            expression (derive.ml[470,21307+41]..[470,21307+48])
              Pexp_ident "default" (derive.ml[470,21307+41]..[470,21307+48])
          <label> "mk_variant"
            expression (derive.ml[470,21307+50]..[470,21307+60])
              Pexp_ident "mk_variant" (derive.ml[470,21307+50]..[470,21307+60])
          <label> ""
            expression (derive.ml[471,21368+40]..[471,21368+58])
              Pexp_ident "simple_exp_of_ctyp" (derive.ml[471,21368+40]..[471,21368+58])
        ]
    <label> "result"
      expression (derive.ml[471,21368+61]..[471,21368+67])
        Pexp_ident "result" (derive.ml[471,21368+61]..[471,21368+67])
    <label> ""
      expression (derive.ml[471,21368+68]..[471,21368+73])
        Pexp_ident "tydcl" (derive.ml[471,21368+68]..[471,21368+73])
  ]
                                                                    ]
                                                              ]
                                                        ]
                                                        expression (derive.ml[472,21446+24]..[547,25561+43])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (derive.ml[472,21446+28]..[472,21446+35])
                                                                Ppat_var "mk_type" (derive.ml[472,21446+28]..[472,21446+35])
                                                              expression (derive.ml[473,21484+26]..[482,21951+47])
                                                                Pexp_function
                                                                [
                                                                  <case>
                                                                    pattern (derive.ml[474,21519+28]..[474,21519+33])
                                                                      Ppat_var "tydcl" (derive.ml[474,21519+28]..[474,21519+33])
                                                                    expression (derive.ml[475,21556+30]..[482,21951+47])
                                                                      Pexp_let Nonrec
                                                                      [
<def>
  pattern (derive.ml[475,21556+34]..[475,21556+44])
    Ppat_tuple
    [
      pattern (derive.ml[475,21556+35]..[475,21556+39])
        Ppat_var "name" (derive.ml[475,21556+35]..[475,21556+39])
      pattern (derive.ml[475,21556+40]..[475,21556+43])
        Ppat_var "len" (derive.ml[475,21556+40]..[475,21556+43])
    ]
  expression (derive.ml[476,21603+32]..[476,21603+63])
    Pexp_apply
    expression (derive.ml[476,21603+32]..[476,21603+57])
      Pexp_ident "Ctyp.name_length_of_tydcl" (derive.ml[476,21603+32]..[476,21603+57])
    [
      <label> ""
        expression (derive.ml[476,21603+58]..[476,21603+63])
          Pexp_ident "tydcl" (derive.ml[476,21603+58]..[476,21603+63])
    ]
                                                                      ]
                                                                      expression (derive.ml[477,21670+30]..[482,21951+47])
Pexp_let Nonrec
[
  <def>
    pattern (derive.ml[477,21670+34]..[477,21670+50])
      Ppat_tuple
      [
        pattern (derive.ml[477,21670+35]..[477,21670+37])
          Ppat_var "ty" (derive.ml[477,21670+35]..[477,21670+37])
        pattern (derive.ml[477,21670+38]..[477,21670+49])
          Ppat_var "result_type" (derive.ml[477,21670+38]..[477,21670+49])
      ]
    expression (derive.ml[478,21723+32]..[481,21907+40])
      Pexp_apply
      expression (derive.ml[478,21723+32]..[478,21723+51])
        Pexp_ident "Ctyp.mk_method_type" (derive.ml[478,21723+32]..[478,21723+51])
      [
        <label> "number"
          expression (derive.ml[478,21723+60]..[478,21723+65])
            Pexp_ident "arity" (derive.ml[478,21723+60]..[478,21723+65])
        <label> "prefix"
          expression (derive.ml[479,21789+42]..[479,21789+47])
            Pexp_ident "names" (derive.ml[479,21789+42]..[479,21789+47])
        <label> ""
          expression (derive.ml[480,21837+34]..[480,21837+67])
            Pexp_tuple
            [
              expression (derive.ml[480,21837+35]..[480,21837+61])
                Pexp_coerce
                expression (derive.ml[480,21837+36]..[480,21837+45])
                  Pexp_variant "Lid"
                  Some
                    expression (derive.ml[480,21837+41]..[480,21837+45])
                      Pexp_ident "name" (derive.ml[480,21837+41]..[480,21837+45])
                None
                core_type (derive.ml[480,21837+49]..[480,21837+60])
                  Ptyp_constr "Astfn.ident" (derive.ml[480,21837+49]..[480,21837+60])
                  []
              expression (derive.ml[480,21837+63]..[480,21837+66])
                Pexp_ident "len" (derive.ml[480,21837+63]..[480,21837+66])
            ]
        <label> ""
          expression (derive.ml[481,21907+34]..[481,21907+39])
            Pexp_construct "Obj" (derive.ml[481,21907+34]..[481,21907+37])
            Some
              expression (derive.ml[481,21907+38]..[481,21907+39])
                Pexp_ident "k" (derive.ml[481,21907+38]..[481,21907+39])
      ]
]
expression (derive.ml[482,21951+30]..[482,21951+47])
  Pexp_tuple
  [
    expression (derive.ml[482,21951+31]..[482,21951+33])
      Pexp_ident "ty" (derive.ml[482,21951+31]..[482,21951+33])
    expression (derive.ml[482,21951+35]..[482,21951+46])
      Pexp_ident "result_type" (derive.ml[482,21951+35]..[482,21951+46])
  ]
                                                                ]
                                                          ]
                                                          expression (derive.ml[483,22002+24]..[547,25561+43])
                                                            Pexp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (derive.ml[483,22002+28]..[483,22002+38])
                                                                  Ppat_var "mk_clfield" (derive.ml[483,22002+28]..[483,22002+38])
                                                                expression (derive.ml[484,22043+26]..[491,22451+38])
                                                                  Pexp_function
                                                                  [
                                                                    <case>
                                                                      pattern (derive.ml[485,22078+28]..[485,22078+40])
Ppat_tuple
[
  pattern (derive.ml[485,22078+29]..[485,22078+33])
    Ppat_var "name" (derive.ml[485,22078+29]..[485,22078+33])
  pattern (derive.ml[485,22078+34]..[485,22078+39])
    Ppat_var "tydcl" (derive.ml[485,22078+34]..[485,22078+39])
]
                                                                      expression (derive.ml[486,22122+30]..[491,22451+38])
Pexp_constraint
expression (derive.ml[486,22122+31]..[490,22374+73])
  Pexp_let Nonrec
  [
    <def>
      pattern (derive.ml[486,22122+35]..[486,22122+51])
        Ppat_tuple
        [
          pattern (derive.ml[486,22122+36]..[486,22122+38])
            Ppat_var "ty" (derive.ml[486,22122+36]..[486,22122+38])
          pattern (derive.ml[486,22122+39]..[486,22122+50])
            Ppat_var "result_type" (derive.ml[486,22122+39]..[486,22122+50])
        ]
      expression (derive.ml[486,22122+54]..[486,22122+67])
        Pexp_apply
        expression (derive.ml[486,22122+54]..[486,22122+61])
          Pexp_ident "mk_type" (derive.ml[486,22122+54]..[486,22122+61])
        [
          <label> ""
            expression (derive.ml[486,22122+62]..[486,22122+67])
              Pexp_ident "tydcl" (derive.ml[486,22122+62]..[486,22122+67])
        ]
  ]
  expression (derive.ml[487,22193+31]..[490,22374+73])
    Pexp_coerce
    expression (derive.ml[487,22193+32]..[490,22374+55])
      Pexp_variant "CrMth"
      Some
        expression (derive.ml[488,22232+34]..[490,22374+55])
          Pexp_tuple
          [
            expression (derive.ml[488,22232+36]..[488,22232+45])
              Pexp_variant "Lid"
              Some
                expression (derive.ml[488,22232+41]..[488,22232+45])
                  Pexp_ident "name" (derive.ml[488,22232+41]..[488,22232+45])
            expression (derive.ml[488,22232+48]..[488,22232+57])
              Pexp_variant "Negative"
              None
            expression (derive.ml[488,22232+59]..[488,22232+68])
              Pexp_variant "Negative"
              None
            expression (derive.ml[489,22302+36]..[489,22302+70])
              Pexp_coerce
              expression (derive.ml[489,22302+37]..[489,22302+56])
                Pexp_apply
                expression (derive.ml[489,22302+37]..[489,22302+38])
                  Pexp_ident "f" (derive.ml[489,22302+37]..[489,22302+38])
                [
                  <label> ""
                    expression (derive.ml[489,22302+39]..[489,22302+44])
                      Pexp_ident "tydcl" (derive.ml[489,22302+39]..[489,22302+44])
                  <label> ""
                    expression (derive.ml[489,22302+45]..[489,22302+56])
                      Pexp_ident "result_type" (derive.ml[489,22302+45]..[489,22302+56])
                ]
              None
              core_type (derive.ml[489,22302+60]..[489,22302+69])
                Ptyp_constr "Astfn.exp" (derive.ml[489,22302+60]..[489,22302+69])
                []
            expression (derive.ml[490,22374+36]..[490,22374+54])
              Pexp_coerce
              expression (derive.ml[490,22374+37]..[490,22374+39])
                Pexp_ident "ty" (derive.ml[490,22374+37]..[490,22374+39])
              None
              core_type (derive.ml[490,22374+43]..[490,22374+53])
                Ptyp_constr "Astfn.ctyp" (derive.ml[490,22374+43]..[490,22374+53])
                []
          ]
    None
    core_type (derive.ml[490,22374+59]..[490,22374+72])
      Ptyp_constr "Astfn.clfield" (derive.ml[490,22374+59]..[490,22374+72])
      []
core_type (derive.ml[491,22451+30]..[491,22451+37])
  Ptyp_constr "clfield" (derive.ml[491,22451+30]..[491,22451+37])
  []
                                                                  ]
                                                            ]
                                                            expression (derive.ml[492,22493+24]..[547,25561+43])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (derive.ml[492,22493+28]..[492,22493+30])
                                                                    Ppat_var "fs" (derive.ml[492,22493+28]..[492,22493+30])
                                                                  expression (derive.ml[493,22526+26]..[515,23866+38])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (derive.ml[494,22561+28]..[494,22561+40])
  Ppat_constraint
  pattern (derive.ml[494,22561+29]..[494,22561+31])
    Ppat_var "ty" (derive.ml[494,22561+29]..[494,22561+31])
  core_type (derive.ml[494,22561+34]..[494,22561+39])
    Ptyp_constr "types" (derive.ml[494,22561+34]..[494,22561+39])
    []
expression (derive.ml[495,22605+30]..[515,23866+38])
  Pexp_constraint
  expression (derive.ml[495,22605+32]..[514,23791+70])
    Pexp_match
    expression (derive.ml[495,22605+38]..[495,22605+40])
      Pexp_ident "ty" (derive.ml[495,22605+38]..[495,22605+40])
    [
      <case>
        pattern (derive.ml[496,22651+34]..[496,22651+53])
          Ppat_variant "Mutual"
          Some
            pattern (derive.ml[496,22651+42]..[496,22651+53])
              Ppat_var "named_types" (derive.ml[496,22651+42]..[496,22651+53])
        expression (derive.ml[497,22708+36]..[498,22756+71])
          Pexp_apply
          expression (derive.ml[497,22708+36]..[497,22708+47])
            Pexp_ident "sem_of_list" (derive.ml[497,22708+36]..[497,22708+47])
          [
            <label> ""
              expression (derive.ml[498,22756+39]..[498,22756+70])
                Pexp_apply
                expression (derive.ml[498,22756+39]..[498,22756+47])
                  Pexp_ident "List.map" (derive.ml[498,22756+39]..[498,22756+47])
                [
                  <label> ""
                    expression (derive.ml[498,22756+48]..[498,22756+58])
                      Pexp_ident "mk_clfield" (derive.ml[498,22756+48]..[498,22756+58])
                  <label> ""
                    expression (derive.ml[498,22756+59]..[498,22756+70])
                      Pexp_ident "named_types" (derive.ml[498,22756+59]..[498,22756+70])
                ]
          ]
      <case>
        pattern (derive.ml[499,22828+34]..[499,22828+70])
          Ppat_variant "Single"
          Some
            pattern (derive.ml[499,22828+42]..[499,22828+70])
              Ppat_alias "named_type" (derive.ml[499,22828+59]..[499,22828+69])
              pattern (derive.ml[499,22828+43]..[499,22828+55])
                Ppat_tuple
                [
                  pattern (derive.ml[499,22828+44]..[499,22828+48])
                    Ppat_var "name" (derive.ml[499,22828+44]..[499,22828+48])
                  pattern (derive.ml[499,22828+49]..[499,22828+54])
                    Ppat_var "tydcl" (derive.ml[499,22828+49]..[499,22828+54])
                ]
        expression (derive.ml[500,22902+37]..[514,23791+69])
          Pexp_match
          expression (derive.ml[500,22902+43]..[500,22902+67])
            Pexp_apply
            expression (derive.ml[500,22902+43]..[500,22902+61])
              Pexp_ident "Ctyp.abstract_list" (derive.ml[500,22902+43]..[500,22902+61])
            [
              <label> ""
                expression (derive.ml[500,22902+62]..[500,22902+67])
                  Pexp_ident "tydcl" (derive.ml[500,22902+62]..[500,22902+67])
            ]
          [
            <case>
              pattern (derive.ml[501,22975+39]..[501,22975+45])
                Ppat_construct "Some" (derive.ml[501,22975+39]..[501,22975+43])
                Some
                  pattern (derive.ml[501,22975+44]..[501,22975+45])
                    Ppat_var "n" (derive.ml[501,22975+44]..[501,22975+45])
              expression (derive.ml[502,23024+41]..[513,23733+57])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (derive.ml[502,23024+45]..[502,23024+51])
                      Ppat_var "ty_str" (derive.ml[502,23024+45]..[502,23024+51])
                    expression (derive.ml[502,23024+51]..[503,23086+68])
                      Pexp_constraint
                      expression (derive.ml[503,23086+43]..[503,23086+68])
                        Pexp_apply
                        expression (derive.ml[503,23086+43]..[503,23086+62])
                          Pexp_ident "ObjsN.dump_typedecl" (derive.ml[503,23086+43]..[503,23086+62])
                        [
                          <label> ""
                            expression (derive.ml[503,23086+63]..[503,23086+68])
                              Pexp_ident "tydcl" (derive.ml[503,23086+63]..[503,23086+68])
                        ]
                      core_type (derive.ml[502,23024+53]..[502,23024+59])
                        Ptyp_constr "string" (derive.ml[502,23024+53]..[502,23024+59])
                        []
                ]
                expression (derive.ml[504,23158+41]..[513,23733+57])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (derive.ml[504,23158+45]..[504,23158+47])
                        Ppat_construct "()" (derive.ml[504,23158+45]..[504,23158+47])
                        None
                      expression (derive.ml[505,23208+43]..[506,23274+62])
                        Pexp_apply
                        expression (derive.ml[505,23208+43]..[505,23208+54])
                          Pexp_ident "Hashtbl.add" (derive.ml[505,23208+43]..[505,23208+54])
                        [
                          <label> ""
                            expression (derive.ml[505,23208+55]..[505,23208+58])
                              Pexp_ident "tbl" (derive.ml[505,23208+55]..[505,23208+58])
                          <label> ""
                            expression (derive.ml[505,23208+59]..[505,23208+65])
                              Pexp_ident "ty_str" (derive.ml[505,23208+59]..[505,23208+65])
                          <label> ""
                            expression (derive.ml[506,23274+46]..[506,23274+61])
                              Pexp_construct "Abstract" (derive.ml[506,23274+46]..[506,23274+54])
                              Some
                                expression (derive.ml[506,23274+55]..[506,23274+61])
                                  Pexp_ident "ty_str" (derive.ml[506,23274+55]..[506,23274+61])
                        ]
                  ]
                  expression (derive.ml[507,23340+41]..[513,23733+57])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (derive.ml[507,23340+45]..[507,23340+51])
                          Ppat_tuple
                          [
                            pattern (derive.ml[507,23340+46]..[507,23340+48])
                              Ppat_var "ty" (derive.ml[507,23340+46]..[507,23340+48])
                            pattern (derive.ml[507,23340+49]..[507,23340+50])
                              Ppat_any
                          ]
                        expression (derive.ml[507,23340+54]..[507,23340+67])
                          Pexp_apply
                          expression (derive.ml[507,23340+54]..[507,23340+61])
                            Pexp_ident "mk_type" (derive.ml[507,23340+54]..[507,23340+61])
                          [
                            <label> ""
                              expression (derive.ml[507,23340+62]..[507,23340+67])
                                Pexp_ident "tydcl" (derive.ml[507,23340+62]..[507,23340+67])
                          ]
                    ]
                    expression (derive.ml[508,23411+41]..[513,23733+57])
                      Pexp_coerce
                      expression (derive.ml[508,23411+42]..[512,23663+65])
                        Pexp_variant "CrMth"
                        Some
                          expression (derive.ml[509,23460+44]..[512,23663+65])
                            Pexp_tuple
                            [
                              expression (derive.ml[509,23460+46]..[509,23460+55])
                                Pexp_variant "Lid"
                                Some
                                  expression (derive.ml[509,23460+51]..[509,23460+55])
                                    Pexp_ident "name" (derive.ml[509,23460+51]..[509,23460+55])
                              expression (derive.ml[509,23460+58]..[509,23460+67])
                                Pexp_variant "Negative"
                                None
                              expression (derive.ml[510,23529+46]..[510,23529+55])
                                Pexp_variant "Negative"
                                None
                              expression (derive.ml[511,23586+46]..[511,23586+75])
                                Pexp_coerce
                                expression (derive.ml[511,23586+47]..[511,23586+61])
                                  Pexp_apply
                                  expression (derive.ml[511,23586+47]..[511,23586+59])
                                    Pexp_ident "ExpN.unknown" (derive.ml[511,23586+47]..[511,23586+59])
                                  [
                                    <label> ""
                                      expression (derive.ml[511,23586+60]..[511,23586+61])
                                        Pexp_ident "n" (derive.ml[511,23586+60]..[511,23586+61])
                                  ]
                                None
                                core_type (derive.ml[511,23586+65]..[511,23586+74])
                                  Ptyp_constr "Astfn.exp" (derive.ml[511,23586+65]..[511,23586+74])
                                  []
                              expression (derive.ml[512,23663+46]..[512,23663+64])
                                Pexp_coerce
                                expression (derive.ml[512,23663+47]..[512,23663+49])
                                  Pexp_ident "ty" (derive.ml[512,23663+47]..[512,23663+49])
                                None
                                core_type (derive.ml[512,23663+53]..[512,23663+63])
                                  Ptyp_constr "Astfn.ctyp" (derive.ml[512,23663+53]..[512,23663+63])
                                  []
                            ]
                      None
                      core_type (derive.ml[513,23733+43]..[513,23733+56])
                        Ptyp_constr "Astfn.clfield" (derive.ml[513,23733+43]..[513,23733+56])
                        []
            <case>
              pattern (derive.ml[514,23791+39]..[514,23791+43])
                Ppat_construct "None" (derive.ml[514,23791+39]..[514,23791+43])
                None
              expression (derive.ml[514,23791+48]..[514,23791+69])
                Pexp_apply
                expression (derive.ml[514,23791+48]..[514,23791+58])
                  Pexp_ident "mk_clfield" (derive.ml[514,23791+48]..[514,23791+58])
                [
                  <label> ""
                    expression (derive.ml[514,23791+59]..[514,23791+69])
                      Pexp_ident "named_type" (derive.ml[514,23791+59]..[514,23791+69])
                ]
          ]
    ]
  core_type (derive.ml[515,23866+30]..[515,23866+37])
    Ptyp_constr "clfield" (derive.ml[515,23866+30]..[515,23866+37])
    []
                                                                    ]
                                                              ]
                                                              expression (derive.ml[516,23908+24]..[547,25561+43])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[516,23908+28]..[516,23908+40])
                                                                      Ppat_tuple
                                                                      [
pattern (derive.ml[516,23908+29]..[516,23908+35])
  Ppat_var "extras" (derive.ml[516,23908+29]..[516,23908+35])
pattern (derive.ml[516,23908+36]..[516,23908+39])
  Ppat_var "lst" (derive.ml[516,23908+36]..[516,23908+39])
                                                                      ]
                                                                    expression (derive.ml[516,23908+43]..[516,23908+72])
                                                                      Pexp_apply
                                                                      expression (derive.ml[516,23908+43]..[516,23908+68])
Pexp_ident "Sigs_util.transform_mtyps" (derive.ml[516,23908+43]..[516,23908+68])
                                                                      [
<label> ""
  expression (derive.ml[516,23908+69]..[516,23908+72])
    Pexp_ident "lst" (derive.ml[516,23908+69]..[516,23908+72])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[517,23984+24]..[547,25561+43])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (derive.ml[517,23984+28]..[517,23984+32])
Ppat_var "body" (derive.ml[517,23984+28]..[517,23984+32])
                                                                      expression (derive.ml[517,23984+35]..[517,23984+50])
Pexp_apply
expression (derive.ml[517,23984+35]..[517,23984+43])
  Pexp_ident "List.map" (derive.ml[517,23984+35]..[517,23984+43])
[
  <label> ""
    expression (derive.ml[517,23984+44]..[517,23984+46])
      Pexp_ident "fs" (derive.ml[517,23984+44]..[517,23984+46])
  <label> ""
    expression (derive.ml[517,23984+47]..[517,23984+50])
      Pexp_ident "lst" (derive.ml[517,23984+47]..[517,23984+50])
]
                                                                  ]
                                                                  expression (derive.ml[518,24038+24]..[547,25561+43])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (derive.ml[518,24038+28]..[518,24038+32])
  Ppat_var "body" (derive.ml[518,24038+28]..[518,24038+32])
expression (derive.ml[518,24038+32]..[533,24877+52])
  Pexp_constraint
  expression (derive.ml[519,24082+26]..[533,24877+52])
    Pexp_let Nonrec
    [
      <def>
        pattern (derive.ml[519,24082+30]..[519,24082+35])
          Ppat_var "items" (derive.ml[519,24082+30]..[519,24082+35])
        expression (derive.ml[520,24120+28]..[532,24837+36])
          Pexp_apply
          expression (derive.ml[520,24120+28]..[520,24120+36])
            Pexp_ident "List.map" (derive.ml[520,24120+28]..[520,24120+36])
          [
            <label> ""
              expression (derive.ml[521,24157+31]..[531,24758+77])
                Pexp_function
                [
                  <case>
                    pattern (derive.ml[522,24197+33]..[522,24197+47])
                      Ppat_tuple
                      [
                        pattern (derive.ml[522,24197+34]..[522,24197+38])
                          Ppat_var "dest" (derive.ml[522,24197+34]..[522,24197+38])
                        pattern (derive.ml[522,24197+39]..[522,24197+42])
                          Ppat_var "src" (derive.ml[522,24197+39]..[522,24197+42])
                        pattern (derive.ml[522,24197+43]..[522,24197+46])
                          Ppat_var "len" (derive.ml[522,24197+43]..[522,24197+46])
                      ]
                    expression (derive.ml[523,24248+35]..[531,24758+77])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (derive.ml[523,24248+39]..[523,24248+49])
                            Ppat_tuple
                            [
                              pattern (derive.ml[523,24248+40]..[523,24248+42])
                                Ppat_var "ty" (derive.ml[523,24248+40]..[523,24248+42])
                              pattern (derive.ml[523,24248+43]..[523,24248+48])
                                Ppat_var "_dest" (derive.ml[523,24248+43]..[523,24248+48])
                            ]
                          expression (derive.ml[524,24300+37]..[525,24371+71])
                            Pexp_apply
                            expression (derive.ml[524,24300+37]..[524,24300+56])
                              Pexp_ident "Ctyp.mk_method_type" (derive.ml[524,24300+37]..[524,24300+56])
                            [
                              <label> "number"
                                expression (derive.ml[524,24300+65]..[524,24300+70])
                                  Pexp_ident "arity" (derive.ml[524,24300+65]..[524,24300+70])
                              <label> "prefix"
                                expression (derive.ml[525,24371+47]..[525,24371+52])
                                  Pexp_ident "names" (derive.ml[525,24371+47]..[525,24371+52])
                              <label> ""
                                expression (derive.ml[525,24371+53]..[525,24371+63])
                                  Pexp_tuple
                                  [
                                    expression (derive.ml[525,24371+54]..[525,24371+57])
                                      Pexp_ident "src" (derive.ml[525,24371+54]..[525,24371+57])
                                    expression (derive.ml[525,24371+59]..[525,24371+62])
                                      Pexp_ident "len" (derive.ml[525,24371+59]..[525,24371+62])
                                  ]
                              <label> ""
                                expression (derive.ml[525,24371+65]..[525,24371+70])
                                  Pexp_construct "Obj" (derive.ml[525,24371+65]..[525,24371+68])
                                  Some
                                    expression (derive.ml[525,24371+69]..[525,24371+70])
                                      Pexp_ident "k" (derive.ml[525,24371+69]..[525,24371+70])
                            ]
                      ]
                      expression (derive.ml[526,24446+35]..[531,24758+77])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (derive.ml[526,24446+39]..[526,24446+41])
                              Ppat_construct "()" (derive.ml[526,24446+39]..[526,24446+41])
                              None
                            expression (derive.ml[527,24490+37]..[527,24490+74])
                              Pexp_apply
                              expression (derive.ml[527,24490+37]..[527,24490+48])
                                Pexp_ident "Hashtbl.add" (derive.ml[527,24490+37]..[527,24490+48])
                              [
                                <label> ""
                                  expression (derive.ml[527,24490+49]..[527,24490+52])
                                    Pexp_ident "tbl" (derive.ml[527,24490+49]..[527,24490+52])
                                <label> ""
                                  expression (derive.ml[527,24490+53]..[527,24490+57])
                                    Pexp_ident "dest" (derive.ml[527,24490+53]..[527,24490+57])
                                <label> ""
                                  expression (derive.ml[527,24490+59]..[527,24490+73])
                                    Pexp_construct "Qualified" (derive.ml[527,24490+59]..[527,24490+68])
                                    Some
                                      expression (derive.ml[527,24490+69]..[527,24490+73])
                                        Pexp_ident "dest" (derive.ml[527,24490+69]..[527,24490+73])
                              ]
                        ]
                        expression (derive.ml[528,24568+35]..[531,24758+77])
                          Pexp_coerce
                          expression (derive.ml[528,24568+36]..[531,24758+59])
                            Pexp_variant "CrMth"
                            Some
                              expression (derive.ml[529,24611+38]..[531,24758+59])
                                Pexp_tuple
                                [
                                  expression (derive.ml[529,24611+40]..[529,24611+49])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (derive.ml[529,24611+45]..[529,24611+49])
                                        Pexp_ident "dest" (derive.ml[529,24611+45]..[529,24611+49])
                                  expression (derive.ml[529,24611+52]..[529,24611+61])
                                    Pexp_variant "Negative"
                                    None
                                  expression (derive.ml[529,24611+63]..[529,24611+72])
                                    Pexp_variant "Negative"
                                    None
                                  expression (derive.ml[530,24685+40]..[530,24685+71])
                                    Pexp_coerce
                                    expression (derive.ml[530,24685+41]..[530,24685+57])
                                      Pexp_apply
                                      expression (derive.ml[530,24685+41]..[530,24685+53])
                                        Pexp_ident "ExpN.unknown" (derive.ml[530,24685+41]..[530,24685+53])
                                      [
                                        <label> ""
                                          expression (derive.ml[530,24685+54]..[530,24685+57])
                                            Pexp_ident "len" (derive.ml[530,24685+54]..[530,24685+57])
                                      ]
                                    None
                                    core_type (derive.ml[530,24685+61]..[530,24685+70])
                                      Ptyp_constr "Astfn.exp" (derive.ml[530,24685+61]..[530,24685+70])
                                      []
                                  expression (derive.ml[531,24758+40]..[531,24758+58])
                                    Pexp_coerce
                                    expression (derive.ml[531,24758+41]..[531,24758+43])
                                      Pexp_ident "ty" (derive.ml[531,24758+41]..[531,24758+43])
                                    None
                                    core_type (derive.ml[531,24758+47]..[531,24758+57])
                                      Ptyp_constr "Astfn.ctyp" (derive.ml[531,24758+47]..[531,24758+57])
                                      []
                                ]
                          None
                          core_type (derive.ml[531,24758+63]..[531,24758+76])
                            Ptyp_constr "Astfn.clfield" (derive.ml[531,24758+63]..[531,24758+76])
                            []
                ]
            <label> ""
              expression (derive.ml[532,24837+30]..[532,24837+36])
                Pexp_ident "extras" (derive.ml[532,24837+30]..[532,24837+36])
          ]
    ]
    expression (derive.ml[533,24877+26]..[533,24877+52])
      Pexp_apply
      expression (derive.ml[533,24877+26]..[533,24877+37])
        Pexp_ident "sem_of_list" (derive.ml[533,24877+26]..[533,24877+37])
      [
        <label> ""
          expression (derive.ml[533,24877+39]..[533,24877+51])
            Pexp_apply
            expression (derive.ml[533,24877+44]..[533,24877+45])
              Pexp_ident "@" (derive.ml[533,24877+44]..[533,24877+45])
            [
              <label> ""
                expression (derive.ml[533,24877+39]..[533,24877+43])
                  Pexp_ident "body" (derive.ml[533,24877+39]..[533,24877+43])
              <label> ""
                expression (derive.ml[533,24877+46]..[533,24877+51])
                  Pexp_ident "items" (derive.ml[533,24877+46]..[533,24877+51])
            ]
      ]
  core_type (derive.ml[518,24038+34]..[518,24038+41])
    Ptyp_constr "clfield" (derive.ml[518,24038+34]..[518,24038+41])
    []
                                                                    ]
                                                                    expression (derive.ml[534,24933+24]..[547,25561+43])
                                                                      Pexp_let Nonrec
                                                                      [
<def>
  pattern (derive.ml[534,24933+28]..[534,24933+29])
    Ppat_var "v" (derive.ml[534,24933+28]..[534,24933+29])
  expression (derive.ml[534,24933+32]..[534,24933+64])
    Pexp_apply
    expression (derive.ml[534,24933+32]..[534,24933+43])
      Pexp_ident "Ctyp.mk_obj" (derive.ml[534,24933+32]..[534,24933+43])
    [
      <label> ""
        expression (derive.ml[534,24933+44]..[534,24933+54])
          Pexp_ident "class_name" (derive.ml[534,24933+44]..[534,24933+54])
      <label> ""
        expression (derive.ml[534,24933+55]..[534,24933+59])
          Pexp_ident "base" (derive.ml[534,24933+55]..[534,24933+59])
      <label> ""
        expression (derive.ml[534,24933+60]..[534,24933+64])
          Pexp_ident "body" (derive.ml[534,24933+60]..[534,24933+64])
    ]
                                                                      ]
                                                                      expression (derive.ml[535,25001+24]..[547,25561+43])
Pexp_sequence
expression (derive.ml[535,25001+25]..[541,25271+46])
  Pexp_apply
  expression (derive.ml[535,25001+25]..[535,25001+37])
    Pexp_ident "Hashtbl.iter" (derive.ml[535,25001+25]..[535,25001+37])
  [
    <label> ""
      expression (derive.ml[536,25039+28]..[541,25271+41])
        Pexp_function
        [
          <case>
            pattern (derive.ml[537,25076+30]..[537,25076+31])
              Ppat_any
            expression (derive.ml[538,25111+33]..[541,25271+40])
              Pexp_function
              [
                <case>
                  pattern (derive.ml[539,25153+35]..[539,25153+36])
                    Ppat_var "v" (derive.ml[539,25153+35]..[539,25153+36])
                  expression (derive.ml[540,25193+37]..[541,25271+40])
                    Pexp_apply
                    expression (derive.ml[540,25193+37]..[540,25193+44])
                      Pexp_ident "eprintf" (derive.ml[540,25193+37]..[540,25193+44])
                    [
                      <label> ""
                        expression (derive.ml[540,25193+45]..[540,25193+55])
                          Pexp_constant Const_string("@[%a@]@.",None)
                      <label> ""
                        expression (derive.ml[540,25193+56]..[540,25193+77])
                          Pexp_ident "pp_print_warning_type" (derive.ml[540,25193+56]..[540,25193+77])
                      <label> ""
                        expression (derive.ml[541,25271+39]..[541,25271+40])
                          Pexp_ident "v" (derive.ml[541,25271+39]..[541,25271+40])
                    ]
              ]
        ]
    <label> ""
      expression (derive.ml[541,25271+43]..[541,25271+46])
        Pexp_ident "tbl" (derive.ml[541,25271+43]..[541,25271+46])
  ]
expression (derive.ml[535,25001+24]..[547,25561+43])
  Pexp_match
  expression (derive.ml[542,25319+32]..[542,25319+43])
    Pexp_ident "module_name" (derive.ml[542,25319+32]..[542,25319+43])
  [
    <case>
      pattern (derive.ml[543,25368+28]..[543,25368+32])
        Ppat_construct "None" (derive.ml[543,25368+28]..[543,25368+32])
        None
      expression (derive.ml[543,25368+37]..[543,25368+38])
        Pexp_ident "v" (derive.ml[543,25368+37]..[543,25368+38])
    <case>
      pattern (derive.ml[544,25407+28]..[544,25407+34])
        Ppat_construct "Some" (derive.ml[544,25407+28]..[544,25407+32])
        Some
          pattern (derive.ml[544,25407+33]..[544,25407+34])
            Ppat_var "u" (derive.ml[544,25407+33]..[544,25407+34])
      expression (derive.ml[545,25445+30]..[547,25561+41])
        Pexp_coerce
        expression (derive.ml[545,25445+31]..[546,25484+72])
          Pexp_variant "Module"
          Some
            expression (derive.ml[546,25484+33]..[546,25484+72])
              Pexp_tuple
              [
                expression (derive.ml[546,25484+35]..[546,25484+41])
                  Pexp_variant "Uid"
                  Some
                    expression (derive.ml[546,25484+40]..[546,25484+41])
                      Pexp_ident "u" (derive.ml[546,25484+40]..[546,25484+41])
                expression (derive.ml[546,25484+45]..[546,25484+70])
                  Pexp_variant "Struct"
                  Some
                    expression (derive.ml[546,25484+53]..[546,25484+70])
                      Pexp_coerce
                      expression (derive.ml[546,25484+54]..[546,25484+55])
                        Pexp_ident "v" (derive.ml[546,25484+54]..[546,25484+55])
                      None
                      core_type (derive.ml[546,25484+59]..[546,25484+69])
                        Ptyp_constr "Astfn.stru" (derive.ml[546,25484+59]..[546,25484+69])
                        []
              ]
        None
        core_type (derive.ml[547,25561+30]..[547,25561+40])
          Ptyp_constr "Astfn.stru" (derive.ml[547,25561+30]..[547,25561+40])
          []
  ]
                                                    core_type (derive.ml[547,25561+46]..[547,25561+50])
                                                      Ptyp_constr "stru" (derive.ml[547,25561+46]..[547,25561+50])
                                                      []
                                              ]
                                      ]
                                ]
                          ]
    ]
  structure_item (derive.ml[548,25616+0]..[581,26916+46])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[548,25616+4]..[548,25616+12])
          Ppat_var "gen_stru" (derive.ml[548,25616+4]..[548,25616+12])
        expression (derive.ml[548,25616+13]..[581,26916+46])
          Pexp_fun "?module_name"
          None
          pattern (derive.ml[548,25616+14]..[548,25616+25])
            Ppat_var "module_name" (derive.ml[548,25616+14]..[548,25616+25])
          expression (derive.ml[548,25616+27]..[581,26916+46])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[548,25616+36]..[548,25616+37])
                Pexp_constant Const_int 1
            pattern (derive.ml[548,25616+29]..[548,25616+34])
              Ppat_var "arity" (derive.ml[548,25616+29]..[548,25616+34])
            expression (derive.ml[548,25616+40]..[581,26916+46])
              Pexp_fun "?default"
              Some
                expression (derive.ml[549,25667+2]..[550,25738+12])
                  Pexp_coerce
                  expression (derive.ml[549,25667+3]..[549,25667+66])
                    Pexp_variant "App"
                    Some
                      expression (derive.ml[549,25667+8]..[549,25667+66])
                        Pexp_tuple
                        [
                          expression (derive.ml[549,25667+10]..[549,25667+25])
                            Pexp_variant "Lid"
                            Some
                              expression (derive.ml[549,25667+15]..[549,25667+25])
                                Pexp_constant Const_string("failwith",None)
                          expression (derive.ml[549,25667+29]..[549,25667+64])
                            Pexp_variant "Str"
                            Some
                              expression (derive.ml[549,25667+34]..[549,25667+64])
                                Pexp_constant Const_string("arity >= 2 in other branches",None)
                        ]
                  None
                  core_type (derive.ml[550,25738+2]..[550,25738+11])
                    Ptyp_constr "Astfn.exp" (derive.ml[550,25738+2]..[550,25738+11])
                    []
              pattern (derive.ml[548,25616+42]..[548,25616+49])
                Ppat_var "default" (derive.ml[548,25616+42]..[548,25616+49])
              expression (derive.ml[550,25738+15]..[581,26916+46])
                Pexp_fun "?cons_transform"
                None
                pattern (derive.ml[550,25738+16]..[550,25738+30])
                  Ppat_var "cons_transform" (derive.ml[550,25738+16]..[550,25738+30])
                expression (derive.ml[550,25738+32]..[581,26916+46])
                  Pexp_fun "?annot"
                  None
                  pattern (derive.ml[550,25738+33]..[550,25738+38])
                    Ppat_var "annot" (derive.ml[550,25738+33]..[550,25738+38])
                  expression (derive.ml[550,25738+40]..[581,26916+46])
                    Pexp_fun "id"
                    None
                    pattern (derive.ml[550,25738+44]..[550,25738+69])
                      Ppat_constraint
                      pattern (derive.ml[550,25738+45]..[550,25738+47])
                        Ppat_var "id" (derive.ml[550,25738+45]..[550,25738+47])
                      core_type (derive.ml[550,25738+50]..[550,25738+68])
                        Ptyp_constr "basic_id_transform" (derive.ml[550,25738+50]..[550,25738+68])
                        []
                    expression (derive.ml[551,25809+2]..[581,26916+46])
                      Pexp_fun "?names"
                      Some
                        expression (derive.ml[551,25809+11]..[551,25809+13])
                          Pexp_construct "[]" (derive.ml[551,25809+11]..[551,25809+13])
                          None
                      pattern (derive.ml[551,25809+4]..[551,25809+9])
                        Ppat_var "names" (derive.ml[551,25809+4]..[551,25809+9])
                      expression (derive.ml[551,25809+16]..[581,26916+46])
                        Pexp_fun "mk_tuple"
                        None
                        pattern (derive.ml[551,25809+17]..[551,25809+25])
                          Ppat_var "mk_tuple" (derive.ml[551,25809+17]..[551,25809+25])
                        expression (derive.ml[551,25809+27]..[581,26916+46])
                          Pexp_fun "mk_record"
                          None
                          pattern (derive.ml[551,25809+28]..[551,25809+37])
                            Ppat_var "mk_record" (derive.ml[551,25809+28]..[551,25809+37])
                          expression (derive.ml[551,25809+39]..[581,26916+46])
                            Pexp_fun "mk_variant"
                            None
                            pattern (derive.ml[551,25809+40]..[551,25809+50])
                              Ppat_var "mk_variant" (derive.ml[551,25809+40]..[551,25809+50])
                            expression (derive.ml[552,25863+2]..[581,26916+46])
                              Pexp_function
                              [
                                <case>
                                  pattern (derive.ml[553,25874+4]..[553,25874+6])
                                    Ppat_construct "()" (derive.ml[553,25874+4]..[553,25874+6])
                                    None
                                  expression (derive.ml[554,25884+6]..[581,26916+46])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (derive.ml[554,25884+10]..[554,25884+28])
                                          Ppat_var "left_type_variable" (derive.ml[554,25884+10]..[554,25884+28])
                                        expression (derive.ml[554,25884+31]..[554,25884+41])
                                          Pexp_variant "Pre"
                                          Some
                                            expression (derive.ml[554,25884+36]..[554,25884+41])
                                              Pexp_constant Const_string("mf_",None)
                                    ]
                                    expression (derive.ml[555,25929+6]..[581,26916+46])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (derive.ml[555,25929+10]..[555,25929+29])
                                            Ppat_var "right_type_variable" (derive.ml[555,25929+10]..[555,25929+29])
                                          expression (derive.ml[555,25929+32]..[555,25929+42])
                                            Pexp_variant "Pre"
                                            Some
                                              expression (derive.ml[555,25929+37]..[555,25929+42])
                                                Pexp_constant Const_string("mf_",None)
                                      ]
                                      expression (derive.ml[556,25975+6]..[581,26916+46])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (derive.ml[556,25975+10]..[556,25975+22])
                                              Ppat_var "left_type_id" (derive.ml[556,25975+10]..[556,25975+22])
                                            expression (derive.ml[556,25975+25]..[556,25975+27])
                                              Pexp_ident "id" (derive.ml[556,25975+25]..[556,25975+27])
                                        ]
                                        expression (derive.ml[557,26006+6]..[581,26916+46])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (derive.ml[557,26006+10]..[557,26006+23])
                                                Ppat_var "right_type_id" (derive.ml[557,26006+10]..[557,26006+23])
                                              expression (derive.ml[558,26032+8]..[563,26171+71])
                                                Pexp_match
                                                expression (derive.ml[558,26032+14]..[558,26032+25])
                                                  Pexp_ident "module_name" (derive.ml[558,26032+14]..[558,26032+25])
                                                [
                                                  <case>
                                                    pattern (derive.ml[559,26063+10]..[559,26063+14])
                                                      Ppat_construct "None" (derive.ml[559,26063+10]..[559,26063+14])
                                                      None
                                                    expression (derive.ml[559,26063+19]..[559,26063+44])
                                                      Pexp_coerce
                                                      expression (derive.ml[559,26063+20]..[559,26063+22])
                                                        Pexp_ident "id" (derive.ml[559,26063+20]..[559,26063+22])
                                                      None
                                                      core_type (derive.ml[559,26063+26]..[559,26063+43])
                                                        Ptyp_constr "full_id_transform" (derive.ml[559,26063+26]..[559,26063+43])
                                                        []
                                                  <case>
                                                    pattern (derive.ml[560,26108+10]..[560,26108+16])
                                                      Ppat_construct "Some" (derive.ml[560,26108+10]..[560,26108+14])
                                                      Some
                                                        pattern (derive.ml[560,26108+15]..[560,26108+16])
                                                          Ppat_var "m" (derive.ml[560,26108+15]..[560,26108+16])
                                                    expression (derive.ml[561,26128+12]..[563,26171+71])
                                                      Pexp_variant "Last"
                                                      Some
                                                        expression (derive.ml[562,26146+16]..[563,26171+69])
                                                          Pexp_function
                                                          [
                                                            <case>
                                                              pattern (derive.ml[563,26171+18]..[563,26171+19])
                                                                Ppat_var "s" (derive.ml[563,26171+18]..[563,26171+19])
                                                              expression (derive.ml[563,26171+23]..[563,26171+69])
                                                                Pexp_variant "Dot"
                                                                Some
                                                                  expression (derive.ml[563,26171+28]..[563,26171+69])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (derive.ml[563,26171+30]..[563,26171+36])
Pexp_variant "Uid"
Some
  expression (derive.ml[563,26171+35]..[563,26171+36])
    Pexp_ident "m" (derive.ml[563,26171+35]..[563,26171+36])
                                                                      expression (derive.ml[563,26171+40]..[563,26171+67])
Pexp_variant "Lid"
Some
  expression (derive.ml[563,26171+46]..[563,26171+66])
    Pexp_apply
    expression (derive.ml[563,26171+46]..[563,26171+61])
      Pexp_ident "basic_transform" (derive.ml[563,26171+46]..[563,26171+61])
    [
      <label> ""
        expression (derive.ml[563,26171+62]..[563,26171+64])
          Pexp_ident "id" (derive.ml[563,26171+62]..[563,26171+64])
      <label> ""
        expression (derive.ml[563,26171+65]..[563,26171+66])
          Pexp_ident "s" (derive.ml[563,26171+65]..[563,26171+66])
    ]
                                                                    ]
                                                          ]
                                                ]
                                          ]
                                          expression (derive.ml[564,26246+6]..[581,26916+46])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[564,26246+10]..[564,26246+17])
                                                  Ppat_var "default" (derive.ml[564,26246+10]..[564,26246+17])
                                                expression (derive.ml[565,26266+8]..[573,26536+21])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (derive.ml[566,26283+10]..[566,26283+20])
                                                        Ppat_tuple
                                                        [
                                                          pattern (derive.ml[566,26283+11]..[566,26283+12])
                                                            Ppat_any
                                                          pattern (derive.ml[566,26283+13]..[566,26283+19])
                                                            Ppat_var "number" (derive.ml[566,26283+13]..[566,26283+19])
                                                        ]
                                                      expression (derive.ml[567,26307+12]..[573,26536+21])
                                                        Pexp_ifthenelse
                                                        expression (derive.ml[567,26307+15]..[567,26307+25])
                                                          Pexp_apply
                                                          expression (derive.ml[567,26307+22]..[567,26307+23])
                                                            Pexp_ident ">" (derive.ml[567,26307+22]..[567,26307+23])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[567,26307+15]..[567,26307+21])
                                                                Pexp_ident "number" (derive.ml[567,26307+15]..[567,26307+21])
                                                            <label> ""
                                                              expression (derive.ml[567,26307+24]..[567,26307+25])
                                                                Pexp_constant Const_int 1
                                                          ]
                                                        expression (derive.ml[569,26350+14]..[572,26508+27])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (derive.ml[569,26350+18]..[569,26350+21])
                                                                Ppat_var "pat" (derive.ml[569,26350+18]..[569,26350+21])
                                                              expression (derive.ml[569,26350+24]..[569,26350+63])
                                                                Pexp_coerce
                                                                expression (derive.ml[569,26350+25]..[569,26350+55])
                                                                  Pexp_apply
                                                                  expression (derive.ml[569,26350+25]..[569,26350+44])
                                                                    Pexp_ident "EpN.tuple_of_number" (derive.ml[569,26350+25]..[569,26350+44])
                                                                  [
                                                                    <label> ""
                                                                      expression (derive.ml[569,26350+45]..[569,26350+49])
Pexp_variant "Any"
None
                                                                    <label> ""
                                                                      expression (derive.ml[569,26350+50]..[569,26350+55])
Pexp_ident "arity" (derive.ml[569,26350+50]..[569,26350+55])
                                                                  ]
                                                                None
                                                                core_type (derive.ml[569,26350+59]..[569,26350+62])
                                                                  Ptyp_constr "pat" (derive.ml[569,26350+59]..[569,26350+62])
                                                                  []
                                                          ]
                                                          expression (derive.ml[570,26417+14]..[572,26508+27])
                                                            Pexp_construct "Some" (derive.ml[570,26417+14]..[570,26417+18])
                                                            Some
                                                              expression (derive.ml[571,26436+16]..[572,26508+27])
                                                                Pexp_coerce
                                                                expression (derive.ml[571,26436+17]..[571,26436+67])
                                                                  Pexp_variant "Case"
                                                                  Some
                                                                    expression (derive.ml[571,26436+23]..[571,26436+67])
                                                                      Pexp_tuple
                                                                      [
expression (derive.ml[571,26436+24]..[571,26436+42])
  Pexp_coerce
  expression (derive.ml[571,26436+25]..[571,26436+28])
    Pexp_ident "pat" (derive.ml[571,26436+25]..[571,26436+28])
  None
  core_type (derive.ml[571,26436+32]..[571,26436+41])
    Ptyp_constr "Astfn.pat" (derive.ml[571,26436+32]..[571,26436+41])
    []
expression (derive.ml[571,26436+44]..[571,26436+66])
  Pexp_coerce
  expression (derive.ml[571,26436+45]..[571,26436+52])
    Pexp_ident "default" (derive.ml[571,26436+45]..[571,26436+52])
  None
  core_type (derive.ml[571,26436+56]..[571,26436+65])
    Ptyp_constr "Astfn.exp" (derive.ml[571,26436+56]..[571,26436+65])
    []
                                                                      ]
                                                                None
                                                                core_type (derive.ml[572,26508+16]..[572,26508+26])
                                                                  Ptyp_constr "Astfn.case" (derive.ml[572,26508+16]..[572,26508+26])
                                                                  []
                                                        Some
                                                          expression (derive.ml[573,26536+17]..[573,26536+21])
                                                            Pexp_construct "None" (derive.ml[573,26536+17]..[573,26536+21])
                                                            None
                                                  ]
                                            ]
                                            expression (derive.ml[574,26561+6]..[581,26916+46])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (derive.ml[574,26561+10]..[574,26561+15])
                                                    Ppat_var "names" (derive.ml[574,26561+10]..[574,26561+15])
                                                  expression (derive.ml[574,26561+18]..[574,26561+23])
                                                    Pexp_ident "names" (derive.ml[574,26561+18]..[574,26561+23])
                                              ]
                                              expression (derive.ml[575,26588+6]..[581,26916+46])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (derive.ml[575,26588+10]..[575,26588+19])
                                                      Ppat_var "mk_record" (derive.ml[575,26588+10]..[575,26588+19])
                                                    expression (derive.ml[575,26588+22]..[575,26588+31])
                                                      Pexp_ident "mk_record" (derive.ml[575,26588+22]..[575,26588+31])
                                                ]
                                                expression (derive.ml[576,26623+6]..[581,26916+46])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[576,26623+10]..[576,26623+24])
                                                        Ppat_var "cons_transform" (derive.ml[576,26623+10]..[576,26623+24])
                                                      expression (derive.ml[576,26623+27]..[576,26623+41])
                                                        Pexp_ident "cons_transform" (derive.ml[576,26623+27]..[576,26623+41])
                                                  ]
                                                  expression (derive.ml[577,26668+6]..[581,26916+46])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[577,26668+10]..[577,26668+12])
                                                          Ppat_construct "()" (derive.ml[577,26668+10]..[577,26668+12])
                                                          None
                                                        expression (derive.ml[577,26668+15]..[577,26668+26])
                                                          Pexp_apply
                                                          expression (derive.ml[577,26668+15]..[577,26668+20])
                                                            Pexp_ident "check" (derive.ml[577,26668+15]..[577,26668+20])
                                                          [
                                                            <label> ""
                                                              expression (derive.ml[577,26668+21]..[577,26668+26])
                                                                Pexp_ident "names" (derive.ml[577,26668+21]..[577,26668+26])
                                                          ]
                                                    ]
                                                    expression (derive.ml[578,26698+6]..[581,26916+46])
                                                      Pexp_apply
                                                      expression (derive.ml[578,26698+6]..[578,26698+19])
                                                        Pexp_ident "stru_of_mtyps" (derive.ml[578,26698+6]..[578,26698+19])
                                                      [
                                                        <label> "?module_name"
                                                          expression (derive.ml[578,26698+20]..[578,26698+32])
                                                            Pexp_ident "module_name" (derive.ml[578,26698+20]..[578,26698+32])
                                                        <label> "?cons_transform"
                                                          expression (derive.ml[578,26698+33]..[578,26698+48])
                                                            Pexp_ident "cons_transform" (derive.ml[578,26698+33]..[578,26698+48])
                                                        <label> "?annot"
                                                          expression (derive.ml[578,26698+49]..[578,26698+55])
                                                            Pexp_ident "annot" (derive.ml[578,26698+49]..[578,26698+55])
                                                        <label> "arity"
                                                          expression (derive.ml[578,26698+57]..[578,26698+62])
                                                            Pexp_ident "arity" (derive.ml[578,26698+57]..[578,26698+62])
                                                        <label> "names"
                                                          expression (derive.ml[578,26698+64]..[578,26698+69])
                                                            Pexp_ident "names" (derive.ml[578,26698+64]..[578,26698+69])
                                                        <label> "default"
                                                          expression (derive.ml[579,26768+9]..[579,26768+16])
                                                            Pexp_ident "default" (derive.ml[579,26768+9]..[579,26768+16])
                                                        <label> "mk_variant"
                                                          expression (derive.ml[579,26768+18]..[579,26768+28])
                                                            Pexp_ident "mk_variant" (derive.ml[579,26768+18]..[579,26768+28])
                                                        <label> "left_type_id"
                                                          expression (derive.ml[579,26768+30]..[579,26768+42])
                                                            Pexp_ident "left_type_id" (derive.ml[579,26768+30]..[579,26768+42])
                                                        <label> "left_type_variable"
                                                          expression (derive.ml[579,26768+44]..[579,26768+62])
                                                            Pexp_ident "left_type_variable" (derive.ml[579,26768+44]..[579,26768+62])
                                                        <label> "mk_record"
                                                          expression (derive.ml[579,26768+64]..[579,26768+73])
                                                            Pexp_ident "mk_record" (derive.ml[579,26768+64]..[579,26768+73])
                                                        <label> ""
                                                          expression (derive.ml[580,26842+9]..[581,26916+45])
                                                            Pexp_apply
                                                            expression (derive.ml[580,26842+9]..[580,26842+34])
                                                              Pexp_ident "normal_simple_exp_of_ctyp" (derive.ml[580,26842+9]..[580,26842+34])
                                                            [
                                                              <label> "arity"
                                                                expression (derive.ml[580,26842+36]..[580,26842+41])
                                                                  Pexp_ident "arity" (derive.ml[580,26842+36]..[580,26842+41])
                                                              <label> "names"
                                                                expression (derive.ml[580,26842+43]..[580,26842+48])
                                                                  Pexp_ident "names" (derive.ml[580,26842+43]..[580,26842+48])
                                                              <label> "mk_tuple"
                                                                expression (derive.ml[580,26842+50]..[580,26842+58])
                                                                  Pexp_ident "mk_tuple" (derive.ml[580,26842+50]..[580,26842+58])
                                                              <label> "right_type_id"
                                                                expression (derive.ml[580,26842+60]..[580,26842+73])
                                                                  Pexp_ident "right_type_id" (derive.ml[580,26842+60]..[580,26842+73])
                                                              <label> "left_type_id"
                                                                expression (derive.ml[581,26916+12]..[581,26916+24])
                                                                  Pexp_ident "left_type_id" (derive.ml[581,26916+12]..[581,26916+24])
                                                              <label> "right_type_variable"
                                                                expression (derive.ml[581,26916+26]..[581,26916+45])
                                                                  Pexp_ident "right_type_variable" (derive.ml[581,26916+26]..[581,26916+45])
                                                            ]
                                                      ]
                              ]
    ]
  structure_item (derive.ml[582,26963+0]..[612,28257+6])
    Pstr_value Nonrec
    [
      <def>
        pattern (derive.ml[582,26963+4]..[582,26963+14])
          Ppat_var "gen_object" (derive.ml[582,26963+4]..[582,26963+14])
        expression (derive.ml[582,26963+15]..[612,28257+6])
          Pexp_fun "?module_name"
          None
          pattern (derive.ml[582,26963+16]..[582,26963+27])
            Ppat_var "module_name" (derive.ml[582,26963+16]..[582,26963+27])
          expression (derive.ml[582,26963+29]..[612,28257+6])
            Pexp_fun "?arity"
            Some
              expression (derive.ml[582,26963+38]..[582,26963+39])
                Pexp_constant Const_int 1
            pattern (derive.ml[582,26963+31]..[582,26963+36])
              Ppat_var "arity" (derive.ml[582,26963+31]..[582,26963+36])
            expression (derive.ml[582,26963+42]..[612,28257+6])
              Pexp_fun "?default"
              Some
                expression (derive.ml[583,27016+2]..[584,27087+12])
                  Pexp_coerce
                  expression (derive.ml[583,27016+3]..[583,27016+66])
                    Pexp_variant "App"
                    Some
                      expression (derive.ml[583,27016+8]..[583,27016+66])
                        Pexp_tuple
                        [
                          expression (derive.ml[583,27016+10]..[583,27016+25])
                            Pexp_variant "Lid"
                            Some
                              expression (derive.ml[583,27016+15]..[583,27016+25])
                                Pexp_constant Const_string("failwith",None)
                          expression (derive.ml[583,27016+29]..[583,27016+64])
                            Pexp_variant "Str"
                            Some
                              expression (derive.ml[583,27016+34]..[583,27016+64])
                                Pexp_constant Const_string("arity >= 2 in other branches",None)
                        ]
                  None
                  core_type (derive.ml[584,27087+2]..[584,27087+11])
                    Ptyp_constr "Astfn.exp" (derive.ml[584,27087+2]..[584,27087+11])
                    []
              pattern (derive.ml[582,26963+44]..[582,26963+51])
                Ppat_var "default" (derive.ml[582,26963+44]..[582,26963+51])
              expression (derive.ml[584,27087+15]..[612,28257+6])
                Pexp_fun "?cons_transform"
                None
                pattern (derive.ml[584,27087+16]..[584,27087+30])
                  Ppat_var "cons_transform" (derive.ml[584,27087+16]..[584,27087+30])
                expression (derive.ml[584,27087+32]..[612,28257+6])
                  Pexp_fun "kind"
                  None
                  pattern (derive.ml[584,27087+33]..[584,27087+37])
                    Ppat_var "kind" (derive.ml[584,27087+33]..[584,27087+37])
                  expression (derive.ml[584,27087+39]..[612,28257+6])
                    Pexp_fun "base"
                    None
                    pattern (derive.ml[584,27087+40]..[584,27087+44])
                      Ppat_var "base" (derive.ml[584,27087+40]..[584,27087+44])
                    expression (derive.ml[584,27087+46]..[612,28257+6])
                      Pexp_fun "class_name"
                      None
                      pattern (derive.ml[584,27087+47]..[584,27087+57])
                        Ppat_var "class_name" (derive.ml[584,27087+47]..[584,27087+57])
                      expression (derive.ml[585,27148+2]..[612,28257+6])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (derive.ml[585,27148+6]..[585,27148+10])
                              Ppat_var "make" (derive.ml[585,27148+6]..[585,27148+10])
                            expression (derive.ml[585,27148+11]..[611,28189+64])
                              Pexp_fun "?names"
                              Some
                                expression (derive.ml[585,27148+20]..[585,27148+22])
                                  Pexp_construct "[]" (derive.ml[585,27148+20]..[585,27148+22])
                                  None
                              pattern (derive.ml[585,27148+13]..[585,27148+18])
                                Ppat_var "names" (derive.ml[585,27148+13]..[585,27148+18])
                              expression (derive.ml[585,27148+25]..[611,28189+64])
                                Pexp_fun "mk_tuple"
                                None
                                pattern (derive.ml[585,27148+26]..[585,27148+34])
                                  Ppat_var "mk_tuple" (derive.ml[585,27148+26]..[585,27148+34])
                                expression (derive.ml[585,27148+36]..[611,28189+64])
                                  Pexp_fun "mk_record"
                                  None
                                  pattern (derive.ml[585,27148+37]..[585,27148+46])
                                    Ppat_var "mk_record" (derive.ml[585,27148+37]..[585,27148+46])
                                  expression (derive.ml[585,27148+48]..[611,28189+64])
                                    Pexp_fun "mk_variant"
                                    None
                                    pattern (derive.ml[585,27148+49]..[585,27148+59])
                                      Ppat_var "mk_variant" (derive.ml[585,27148+49]..[585,27148+59])
                                    expression (derive.ml[586,27211+4]..[611,28189+64])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (derive.ml[587,27224+6]..[587,27224+8])
                                            Ppat_construct "()" (derive.ml[587,27224+6]..[587,27224+8])
                                            None
                                          expression (derive.ml[588,27236+8]..[611,28189+64])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (derive.ml[588,27236+12]..[588,27236+14])
                                                  Ppat_construct "()" (derive.ml[588,27236+12]..[588,27236+14])
                                                  None
                                                expression (derive.ml[588,27236+17]..[588,27236+28])
                                                  Pexp_apply
                                                  expression (derive.ml[588,27236+17]..[588,27236+22])
                                                    Pexp_ident "check" (derive.ml[588,27236+17]..[588,27236+22])
                                                  [
                                                    <label> ""
                                                      expression (derive.ml[588,27236+23]..[588,27236+28])
                                                        Pexp_ident "names" (derive.ml[588,27236+23]..[588,27236+28])
                                                  ]
                                            ]
                                            expression (derive.ml[589,27268+8]..[611,28189+64])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (derive.ml[589,27268+12]..[589,27268+30])
                                                    Ppat_var "left_type_variable" (derive.ml[589,27268+12]..[589,27268+30])
                                                  expression (derive.ml[589,27268+33]..[589,27268+43])
                                                    Pexp_variant "Pre"
                                                    Some
                                                      expression (derive.ml[589,27268+38]..[589,27268+43])
                                                        Pexp_constant Const_string("mf_",None)
                                              ]
                                              expression (derive.ml[590,27315+8]..[611,28189+64])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (derive.ml[590,27315+12]..[590,27315+31])
                                                      Ppat_var "right_type_variable" (derive.ml[590,27315+12]..[590,27315+31])
                                                    expression (derive.ml[591,27349+10]..[595,27471+63])
                                                      Pexp_variant "Exp"
                                                      Some
                                                        expression (derive.ml[592,27364+13]..[595,27471+62])
                                                          Pexp_function
                                                          [
                                                            <case>
                                                              pattern (derive.ml[593,27386+15]..[593,27386+16])
                                                                Ppat_var "v" (derive.ml[593,27386+15]..[593,27386+16])
                                                              expression (derive.ml[594,27406+17]..[595,27471+62])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (derive.ml[594,27406+21]..[594,27406+22])
                                                                      Ppat_var "v" (derive.ml[594,27406+21]..[594,27406+22])
                                                                    expression (derive.ml[594,27406+25]..[594,27406+61])
                                                                      Pexp_apply
                                                                      expression (derive.ml[594,27406+25]..[594,27406+40])
Pexp_ident "basic_transform" (derive.ml[594,27406+25]..[594,27406+40])
                                                                      [
<label> ""
  expression (derive.ml[594,27406+41]..[594,27406+59])
    Pexp_ident "left_type_variable" (derive.ml[594,27406+41]..[594,27406+59])
<label> ""
  expression (derive.ml[594,27406+60]..[594,27406+61])
    Pexp_ident "v" (derive.ml[594,27406+60]..[594,27406+61])
                                                                      ]
                                                                ]
                                                                expression (derive.ml[595,27471+17]..[595,27471+62])
                                                                  Pexp_coerce
                                                                  expression (derive.ml[595,27471+18]..[595,27471+48])
                                                                    Pexp_variant "App"
                                                                    Some
                                                                      expression (derive.ml[595,27471+23]..[595,27471+48])
Pexp_tuple
[
  expression (derive.ml[595,27471+25]..[595,27471+31])
    Pexp_variant "Lid"
    Some
      expression (derive.ml[595,27471+30]..[595,27471+31])
        Pexp_ident "v" (derive.ml[595,27471+30]..[595,27471+31])
  expression (derive.ml[595,27471+35]..[595,27471+46])
    Pexp_variant "Lid"
    Some
      expression (derive.ml[595,27471+40]..[595,27471+46])
        Pexp_constant Const_string("self",None)
]
                                                                  None
                                                                  core_type (derive.ml[595,27471+52]..[595,27471+61])
                                                                    Ptyp_constr "Astfn.exp" (derive.ml[595,27471+52]..[595,27471+61])
                                                                    []
                                                          ]
                                                ]
                                                expression (derive.ml[596,27538+8]..[611,28189+64])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (derive.ml[596,27538+12]..[596,27538+24])
                                                        Ppat_var "left_type_id" (derive.ml[596,27538+12]..[596,27538+24])
                                                      expression (derive.ml[596,27538+27]..[596,27538+34])
                                                        Pexp_variant "Pre"
                                                        Some
                                                          expression (derive.ml[596,27538+32]..[596,27538+34])
                                                            Pexp_constant Const_string("",None)
                                                  ]
                                                  expression (derive.ml[597,27576+8]..[611,28189+64])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (derive.ml[597,27576+12]..[597,27576+25])
                                                          Ppat_var "right_type_id" (derive.ml[597,27576+12]..[597,27576+25])
                                                        expression (derive.ml[597,27576+28]..[597,27576+63])
                                                          Pexp_variant "Obj"
                                                          Some
                                                            expression (derive.ml[597,27576+34]..[597,27576+62])
                                                              Pexp_apply
                                                              expression (derive.ml[597,27576+34]..[597,27576+49])
                                                                Pexp_ident "basic_transform" (derive.ml[597,27576+34]..[597,27576+49])
                                                              [
                                                                <label> ""
                                                                  expression (derive.ml[597,27576+50]..[597,27576+62])
                                                                    Pexp_ident "left_type_id" (derive.ml[597,27576+50]..[597,27576+62])
                                                              ]
                                                    ]
                                                    expression (derive.ml[598,27643+8]..[611,28189+64])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (derive.ml[598,27643+12]..[598,27643+19])
                                                            Ppat_var "default" (derive.ml[598,27643+12]..[598,27643+19])
                                                          expression (derive.ml[599,27665+10]..[607,27951+23])
                                                            Pexp_function
                                                            [
                                                              <case>
                                                                pattern (derive.ml[600,27684+12]..[600,27684+22])
                                                                  Ppat_tuple
                                                                  [
                                                                    pattern (derive.ml[600,27684+13]..[600,27684+14])
                                                                      Ppat_any
                                                                    pattern (derive.ml[600,27684+15]..[600,27684+21])
                                                                      Ppat_var "number" (derive.ml[600,27684+15]..[600,27684+21])
                                                                  ]
                                                                expression (derive.ml[601,27710+14]..[607,27951+23])
                                                                  Pexp_ifthenelse
                                                                  expression (derive.ml[601,27710+17]..[601,27710+27])
                                                                    Pexp_apply
                                                                    expression (derive.ml[601,27710+24]..[601,27710+25])
                                                                      Pexp_ident ">" (derive.ml[601,27710+24]..[601,27710+25])
                                                                    [
                                                                      <label> ""
expression (derive.ml[601,27710+17]..[601,27710+23])
  Pexp_ident "number" (derive.ml[601,27710+17]..[601,27710+23])
                                                                      <label> ""
expression (derive.ml[601,27710+26]..[601,27710+27])
  Pexp_constant Const_int 1
                                                                    ]
                                                                  expression (derive.ml[603,27757+16]..[606,27921+29])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (derive.ml[603,27757+20]..[603,27757+23])
  Ppat_var "pat" (derive.ml[603,27757+20]..[603,27757+23])
expression (derive.ml[603,27757+26]..[603,27757+65])
  Pexp_coerce
  expression (derive.ml[603,27757+27]..[603,27757+57])
    Pexp_apply
    expression (derive.ml[603,27757+27]..[603,27757+46])
      Pexp_ident "EpN.tuple_of_number" (derive.ml[603,27757+27]..[603,27757+46])
    [
      <label> ""
        expression (derive.ml[603,27757+47]..[603,27757+51])
          Pexp_variant "Any"
          None
      <label> ""
        expression (derive.ml[603,27757+52]..[603,27757+57])
          Pexp_ident "arity" (derive.ml[603,27757+52]..[603,27757+57])
    ]
  None
  core_type (derive.ml[603,27757+61]..[603,27757+64])
    Ptyp_constr "pat" (derive.ml[603,27757+61]..[603,27757+64])
    []
                                                                    ]
                                                                    expression (derive.ml[604,27826+16]..[606,27921+29])
                                                                      Pexp_construct "Some" (derive.ml[604,27826+16]..[604,27826+20])
                                                                      Some
expression (derive.ml[605,27847+18]..[606,27921+29])
  Pexp_coerce
  expression (derive.ml[605,27847+19]..[605,27847+69])
    Pexp_variant "Case"
    Some
      expression (derive.ml[605,27847+25]..[605,27847+69])
        Pexp_tuple
        [
          expression (derive.ml[605,27847+26]..[605,27847+44])
            Pexp_coerce
            expression (derive.ml[605,27847+27]..[605,27847+30])
              Pexp_ident "pat" (derive.ml[605,27847+27]..[605,27847+30])
            None
            core_type (derive.ml[605,27847+34]..[605,27847+43])
              Ptyp_constr "Astfn.pat" (derive.ml[605,27847+34]..[605,27847+43])
              []
          expression (derive.ml[605,27847+46]..[605,27847+68])
            Pexp_coerce
            expression (derive.ml[605,27847+47]..[605,27847+54])
              Pexp_ident "default" (derive.ml[605,27847+47]..[605,27847+54])
            None
            core_type (derive.ml[605,27847+58]..[605,27847+67])
              Ptyp_constr "Astfn.exp" (derive.ml[605,27847+58]..[605,27847+67])
              []
        ]
  None
  core_type (derive.ml[606,27921+18]..[606,27921+28])
    Ptyp_constr "Astfn.case" (derive.ml[606,27921+18]..[606,27921+28])
    []
                                                                  Some
                                                                    expression (derive.ml[607,27951+19]..[607,27951+23])
                                                                      Pexp_construct "None" (derive.ml[607,27951+19]..[607,27951+23])
                                                                      None
                                                            ]
                                                      ]
                                                      expression (derive.ml[608,27978+8]..[611,28189+64])
                                                        Pexp_apply
                                                        expression (derive.ml[608,27978+8]..[608,27978+20])
                                                          Pexp_ident "obj_of_mtyps" (derive.ml[608,27978+8]..[608,27978+20])
                                                        [
                                                          <label> "?cons_transform"
                                                            expression (derive.ml[608,27978+21]..[608,27978+36])
                                                              Pexp_ident "cons_transform" (derive.ml[608,27978+21]..[608,27978+36])
                                                          <label> "?module_name"
                                                            expression (derive.ml[608,27978+37]..[608,27978+49])
                                                              Pexp_ident "module_name" (derive.ml[608,27978+37]..[608,27978+49])
                                                          <label> "arity"
                                                            expression (derive.ml[608,27978+51]..[608,27978+56])
                                                              Pexp_ident "arity" (derive.ml[608,27978+51]..[608,27978+56])
                                                          <label> "names"
                                                            expression (derive.ml[608,27978+58]..[608,27978+63])
                                                              Pexp_ident "names" (derive.ml[608,27978+58]..[608,27978+63])
                                                          <label> "default"
                                                            expression (derive.ml[608,27978+65]..[608,27978+72])
                                                              Pexp_ident "default" (derive.ml[608,27978+65]..[608,27978+72])
                                                          <label> "left_type_variable"
                                                            expression (derive.ml[609,28051+11]..[609,28051+29])
                                                              Pexp_ident "left_type_variable" (derive.ml[609,28051+11]..[609,28051+29])
                                                          <label> "mk_record"
                                                            expression (derive.ml[609,28051+31]..[609,28051+40])
                                                              Pexp_ident "mk_record" (derive.ml[609,28051+31]..[609,28051+40])
                                                          <label> "mk_variant"
                                                            expression (derive.ml[609,28051+42]..[609,28051+52])
                                                              Pexp_ident "mk_variant" (derive.ml[609,28051+42]..[609,28051+52])
                                                          <label> ""
                                                            expression (derive.ml[609,28051+53]..[609,28051+57])
                                                              Pexp_ident "base" (derive.ml[609,28051+53]..[609,28051+57])
                                                          <label> ""
                                                            expression (derive.ml[609,28051+58]..[609,28051+68])
                                                              Pexp_ident "class_name" (derive.ml[609,28051+58]..[609,28051+68])
                                                          <label> ""
                                                            expression (derive.ml[610,28120+11]..[611,28189+57])
                                                              Pexp_apply
                                                              expression (derive.ml[610,28120+11]..[610,28120+33])
                                                                Pexp_ident "obj_simple_exp_of_ctyp" (derive.ml[610,28120+11]..[610,28120+33])
                                                              [
                                                                <label> "right_type_id"
                                                                  expression (derive.ml[610,28120+35]..[610,28120+48])
                                                                    Pexp_ident "right_type_id" (derive.ml[610,28120+35]..[610,28120+48])
                                                                <label> "left_type_variable"
                                                                  expression (derive.ml[610,28120+50]..[610,28120+68])
                                                                    Pexp_ident "left_type_variable" (derive.ml[610,28120+50]..[610,28120+68])
                                                                <label> "right_type_variable"
                                                                  expression (derive.ml[611,28189+14]..[611,28189+33])
                                                                    Pexp_ident "right_type_variable" (derive.ml[611,28189+14]..[611,28189+33])
                                                                <label> "names"
                                                                  expression (derive.ml[611,28189+35]..[611,28189+40])
                                                                    Pexp_ident "names" (derive.ml[611,28189+35]..[611,28189+40])
                                                                <label> "arity"
                                                                  expression (derive.ml[611,28189+42]..[611,28189+47])
                                                                    Pexp_ident "arity" (derive.ml[611,28189+42]..[611,28189+47])
                                                                <label> "mk_tuple"
                                                                  expression (derive.ml[611,28189+49]..[611,28189+57])
                                                                    Pexp_ident "mk_tuple" (derive.ml[611,28189+49]..[611,28189+57])
                                                              ]
                                                          <label> "kind"
                                                            expression (derive.ml[611,28189+60]..[611,28189+64])
                                                              Pexp_ident "kind" (derive.ml[611,28189+60]..[611,28189+64])
                                                        ]
                                      ]
                        ]
                        expression (derive.ml[612,28257+2]..[612,28257+6])
                          Pexp_ident "make" (derive.ml[612,28257+2]..[612,28257+6])
    ]
]
