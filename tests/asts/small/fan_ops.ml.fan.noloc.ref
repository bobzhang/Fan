[
  structure_item (fan_ops.ml[]..[])
    Pstr_open Fresh "Util" (fan_ops.ml[]..[])
  structure_item (fan_ops.ml[]..[])
    Pstr_open Fresh "Astf" (fan_ops.ml[]..[])
  structure_item (fan_ops.ml[]..[])
    Pstr_open Fresh "Ast_gen" (fan_ops.ml[]..[])
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "list_of_list" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_let Rec
          [
            <def>
              pattern (fan_ops.ml[]..[])
                Ppat_var "loop" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_construct "[]" (fan_ops.ml[]..[])
                      None
                    expression (fan_ops.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "Locf." (fan_ops.ml[]..[])
                      ]
                      expression (fan_ops.ml[]..[])
                        Pexp_coerce
                        expression (fan_ops.ml[]..[])
                          Pexp_variant "Uid"
                          Some
                            expression (fan_ops.ml[]..[])
                              Pexp_tuple
                              [
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "" (fan_ops.ml[]..[])
                                expression (fan_ops.ml[]..[])
                                  Pexp_constant Const_string("[]",None)
                              ]
                        None
                        core_type (fan_ops.ml[]..[])
                          Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                          []
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_construct "::" (fan_ops.ml[]..[])
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "e1" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "el" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "v" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "loop" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "el" (fan_ops.ml[]..[])
                            ]
                      ]
                      expression (fan_ops.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "_loc" (fan_ops.ml[]..[])
                            expression (fan_ops.ml[]..[])
                              Pexp_apply
                              expression (fan_ops.ml[]..[])
                                Pexp_ident "Locf.merge" (fan_ops.ml[]..[])
                              [
                                <label> ""
                                  expression (fan_ops.ml[]..[])
                                    Pexp_apply
                                    expression (fan_ops.ml[]..[])
                                      Pexp_ident "loc_of" (fan_ops.ml[]..[])
                                    [
                                      <label> ""
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "e1" (fan_ops.ml[]..[])
                                    ]
                                <label> ""
                                  expression (fan_ops.ml[]..[])
                                    Pexp_apply
                                    expression (fan_ops.ml[]..[])
                                      Pexp_ident "loc_of" (fan_ops.ml[]..[])
                                    [
                                      <label> ""
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "v" (fan_ops.ml[]..[])
                                    ]
                              ]
                        ]
                        expression (fan_ops.ml[]..[])
                          Pexp_coerce
                          expression (fan_ops.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (fan_ops.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "_loc" (fan_ops.ml[]..[])
                                  expression (fan_ops.ml[]..[])
                                    Pexp_variant "App"
                                    Some
                                      expression (fan_ops.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (fan_ops.ml[]..[])
                                            Pexp_ident "_loc" (fan_ops.ml[]..[])
                                          expression (fan_ops.ml[]..[])
                                            Pexp_variant "Uid"
                                            Some
                                              expression (fan_ops.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "_loc" (fan_ops.ml[]..[])
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_constant Const_string("::",None)
                                                ]
                                          expression (fan_ops.ml[]..[])
                                            Pexp_coerce
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "e1" (fan_ops.ml[]..[])
                                            None
                                            core_type (fan_ops.ml[]..[])
                                              Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                              []
                                        ]
                                  expression (fan_ops.ml[]..[])
                                    Pexp_coerce
                                    expression (fan_ops.ml[]..[])
                                      Pexp_ident "v" (fan_ops.ml[]..[])
                                    None
                                    core_type (fan_ops.ml[]..[])
                                      Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                      []
                                ]
                          None
                          core_type (fan_ops.ml[]..[])
                            Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                            []
                ]
          ]
          expression (fan_ops.ml[]..[])
            Pexp_ident "loop" (fan_ops.ml[]..[])
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_int" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "i" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_coerce
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Int"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "string_of_int" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i" (fan_ops.ml[]..[])
                            ]
                      None
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_int32" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "i" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_coerce
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Int32"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "Int32.to_string" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i" (fan_ops.ml[]..[])
                            ]
                      None
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_int64" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "i" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_coerce
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Int64"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "Int64.to_string" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i" (fan_ops.ml[]..[])
                            ]
                      None
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_nativeint" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "i" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_coerce
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Nativeint"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "Nativeint.to_string" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i" (fan_ops.ml[]..[])
                            ]
                      None
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_float" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "i" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_coerce
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Flo"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "string_of_float" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i" (fan_ops.ml[]..[])
                            ]
                      None
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_string" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "i" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_coerce
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Str"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "String.escaped" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i" (fan_ops.ml[]..[])
                            ]
                      None
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_char" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "i" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_coerce
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Chr"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "Char.escaped" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i" (fan_ops.ml[]..[])
                            ]
                      None
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                        []
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_unit" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_variant "Unit"
                      None
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_bool" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "_loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "b" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_variant "Bool"
                      Some
                        expression (fan_ops.ml[]..[])
                          Pexp_ident "b" (fan_ops.ml[]..[])
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_ref" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "mf_a" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "_loc" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "i" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_coerce
                            expression (fan_ops.ml[]..[])
                              Pexp_variant "Record"
                              Some
                                expression (fan_ops.ml[]..[])
                                  Pexp_variant "RecBind"
                                  Some
                                    expression (fan_ops.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (fan_ops.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (fan_ops.ml[]..[])
                                              Pexp_constant Const_string("contents",None)
                                        expression (fan_ops.ml[]..[])
                                          Pexp_coerce
                                          expression (fan_ops.ml[]..[])
                                            Pexp_apply
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "mf_a" (fan_ops.ml[]..[])
                                            [
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "_loc" (fan_ops.ml[]..[])
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_apply
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "!" (fan_ops.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "i" (fan_ops.ml[]..[])
                                                  ]
                                            ]
                                          None
                                          core_type (fan_ops.ml[]..[])
                                            Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                                            []
                                      ]
                            None
                            core_type (fan_ops.ml[]..[])
                              Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                              []
                      ]
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "mklist" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_let Rec
                [
                  <def>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "loop" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "top" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_construct "[]" (fan_ops.ml[]..[])
                                  None
                                expression (fan_ops.ml[]..[])
                                  Pexp_variant "Uid"
                                  Some
                                    expression (fan_ops.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "loc" (fan_ops.ml[]..[])
                                        expression (fan_ops.ml[]..[])
                                          Pexp_constant Const_string("[]",None)
                                      ]
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_construct "::" (fan_ops.ml[]..[])
                                  Some
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_tuple
                                      [
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_var "e1" (fan_ops.ml[]..[])
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_var "el" (fan_ops.ml[]..[])
                                      ]
                                expression (fan_ops.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_var "_loc" (fan_ops.ml[]..[])
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ifthenelse
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "top" (fan_ops.ml[]..[])
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "loc" (fan_ops.ml[]..[])
                                        Some
                                          expression (fan_ops.ml[]..[])
                                            Pexp_apply
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "Locf.merge" (fan_ops.ml[]..[])
                                            [
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_apply
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "loc_of" (fan_ops.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "e1" (fan_ops.ml[]..[])
                                                  ]
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "loc" (fan_ops.ml[]..[])
                                            ]
                                  ]
                                  expression (fan_ops.ml[]..[])
                                    Pexp_variant "App"
                                    Some
                                      expression (fan_ops.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (fan_ops.ml[]..[])
                                            Pexp_ident "_loc" (fan_ops.ml[]..[])
                                          expression (fan_ops.ml[]..[])
                                            Pexp_variant "App"
                                            Some
                                              expression (fan_ops.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "_loc" (fan_ops.ml[]..[])
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_variant "Uid"
                                                    Some
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (fan_ops.ml[]..[])
                                                            Pexp_ident "_loc" (fan_ops.ml[]..[])
                                                          expression (fan_ops.ml[]..[])
                                                            Pexp_constant Const_string("::",None)
                                                        ]
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "e1" (fan_ops.ml[]..[])
                                                ]
                                          expression (fan_ops.ml[]..[])
                                            Pexp_apply
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "loop" (fan_ops.ml[]..[])
                                            [
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_construct "false" (fan_ops.ml[]..[])
                                                  None
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "el" (fan_ops.ml[]..[])
                                            ]
                                        ]
                            ]
                      ]
                ]
                expression (fan_ops.ml[]..[])
                  Pexp_apply
                  expression (fan_ops.ml[]..[])
                    Pexp_ident "loop" (fan_ops.ml[]..[])
                  [
                    <label> ""
                      expression (fan_ops.ml[]..[])
                        Pexp_construct "true" (fan_ops.ml[]..[])
                        None
                  ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_list" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "mf_a" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "_loc" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "ls" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "mklist" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "_loc" (fan_ops.ml[]..[])
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_apply
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "List.map" (fan_ops.ml[]..[])
                                  [
                                    <label> ""
                                      expression (fan_ops.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (fan_ops.ml[]..[])
                                              Ppat_var "x" (fan_ops.ml[]..[])
                                            expression (fan_ops.ml[]..[])
                                              Pexp_apply
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "mf_a" (fan_ops.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "_loc" (fan_ops.ml[]..[])
                                                <label> ""
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "x" (fan_ops.ml[]..[])
                                              ]
                                        ]
                                    <label> ""
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "ls" (fan_ops.ml[]..[])
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_option" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "mf_a" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "_loc" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_construct "None" (fan_ops.ml[]..[])
                            None
                          expression (fan_ops.ml[]..[])
                            Pexp_coerce
                            expression (fan_ops.ml[]..[])
                              Pexp_variant "Uid"
                              Some
                                expression (fan_ops.ml[]..[])
                                  Pexp_constant Const_string("None",None)
                            None
                            core_type (fan_ops.ml[]..[])
                              Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                              []
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_construct "Some" (fan_ops.ml[]..[])
                            Some
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "x" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_coerce
                            expression (fan_ops.ml[]..[])
                              Pexp_variant "App"
                              Some
                                expression (fan_ops.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (fan_ops.ml[]..[])
                                      Pexp_variant "Uid"
                                      Some
                                        expression (fan_ops.ml[]..[])
                                          Pexp_constant Const_string("Some",None)
                                    expression (fan_ops.ml[]..[])
                                      Pexp_coerce
                                      expression (fan_ops.ml[]..[])
                                        Pexp_apply
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "mf_a" (fan_ops.ml[]..[])
                                        [
                                          <label> ""
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "_loc" (fan_ops.ml[]..[])
                                          <label> ""
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "x" (fan_ops.ml[]..[])
                                        ]
                                      None
                                      core_type (fan_ops.ml[]..[])
                                        Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                                        []
                                  ]
                            None
                            core_type (fan_ops.ml[]..[])
                              Ptyp_constr "Astfn.exp" (fan_ops.ml[]..[])
                              []
                      ]
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_arrow" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_newtype "t"
          expression (fan_ops.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (fan_ops.ml[]..[])
                  Ppat_constraint
                  pattern (fan_ops.ml[]..[])
                    Ppat_var "_mf_a" (fan_ops.ml[]..[])
                  core_type (fan_ops.ml[]..[])
                    Ptyp_arrow
                    ""
                    core_type (fan_ops.ml[]..[])
                      Ptyp_constr "Locf.t" (fan_ops.ml[]..[])
                      []
                    core_type (fan_ops.ml[]..[])
                      Ptyp_arrow
                      ""
                      core_type (fan_ops.ml[]..[])
                        Ptyp_var a
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "t" (fan_ops.ml[]..[])
                        []
                expression (fan_ops.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (fan_ops.ml[]..[])
                        Ppat_constraint
                        pattern (fan_ops.ml[]..[])
                          Ppat_var "_mf_b" (fan_ops.ml[]..[])
                        core_type (fan_ops.ml[]..[])
                          Ptyp_arrow
                          ""
                          core_type (fan_ops.ml[]..[])
                            Ptyp_constr "Locf.t" (fan_ops.ml[]..[])
                            []
                          core_type (fan_ops.ml[]..[])
                            Ptyp_arrow
                            ""
                            core_type (fan_ops.ml[]..[])
                              Ptyp_var b
                            core_type (fan_ops.ml[]..[])
                              Ptyp_constr "t" (fan_ops.ml[]..[])
                              []
                      expression (fan_ops.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (fan_ops.ml[]..[])
                              Ppat_constraint
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "_loc" (fan_ops.ml[]..[])
                              core_type (fan_ops.ml[]..[])
                                Ptyp_constr "Locf.t" (fan_ops.ml[]..[])
                                []
                            expression (fan_ops.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_constraint
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_var "_x" (fan_ops.ml[]..[])
                                    core_type (fan_ops.ml[]..[])
                                      Ptyp_arrow
                                      ""
                                      core_type (fan_ops.ml[]..[])
                                        Ptyp_var a
                                      core_type (fan_ops.ml[]..[])
                                        Ptyp_var b
                                  expression (fan_ops.ml[]..[])
                                    Pexp_apply
                                    expression (fan_ops.ml[]..[])
                                      Pexp_ident "invalid_argf" (fan_ops.ml[]..[])
                                    [
                                      <label> ""
                                        expression (fan_ops.ml[]..[])
                                          Pexp_constant Const_string("%s not implemented",None)
                                      <label> ""
                                        expression (fan_ops.ml[]..[])
                                          Pexp_constant Const_string("meta_arrow",None)
                                    ]
                              ]
                        ]
                  ]
            ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "is_module_longident" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_constraint
                pattern (fan_ops.ml[]..[])
                  Ppat_var "x" (fan_ops.ml[]..[])
                core_type (fan_ops.ml[]..[])
                  Ptyp_constr "ident" (fan_ops.ml[]..[])
                  []
              expression (fan_ops.ml[]..[])
                Pexp_match
                expression (fan_ops.ml[]..[])
                  Pexp_ident "x" (fan_ops.ml[]..[])
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Dot"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "i" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "is_module_longident" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "i" (fan_ops.ml[]..[])
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Apply"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "i1" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "i2" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "&&" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_module_longident" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i1" (fan_ops.ml[]..[])
                            ]
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_module_longident" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i2" (fan_ops.ml[]..[])
                            ]
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Uid"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "true" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "false" (fan_ops.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "ident_of_ctyp" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_constraint
          expression (fan_ops.ml[]..[])
            Pexp_let Nonrec
            [
              <def>
                pattern (fan_ops.ml[]..[])
                  Ppat_var "error" (fan_ops.ml[]..[])
                expression (fan_ops.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (fan_ops.ml[]..[])
                        Ppat_var "x" (fan_ops.ml[]..[])
                      expression (fan_ops.ml[]..[])
                        Pexp_apply
                        expression (fan_ops.ml[]..[])
                          Pexp_ident "invalid_argf" (fan_ops.ml[]..[])
                        [
                          <label> ""
                            expression (fan_ops.ml[]..[])
                              Pexp_constant Const_string("ident_of_ctyp: this type %s is not an identifier",None)
                          <label> ""
                            expression (fan_ops.ml[]..[])
                              Pexp_apply
                              expression (fan_ops.ml[]..[])
                                Pexp_ident "Objs.dump_ctyp" (fan_ops.ml[]..[])
                              [
                                <label> ""
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "x" (fan_ops.ml[]..[])
                              ]
                        ]
                  ]
            ]
            expression (fan_ops.ml[]..[])
              Pexp_let Rec
              [
                <def>
                  pattern (fan_ops.ml[]..[])
                    Ppat_var "self" (fan_ops.ml[]..[])
                  expression (fan_ops.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (fan_ops.ml[]..[])
                          Ppat_constraint
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "x" (fan_ops.ml[]..[])
                          core_type (fan_ops.ml[]..[])
                            Ptyp_constr "ctyp" (fan_ops.ml[]..[])
                            []
                        expression (fan_ops.ml[]..[])
                          Pexp_match
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "x" (fan_ops.ml[]..[])
                          [
                            <case>
                              pattern (fan_ops.ml[]..[])
                                Ppat_variant "Apply"
                                Some
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_var "_loc" (fan_ops.ml[]..[])
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_var "t1" (fan_ops.ml[]..[])
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_var "t2" (fan_ops.ml[]..[])
                                    ]
                              expression (fan_ops.ml[]..[])
                                Pexp_variant "Apply"
                                Some
                                  expression (fan_ops.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "_loc" (fan_ops.ml[]..[])
                                      expression (fan_ops.ml[]..[])
                                        Pexp_apply
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "self" (fan_ops.ml[]..[])
                                        [
                                          <label> ""
                                            expression (fan_ops.ml[]..[])
                                              Pexp_coerce
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "t1" (fan_ops.ml[]..[])
                                              None
                                              core_type (fan_ops.ml[]..[])
                                                Ptyp_constr "ctyp" (fan_ops.ml[]..[])
                                                []
                                        ]
                                      expression (fan_ops.ml[]..[])
                                        Pexp_apply
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "self" (fan_ops.ml[]..[])
                                        [
                                          <label> ""
                                            expression (fan_ops.ml[]..[])
                                              Pexp_coerce
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "t2" (fan_ops.ml[]..[])
                                              None
                                              core_type (fan_ops.ml[]..[])
                                                Ptyp_constr "ctyp" (fan_ops.ml[]..[])
                                                []
                                        ]
                                    ]
                            <case>
                              pattern (fan_ops.ml[]..[])
                                Ppat_variant "Lid"
                                Some
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_any
                              expression (fan_ops.ml[]..[])
                                Pexp_apply
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "error" (fan_ops.ml[]..[])
                                [
                                  <label> ""
                                    expression (fan_ops.ml[]..[])
                                      Pexp_ident "x" (fan_ops.ml[]..[])
                                ]
                            <case>
                              pattern (fan_ops.ml[]..[])
                                Ppat_alias "i" (fan_ops.ml[]..[])
                                pattern (fan_ops.ml[]..[])
                                  Ppat_type
                                  "ident'" (fan_ops.ml[]..[])
                              expression (fan_ops.ml[]..[])
                                Pexp_ifthenelse
                                expression (fan_ops.ml[]..[])
                                  Pexp_apply
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "is_module_longident" (fan_ops.ml[]..[])
                                  [
                                    <label> ""
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "i" (fan_ops.ml[]..[])
                                  ]
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "i" (fan_ops.ml[]..[])
                                Some
                                  expression (fan_ops.ml[]..[])
                                    Pexp_apply
                                    expression (fan_ops.ml[]..[])
                                      Pexp_ident "error" (fan_ops.ml[]..[])
                                    [
                                      <label> ""
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "x" (fan_ops.ml[]..[])
                                    ]
                            <case>
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                              expression (fan_ops.ml[]..[])
                                Pexp_apply
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "error" (fan_ops.ml[]..[])
                                [
                                  <label> ""
                                    expression (fan_ops.ml[]..[])
                                      Pexp_ident "x" (fan_ops.ml[]..[])
                                ]
                          ]
                    ]
              ]
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_alias "i" (fan_ops.ml[]..[])
                      pattern (fan_ops.ml[]..[])
                        Ppat_type
                        "ident" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_ident "i" (fan_ops.ml[]..[])
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "t" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "self" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "t" (fan_ops.ml[]..[])
                      ]
                ]
          core_type (fan_ops.ml[]..[])
            Ptyp_arrow
            ""
            core_type (fan_ops.ml[]..[])
              Ptyp_constr "ctyp" (fan_ops.ml[]..[])
              []
            core_type (fan_ops.ml[]..[])
              Ptyp_constr "ident" (fan_ops.ml[]..[])
              []
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "is_irrefut_pat" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_constraint
                pattern (fan_ops.ml[]..[])
                  Ppat_var "x" (fan_ops.ml[]..[])
                core_type (fan_ops.ml[]..[])
                  Ptyp_constr "pat" (fan_ops.ml[]..[])
                  []
              expression (fan_ops.ml[]..[])
                Pexp_match
                expression (fan_ops.ml[]..[])
                  Pexp_ident "x" (fan_ops.ml[]..[])
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Lid"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "true" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Bool"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "false" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Unit"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "true" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_or
                      pattern (fan_ops.ml[]..[])
                        Ppat_or
                        pattern (fan_ops.ml[]..[])
                          Ppat_variant "ArrayEmpty"
                          Some
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "_loc" (fan_ops.ml[]..[])
                        pattern (fan_ops.ml[]..[])
                          Ppat_variant "LabelS"
                          Some
                            pattern (fan_ops.ml[]..[])
                              Ppat_tuple
                              [
                                pattern (fan_ops.ml[]..[])
                                  Ppat_var "_loc" (fan_ops.ml[]..[])
                                pattern (fan_ops.ml[]..[])
                                  Ppat_any
                              ]
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "Any"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "_loc" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "true" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Dot"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "y" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_coerce
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "y" (fan_ops.ml[]..[])
                            Some
                              core_type (fan_ops.ml[]..[])
                                Ptyp_constr "vid" (fan_ops.ml[]..[])
                                []
                            core_type (fan_ops.ml[]..[])
                              Ptyp_constr "pat" (fan_ops.ml[]..[])
                              []
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_constraint
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "Alias"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "_loc" (fan_ops.ml[]..[])
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "x" (fan_ops.ml[]..[])
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                            ]
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                        []
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "x" (fan_ops.ml[]..[])
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_constraint
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "Record"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "_loc" (fan_ops.ml[]..[])
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "p" (fan_ops.ml[]..[])
                            ]
                      core_type (fan_ops.ml[]..[])
                        Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                        []
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "List.for_all" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_variant "RecBind"
                                  Some
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_tuple
                                      [
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_any
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_any
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_var "p" (fan_ops.ml[]..[])
                                      ]
                                expression (fan_ops.ml[]..[])
                                  Pexp_apply
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                                  [
                                    <label> ""
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "p" (fan_ops.ml[]..[])
                                  ]
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_any
                                expression (fan_ops.ml[]..[])
                                  Pexp_construct "true" (fan_ops.ml[]..[])
                                  None
                            ]
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "Ast_basic.list_of_sem" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p" (fan_ops.ml[]..[])
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_construct "[]" (fan_ops.ml[]..[])
                                  None
                            ]
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Sem"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p1" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p2" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "&&" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p1" (fan_ops.ml[]..[])
                            ]
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p2" (fan_ops.ml[]..[])
                            ]
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Com"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p1" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p2" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "&&" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p1" (fan_ops.ml[]..[])
                            ]
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p2" (fan_ops.ml[]..[])
                            ]
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Bar"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p1" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p2" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "&&" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p1" (fan_ops.ml[]..[])
                            ]
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p2" (fan_ops.ml[]..[])
                            ]
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "App"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p1" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p2" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "&&" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p1" (fan_ops.ml[]..[])
                            ]
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "p2" (fan_ops.ml[]..[])
                            ]
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Constraint"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "p" (fan_ops.ml[]..[])
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Par"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "p" (fan_ops.ml[]..[])
                          ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "p" (fan_ops.ml[]..[])
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "OptLablS"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "true" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_or
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "OptLabl"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "p" (fan_ops.ml[]..[])
                            ]
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "OptLablExpr"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "p" (fan_ops.ml[]..[])
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                            ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "p" (fan_ops.ml[]..[])
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_or
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "Label"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "p" (fan_ops.ml[]..[])
                            ]
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "Lazy"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (fan_ops.ml[]..[])
                                Ppat_any
                              pattern (fan_ops.ml[]..[])
                                Ppat_var "p" (fan_ops.ml[]..[])
                            ]
                    expression (fan_ops.ml[]..[])
                      Pexp_apply
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "is_irrefut_pat" (fan_ops.ml[]..[])
                      [
                        <label> ""
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "p" (fan_ops.ml[]..[])
                      ]
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Uid"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "false" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_or
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "ModuleUnpack"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_any
                      pattern (fan_ops.ml[]..[])
                        Ppat_variant "ModuleConstraint"
                        Some
                          pattern (fan_ops.ml[]..[])
                            Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "true" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Ant"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "false" (fan_ops.ml[]..[])
                      None
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_or
                      pattern (fan_ops.ml[]..[])
                        Ppat_or
                        pattern (fan_ops.ml[]..[])
                          Ppat_or
                          pattern (fan_ops.ml[]..[])
                            Ppat_or
                            pattern (fan_ops.ml[]..[])
                              Ppat_or
                              pattern (fan_ops.ml[]..[])
                                Ppat_or
                                pattern (fan_ops.ml[]..[])
                                  Ppat_or
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_or
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_or
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_or
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_variant "Vrn"
                                          Some
                                            pattern (fan_ops.ml[]..[])
                                              Ppat_tuple
                                              [
                                                pattern (fan_ops.ml[]..[])
                                                  Ppat_var "_loc" (fan_ops.ml[]..[])
                                                pattern (fan_ops.ml[]..[])
                                                  Ppat_any
                                              ]
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_constraint
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_variant "Str"
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "_loc" (fan_ops.ml[]..[])
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_any
                                                ]
                                          core_type (fan_ops.ml[]..[])
                                            Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                                            []
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_constraint
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_variant "PaRng"
                                          Some
                                            pattern (fan_ops.ml[]..[])
                                              Ppat_tuple
                                              [
                                                pattern (fan_ops.ml[]..[])
                                                  Ppat_var "_loc" (fan_ops.ml[]..[])
                                                pattern (fan_ops.ml[]..[])
                                                  Ppat_any
                                                pattern (fan_ops.ml[]..[])
                                                  Ppat_any
                                              ]
                                        core_type (fan_ops.ml[]..[])
                                          Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                                          []
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_constraint
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_variant "Flo"
                                        Some
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_var "_loc" (fan_ops.ml[]..[])
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_any
                                            ]
                                      core_type (fan_ops.ml[]..[])
                                        Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                                        []
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_constraint
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_variant "Nativeint"
                                      Some
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_tuple
                                          [
                                            pattern (fan_ops.ml[]..[])
                                              Ppat_var "_loc" (fan_ops.ml[]..[])
                                            pattern (fan_ops.ml[]..[])
                                              Ppat_any
                                          ]
                                    core_type (fan_ops.ml[]..[])
                                      Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                                      []
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "Int64"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_any
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                                    []
                              pattern (fan_ops.ml[]..[])
                                Ppat_constraint
                                pattern (fan_ops.ml[]..[])
                                  Ppat_variant "Int32"
                                  Some
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_tuple
                                      [
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_var "_loc" (fan_ops.ml[]..[])
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_any
                                      ]
                                core_type (fan_ops.ml[]..[])
                                  Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                                  []
                            pattern (fan_ops.ml[]..[])
                              Ppat_constraint
                              pattern (fan_ops.ml[]..[])
                                Ppat_variant "Int"
                                Some
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_var "_loc" (fan_ops.ml[]..[])
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_any
                                    ]
                              core_type (fan_ops.ml[]..[])
                                Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                                []
                          pattern (fan_ops.ml[]..[])
                            Ppat_constraint
                            pattern (fan_ops.ml[]..[])
                              Ppat_variant "Chr"
                              Some
                                pattern (fan_ops.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_var "_loc" (fan_ops.ml[]..[])
                                    pattern (fan_ops.ml[]..[])
                                      Ppat_any
                                  ]
                            core_type (fan_ops.ml[]..[])
                              Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                              []
                        pattern (fan_ops.ml[]..[])
                          Ppat_constraint
                          pattern (fan_ops.ml[]..[])
                            Ppat_variant "ClassPath"
                            Some
                              pattern (fan_ops.ml[]..[])
                                Ppat_tuple
                                [
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_var "_loc" (fan_ops.ml[]..[])
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_any
                                ]
                          core_type (fan_ops.ml[]..[])
                            Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                            []
                      pattern (fan_ops.ml[]..[])
                        Ppat_constraint
                        pattern (fan_ops.ml[]..[])
                          Ppat_variant "Array"
                          Some
                            pattern (fan_ops.ml[]..[])
                              Ppat_tuple
                              [
                                pattern (fan_ops.ml[]..[])
                                  Ppat_var "_loc" (fan_ops.ml[]..[])
                                pattern (fan_ops.ml[]..[])
                                  Ppat_any
                              ]
                        core_type (fan_ops.ml[]..[])
                          Ptyp_constr "Astf.pat" (fan_ops.ml[]..[])
                          []
                    expression (fan_ops.ml[]..[])
                      Pexp_construct "false" (fan_ops.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "array_of_array" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "arr" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_match
                expression (fan_ops.ml[]..[])
                  Pexp_ident "arr" (fan_ops.ml[]..[])
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_array
                      []
                    expression (fan_ops.ml[]..[])
                      Pexp_variant "ArrayEmpty"
                      Some
                        expression (fan_ops.ml[]..[])
                          Pexp_ident "Locf." (fan_ops.ml[]..[])
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_any
                    expression (fan_ops.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "items" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "|>" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_apply
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "|>" (fan_ops.ml[]..[])
                                  [
                                    <label> ""
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "arr" (fan_ops.ml[]..[])
                                    <label> ""
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "Array.to_list" (fan_ops.ml[]..[])
                                  ]
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "sem_of_list" (fan_ops.ml[]..[])
                            ]
                      ]
                      expression (fan_ops.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "_loc" (fan_ops.ml[]..[])
                            expression (fan_ops.ml[]..[])
                              Pexp_apply
                              expression (fan_ops.ml[]..[])
                                Pexp_ident "loc_of" (fan_ops.ml[]..[])
                              [
                                <label> ""
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "items" (fan_ops.ml[]..[])
                              ]
                        ]
                        expression (fan_ops.ml[]..[])
                          Pexp_variant "Array"
                          Some
                            expression (fan_ops.ml[]..[])
                              Pexp_tuple
                              [
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "_loc" (fan_ops.ml[]..[])
                                expression (fan_ops.ml[]..[])
                                  Pexp_ident "items" (fan_ops.ml[]..[])
                              ]
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "meta_array" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "mf_a" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "_loc" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "ls" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_apply
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "array_of_array" (fan_ops.ml[]..[])
                            [
                              <label> ""
                                expression (fan_ops.ml[]..[])
                                  Pexp_apply
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "Array.map" (fan_ops.ml[]..[])
                                  [
                                    <label> ""
                                      expression (fan_ops.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (fan_ops.ml[]..[])
                                              Ppat_var "x" (fan_ops.ml[]..[])
                                            expression (fan_ops.ml[]..[])
                                              Pexp_apply
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "mf_a" (fan_ops.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "_loc" (fan_ops.ml[]..[])
                                                <label> ""
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "x" (fan_ops.ml[]..[])
                                              ]
                                        ]
                                    <label> ""
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "ls" (fan_ops.ml[]..[])
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "bigarray_get" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "arr" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "arg" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_var "coords" (fan_ops.ml[]..[])
                                expression (fan_ops.ml[]..[])
                                  Pexp_match
                                  expression (fan_ops.ml[]..[])
                                    Pexp_ident "arg" (fan_ops.ml[]..[])
                                  [
                                    <case>
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_or
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_constraint
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_variant "Par"
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "_loc" (fan_ops.ml[]..[])
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_variant "Com"
                                                    Some
                                                      pattern (fan_ops.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_any
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_var "e1" (fan_ops.ml[]..[])
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_var "e2" (fan_ops.ml[]..[])
                                                        ]
                                                ]
                                          core_type (fan_ops.ml[]..[])
                                            Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                            []
                                        pattern (fan_ops.ml[]..[])
                                          Ppat_constraint
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_variant "Com"
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "_loc" (fan_ops.ml[]..[])
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "e1" (fan_ops.ml[]..[])
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "e2" (fan_ops.ml[]..[])
                                                ]
                                          core_type (fan_ops.ml[]..[])
                                            Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                            []
                                      expression (fan_ops.ml[]..[])
                                        Pexp_apply
                                        expression (fan_ops.ml[]..[])
                                          Pexp_ident "Ast_basic.list_of_com" (fan_ops.ml[]..[])
                                        [
                                          <label> ""
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "e1" (fan_ops.ml[]..[])
                                          <label> ""
                                            expression (fan_ops.ml[]..[])
                                              Pexp_apply
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "Ast_basic.list_of_com" (fan_ops.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "e2" (fan_ops.ml[]..[])
                                                <label> ""
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_construct "[]" (fan_ops.ml[]..[])
                                                    None
                                              ]
                                        ]
                                    <case>
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_any
                                      expression (fan_ops.ml[]..[])
                                        Pexp_construct "::" (fan_ops.ml[]..[])
                                        Some
                                          expression (fan_ops.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "arg" (fan_ops.ml[]..[])
                                              expression (fan_ops.ml[]..[])
                                                Pexp_construct "[]" (fan_ops.ml[]..[])
                                                None
                                            ]
                                  ]
                            ]
                            expression (fan_ops.ml[]..[])
                              Pexp_match
                              expression (fan_ops.ml[]..[])
                                Pexp_ident "coords" (fan_ops.ml[]..[])
                              [
                                <case>
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_construct "[]" (fan_ops.ml[]..[])
                                    None
                                  expression (fan_ops.ml[]..[])
                                    Pexp_apply
                                    expression (fan_ops.ml[]..[])
                                      Pexp_ident "failwith" (fan_ops.ml[]..[])
                                    [
                                      <label> ""
                                        expression (fan_ops.ml[]..[])
                                          Pexp_constant Const_string("bigarray_get null list",None)
                                    ]
                                <case>
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_construct "::" (fan_ops.ml[]..[])
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "c1" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_construct "[]" (fan_ops.ml[]..[])
                                            None
                                        ]
                                  expression (fan_ops.ml[]..[])
                                    Pexp_coerce
                                    expression (fan_ops.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (fan_ops.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                            expression (fan_ops.ml[]..[])
                                              Pexp_variant "App"
                                              Some
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_variant "Dot"
                                                      Some
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_variant "Uid"
                                                              Some
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_constant Const_string("Bigarray",None)
                                                                  ]
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_variant "Dot"
                                                              Some
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_variant "Uid"
                                                                      Some
expression (fan_ops.ml[]..[])
  Pexp_tuple
  [
    expression (fan_ops.ml[]..[])
      Pexp_ident "loc" (fan_ops.ml[]..[])
    expression (fan_ops.ml[]..[])
      Pexp_constant Const_string("Array1",None)
  ]
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (fan_ops.ml[]..[])
  Pexp_tuple
  [
    expression (fan_ops.ml[]..[])
      Pexp_ident "loc" (fan_ops.ml[]..[])
    expression (fan_ops.ml[]..[])
      Pexp_constant Const_string("get",None)
  ]
                                                                  ]
                                                          ]
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_coerce
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "arr" (fan_ops.ml[]..[])
                                                      None
                                                      core_type (fan_ops.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                        []
                                                  ]
                                            expression (fan_ops.ml[]..[])
                                              Pexp_coerce
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "c1" (fan_ops.ml[]..[])
                                              None
                                              core_type (fan_ops.ml[]..[])
                                                Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                []
                                          ]
                                    None
                                    core_type (fan_ops.ml[]..[])
                                      Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                      []
                                <case>
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_construct "::" (fan_ops.ml[]..[])
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "c1" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_construct "::" (fan_ops.ml[]..[])
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "c2" (fan_ops.ml[]..[])
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_construct "[]" (fan_ops.ml[]..[])
                                                    None
                                                ]
                                        ]
                                  expression (fan_ops.ml[]..[])
                                    Pexp_coerce
                                    expression (fan_ops.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (fan_ops.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                            expression (fan_ops.ml[]..[])
                                              Pexp_variant "App"
                                              Some
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_variant "App"
                                                      Some
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_variant "Dot"
                                                              Some
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_variant "Uid"
                                                                      Some
expression (fan_ops.ml[]..[])
  Pexp_tuple
  [
    expression (fan_ops.ml[]..[])
      Pexp_ident "loc" (fan_ops.ml[]..[])
    expression (fan_ops.ml[]..[])
      Pexp_constant Const_string("Bigarray",None)
  ]
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_variant "Dot"
                                                                      Some
expression (fan_ops.ml[]..[])
  Pexp_tuple
  [
    expression (fan_ops.ml[]..[])
      Pexp_ident "loc" (fan_ops.ml[]..[])
    expression (fan_ops.ml[]..[])
      Pexp_variant "Uid"
      Some
        expression (fan_ops.ml[]..[])
          Pexp_tuple
          [
            expression (fan_ops.ml[]..[])
              Pexp_ident "loc" (fan_ops.ml[]..[])
            expression (fan_ops.ml[]..[])
              Pexp_constant Const_string("Array2",None)
          ]
    expression (fan_ops.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (fan_ops.ml[]..[])
          Pexp_tuple
          [
            expression (fan_ops.ml[]..[])
              Pexp_ident "loc" (fan_ops.ml[]..[])
            expression (fan_ops.ml[]..[])
              Pexp_constant Const_string("get",None)
          ]
  ]
                                                                  ]
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_coerce
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "arr" (fan_ops.ml[]..[])
                                                              None
                                                              core_type (fan_ops.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                                []
                                                          ]
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_coerce
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "c1" (fan_ops.ml[]..[])
                                                      None
                                                      core_type (fan_ops.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                        []
                                                  ]
                                            expression (fan_ops.ml[]..[])
                                              Pexp_coerce
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "c2" (fan_ops.ml[]..[])
                                              None
                                              core_type (fan_ops.ml[]..[])
                                                Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                []
                                          ]
                                    None
                                    core_type (fan_ops.ml[]..[])
                                      Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                      []
                                <case>
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_construct "::" (fan_ops.ml[]..[])
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "c1" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_construct "::" (fan_ops.ml[]..[])
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "c2" (fan_ops.ml[]..[])
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_construct "::" (fan_ops.ml[]..[])
                                                    Some
                                                      pattern (fan_ops.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_var "c3" (fan_ops.ml[]..[])
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_construct "[]" (fan_ops.ml[]..[])
                                                            None
                                                        ]
                                                ]
                                        ]
                                  expression (fan_ops.ml[]..[])
                                    Pexp_coerce
                                    expression (fan_ops.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (fan_ops.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                            expression (fan_ops.ml[]..[])
                                              Pexp_variant "App"
                                              Some
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_variant "App"
                                                      Some
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_variant "App"
                                                              Some
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_variant "Dot"
                                                                      Some
expression (fan_ops.ml[]..[])
  Pexp_tuple
  [
    expression (fan_ops.ml[]..[])
      Pexp_ident "loc" (fan_ops.ml[]..[])
    expression (fan_ops.ml[]..[])
      Pexp_variant "Uid"
      Some
        expression (fan_ops.ml[]..[])
          Pexp_tuple
          [
            expression (fan_ops.ml[]..[])
              Pexp_ident "loc" (fan_ops.ml[]..[])
            expression (fan_ops.ml[]..[])
              Pexp_constant Const_string("Bigarray",None)
          ]
    expression (fan_ops.ml[]..[])
      Pexp_variant "Dot"
      Some
        expression (fan_ops.ml[]..[])
          Pexp_tuple
          [
            expression (fan_ops.ml[]..[])
              Pexp_ident "loc" (fan_ops.ml[]..[])
            expression (fan_ops.ml[]..[])
              Pexp_variant "Uid"
              Some
                expression (fan_ops.ml[]..[])
                  Pexp_tuple
                  [
                    expression (fan_ops.ml[]..[])
                      Pexp_ident "loc" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_constant Const_string("Array3",None)
                  ]
            expression (fan_ops.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (fan_ops.ml[]..[])
                  Pexp_tuple
                  [
                    expression (fan_ops.ml[]..[])
                      Pexp_ident "loc" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_constant Const_string("get",None)
                  ]
          ]
  ]
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (fan_ops.ml[]..[])
Pexp_ident "arr" (fan_ops.ml[]..[])
                                                                      None
                                                                      core_type (fan_ops.ml[]..[])
Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
[]
                                                                  ]
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_coerce
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "c1" (fan_ops.ml[]..[])
                                                              None
                                                              core_type (fan_ops.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                                []
                                                          ]
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_coerce
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "c2" (fan_ops.ml[]..[])
                                                      None
                                                      core_type (fan_ops.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                        []
                                                  ]
                                            expression (fan_ops.ml[]..[])
                                              Pexp_coerce
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "c3" (fan_ops.ml[]..[])
                                              None
                                              core_type (fan_ops.ml[]..[])
                                                Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                []
                                          ]
                                    None
                                    core_type (fan_ops.ml[]..[])
                                      Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                      []
                                <case>
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_construct "::" (fan_ops.ml[]..[])
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "c1" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_construct "::" (fan_ops.ml[]..[])
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "c2" (fan_ops.ml[]..[])
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_construct "::" (fan_ops.ml[]..[])
                                                    Some
                                                      pattern (fan_ops.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_var "c3" (fan_ops.ml[]..[])
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_var "coords" (fan_ops.ml[]..[])
                                                        ]
                                                ]
                                        ]
                                  expression (fan_ops.ml[]..[])
                                    Pexp_coerce
                                    expression (fan_ops.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (fan_ops.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                            expression (fan_ops.ml[]..[])
                                              Pexp_variant "App"
                                              Some
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_variant "Dot"
                                                      Some
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_variant "Uid"
                                                              Some
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_constant Const_string("Bigarray",None)
                                                                  ]
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_variant "Dot"
                                                              Some
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_variant "Uid"
                                                                      Some
expression (fan_ops.ml[]..[])
  Pexp_tuple
  [
    expression (fan_ops.ml[]..[])
      Pexp_ident "loc" (fan_ops.ml[]..[])
    expression (fan_ops.ml[]..[])
      Pexp_constant Const_string("Genarray",None)
  ]
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (fan_ops.ml[]..[])
  Pexp_tuple
  [
    expression (fan_ops.ml[]..[])
      Pexp_ident "loc" (fan_ops.ml[]..[])
    expression (fan_ops.ml[]..[])
      Pexp_constant Const_string("get",None)
  ]
                                                                  ]
                                                          ]
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_coerce
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "arr" (fan_ops.ml[]..[])
                                                      None
                                                      core_type (fan_ops.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                        []
                                                  ]
                                            expression (fan_ops.ml[]..[])
                                              Pexp_variant "Array"
                                              Some
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_variant "Sem"
                                                      Some
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_ident "loc" (fan_ops.ml[]..[])
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_coerce
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "c1" (fan_ops.ml[]..[])
                                                              None
                                                              core_type (fan_ops.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                                []
                                                            expression (fan_ops.ml[]..[])
                                                              Pexp_variant "Sem"
                                                              Some
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_coerce
                                                                      expression (fan_ops.ml[]..[])
Pexp_ident "c2" (fan_ops.ml[]..[])
                                                                      None
                                                                      core_type (fan_ops.ml[]..[])
Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
[]
                                                                    expression (fan_ops.ml[]..[])
                                                                      Pexp_variant "Sem"
                                                                      Some
expression (fan_ops.ml[]..[])
  Pexp_tuple
  [
    expression (fan_ops.ml[]..[])
      Pexp_ident "loc" (fan_ops.ml[]..[])
    expression (fan_ops.ml[]..[])
      Pexp_coerce
      expression (fan_ops.ml[]..[])
        Pexp_ident "c3" (fan_ops.ml[]..[])
      None
      core_type (fan_ops.ml[]..[])
        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
        []
    expression (fan_ops.ml[]..[])
      Pexp_coerce
      expression (fan_ops.ml[]..[])
        Pexp_apply
        expression (fan_ops.ml[]..[])
          Pexp_ident "sem_of_list" (fan_ops.ml[]..[])
        [
          <label> ""
            expression (fan_ops.ml[]..[])
              Pexp_ident "coords" (fan_ops.ml[]..[])
        ]
      None
      core_type (fan_ops.ml[]..[])
        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
        []
  ]
                                                                  ]
                                                          ]
                                                  ]
                                          ]
                                    None
                                    core_type (fan_ops.ml[]..[])
                                      Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                      []
                              ]
                      ]
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "bigarray_set" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "var" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "newval" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_match
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "var" (fan_ops.ml[]..[])
                            [
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "App"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_variant "App"
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_any
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_variant "Dot"
                                                    Some
                                                      pattern (fan_ops.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_any
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_variant "Uid"
                                                            Some
                                                              pattern (fan_ops.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_constant Const_string("Bigarray",None)
                                                                ]
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_variant "Dot"
                                                            Some
                                                              pattern (fan_ops.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_variant "Uid"
                                                                    Some
                                                                      pattern (fan_ops.ml[]..[])
Ppat_tuple
[
  pattern (fan_ops.ml[]..[])
    Ppat_any
  pattern (fan_ops.ml[]..[])
    Ppat_constant Const_string("Array1",None)
]
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_variant "Lid"
                                                                    Some
                                                                      pattern (fan_ops.ml[]..[])
Ppat_tuple
[
  pattern (fan_ops.ml[]..[])
    Ppat_any
  pattern (fan_ops.ml[]..[])
    Ppat_constant Const_string("get",None)
]
                                                                ]
                                                        ]
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "arr" (fan_ops.ml[]..[])
                                                ]
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "c1" (fan_ops.ml[]..[])
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_construct "Some" (fan_ops.ml[]..[])
                                  Some
                                    expression (fan_ops.ml[]..[])
                                      Pexp_coerce
                                      expression (fan_ops.ml[]..[])
                                        Pexp_variant "App"
                                        Some
                                          expression (fan_ops.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                              expression (fan_ops.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "loc" (fan_ops.ml[]..[])
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (fan_ops.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_variant "Dot"
                                                                Some
                                                                  expression (fan_ops.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (fan_ops.ml[]..[])
Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                      expression (fan_ops.ml[]..[])
Pexp_variant "Uid"
Some
  expression (fan_ops.ml[]..[])
    Pexp_tuple
    [
      expression (fan_ops.ml[]..[])
        Pexp_ident "loc" (fan_ops.ml[]..[])
      expression (fan_ops.ml[]..[])
        Pexp_constant Const_string("Bigarray",None)
    ]
                                                                      expression (fan_ops.ml[]..[])
Pexp_variant "Dot"
Some
  expression (fan_ops.ml[]..[])
    Pexp_tuple
    [
      expression (fan_ops.ml[]..[])
        Pexp_ident "loc" (fan_ops.ml[]..[])
      expression (fan_ops.ml[]..[])
        Pexp_variant "Uid"
        Some
          expression (fan_ops.ml[]..[])
            Pexp_tuple
            [
              expression (fan_ops.ml[]..[])
                Pexp_ident "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_constant Const_string("Array1",None)
            ]
      expression (fan_ops.ml[]..[])
        Pexp_variant "Lid"
        Some
          expression (fan_ops.ml[]..[])
            Pexp_tuple
            [
              expression (fan_ops.ml[]..[])
                Pexp_ident "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_constant Const_string("set",None)
            ]
    ]
                                                                    ]
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_coerce
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_ident "arr" (fan_ops.ml[]..[])
                                                                None
                                                                core_type (fan_ops.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                                  []
                                                            ]
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_coerce
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_ident "c1" (fan_ops.ml[]..[])
                                                        None
                                                        core_type (fan_ops.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                          []
                                                    ]
                                              expression (fan_ops.ml[]..[])
                                                Pexp_coerce
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "newval" (fan_ops.ml[]..[])
                                                None
                                                core_type (fan_ops.ml[]..[])
                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                  []
                                            ]
                                      None
                                      core_type (fan_ops.ml[]..[])
                                        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                        []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "App"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_variant "App"
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_any
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_variant "App"
                                                    Some
                                                      pattern (fan_ops.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_any
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_variant "Dot"
                                                            Some
                                                              pattern (fan_ops.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_variant "Uid"
                                                                    Some
                                                                      pattern (fan_ops.ml[]..[])
Ppat_tuple
[
  pattern (fan_ops.ml[]..[])
    Ppat_any
  pattern (fan_ops.ml[]..[])
    Ppat_constant Const_string("Bigarray",None)
]
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_variant "Dot"
                                                                    Some
                                                                      pattern (fan_ops.ml[]..[])
Ppat_tuple
[
  pattern (fan_ops.ml[]..[])
    Ppat_any
  pattern (fan_ops.ml[]..[])
    Ppat_variant "Uid"
    Some
      pattern (fan_ops.ml[]..[])
        Ppat_tuple
        [
          pattern (fan_ops.ml[]..[])
            Ppat_any
          pattern (fan_ops.ml[]..[])
            Ppat_constant Const_string("Array2",None)
        ]
  pattern (fan_ops.ml[]..[])
    Ppat_variant "Lid"
    Some
      pattern (fan_ops.ml[]..[])
        Ppat_tuple
        [
          pattern (fan_ops.ml[]..[])
            Ppat_any
          pattern (fan_ops.ml[]..[])
            Ppat_constant Const_string("get",None)
        ]
]
                                                                ]
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_var "arr" (fan_ops.ml[]..[])
                                                        ]
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "c1" (fan_ops.ml[]..[])
                                                ]
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "c2" (fan_ops.ml[]..[])
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_construct "Some" (fan_ops.ml[]..[])
                                  Some
                                    expression (fan_ops.ml[]..[])
                                      Pexp_coerce
                                      expression (fan_ops.ml[]..[])
                                        Pexp_variant "App"
                                        Some
                                          expression (fan_ops.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                              expression (fan_ops.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "loc" (fan_ops.ml[]..[])
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (fan_ops.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_variant "App"
                                                                Some
                                                                  expression (fan_ops.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (fan_ops.ml[]..[])
Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                      expression (fan_ops.ml[]..[])
Pexp_variant "Dot"
Some
  expression (fan_ops.ml[]..[])
    Pexp_tuple
    [
      expression (fan_ops.ml[]..[])
        Pexp_ident "loc" (fan_ops.ml[]..[])
      expression (fan_ops.ml[]..[])
        Pexp_variant "Uid"
        Some
          expression (fan_ops.ml[]..[])
            Pexp_tuple
            [
              expression (fan_ops.ml[]..[])
                Pexp_ident "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_constant Const_string("Bigarray",None)
            ]
      expression (fan_ops.ml[]..[])
        Pexp_variant "Dot"
        Some
          expression (fan_ops.ml[]..[])
            Pexp_tuple
            [
              expression (fan_ops.ml[]..[])
                Pexp_ident "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_variant "Uid"
                Some
                  expression (fan_ops.ml[]..[])
                    Pexp_tuple
                    [
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "loc" (fan_ops.ml[]..[])
                      expression (fan_ops.ml[]..[])
                        Pexp_constant Const_string("Array2",None)
                    ]
              expression (fan_ops.ml[]..[])
                Pexp_variant "Lid"
                Some
                  expression (fan_ops.ml[]..[])
                    Pexp_tuple
                    [
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "loc" (fan_ops.ml[]..[])
                      expression (fan_ops.ml[]..[])
                        Pexp_constant Const_string("set",None)
                    ]
            ]
    ]
                                                                      expression (fan_ops.ml[]..[])
Pexp_coerce
expression (fan_ops.ml[]..[])
  Pexp_ident "arr" (fan_ops.ml[]..[])
None
core_type (fan_ops.ml[]..[])
  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
  []
                                                                    ]
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_coerce
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_ident "c1" (fan_ops.ml[]..[])
                                                                None
                                                                core_type (fan_ops.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                                  []
                                                            ]
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_coerce
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_ident "c2" (fan_ops.ml[]..[])
                                                        None
                                                        core_type (fan_ops.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                          []
                                                    ]
                                              expression (fan_ops.ml[]..[])
                                                Pexp_coerce
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "newval" (fan_ops.ml[]..[])
                                                None
                                                core_type (fan_ops.ml[]..[])
                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                  []
                                            ]
                                      None
                                      core_type (fan_ops.ml[]..[])
                                        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                        []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "App"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_variant "App"
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_any
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_variant "App"
                                                    Some
                                                      pattern (fan_ops.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_any
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_variant "App"
                                                            Some
                                                              pattern (fan_ops.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_variant "Dot"
                                                                    Some
                                                                      pattern (fan_ops.ml[]..[])
Ppat_tuple
[
  pattern (fan_ops.ml[]..[])
    Ppat_any
  pattern (fan_ops.ml[]..[])
    Ppat_variant "Uid"
    Some
      pattern (fan_ops.ml[]..[])
        Ppat_tuple
        [
          pattern (fan_ops.ml[]..[])
            Ppat_any
          pattern (fan_ops.ml[]..[])
            Ppat_constant Const_string("Bigarray",None)
        ]
  pattern (fan_ops.ml[]..[])
    Ppat_variant "Dot"
    Some
      pattern (fan_ops.ml[]..[])
        Ppat_tuple
        [
          pattern (fan_ops.ml[]..[])
            Ppat_any
          pattern (fan_ops.ml[]..[])
            Ppat_variant "Uid"
            Some
              pattern (fan_ops.ml[]..[])
                Ppat_tuple
                [
                  pattern (fan_ops.ml[]..[])
                    Ppat_any
                  pattern (fan_ops.ml[]..[])
                    Ppat_constant Const_string("Array3",None)
                ]
          pattern (fan_ops.ml[]..[])
            Ppat_variant "Lid"
            Some
              pattern (fan_ops.ml[]..[])
                Ppat_tuple
                [
                  pattern (fan_ops.ml[]..[])
                    Ppat_any
                  pattern (fan_ops.ml[]..[])
                    Ppat_constant Const_string("get",None)
                ]
        ]
]
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_var "arr" (fan_ops.ml[]..[])
                                                                ]
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_var "c1" (fan_ops.ml[]..[])
                                                        ]
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "c2" (fan_ops.ml[]..[])
                                                ]
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "c3" (fan_ops.ml[]..[])
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_construct "Some" (fan_ops.ml[]..[])
                                  Some
                                    expression (fan_ops.ml[]..[])
                                      Pexp_coerce
                                      expression (fan_ops.ml[]..[])
                                        Pexp_variant "App"
                                        Some
                                          expression (fan_ops.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                              expression (fan_ops.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "loc" (fan_ops.ml[]..[])
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_variant "Lid"
                                                        Some
                                                          expression (fan_ops.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_constant Const_string(":=",None)
                                                            ]
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (fan_ops.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_variant "App"
                                                                Some
                                                                  expression (fan_ops.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (fan_ops.ml[]..[])
Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                      expression (fan_ops.ml[]..[])
Pexp_variant "App"
Some
  expression (fan_ops.ml[]..[])
    Pexp_tuple
    [
      expression (fan_ops.ml[]..[])
        Pexp_ident "loc" (fan_ops.ml[]..[])
      expression (fan_ops.ml[]..[])
        Pexp_variant "App"
        Some
          expression (fan_ops.ml[]..[])
            Pexp_tuple
            [
              expression (fan_ops.ml[]..[])
                Pexp_ident "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_variant "Dot"
                Some
                  expression (fan_ops.ml[]..[])
                    Pexp_tuple
                    [
                      expression (fan_ops.ml[]..[])
                        Pexp_ident "loc" (fan_ops.ml[]..[])
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Uid"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_tuple
                            [
                              expression (fan_ops.ml[]..[])
                                Pexp_ident "loc" (fan_ops.ml[]..[])
                              expression (fan_ops.ml[]..[])
                                Pexp_constant Const_string("Bigarray",None)
                            ]
                      expression (fan_ops.ml[]..[])
                        Pexp_variant "Dot"
                        Some
                          expression (fan_ops.ml[]..[])
                            Pexp_tuple
                            [
                              expression (fan_ops.ml[]..[])
                                Pexp_ident "loc" (fan_ops.ml[]..[])
                              expression (fan_ops.ml[]..[])
                                Pexp_variant "Uid"
                                Some
                                  expression (fan_ops.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "loc" (fan_ops.ml[]..[])
                                      expression (fan_ops.ml[]..[])
                                        Pexp_constant Const_string("Array3",None)
                                    ]
                              expression (fan_ops.ml[]..[])
                                Pexp_variant "Lid"
                                Some
                                  expression (fan_ops.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (fan_ops.ml[]..[])
                                        Pexp_ident "loc" (fan_ops.ml[]..[])
                                      expression (fan_ops.ml[]..[])
                                        Pexp_constant Const_string("get",None)
                                    ]
                            ]
                    ]
              expression (fan_ops.ml[]..[])
                Pexp_coerce
                expression (fan_ops.ml[]..[])
                  Pexp_ident "arr" (fan_ops.ml[]..[])
                None
                core_type (fan_ops.ml[]..[])
                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                  []
            ]
      expression (fan_ops.ml[]..[])
        Pexp_coerce
        expression (fan_ops.ml[]..[])
          Pexp_ident "c1" (fan_ops.ml[]..[])
        None
        core_type (fan_ops.ml[]..[])
          Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
          []
    ]
                                                                      expression (fan_ops.ml[]..[])
Pexp_coerce
expression (fan_ops.ml[]..[])
  Pexp_ident "c2" (fan_ops.ml[]..[])
None
core_type (fan_ops.ml[]..[])
  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
  []
                                                                    ]
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_coerce
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_ident "c3" (fan_ops.ml[]..[])
                                                                None
                                                                core_type (fan_ops.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                                  []
                                                            ]
                                                    ]
                                              expression (fan_ops.ml[]..[])
                                                Pexp_coerce
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "newval" (fan_ops.ml[]..[])
                                                None
                                                core_type (fan_ops.ml[]..[])
                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                  []
                                            ]
                                      None
                                      core_type (fan_ops.ml[]..[])
                                        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                        []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "App"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_variant "App"
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_any
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_variant "Dot"
                                                    Some
                                                      pattern (fan_ops.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_any
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_variant "Uid"
                                                            Some
                                                              pattern (fan_ops.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_constant Const_string("Bigarray",None)
                                                                ]
                                                          pattern (fan_ops.ml[]..[])
                                                            Ppat_variant "Dot"
                                                            Some
                                                              pattern (fan_ops.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_variant "Uid"
                                                                    Some
                                                                      pattern (fan_ops.ml[]..[])
Ppat_tuple
[
  pattern (fan_ops.ml[]..[])
    Ppat_any
  pattern (fan_ops.ml[]..[])
    Ppat_constant Const_string("Genarray",None)
]
                                                                  pattern (fan_ops.ml[]..[])
                                                                    Ppat_variant "Lid"
                                                                    Some
                                                                      pattern (fan_ops.ml[]..[])
Ppat_tuple
[
  pattern (fan_ops.ml[]..[])
    Ppat_any
  pattern (fan_ops.ml[]..[])
    Ppat_constant Const_string("get",None)
]
                                                                ]
                                                        ]
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "arr" (fan_ops.ml[]..[])
                                                ]
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_variant "Array"
                                            Some
                                              pattern (fan_ops.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_any
                                                  pattern (fan_ops.ml[]..[])
                                                    Ppat_var "coords" (fan_ops.ml[]..[])
                                                ]
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_construct "Some" (fan_ops.ml[]..[])
                                  Some
                                    expression (fan_ops.ml[]..[])
                                      Pexp_coerce
                                      expression (fan_ops.ml[]..[])
                                        Pexp_variant "App"
                                        Some
                                          expression (fan_ops.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (fan_ops.ml[]..[])
                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                              expression (fan_ops.ml[]..[])
                                                Pexp_variant "App"
                                                Some
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_ident "loc" (fan_ops.ml[]..[])
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (fan_ops.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_variant "Dot"
                                                                Some
                                                                  expression (fan_ops.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (fan_ops.ml[]..[])
Pexp_ident "loc" (fan_ops.ml[]..[])
                                                                      expression (fan_ops.ml[]..[])
Pexp_variant "Uid"
Some
  expression (fan_ops.ml[]..[])
    Pexp_tuple
    [
      expression (fan_ops.ml[]..[])
        Pexp_ident "loc" (fan_ops.ml[]..[])
      expression (fan_ops.ml[]..[])
        Pexp_constant Const_string("Bigarray",None)
    ]
                                                                      expression (fan_ops.ml[]..[])
Pexp_variant "Dot"
Some
  expression (fan_ops.ml[]..[])
    Pexp_tuple
    [
      expression (fan_ops.ml[]..[])
        Pexp_ident "loc" (fan_ops.ml[]..[])
      expression (fan_ops.ml[]..[])
        Pexp_variant "Uid"
        Some
          expression (fan_ops.ml[]..[])
            Pexp_tuple
            [
              expression (fan_ops.ml[]..[])
                Pexp_ident "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_constant Const_string("Genarray",None)
            ]
      expression (fan_ops.ml[]..[])
        Pexp_variant "Lid"
        Some
          expression (fan_ops.ml[]..[])
            Pexp_tuple
            [
              expression (fan_ops.ml[]..[])
                Pexp_ident "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_constant Const_string("set",None)
            ]
    ]
                                                                    ]
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_coerce
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_ident "arr" (fan_ops.ml[]..[])
                                                                None
                                                                core_type (fan_ops.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                                  []
                                                            ]
                                                      expression (fan_ops.ml[]..[])
                                                        Pexp_variant "Array"
                                                        Some
                                                          expression (fan_ops.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_ident "loc" (fan_ops.ml[]..[])
                                                              expression (fan_ops.ml[]..[])
                                                                Pexp_coerce
                                                                expression (fan_ops.ml[]..[])
                                                                  Pexp_ident "coords" (fan_ops.ml[]..[])
                                                                None
                                                                core_type (fan_ops.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                                  []
                                                            ]
                                                    ]
                                              expression (fan_ops.ml[]..[])
                                                Pexp_coerce
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "newval" (fan_ops.ml[]..[])
                                                None
                                                core_type (fan_ops.ml[]..[])
                                                  Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                                  []
                                            ]
                                      None
                                      core_type (fan_ops.ml[]..[])
                                        Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                        []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_any
                                expression (fan_ops.ml[]..[])
                                  Pexp_construct "None" (fan_ops.ml[]..[])
                                  None
                            ]
                      ]
                ]
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "mksequence" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_fun "?loc"
          None
          pattern (fan_ops.ml[]..[])
            Ppat_var "loc" (fan_ops.ml[]..[])
          expression (fan_ops.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (fan_ops.ml[]..[])
                  Ppat_alias "e" (fan_ops.ml[]..[])
                  pattern (fan_ops.ml[]..[])
                    Ppat_or
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Sem"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "_loc" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                          ]
                    pattern (fan_ops.ml[]..[])
                      Ppat_variant "Ant"
                      Some
                        pattern (fan_ops.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (fan_ops.ml[]..[])
                              Ppat_var "_loc" (fan_ops.ml[]..[])
                            pattern (fan_ops.ml[]..[])
                              Ppat_any
                          ]
                expression (fan_ops.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (fan_ops.ml[]..[])
                        Ppat_var "_loc" (fan_ops.ml[]..[])
                      expression (fan_ops.ml[]..[])
                        Pexp_match
                        expression (fan_ops.ml[]..[])
                          Pexp_ident "loc" (fan_ops.ml[]..[])
                        [
                          <case>
                            pattern (fan_ops.ml[]..[])
                              Ppat_construct "Some" (fan_ops.ml[]..[])
                              Some
                                pattern (fan_ops.ml[]..[])
                                  Ppat_var "x" (fan_ops.ml[]..[])
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "x" (fan_ops.ml[]..[])
                          <case>
                            pattern (fan_ops.ml[]..[])
                              Ppat_construct "None" (fan_ops.ml[]..[])
                              None
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "_loc" (fan_ops.ml[]..[])
                        ]
                  ]
                  expression (fan_ops.ml[]..[])
                    Pexp_variant "Seq"
                    Some
                      expression (fan_ops.ml[]..[])
                        Pexp_tuple
                        [
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "_loc" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "e" (fan_ops.ml[]..[])
                        ]
              <case>
                pattern (fan_ops.ml[]..[])
                  Ppat_var "e" (fan_ops.ml[]..[])
                expression (fan_ops.ml[]..[])
                  Pexp_ident "e" (fan_ops.ml[]..[])
            ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "mksequence'" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_fun "?loc"
          None
          pattern (fan_ops.ml[]..[])
            Ppat_var "loc" (fan_ops.ml[]..[])
          expression (fan_ops.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (fan_ops.ml[]..[])
                  Ppat_alias "e" (fan_ops.ml[]..[])
                  pattern (fan_ops.ml[]..[])
                    Ppat_variant "Sem"
                    Some
                      pattern (fan_ops.ml[]..[])
                        Ppat_tuple
                        [
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "_loc" (fan_ops.ml[]..[])
                          pattern (fan_ops.ml[]..[])
                            Ppat_any
                          pattern (fan_ops.ml[]..[])
                            Ppat_any
                        ]
                expression (fan_ops.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (fan_ops.ml[]..[])
                        Ppat_var "_loc" (fan_ops.ml[]..[])
                      expression (fan_ops.ml[]..[])
                        Pexp_match
                        expression (fan_ops.ml[]..[])
                          Pexp_ident "loc" (fan_ops.ml[]..[])
                        [
                          <case>
                            pattern (fan_ops.ml[]..[])
                              Ppat_construct "Some" (fan_ops.ml[]..[])
                              Some
                                pattern (fan_ops.ml[]..[])
                                  Ppat_var "x" (fan_ops.ml[]..[])
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "x" (fan_ops.ml[]..[])
                          <case>
                            pattern (fan_ops.ml[]..[])
                              Ppat_construct "None" (fan_ops.ml[]..[])
                              None
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "_loc" (fan_ops.ml[]..[])
                        ]
                  ]
                  expression (fan_ops.ml[]..[])
                    Pexp_variant "Seq"
                    Some
                      expression (fan_ops.ml[]..[])
                        Pexp_tuple
                        [
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "_loc" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_ident "e" (fan_ops.ml[]..[])
                        ]
              <case>
                pattern (fan_ops.ml[]..[])
                  Ppat_var "e" (fan_ops.ml[]..[])
                expression (fan_ops.ml[]..[])
                  Pexp_ident "e" (fan_ops.ml[]..[])
            ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "to_lid" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_variant "Dot"
                Some
                  pattern (fan_ops.ml[]..[])
                    Ppat_tuple
                    [
                      pattern (fan_ops.ml[]..[])
                        Ppat_var "_loc" (fan_ops.ml[]..[])
                      pattern (fan_ops.ml[]..[])
                        Ppat_any
                      pattern (fan_ops.ml[]..[])
                        Ppat_var "i" (fan_ops.ml[]..[])
                    ]
              expression (fan_ops.ml[]..[])
                Pexp_apply
                expression (fan_ops.ml[]..[])
                  Pexp_ident "to_lid" (fan_ops.ml[]..[])
                [
                  <label> ""
                    expression (fan_ops.ml[]..[])
                      Pexp_ident "i" (fan_ops.ml[]..[])
                ]
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_variant "Lid"
                Some
                  pattern (fan_ops.ml[]..[])
                    Ppat_tuple
                    [
                      pattern (fan_ops.ml[]..[])
                        Ppat_var "_loc" (fan_ops.ml[]..[])
                      pattern (fan_ops.ml[]..[])
                        Ppat_var "lid" (fan_ops.ml[]..[])
                    ]
              expression (fan_ops.ml[]..[])
                Pexp_ident "lid" (fan_ops.ml[]..[])
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_any
              expression (fan_ops.ml[]..[])
                Pexp_assert
                expression (fan_ops.ml[]..[])
                  Pexp_construct "false" (fan_ops.ml[]..[])
                  None
          ]
    ]
  structure_item (fan_ops.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (fan_ops.ml[]..[])
          Ppat_var "mkumin" (fan_ops.ml[]..[])
        expression (fan_ops.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (fan_ops.ml[]..[])
                Ppat_var "loc" (fan_ops.ml[]..[])
              expression (fan_ops.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (fan_ops.ml[]..[])
                      Ppat_var "prefix" (fan_ops.ml[]..[])
                    expression (fan_ops.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (fan_ops.ml[]..[])
                            Ppat_var "arg" (fan_ops.ml[]..[])
                          expression (fan_ops.ml[]..[])
                            Pexp_match
                            expression (fan_ops.ml[]..[])
                              Pexp_ident "arg" (fan_ops.ml[]..[])
                            [
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "Int"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "n" (fan_ops.ml[]..[])
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_coerce
                                  expression (fan_ops.ml[]..[])
                                    Pexp_variant "Int"
                                    Some
                                      expression (fan_ops.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (fan_ops.ml[]..[])
                                            Pexp_ident "loc" (fan_ops.ml[]..[])
                                          expression (fan_ops.ml[]..[])
                                            Pexp_apply
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "Stringf.neg" (fan_ops.ml[]..[])
                                            [
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "n" (fan_ops.ml[]..[])
                                            ]
                                        ]
                                  None
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "Int32"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "n" (fan_ops.ml[]..[])
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_coerce
                                  expression (fan_ops.ml[]..[])
                                    Pexp_variant "Int32"
                                    Some
                                      expression (fan_ops.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (fan_ops.ml[]..[])
                                            Pexp_ident "loc" (fan_ops.ml[]..[])
                                          expression (fan_ops.ml[]..[])
                                            Pexp_apply
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "Stringf.neg" (fan_ops.ml[]..[])
                                            [
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "n" (fan_ops.ml[]..[])
                                            ]
                                        ]
                                  None
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "Int64"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "n" (fan_ops.ml[]..[])
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_coerce
                                  expression (fan_ops.ml[]..[])
                                    Pexp_variant "Int64"
                                    Some
                                      expression (fan_ops.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (fan_ops.ml[]..[])
                                            Pexp_ident "loc" (fan_ops.ml[]..[])
                                          expression (fan_ops.ml[]..[])
                                            Pexp_apply
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "Stringf.neg" (fan_ops.ml[]..[])
                                            [
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "n" (fan_ops.ml[]..[])
                                            ]
                                        ]
                                  None
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "Nativeint"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "n" (fan_ops.ml[]..[])
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_coerce
                                  expression (fan_ops.ml[]..[])
                                    Pexp_variant "Nativeint"
                                    Some
                                      expression (fan_ops.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (fan_ops.ml[]..[])
                                            Pexp_ident "loc" (fan_ops.ml[]..[])
                                          expression (fan_ops.ml[]..[])
                                            Pexp_apply
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "Stringf.neg" (fan_ops.ml[]..[])
                                            [
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "n" (fan_ops.ml[]..[])
                                            ]
                                        ]
                                  None
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_constraint
                                  pattern (fan_ops.ml[]..[])
                                    Ppat_variant "Flo"
                                    Some
                                      pattern (fan_ops.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "_loc" (fan_ops.ml[]..[])
                                          pattern (fan_ops.ml[]..[])
                                            Ppat_var "n" (fan_ops.ml[]..[])
                                        ]
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                                expression (fan_ops.ml[]..[])
                                  Pexp_coerce
                                  expression (fan_ops.ml[]..[])
                                    Pexp_variant "Flo"
                                    Some
                                      expression (fan_ops.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (fan_ops.ml[]..[])
                                            Pexp_ident "loc" (fan_ops.ml[]..[])
                                          expression (fan_ops.ml[]..[])
                                            Pexp_apply
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "Stringf.neg" (fan_ops.ml[]..[])
                                            [
                                              <label> ""
                                                expression (fan_ops.ml[]..[])
                                                  Pexp_ident "n" (fan_ops.ml[]..[])
                                            ]
                                        ]
                                  None
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                              <case>
                                pattern (fan_ops.ml[]..[])
                                  Ppat_any
                                expression (fan_ops.ml[]..[])
                                  Pexp_coerce
                                  expression (fan_ops.ml[]..[])
                                    Pexp_variant "App"
                                    Some
                                      expression (fan_ops.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (fan_ops.ml[]..[])
                                            Pexp_ident "loc" (fan_ops.ml[]..[])
                                          expression (fan_ops.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (fan_ops.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_ident "loc" (fan_ops.ml[]..[])
                                                  expression (fan_ops.ml[]..[])
                                                    Pexp_apply
                                                    expression (fan_ops.ml[]..[])
                                                      Pexp_ident "^" (fan_ops.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_constant Const_string("~",None)
                                                      <label> ""
                                                        expression (fan_ops.ml[]..[])
                                                          Pexp_ident "prefix" (fan_ops.ml[]..[])
                                                    ]
                                                ]
                                          expression (fan_ops.ml[]..[])
                                            Pexp_coerce
                                            expression (fan_ops.ml[]..[])
                                              Pexp_ident "arg" (fan_ops.ml[]..[])
                                            None
                                            core_type (fan_ops.ml[]..[])
                                              Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                              []
                                        ]
                                  None
                                  core_type (fan_ops.ml[]..[])
                                    Ptyp_constr "Astf.exp" (fan_ops.ml[]..[])
                                    []
                            ]
                      ]
                ]
          ]
    ]
]
