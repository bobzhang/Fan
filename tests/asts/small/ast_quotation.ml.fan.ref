[
  structure_item (ast_quotation.ml[1,0+0]..[1,0+44])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[1,0+4]..[1,0+19])
          Ppat_var "pp_print_string" (ast_quotation.ml[1,0+4]..[1,0+19])
        expression (ast_quotation.ml[1,0+22]..[1,0+44])
          Pexp_ident "Format.pp_print_string" (ast_quotation.ml[1,0+22]..[1,0+44])
    ]
  structure_item (ast_quotation.ml[2,45+0]..[2,45+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[2,45+4]..[2,45+11])
          Ppat_var "bprintf" (ast_quotation.ml[2,45+4]..[2,45+11])
        expression (ast_quotation.ml[2,45+14]..[2,45+28])
          Pexp_ident "Format.bprintf" (ast_quotation.ml[2,45+14]..[2,45+28])
    ]
  structure_item (ast_quotation.ml[3,74+0]..[3,74+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[3,74+4]..[3,74+11])
          Ppat_var "fprintf" (ast_quotation.ml[3,74+4]..[3,74+11])
        expression (ast_quotation.ml[3,74+14]..[3,74+28])
          Pexp_ident "Format.fprintf" (ast_quotation.ml[3,74+14]..[3,74+28])
    ]
  structure_item (ast_quotation.ml[4,103+0]..[8,216+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[4,103+4]..[4,103+9])
          Ppat_var "paths" (ast_quotation.ml[4,103+4]..[4,103+9])
        expression (ast_quotation.ml[4,103+9]..[8,216+40])
          Pexp_constraint
          expression (ast_quotation.ml[5,139+2]..[8,216+40])
            Pexp_apply
            expression (ast_quotation.ml[5,139+2]..[5,139+5])
              Pexp_ident "ref" (ast_quotation.ml[5,139+2]..[5,139+5])
            [
              <label> ""
                expression (ast_quotation.ml[6,145+5]..[8,216+39])
                  Pexp_construct "::" (ast_quotation.ml[6,145+5]..[8,216+39])
                  Some
                    expression (ast_quotation.ml[6,145+5]..[8,216+39])
                      Pexp_tuple
                      [
                        expression (ast_quotation.ml[6,145+5]..[6,145+30])
                          Pexp_variant "Absolute"
                          Some
                            expression (ast_quotation.ml[6,145+16]..[6,145+29])
                              Pexp_construct "::" (ast_quotation.ml[6,145+16]..[6,145+29])
                              Some
                                expression (ast_quotation.ml[6,145+16]..[6,145+29])
                                  Pexp_tuple
                                  [
                                    expression (ast_quotation.ml[6,145+16]..[6,145+21])
                                      Pexp_constant Const_string("Fan",None)
                                    expression (ast_quotation.ml[6,145+23]..[6,145+29])
                                      Pexp_construct "::" (ast_quotation.ml[6,145+23]..[6,145+29])
                                      Some
                                        expression (ast_quotation.ml[6,145+23]..[6,145+29])
                                          Pexp_tuple
                                          [
                                            expression (ast_quotation.ml[6,145+23]..[6,145+29])
                                              Pexp_constant Const_string("Lang",None)
                                            expression (ast_quotation.ml[6,145+23]..[6,145+29])
                                              Pexp_construct "[]" (ast_quotation.ml[6,145+23]..[6,145+29])
                                              None
                                          ]
                                  ]
                        expression (ast_quotation.ml[7,177+4]..[8,216+39])
                          Pexp_construct "::" (ast_quotation.ml[7,177+4]..[8,216+39])
                          Some
                            expression (ast_quotation.ml[7,177+4]..[8,216+39])
                              Pexp_tuple
                              [
                                expression (ast_quotation.ml[7,177+4]..[7,177+37])
                                  Pexp_variant "Absolute"
                                  Some
                                    expression (ast_quotation.ml[7,177+15]..[7,177+36])
                                      Pexp_construct "::" (ast_quotation.ml[7,177+15]..[7,177+36])
                                      Some
                                        expression (ast_quotation.ml[7,177+15]..[7,177+36])
                                          Pexp_tuple
                                          [
                                            expression (ast_quotation.ml[7,177+15]..[7,177+20])
                                              Pexp_constant Const_string("Fan",None)
                                            expression (ast_quotation.ml[7,177+22]..[7,177+36])
                                              Pexp_construct "::" (ast_quotation.ml[7,177+22]..[7,177+36])
                                              Some
                                                expression (ast_quotation.ml[7,177+22]..[7,177+36])
                                                  Pexp_tuple
                                                  [
                                                    expression (ast_quotation.ml[7,177+22]..[7,177+28])
                                                      Pexp_constant Const_string("Lang",None)
                                                    expression (ast_quotation.ml[7,177+30]..[7,177+36])
                                                      Pexp_construct "::" (ast_quotation.ml[7,177+30]..[7,177+36])
                                                      Some
                                                        expression (ast_quotation.ml[7,177+30]..[7,177+36])
                                                          Pexp_tuple
                                                          [
                                                            expression (ast_quotation.ml[7,177+30]..[7,177+36])
                                                              Pexp_constant Const_string("Meta",None)
                                                            expression (ast_quotation.ml[7,177+30]..[7,177+36])
                                                              Pexp_construct "[]" (ast_quotation.ml[7,177+30]..[7,177+36])
                                                              None
                                                          ]
                                                  ]
                                          ]
                                expression (ast_quotation.ml[8,216+4]..[8,216+39])
                                  Pexp_construct "::" (ast_quotation.ml[8,216+4]..[8,216+39])
                                  Some
                                    expression (ast_quotation.ml[8,216+4]..[8,216+39])
                                      Pexp_tuple
                                      [
                                        expression (ast_quotation.ml[8,216+4]..[8,216+39])
                                          Pexp_variant "Absolute"
                                          Some
                                            expression (ast_quotation.ml[8,216+15]..[8,216+38])
                                              Pexp_construct "::" (ast_quotation.ml[8,216+15]..[8,216+38])
                                              Some
                                                expression (ast_quotation.ml[8,216+15]..[8,216+38])
                                                  Pexp_tuple
                                                  [
                                                    expression (ast_quotation.ml[8,216+15]..[8,216+20])
                                                      Pexp_constant Const_string("Fan",None)
                                                    expression (ast_quotation.ml[8,216+22]..[8,216+38])
                                                      Pexp_construct "::" (ast_quotation.ml[8,216+22]..[8,216+38])
                                                      Some
                                                        expression (ast_quotation.ml[8,216+22]..[8,216+38])
                                                          Pexp_tuple
                                                          [
                                                            expression (ast_quotation.ml[8,216+22]..[8,216+28])
                                                              Pexp_constant Const_string("Lang",None)
                                                            expression (ast_quotation.ml[8,216+30]..[8,216+38])
                                                              Pexp_construct "::" (ast_quotation.ml[8,216+30]..[8,216+38])
                                                              Some
                                                                expression (ast_quotation.ml[8,216+30]..[8,216+38])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (ast_quotation.ml[8,216+30]..[8,216+38])
                                                                      Pexp_constant Const_string("Filter",None)
                                                                    expression (ast_quotation.ml[8,216+30]..[8,216+38])
                                                                      Pexp_construct "[]" (ast_quotation.ml[8,216+30]..[8,216+38])
                                                                      None
                                                                  ]
                                                          ]
                                                  ]
                                        expression (ast_quotation.ml[8,216+4]..[8,216+39])
                                          Pexp_construct "[]" (ast_quotation.ml[8,216+4]..[8,216+39])
                                          None
                                      ]
                              ]
                      ]
            ]
          core_type (ast_quotation.ml[4,103+11]..[4,103+33])
            Ptyp_constr "ref" (ast_quotation.ml[4,103+30]..[4,103+33])
            [
              core_type (ast_quotation.ml[4,103+11]..[4,103+29])
                Ptyp_constr "list" (ast_quotation.ml[4,103+25]..[4,103+29])
                [
                  core_type (ast_quotation.ml[4,103+11]..[4,103+24])
                    Ptyp_constr "Tokenf.domain" (ast_quotation.ml[4,103+11]..[4,103+24])
                    []
                ]
            ]
    ]
  structure_item (ast_quotation.ml[9,257+0]..[12,338+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[9,257+4]..[9,257+17])
          Ppat_var "concat_domain" (ast_quotation.ml[9,257+4]..[9,257+17])
        expression (ast_quotation.ml[10,277+2]..[12,338+36])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[11,288+4]..[11,288+26])
                Ppat_tuple
                [
                  pattern (ast_quotation.ml[11,288+5]..[11,288+17])
                    Ppat_variant "Absolute"
                    Some
                      pattern (ast_quotation.ml[11,288+15]..[11,288+17])
                        Ppat_var "xs" (ast_quotation.ml[11,288+15]..[11,288+17])
                  pattern (ast_quotation.ml[11,288+18]..[11,288+25])
                    Ppat_variant "Sub"
                    Some
                      pattern (ast_quotation.ml[11,288+23]..[11,288+25])
                        Ppat_var "ys" (ast_quotation.ml[11,288+23]..[11,288+25])
                ]
              expression (ast_quotation.ml[11,288+30]..[11,288+49])
                Pexp_variant "Absolute"
                Some
                  expression (ast_quotation.ml[11,288+41]..[11,288+48])
                    Pexp_apply
                    expression (ast_quotation.ml[11,288+44]..[11,288+45])
                      Pexp_ident "@" (ast_quotation.ml[11,288+44]..[11,288+45])
                    [
                      <label> ""
                        expression (ast_quotation.ml[11,288+41]..[11,288+43])
                          Pexp_ident "xs" (ast_quotation.ml[11,288+41]..[11,288+43])
                      <label> ""
                        expression (ast_quotation.ml[11,288+46]..[11,288+48])
                          Pexp_ident "ys" (ast_quotation.ml[11,288+46]..[11,288+48])
                    ]
            <case>
              pattern (ast_quotation.ml[12,338+4]..[12,338+5])
                Ppat_any
              expression (ast_quotation.ml[12,338+9]..[12,338+36])
                Pexp_apply
                expression (ast_quotation.ml[12,338+9]..[12,338+20])
                  Pexp_ident "invalid_arg" (ast_quotation.ml[12,338+9]..[12,338+20])
                [
                  <label> ""
                    expression (ast_quotation.ml[12,338+21]..[12,338+36])
                      Pexp_constant Const_string("concat_domain",None)
                ]
          ]
    ]
  structure_item (ast_quotation.ml[13,375+0]..[13,375+74])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[13,375+4]..[13,375+13])
          Ppat_var "names_tbl" (ast_quotation.ml[13,375+4]..[13,375+13])
        expression (ast_quotation.ml[13,375+13]..[13,375+74])
          Pexp_constraint
          expression (ast_quotation.ml[13,375+57]..[13,375+74])
            Pexp_apply
            expression (ast_quotation.ml[13,375+57]..[13,375+71])
              Pexp_ident "Hashtbl.create" (ast_quotation.ml[13,375+57]..[13,375+71])
            [
              <label> ""
                expression (ast_quotation.ml[13,375+72]..[13,375+74])
                  Pexp_constant Const_int 30
            ]
          core_type (ast_quotation.ml[13,375+16]..[13,375+54])
            Ptyp_constr "Hashtbl.t" (ast_quotation.ml[13,375+45]..[13,375+54])
            [
              core_type (ast_quotation.ml[13,375+16]..[13,375+29])
                Ptyp_constr "Tokenf.domain" (ast_quotation.ml[13,375+16]..[13,375+29])
                []
              core_type (ast_quotation.ml[13,375+30]..[13,375+43])
                Ptyp_constr "Setf.String.t" (ast_quotation.ml[13,375+30]..[13,375+43])
                []
            ]
    ]
  structure_item (ast_quotation.ml[14,450+0]..[27,812+78])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[14,450+4]..[14,450+18])
          Ppat_var "dump_names_tbl" (ast_quotation.ml[14,450+4]..[14,450+18])
        expression (ast_quotation.ml[15,471+2]..[27,812+78])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[16,482+4]..[16,482+6])
                Ppat_construct "()" (ast_quotation.ml[16,482+4]..[16,482+6])
                None
              expression (ast_quotation.ml[17,492+6]..[27,812+78])
                Pexp_apply
                expression (ast_quotation.ml[17,492+16]..[17,492+18])
                  Pexp_ident "|>" (ast_quotation.ml[17,492+16]..[17,492+18])
                [
                  <label> ""
                    expression (ast_quotation.ml[17,492+6]..[17,492+15])
                      Pexp_ident "names_tbl" (ast_quotation.ml[17,492+6]..[17,492+15])
                  <label> ""
                    expression (ast_quotation.ml[18,511+9]..[27,812+77])
                      Pexp_apply
                      expression (ast_quotation.ml[18,511+9]..[18,511+21])
                        Pexp_ident "Hashtbl.iter" (ast_quotation.ml[18,511+9]..[18,511+21])
                      [
                        <label> ""
                          expression (ast_quotation.ml[19,533+12]..[27,812+76])
                            Pexp_function
                            [
                              <case>
                                pattern (ast_quotation.ml[20,554+14]..[20,554+15])
                                  Ppat_var "k" (ast_quotation.ml[20,554+14]..[20,554+15])
                                expression (ast_quotation.ml[21,573+17]..[27,812+75])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ast_quotation.ml[22,599+19]..[22,599+20])
                                        Ppat_var "s" (ast_quotation.ml[22,599+19]..[22,599+20])
                                      expression (ast_quotation.ml[23,623+21]..[27,812+75])
                                        Pexp_sequence
                                        expression (ast_quotation.ml[23,623+22]..[24,688+49])
                                          Pexp_apply
                                          expression (ast_quotation.ml[23,623+22]..[23,623+29])
                                            Pexp_ident "fprintf" (ast_quotation.ml[23,623+22]..[23,623+29])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[23,623+30]..[23,623+50])
                                                Pexp_ident "Format.std_formatter" (ast_quotation.ml[23,623+30]..[23,623+50])
                                            <label> ""
                                              expression (ast_quotation.ml[23,623+51]..[23,623+64])
                                                Pexp_constant Const_string("Domain:%a\n",None)
                                            <label> ""
                                              expression (ast_quotation.ml[24,688+24]..[24,688+47])
                                                Pexp_ident "Tokenf.pp_print_domains" (ast_quotation.ml[24,688+24]..[24,688+47])
                                            <label> ""
                                              expression (ast_quotation.ml[24,688+48]..[24,688+49])
                                                Pexp_ident "k" (ast_quotation.ml[24,688+48]..[24,688+49])
                                          ]
                                        expression (ast_quotation.ml[23,623+21]..[27,812+75])
                                          Pexp_apply
                                          expression (ast_quotation.ml[25,739+22]..[25,739+38])
                                            Pexp_ident "Setf.String.iter" (ast_quotation.ml[25,739+22]..[25,739+38])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[26,778+25]..[27,812+71])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (ast_quotation.ml[27,812+27]..[27,812+28])
                                                      Ppat_var "v" (ast_quotation.ml[27,812+27]..[27,812+28])
                                                    expression (ast_quotation.ml[27,812+32]..[27,812+71])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[27,812+32]..[27,812+39])
                                                        Pexp_ident "fprintf" (ast_quotation.ml[27,812+32]..[27,812+39])
                                                      [
                                                        <label> ""
                                                          expression (ast_quotation.ml[27,812+40]..[27,812+60])
                                                            Pexp_ident "Format.std_formatter" (ast_quotation.ml[27,812+40]..[27,812+60])
                                                        <label> ""
                                                          expression (ast_quotation.ml[27,812+61]..[27,812+69])
                                                            Pexp_constant Const_string("\t%s\n",None)
                                                        <label> ""
                                                          expression (ast_quotation.ml[27,812+70]..[27,812+71])
                                                            Pexp_ident "v" (ast_quotation.ml[27,812+70]..[27,812+71])
                                                      ]
                                                ]
                                            <label> ""
                                              expression (ast_quotation.ml[27,812+73]..[27,812+74])
                                                Pexp_ident "s" (ast_quotation.ml[27,812+73]..[27,812+74])
                                          ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[28,891+0]..[44,1499+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[28,891+4]..[28,891+16])
          Ppat_var "resolve_name" (ast_quotation.ml[28,891+4]..[28,891+16])
        expression (ast_quotation.ml[29,910+2]..[44,1499+21])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[30,921+4]..[30,921+21])
                Ppat_constraint
                pattern (ast_quotation.ml[30,921+5]..[30,921+6])
                  Ppat_var "n" (ast_quotation.ml[30,921+5]..[30,921+6])
                core_type (ast_quotation.ml[30,921+9]..[30,921+20])
                  Ptyp_constr "Tokenf.name" (ast_quotation.ml[30,921+9]..[30,921+20])
                  []
              expression (ast_quotation.ml[31,946+7]..[44,1499+20])
                Pexp_match
                expression (ast_quotation.ml[31,946+13]..[31,946+14])
                  Pexp_ident "n" (ast_quotation.ml[31,946+13]..[31,946+14])
                [
                  <case>
                    pattern (ast_quotation.ml[32,966+9]..[32,966+45])
                      Ppat_record Closed
                      [
                        "domain" (ast_quotation.ml[32,966+11]..[32,966+17])
                          pattern (ast_quotation.ml[32,966+20]..[32,966+33])
                            Ppat_alias "x" (ast_quotation.ml[32,966+31]..[32,966+32])
                            pattern (ast_quotation.ml[32,966+21]..[32,966+27])
                              Ppat_variant "Sub"
                              Some
                                pattern (ast_quotation.ml[32,966+26]..[32,966+27])
                                  Ppat_any
                        "name" (ast_quotation.ml[32,966+35]..[32,966+39])
                          pattern (ast_quotation.ml[32,966+42]..[32,966+43])
                            Ppat_var "v" (ast_quotation.ml[32,966+42]..[32,966+43])
                      ]
                    expression (ast_quotation.ml[33,1015+12]..[43,1426+71])
                      Pexp_match
                      expression (ast_quotation.ml[33,1015+18]..[40,1308+72])
                        Pexp_apply
                        expression (ast_quotation.ml[33,1015+18]..[33,1015+32])
                          Pexp_ident "Listf.find_opt" (ast_quotation.ml[33,1015+18]..[33,1015+32])
                        [
                          <label> ""
                            expression (ast_quotation.ml[34,1048+21]..[40,1308+62])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[35,1078+23]..[35,1078+27])
                                    Ppat_var "path" (ast_quotation.ml[35,1078+23]..[35,1078+27])
                                  expression (ast_quotation.ml[36,1109+26]..[40,1308+61])
                                    Pexp_match
                                    expression (ast_quotation.ml[36,1109+32]..[37,1174+59])
                                      Pexp_apply
                                      expression (ast_quotation.ml[36,1109+62]..[36,1109+64])
                                        Pexp_ident "@@" (ast_quotation.ml[36,1109+62]..[36,1109+64])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[36,1109+33]..[36,1109+60])
                                            Pexp_apply
                                            expression (ast_quotation.ml[36,1109+33]..[36,1109+50])
                                              Pexp_ident "Hashtblf.find_opt" (ast_quotation.ml[36,1109+33]..[36,1109+50])
                                            [
                                              <label> ""
                                                expression (ast_quotation.ml[36,1109+51]..[36,1109+60])
                                                  Pexp_ident "names_tbl" (ast_quotation.ml[36,1109+51]..[36,1109+60])
                                            ]
                                        <label> ""
                                          expression (ast_quotation.ml[37,1174+35]..[37,1174+58])
                                            Pexp_apply
                                            expression (ast_quotation.ml[37,1174+35]..[37,1174+48])
                                              Pexp_ident "concat_domain" (ast_quotation.ml[37,1174+35]..[37,1174+48])
                                            [
                                              <label> ""
                                                expression (ast_quotation.ml[37,1174+49]..[37,1174+58])
                                                  Pexp_tuple
                                                  [
                                                    expression (ast_quotation.ml[37,1174+50]..[37,1174+54])
                                                      Pexp_ident "path" (ast_quotation.ml[37,1174+50]..[37,1174+54])
                                                    expression (ast_quotation.ml[37,1174+56]..[37,1174+57])
                                                      Pexp_ident "x" (ast_quotation.ml[37,1174+56]..[37,1174+57])
                                                  ]
                                            ]
                                      ]
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[39,1265+28]..[39,1265+32])
                                          Ppat_construct "None" (ast_quotation.ml[39,1265+28]..[39,1265+32])
                                          None
                                        expression (ast_quotation.ml[39,1265+37]..[39,1265+42])
                                          Pexp_construct "false" (ast_quotation.ml[39,1265+37]..[39,1265+42])
                                          None
                                      <case>
                                        pattern (ast_quotation.ml[40,1308+28]..[40,1308+36])
                                          Ppat_construct "Some" (ast_quotation.ml[40,1308+28]..[40,1308+32])
                                          Some
                                            pattern (ast_quotation.ml[40,1308+33]..[40,1308+36])
                                              Ppat_var "set" (ast_quotation.ml[40,1308+33]..[40,1308+36])
                                        expression (ast_quotation.ml[40,1308+40]..[40,1308+61])
                                          Pexp_apply
                                          expression (ast_quotation.ml[40,1308+40]..[40,1308+55])
                                            Pexp_ident "Setf.String.mem" (ast_quotation.ml[40,1308+40]..[40,1308+55])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[40,1308+56]..[40,1308+57])
                                                Pexp_ident "v" (ast_quotation.ml[40,1308+56]..[40,1308+57])
                                            <label> ""
                                              expression (ast_quotation.ml[40,1308+58]..[40,1308+61])
                                                Pexp_ident "set" (ast_quotation.ml[40,1308+58]..[40,1308+61])
                                          ]
                                    ]
                              ]
                          <label> ""
                            expression (ast_quotation.ml[40,1308+65]..[40,1308+71])
                              Pexp_apply
                              expression (ast_quotation.ml[40,1308+65]..[40,1308+66])
                                Pexp_ident "!" (ast_quotation.ml[40,1308+65]..[40,1308+66])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[40,1308+66]..[40,1308+71])
                                    Pexp_ident "paths" (ast_quotation.ml[40,1308+66]..[40,1308+71])
                              ]
                        ]
                      [
                        <case>
                          pattern (ast_quotation.ml[42,1398+14]..[42,1398+18])
                            Ppat_construct "None" (ast_quotation.ml[42,1398+14]..[42,1398+18])
                            None
                          expression (ast_quotation.ml[42,1398+23]..[42,1398+27])
                            Pexp_construct "None" (ast_quotation.ml[42,1398+23]..[42,1398+27])
                            None
                        <case>
                          pattern (ast_quotation.ml[43,1426+14]..[43,1426+20])
                            Ppat_construct "Some" (ast_quotation.ml[43,1426+14]..[43,1426+18])
                            Some
                              pattern (ast_quotation.ml[43,1426+19]..[43,1426+20])
                                Ppat_var "r" (ast_quotation.ml[43,1426+19]..[43,1426+20])
                          expression (ast_quotation.ml[43,1426+24]..[43,1426+71])
                            Pexp_construct "Some" (ast_quotation.ml[43,1426+24]..[43,1426+28])
                            Some
                              expression (ast_quotation.ml[43,1426+29]..[43,1426+71])
                                Pexp_record
                                [
                                  "domain" (ast_quotation.ml[43,1426+38]..[43,1426+44])
                                    expression (ast_quotation.ml[43,1426+48]..[43,1426+68])
                                      Pexp_apply
                                      expression (ast_quotation.ml[43,1426+48]..[43,1426+61])
                                        Pexp_ident "concat_domain" (ast_quotation.ml[43,1426+48]..[43,1426+61])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[43,1426+62]..[43,1426+68])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[43,1426+63]..[43,1426+64])
                                                Pexp_ident "r" (ast_quotation.ml[43,1426+63]..[43,1426+64])
                                              expression (ast_quotation.ml[43,1426+66]..[43,1426+67])
                                                Pexp_ident "x" (ast_quotation.ml[43,1426+66]..[43,1426+67])
                                            ]
                                      ]
                                ]
                                Some
                                  expression (ast_quotation.ml[43,1426+31]..[43,1426+32])
                                    Pexp_ident "n" (ast_quotation.ml[43,1426+31]..[43,1426+32])
                      ]
                  <case>
                    pattern (ast_quotation.ml[44,1499+9]..[44,1499+10])
                      Ppat_var "x" (ast_quotation.ml[44,1499+9]..[44,1499+10])
                    expression (ast_quotation.ml[44,1499+14]..[44,1499+20])
                      Pexp_construct "Some" (ast_quotation.ml[44,1499+14]..[44,1499+18])
                      Some
                        expression (ast_quotation.ml[44,1499+19]..[44,1499+20])
                          Pexp_ident "x" (ast_quotation.ml[44,1499+19]..[44,1499+20])
                ]
          ]
    ]
  structure_item (ast_quotation.ml[45,1521+0]..[45,1521+57])
    Pstr_module
    "ExpKey" (ast_quotation.ml[45,1521+7]..[45,1521+13])
      module_expr (ast_quotation.ml[45,1521+16]..[45,1521+57])
        Pmod_apply
        module_expr (ast_quotation.ml[45,1521+16]..[45,1521+28])
          Pmod_ident "Dyn_tag.Pack" (ast_quotation.ml[45,1521+16]..[45,1521+28])
        module_expr (ast_quotation.ml[45,1521+29]..[45,1521+56])
          Pmod_structure
          [
            structure_item (ast_quotation.ml[45,1521+36]..[45,1521+52])
              Pstr_type
              [
                type_declaration "t" (ast_quotation.ml[45,1521+44]..[45,1521+45]) (ast_quotation.ml[45,1521+41]..[45,1521+52])
                  ptype_params =
                    [
                      core_type (ast_quotation.ml[45,1521+42]..[45,1521+43])
                        Ptyp_var a
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (ast_quotation.ml[45,1521+48]..[45,1521+52])
                        Ptyp_constr "unit" (ast_quotation.ml[45,1521+48]..[45,1521+52])
                        []
              ]
          ]
  structure_item (ast_quotation.ml[46,1579+0]..[46,1579+73])
    Pstr_module
    "ExpFun" (ast_quotation.ml[46,1579+7]..[46,1579+13])
      module_expr (ast_quotation.ml[46,1579+16]..[46,1579+73])
        Pmod_apply
        module_expr (ast_quotation.ml[46,1579+16]..[46,1579+28])
          Pmod_ident "Dyn_tag.Pack" (ast_quotation.ml[46,1579+16]..[46,1579+28])
        module_expr (ast_quotation.ml[46,1579+29]..[46,1579+72])
          Pmod_structure
          [
            structure_item (ast_quotation.ml[46,1579+36]..[46,1579+68])
              Pstr_type
              [
                type_declaration "t" (ast_quotation.ml[46,1579+44]..[46,1579+45]) (ast_quotation.ml[46,1579+41]..[46,1579+68])
                  ptype_params =
                    [
                      core_type (ast_quotation.ml[46,1579+42]..[46,1579+43])
                        Ptyp_var a
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (ast_quotation.ml[46,1579+48]..[46,1579+68])
                        Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[46,1579+51]..[46,1579+68])
                        [
                          core_type (ast_quotation.ml[46,1579+48]..[46,1579+50])
                            Ptyp_var a
                        ]
              ]
          ]
  structure_item (ast_quotation.ml[47,1653+0]..[47,1653+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[47,1653+4]..[47,1653+20])
          Ppat_var "current_loc_name" (ast_quotation.ml[47,1653+4]..[47,1653+20])
        expression (ast_quotation.ml[47,1653+23]..[47,1653+31])
          Pexp_apply
          expression (ast_quotation.ml[47,1653+23]..[47,1653+26])
            Pexp_ident "ref" (ast_quotation.ml[47,1653+23]..[47,1653+26])
          [
            <label> ""
              expression (ast_quotation.ml[47,1653+27]..[47,1653+31])
                Pexp_construct "None" (ast_quotation.ml[47,1653+27]..[47,1653+31])
                None
          ]
    ]
  structure_item (ast_quotation.ml[48,1685+0]..[48,1685+27])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[48,1685+4]..[48,1685+9])
          Ppat_var "stack" (ast_quotation.ml[48,1685+4]..[48,1685+9])
        expression (ast_quotation.ml[48,1685+12]..[48,1685+27])
          Pexp_apply
          expression (ast_quotation.ml[48,1685+12]..[48,1685+24])
            Pexp_ident "Stack.create" (ast_quotation.ml[48,1685+12]..[48,1685+24])
          [
            <label> ""
              expression (ast_quotation.ml[48,1685+25]..[48,1685+27])
                Pexp_construct "()" (ast_quotation.ml[48,1685+25]..[48,1685+27])
                None
          ]
    ]
  structure_item (ast_quotation.ml[49,1713+0]..[53,1780+73])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[49,1713+4]..[49,1713+16])
          Ppat_var "current_quot" (ast_quotation.ml[49,1713+4]..[49,1713+16])
        expression (ast_quotation.ml[50,1732+2]..[53,1780+73])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[51,1743+4]..[51,1743+6])
                Ppat_construct "()" (ast_quotation.ml[51,1743+4]..[51,1743+6])
                None
              expression (ast_quotation.ml[52,1753+7]..[53,1780+72])
                Pexp_try
                expression (ast_quotation.ml[52,1753+11]..[52,1753+26])
                  Pexp_apply
                  expression (ast_quotation.ml[52,1753+11]..[52,1753+20])
                    Pexp_ident "Stack.pop" (ast_quotation.ml[52,1753+11]..[52,1753+20])
                  [
                    <label> ""
                      expression (ast_quotation.ml[52,1753+21]..[52,1753+26])
                        Pexp_ident "stack" (ast_quotation.ml[52,1753+21]..[52,1753+26])
                  ]
                [
                  <case>
                    pattern (ast_quotation.ml[53,1780+14]..[53,1780+25])
                      Ppat_construct "Stack.Empty" (ast_quotation.ml[53,1780+14]..[53,1780+25])
                      None
                    expression (ast_quotation.ml[53,1780+30]..[53,1780+72])
                      Pexp_apply
                      expression (ast_quotation.ml[53,1780+30]..[53,1780+38])
                        Pexp_ident "failwith" (ast_quotation.ml[53,1780+30]..[53,1780+38])
                      [
                        <label> ""
                          expression (ast_quotation.ml[53,1780+39]..[53,1780+72])
                            Pexp_constant Const_string("it's not in a quotation context",None)
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[54,1854+0]..[54,1854+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[54,1854+4]..[54,1854+13])
          Ppat_var "dump_file" (ast_quotation.ml[54,1854+4]..[54,1854+13])
        expression (ast_quotation.ml[54,1854+16]..[54,1854+24])
          Pexp_apply
          expression (ast_quotation.ml[54,1854+16]..[54,1854+19])
            Pexp_ident "ref" (ast_quotation.ml[54,1854+16]..[54,1854+19])
          [
            <label> ""
              expression (ast_quotation.ml[54,1854+20]..[54,1854+24])
                Pexp_construct "None" (ast_quotation.ml[54,1854+20]..[54,1854+24])
                None
          ]
    ]
  structure_item (ast_quotation.ml[55,1879+0]..[55,1879+37])
    Pstr_type
    [
      type_declaration "key" (ast_quotation.ml[55,1879+5]..[55,1879+8]) (ast_quotation.ml[55,1879+5]..[55,1879+37])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (ast_quotation.ml[55,1879+11]..[55,1879+37])
              Ptyp_tuple
              [
                core_type (ast_quotation.ml[55,1879+12]..[55,1879+23])
                  Ptyp_constr "Tokenf.name" (ast_quotation.ml[55,1879+12]..[55,1879+23])
                  []
                core_type (ast_quotation.ml[55,1879+25]..[55,1879+36])
                  Ptyp_constr "ExpKey.pack" (ast_quotation.ml[55,1879+25]..[55,1879+36])
                  []
              ]
    ]
  structure_item (ast_quotation.ml[56,1917+0]..[57,1961+57])
    Pstr_module
    "QMap" (ast_quotation.ml[56,1917+7]..[56,1917+11])
      module_expr (ast_quotation.ml[56,1917+14]..[57,1961+57])
        Pmod_apply
        module_expr (ast_quotation.ml[56,1917+14]..[56,1917+23])
          Pmod_ident "Mapf.Make" (ast_quotation.ml[56,1917+14]..[56,1917+23])
        module_expr (ast_quotation.ml[56,1917+24]..[57,1961+56])
          Pmod_structure
          [
            structure_item (ast_quotation.ml[56,1917+31]..[56,1917+43])
              Pstr_type
              [
                type_declaration "t" (ast_quotation.ml[56,1917+36]..[56,1917+37]) (ast_quotation.ml[56,1917+36]..[56,1917+43])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (ast_quotation.ml[56,1917+40]..[56,1917+43])
                        Ptyp_constr "key" (ast_quotation.ml[56,1917+40]..[56,1917+43])
                        []
              ]
            structure_item (ast_quotation.ml[57,1961+31]..[57,1961+52])
              Pstr_value Nonrec
              [
                <def>
                  pattern (ast_quotation.ml[57,1961+35]..[57,1961+42])
                    Ppat_var "compare" (ast_quotation.ml[57,1961+35]..[57,1961+42])
                  expression (ast_quotation.ml[57,1961+45]..[57,1961+52])
                    Pexp_ident "compare" (ast_quotation.ml[57,1961+45]..[57,1961+52])
              ]
          ]
  structure_item (ast_quotation.ml[58,2019+0]..[58,2019+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[58,2019+4]..[58,2019+7])
          Ppat_var "map" (ast_quotation.ml[58,2019+4]..[58,2019+7])
        expression (ast_quotation.ml[58,2019+10]..[58,2019+31])
          Pexp_apply
          expression (ast_quotation.ml[58,2019+10]..[58,2019+13])
            Pexp_ident "ref" (ast_quotation.ml[58,2019+10]..[58,2019+13])
          [
            <label> ""
              expression (ast_quotation.ml[58,2019+14]..[58,2019+31])
                Pexp_ident "Mapf.String.empty" (ast_quotation.ml[58,2019+14]..[58,2019+31])
          ]
    ]
  structure_item (ast_quotation.ml[59,2051+0]..[61,2075+72])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[59,2051+4]..[59,2051+10])
          Ppat_var "update" (ast_quotation.ml[59,2051+4]..[59,2051+10])
        expression (ast_quotation.ml[60,2064+2]..[61,2075+72])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[61,2075+4]..[61,2075+29])
                Ppat_tuple
                [
                  pattern (ast_quotation.ml[61,2075+5]..[61,2075+8])
                    Ppat_var "pos" (ast_quotation.ml[61,2075+5]..[61,2075+8])
                  pattern (ast_quotation.ml[61,2075+9]..[61,2075+28])
                    Ppat_constraint
                    pattern (ast_quotation.ml[61,2075+10]..[61,2075+13])
                      Ppat_var "str" (ast_quotation.ml[61,2075+10]..[61,2075+13])
                    core_type (ast_quotation.ml[61,2075+16]..[61,2075+27])
                      Ptyp_constr "Tokenf.name" (ast_quotation.ml[61,2075+16]..[61,2075+27])
                      []
                ]
              expression (ast_quotation.ml[61,2075+33]..[61,2075+72])
                Pexp_apply
                expression (ast_quotation.ml[61,2075+37]..[61,2075+39])
                  Pexp_ident ":=" (ast_quotation.ml[61,2075+37]..[61,2075+39])
                [
                  <label> ""
                    expression (ast_quotation.ml[61,2075+33]..[61,2075+36])
                      Pexp_ident "map" (ast_quotation.ml[61,2075+33]..[61,2075+36])
                  <label> ""
                    expression (ast_quotation.ml[61,2075+41]..[61,2075+71])
                      Pexp_apply
                      expression (ast_quotation.ml[61,2075+41]..[61,2075+56])
                        Pexp_ident "Mapf.String.add" (ast_quotation.ml[61,2075+41]..[61,2075+56])
                      [
                        <label> ""
                          expression (ast_quotation.ml[61,2075+57]..[61,2075+60])
                            Pexp_ident "pos" (ast_quotation.ml[61,2075+57]..[61,2075+60])
                        <label> ""
                          expression (ast_quotation.ml[61,2075+61]..[61,2075+64])
                            Pexp_ident "str" (ast_quotation.ml[61,2075+61]..[61,2075+64])
                        <label> ""
                          expression (ast_quotation.ml[61,2075+66]..[61,2075+70])
                            Pexp_apply
                            expression (ast_quotation.ml[61,2075+66]..[61,2075+67])
                              Pexp_ident "!" (ast_quotation.ml[61,2075+66]..[61,2075+67])
                            [
                              <label> ""
                                expression (ast_quotation.ml[61,2075+67]..[61,2075+70])
                                  Pexp_ident "map" (ast_quotation.ml[61,2075+67]..[61,2075+70])
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[62,2148+0]..[62,2148+76])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[62,2148+4]..[62,2148+18])
          Ppat_var "default_at_pos" (ast_quotation.ml[62,2148+4]..[62,2148+18])
        expression (ast_quotation.ml[62,2148+21]..[62,2148+76])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[62,2148+32]..[62,2148+35])
                Ppat_var "pos" (ast_quotation.ml[62,2148+32]..[62,2148+35])
              expression (ast_quotation.ml[62,2148+40]..[62,2148+75])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[62,2148+51]..[62,2148+54])
                      Ppat_var "str" (ast_quotation.ml[62,2148+51]..[62,2148+54])
                    expression (ast_quotation.ml[62,2148+58]..[62,2148+75])
                      Pexp_apply
                      expression (ast_quotation.ml[62,2148+58]..[62,2148+64])
                        Pexp_ident "update" (ast_quotation.ml[62,2148+58]..[62,2148+64])
                      [
                        <label> ""
                          expression (ast_quotation.ml[62,2148+65]..[62,2148+75])
                            Pexp_tuple
                            [
                              expression (ast_quotation.ml[62,2148+66]..[62,2148+69])
                                Pexp_ident "pos" (ast_quotation.ml[62,2148+66]..[62,2148+69])
                              expression (ast_quotation.ml[62,2148+71]..[62,2148+74])
                                Pexp_ident "str" (ast_quotation.ml[62,2148+71]..[62,2148+74])
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[63,2225+0]..[63,2225+46])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[63,2225+4]..[63,2225+11])
          Ppat_var "default" (ast_quotation.ml[63,2225+4]..[63,2225+11])
        expression (ast_quotation.ml[63,2225+11]..[63,2225+46])
          Pexp_constraint
          expression (ast_quotation.ml[63,2225+38]..[63,2225+46])
            Pexp_apply
            expression (ast_quotation.ml[63,2225+38]..[63,2225+41])
              Pexp_ident "ref" (ast_quotation.ml[63,2225+38]..[63,2225+41])
            [
              <label> ""
                expression (ast_quotation.ml[63,2225+42]..[63,2225+46])
                  Pexp_construct "None" (ast_quotation.ml[63,2225+42]..[63,2225+46])
                  None
            ]
          core_type (ast_quotation.ml[63,2225+13]..[63,2225+35])
            Ptyp_constr "ref" (ast_quotation.ml[63,2225+32]..[63,2225+35])
            [
              core_type (ast_quotation.ml[63,2225+13]..[63,2225+31])
                Ptyp_constr "option" (ast_quotation.ml[63,2225+25]..[63,2225+31])
                [
                  core_type (ast_quotation.ml[63,2225+13]..[63,2225+24])
                    Ptyp_constr "Tokenf.name" (ast_quotation.ml[63,2225+13]..[63,2225+24])
                    []
                ]
            ]
    ]
  structure_item (ast_quotation.ml[64,2272+0]..[64,2272+53])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[64,2272+4]..[64,2272+15])
          Ppat_var "set_default" (ast_quotation.ml[64,2272+4]..[64,2272+15])
        expression (ast_quotation.ml[64,2272+18]..[64,2272+53])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[64,2272+29]..[64,2272+30])
                Ppat_var "s" (ast_quotation.ml[64,2272+29]..[64,2272+30])
              expression (ast_quotation.ml[64,2272+34]..[64,2272+53])
                Pexp_apply
                expression (ast_quotation.ml[64,2272+42]..[64,2272+44])
                  Pexp_ident ":=" (ast_quotation.ml[64,2272+42]..[64,2272+44])
                [
                  <label> ""
                    expression (ast_quotation.ml[64,2272+34]..[64,2272+41])
                      Pexp_ident "default" (ast_quotation.ml[64,2272+34]..[64,2272+41])
                  <label> ""
                    expression (ast_quotation.ml[64,2272+46]..[64,2272+52])
                      Pexp_construct "Some" (ast_quotation.ml[64,2272+46]..[64,2272+50])
                      Some
                        expression (ast_quotation.ml[64,2272+51]..[64,2272+52])
                          Pexp_ident "s" (ast_quotation.ml[64,2272+51]..[64,2272+52])
                ]
          ]
    ]
  structure_item (ast_quotation.ml[65,2326+0]..[65,2326+57])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[65,2326+4]..[65,2326+13])
          Ppat_var "clear_map" (ast_quotation.ml[65,2326+4]..[65,2326+13])
        expression (ast_quotation.ml[65,2326+16]..[65,2326+57])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[65,2326+27]..[65,2326+29])
                Ppat_construct "()" (ast_quotation.ml[65,2326+27]..[65,2326+29])
                None
              expression (ast_quotation.ml[65,2326+33]..[65,2326+57])
                Pexp_apply
                expression (ast_quotation.ml[65,2326+37]..[65,2326+39])
                  Pexp_ident ":=" (ast_quotation.ml[65,2326+37]..[65,2326+39])
                [
                  <label> ""
                    expression (ast_quotation.ml[65,2326+33]..[65,2326+36])
                      Pexp_ident "map" (ast_quotation.ml[65,2326+33]..[65,2326+36])
                  <label> ""
                    expression (ast_quotation.ml[65,2326+40]..[65,2326+57])
                      Pexp_ident "Mapf.String.empty" (ast_quotation.ml[65,2326+40]..[65,2326+57])
                ]
          ]
    ]
  structure_item (ast_quotation.ml[66,2384+0]..[66,2384+52])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[66,2384+4]..[66,2384+17])
          Ppat_var "clear_default" (ast_quotation.ml[66,2384+4]..[66,2384+17])
        expression (ast_quotation.ml[66,2384+20]..[66,2384+52])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[66,2384+31]..[66,2384+33])
                Ppat_construct "()" (ast_quotation.ml[66,2384+31]..[66,2384+33])
                None
              expression (ast_quotation.ml[66,2384+37]..[66,2384+52])
                Pexp_apply
                expression (ast_quotation.ml[66,2384+45]..[66,2384+47])
                  Pexp_ident ":=" (ast_quotation.ml[66,2384+45]..[66,2384+47])
                [
                  <label> ""
                    expression (ast_quotation.ml[66,2384+37]..[66,2384+44])
                      Pexp_ident "default" (ast_quotation.ml[66,2384+37]..[66,2384+44])
                  <label> ""
                    expression (ast_quotation.ml[66,2384+48]..[66,2384+52])
                      Pexp_construct "None" (ast_quotation.ml[66,2384+48]..[66,2384+52])
                      None
                ]
          ]
    ]
  structure_item (ast_quotation.ml[67,2437+0]..[75,2714+48])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[67,2437+4]..[67,2437+17])
          Ppat_var "expander_name" (ast_quotation.ml[67,2437+4]..[67,2437+17])
        expression (ast_quotation.ml[67,2437+18]..[75,2714+48])
          Pexp_fun "pos"
          None
          pattern (ast_quotation.ml[67,2437+19]..[67,2437+22])
            Ppat_var "pos" (ast_quotation.ml[67,2437+19]..[67,2437+22])
          expression (ast_quotation.ml[68,2463+2]..[75,2714+48])
            Pexp_function
            [
              <case>
                pattern (ast_quotation.ml[69,2474+4]..[69,2474+24])
                  Ppat_constraint
                  pattern (ast_quotation.ml[69,2474+5]..[69,2474+9])
                    Ppat_var "name" (ast_quotation.ml[69,2474+5]..[69,2474+9])
                  core_type (ast_quotation.ml[69,2474+12]..[69,2474+23])
                    Ptyp_constr "Tokenf.name" (ast_quotation.ml[69,2474+12]..[69,2474+23])
                    []
                expression (ast_quotation.ml[70,2502+7]..[75,2714+47])
                  Pexp_match
                  expression (ast_quotation.ml[70,2502+13]..[70,2502+17])
                    Pexp_ident "name" (ast_quotation.ml[70,2502+13]..[70,2502+17])
                  [
                    <case>
                      pattern (ast_quotation.ml[71,2525+9]..[71,2525+40])
                        Ppat_record Closed
                        [
                          "domain" (ast_quotation.ml[71,2525+11]..[71,2525+17])
                            pattern (ast_quotation.ml[71,2525+20]..[71,2525+27])
                              Ppat_variant "Sub"
                              Some
                                pattern (ast_quotation.ml[71,2525+25]..[71,2525+27])
                                  Ppat_construct "[]" (ast_quotation.ml[71,2525+25]..[71,2525+27])
                                  None
                          "name" (ast_quotation.ml[71,2525+29]..[71,2525+33])
                            pattern (ast_quotation.ml[71,2525+36]..[71,2525+38])
                              Ppat_constant Const_string("",None)
                        ]
                      expression (ast_quotation.ml[72,2569+12]..[73,2620+41])
                        Pexp_try
                        expression (ast_quotation.ml[72,2569+16]..[72,2569+50])
                          Pexp_construct "Some" (ast_quotation.ml[72,2569+16]..[72,2569+20])
                          Some
                            expression (ast_quotation.ml[72,2569+22]..[72,2569+49])
                              Pexp_apply
                              expression (ast_quotation.ml[72,2569+22]..[72,2569+38])
                                Pexp_ident "Mapf.String.find" (ast_quotation.ml[72,2569+22]..[72,2569+38])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[72,2569+39]..[72,2569+42])
                                    Pexp_ident "pos" (ast_quotation.ml[72,2569+39]..[72,2569+42])
                                <label> ""
                                  expression (ast_quotation.ml[72,2569+44]..[72,2569+48])
                                    Pexp_apply
                                    expression (ast_quotation.ml[72,2569+44]..[72,2569+45])
                                      Pexp_ident "!" (ast_quotation.ml[72,2569+44]..[72,2569+45])
                                    [
                                      <label> ""
                                        expression (ast_quotation.ml[72,2569+45]..[72,2569+48])
                                          Pexp_ident "map" (ast_quotation.ml[72,2569+45]..[72,2569+48])
                                    ]
                              ]
                        [
                          <case>
                            pattern (ast_quotation.ml[73,2620+19]..[73,2620+28])
                              Ppat_construct "Not_found" (ast_quotation.ml[73,2620+19]..[73,2620+28])
                              None
                            expression (ast_quotation.ml[73,2620+33]..[73,2620+41])
                              Pexp_apply
                              expression (ast_quotation.ml[73,2620+33]..[73,2620+34])
                                Pexp_ident "!" (ast_quotation.ml[73,2620+33]..[73,2620+34])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[73,2620+34]..[73,2620+41])
                                    Pexp_ident "default" (ast_quotation.ml[73,2620+34]..[73,2620+41])
                              ]
                        ]
                    <case>
                      pattern (ast_quotation.ml[74,2663+9]..[74,2663+29])
                        Ppat_record Open
                        [
                          "domain" (ast_quotation.ml[74,2663+11]..[74,2663+17])
                            pattern (ast_quotation.ml[74,2663+20]..[74,2663+26])
                              Ppat_variant "Sub"
                              Some
                                pattern (ast_quotation.ml[74,2663+25]..[74,2663+26])
                                  Ppat_any
                        ]
                      expression (ast_quotation.ml[74,2663+33]..[74,2663+50])
                        Pexp_apply
                        expression (ast_quotation.ml[74,2663+33]..[74,2663+45])
                          Pexp_ident "resolve_name" (ast_quotation.ml[74,2663+33]..[74,2663+45])
                        [
                          <label> ""
                            expression (ast_quotation.ml[74,2663+46]..[74,2663+50])
                              Pexp_ident "name" (ast_quotation.ml[74,2663+46]..[74,2663+50])
                        ]
                    <case>
                      pattern (ast_quotation.ml[75,2714+9]..[75,2714+34])
                        Ppat_record Open
                        [
                          "domain" (ast_quotation.ml[75,2714+11]..[75,2714+17])
                            pattern (ast_quotation.ml[75,2714+20]..[75,2714+31])
                              Ppat_variant "Absolute"
                              Some
                                pattern (ast_quotation.ml[75,2714+30]..[75,2714+31])
                                  Ppat_any
                        ]
                      expression (ast_quotation.ml[75,2714+38]..[75,2714+47])
                        Pexp_construct "Some" (ast_quotation.ml[75,2714+38]..[75,2714+42])
                        Some
                          expression (ast_quotation.ml[75,2714+43]..[75,2714+47])
                            Pexp_ident "name" (ast_quotation.ml[75,2714+43]..[75,2714+47])
                  ]
            ]
    ]
  structure_item (ast_quotation.ml[76,2763+0]..[76,2763+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[76,2763+4]..[76,2763+19])
          Ppat_var "expanders_table" (ast_quotation.ml[76,2763+4]..[76,2763+19])
        expression (ast_quotation.ml[76,2763+22]..[76,2763+36])
          Pexp_apply
          expression (ast_quotation.ml[76,2763+22]..[76,2763+25])
            Pexp_ident "ref" (ast_quotation.ml[76,2763+22]..[76,2763+25])
          [
            <label> ""
              expression (ast_quotation.ml[76,2763+26]..[76,2763+36])
                Pexp_ident "QMap.empty" (ast_quotation.ml[76,2763+26]..[76,2763+36])
          ]
    ]
  structure_item (ast_quotation.ml[77,2800+0]..[90,3304+72])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[77,2800+4]..[77,2800+7])
          Ppat_var "add" (ast_quotation.ml[77,2800+4]..[77,2800+7])
        expression (ast_quotation.ml[78,2810+2]..[90,3304+72])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[79,2821+4]..[79,2821+50])
                Ppat_constraint
                pattern (ast_quotation.ml[79,2821+5]..[79,2821+35])
                  Ppat_alias "name" (ast_quotation.ml[79,2821+30]..[79,2821+34])
                  pattern (ast_quotation.ml[79,2821+6]..[79,2821+26])
                    Ppat_record Closed
                    [
                      "domain" (ast_quotation.ml[79,2821+8]..[79,2821+14])
                        pattern (ast_quotation.ml[79,2821+8]..[79,2821+14])
                          Ppat_var "domain" (ast_quotation.ml[79,2821+8]..[79,2821+14])
                      "name" (ast_quotation.ml[79,2821+16]..[79,2821+20])
                        pattern (ast_quotation.ml[79,2821+23]..[79,2821+24])
                          Ppat_var "n" (ast_quotation.ml[79,2821+23]..[79,2821+24])
                    ]
                core_type (ast_quotation.ml[79,2821+38]..[79,2821+49])
                  Ptyp_constr "Tokenf.name" (ast_quotation.ml[79,2821+38]..[79,2821+49])
                  []
              expression (ast_quotation.ml[80,2875+7]..[90,3304+71])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[81,2891+9]..[81,2891+29])
                      Ppat_constraint
                      pattern (ast_quotation.ml[81,2891+10]..[81,2891+13])
                        Ppat_var "tag" (ast_quotation.ml[81,2891+10]..[81,2891+13])
                      core_type (ast_quotation.ml[81,2891+16]..[81,2891+28])
                        Ptyp_constr "Dyn_tag.t" (ast_quotation.ml[81,2891+19]..[81,2891+28])
                        [
                          core_type (ast_quotation.ml[81,2891+16]..[81,2891+18])
                            Ptyp_var a
                        ]
                    expression (ast_quotation.ml[82,2924+12]..[90,3304+70])
                      Pexp_function
                      [
                        <case>
                          pattern (ast_quotation.ml[83,2945+14]..[83,2945+40])
                            Ppat_constraint
                            pattern (ast_quotation.ml[83,2945+15]..[83,2945+16])
                              Ppat_var "f" (ast_quotation.ml[83,2945+15]..[83,2945+16])
                            core_type (ast_quotation.ml[83,2945+19]..[83,2945+39])
                              Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[83,2945+22]..[83,2945+39])
                              [
                                core_type (ast_quotation.ml[83,2945+19]..[83,2945+21])
                                  Ptyp_var a
                              ]
                          expression (ast_quotation.ml[84,2989+16]..[90,3304+70])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (ast_quotation.ml[84,2989+20]..[84,2989+25])
                                  Ppat_tuple
                                  [
                                    pattern (ast_quotation.ml[84,2989+21]..[84,2989+22])
                                      Ppat_var "k" (ast_quotation.ml[84,2989+21]..[84,2989+22])
                                    pattern (ast_quotation.ml[84,2989+23]..[84,2989+24])
                                      Ppat_var "v" (ast_quotation.ml[84,2989+23]..[84,2989+24])
                                  ]
                                expression (ast_quotation.ml[85,3017+18]..[85,3017+69])
                                  Pexp_tuple
                                  [
                                    expression (ast_quotation.ml[85,3017+19]..[85,3017+47])
                                      Pexp_tuple
                                      [
                                        expression (ast_quotation.ml[85,3017+20]..[85,3017+24])
                                          Pexp_ident "name" (ast_quotation.ml[85,3017+20]..[85,3017+24])
                                        expression (ast_quotation.ml[85,3017+27]..[85,3017+45])
                                          Pexp_apply
                                          expression (ast_quotation.ml[85,3017+27]..[85,3017+38])
                                            Pexp_ident "ExpKey.pack" (ast_quotation.ml[85,3017+27]..[85,3017+38])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[85,3017+39]..[85,3017+42])
                                                Pexp_ident "tag" (ast_quotation.ml[85,3017+39]..[85,3017+42])
                                            <label> ""
                                              expression (ast_quotation.ml[85,3017+43]..[85,3017+45])
                                                Pexp_construct "()" (ast_quotation.ml[85,3017+43]..[85,3017+45])
                                                None
                                          ]
                                      ]
                                    expression (ast_quotation.ml[85,3017+50]..[85,3017+67])
                                      Pexp_apply
                                      expression (ast_quotation.ml[85,3017+50]..[85,3017+61])
                                        Pexp_ident "ExpFun.pack" (ast_quotation.ml[85,3017+50]..[85,3017+61])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[85,3017+62]..[85,3017+65])
                                            Pexp_ident "tag" (ast_quotation.ml[85,3017+62]..[85,3017+65])
                                        <label> ""
                                          expression (ast_quotation.ml[85,3017+66]..[85,3017+67])
                                            Pexp_ident "f" (ast_quotation.ml[85,3017+66]..[85,3017+67])
                                      ]
                                  ]
                            ]
                            expression (ast_quotation.ml[86,3090+16]..[90,3304+70])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (ast_quotation.ml[86,3090+20]..[86,3090+21])
                                    Ppat_var "s" (ast_quotation.ml[86,3090+20]..[86,3090+21])
                                  expression (ast_quotation.ml[87,3114+18]..[88,3171+56])
                                    Pexp_try
                                    expression (ast_quotation.ml[87,3114+22]..[87,3114+56])
                                      Pexp_apply
                                      expression (ast_quotation.ml[87,3114+22]..[87,3114+34])
                                        Pexp_ident "Hashtbl.find" (ast_quotation.ml[87,3114+22]..[87,3114+34])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[87,3114+35]..[87,3114+44])
                                            Pexp_ident "names_tbl" (ast_quotation.ml[87,3114+35]..[87,3114+44])
                                        <label> ""
                                          expression (ast_quotation.ml[87,3114+45]..[87,3114+56])
                                            Pexp_field
                                            expression (ast_quotation.ml[87,3114+45]..[87,3114+49])
                                              Pexp_ident "name" (ast_quotation.ml[87,3114+45]..[87,3114+49])
                                            "domain" (ast_quotation.ml[87,3114+50]..[87,3114+56])
                                      ]
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[88,3171+25]..[88,3171+34])
                                          Ppat_construct "Not_found" (ast_quotation.ml[88,3171+25]..[88,3171+34])
                                          None
                                        expression (ast_quotation.ml[88,3171+39]..[88,3171+56])
                                          Pexp_ident "Setf.String.empty" (ast_quotation.ml[88,3171+39]..[88,3171+56])
                                    ]
                              ]
                              expression (ast_quotation.ml[89,3231+16]..[90,3304+70])
                                Pexp_sequence
                                expression (ast_quotation.ml[89,3231+17]..[89,3231+71])
                                  Pexp_apply
                                  expression (ast_quotation.ml[89,3231+17]..[89,3231+32])
                                    Pexp_ident "Hashtbl.replace" (ast_quotation.ml[89,3231+17]..[89,3231+32])
                                  [
                                    <label> ""
                                      expression (ast_quotation.ml[89,3231+33]..[89,3231+42])
                                        Pexp_ident "names_tbl" (ast_quotation.ml[89,3231+33]..[89,3231+42])
                                    <label> ""
                                      expression (ast_quotation.ml[89,3231+43]..[89,3231+49])
                                        Pexp_ident "domain" (ast_quotation.ml[89,3231+43]..[89,3231+49])
                                    <label> ""
                                      expression (ast_quotation.ml[89,3231+51]..[89,3231+70])
                                        Pexp_apply
                                        expression (ast_quotation.ml[89,3231+51]..[89,3231+66])
                                          Pexp_ident "Setf.String.add" (ast_quotation.ml[89,3231+51]..[89,3231+66])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[89,3231+67]..[89,3231+68])
                                              Pexp_ident "n" (ast_quotation.ml[89,3231+67]..[89,3231+68])
                                          <label> ""
                                            expression (ast_quotation.ml[89,3231+69]..[89,3231+70])
                                              Pexp_ident "s" (ast_quotation.ml[89,3231+69]..[89,3231+70])
                                        ]
                                  ]
                                expression (ast_quotation.ml[89,3231+16]..[90,3304+70])
                                  Pexp_apply
                                  expression (ast_quotation.ml[90,3304+33]..[90,3304+35])
                                    Pexp_ident ":=" (ast_quotation.ml[90,3304+33]..[90,3304+35])
                                  [
                                    <label> ""
                                      expression (ast_quotation.ml[90,3304+17]..[90,3304+32])
                                        Pexp_ident "expanders_table" (ast_quotation.ml[90,3304+17]..[90,3304+32])
                                    <label> ""
                                      expression (ast_quotation.ml[90,3304+37]..[90,3304+68])
                                        Pexp_apply
                                        expression (ast_quotation.ml[90,3304+37]..[90,3304+45])
                                          Pexp_ident "QMap.add" (ast_quotation.ml[90,3304+37]..[90,3304+45])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[90,3304+46]..[90,3304+47])
                                              Pexp_ident "k" (ast_quotation.ml[90,3304+46]..[90,3304+47])
                                          <label> ""
                                            expression (ast_quotation.ml[90,3304+48]..[90,3304+49])
                                              Pexp_ident "v" (ast_quotation.ml[90,3304+48]..[90,3304+49])
                                          <label> ""
                                            expression (ast_quotation.ml[90,3304+51]..[90,3304+67])
                                              Pexp_apply
                                              expression (ast_quotation.ml[90,3304+51]..[90,3304+52])
                                                Pexp_ident "!" (ast_quotation.ml[90,3304+51]..[90,3304+52])
                                              [
                                                <label> ""
                                                  expression (ast_quotation.ml[90,3304+52]..[90,3304+67])
                                                    Pexp_ident "expanders_table" (ast_quotation.ml[90,3304+52]..[90,3304+67])
                                              ]
                                        ]
                                  ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[91,3377+0]..[113,4242+54])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[91,3377+4]..[91,3377+10])
          Ppat_var "expand" (ast_quotation.ml[91,3377+4]..[91,3377+10])
        expression (ast_quotation.ml[92,3390+2]..[113,4242+54])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[93,3401+4]..[93,3401+21])
                Ppat_constraint
                pattern (ast_quotation.ml[93,3401+5]..[93,3401+6])
                  Ppat_var "x" (ast_quotation.ml[93,3401+5]..[93,3401+6])
                core_type (ast_quotation.ml[93,3401+9]..[93,3401+20])
                  Ptyp_constr "Tokenf.quot" (ast_quotation.ml[93,3401+9]..[93,3401+20])
                  []
              expression (ast_quotation.ml[94,3426+7]..[113,4242+53])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[95,3442+9]..[95,3442+29])
                      Ppat_constraint
                      pattern (ast_quotation.ml[95,3442+10]..[95,3442+13])
                        Ppat_var "tag" (ast_quotation.ml[95,3442+10]..[95,3442+13])
                      core_type (ast_quotation.ml[95,3442+16]..[95,3442+28])
                        Ptyp_constr "Dyn_tag.t" (ast_quotation.ml[95,3442+19]..[95,3442+28])
                        [
                          core_type (ast_quotation.ml[95,3442+16]..[95,3442+18])
                            Ptyp_var a
                        ]
                    expression (ast_quotation.ml[96,3475+11]..[113,4242+53])
                      Pexp_constraint
                      expression (ast_quotation.ml[96,3475+12]..[113,4242+47])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (ast_quotation.ml[96,3475+16]..[96,3475+23])
                              Ppat_var "pos_tag" (ast_quotation.ml[96,3475+16]..[96,3475+23])
                            expression (ast_quotation.ml[96,3475+26]..[96,3475+47])
                              Pexp_apply
                              expression (ast_quotation.ml[96,3475+26]..[96,3475+43])
                                Pexp_ident "Dyn_tag.to_string" (ast_quotation.ml[96,3475+26]..[96,3475+43])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[96,3475+44]..[96,3475+47])
                                    Pexp_ident "tag" (ast_quotation.ml[96,3475+44]..[96,3475+47])
                              ]
                        ]
                        expression (ast_quotation.ml[97,3526+12]..[113,4242+47])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (ast_quotation.ml[97,3526+16]..[97,3526+20])
                                Ppat_var "name" (ast_quotation.ml[97,3526+16]..[97,3526+20])
                              expression (ast_quotation.ml[97,3526+23]..[97,3526+29])
                                Pexp_field
                                expression (ast_quotation.ml[97,3526+23]..[97,3526+24])
                                  Pexp_ident "x" (ast_quotation.ml[97,3526+23]..[97,3526+24])
                                "name" (ast_quotation.ml[97,3526+25]..[97,3526+29])
                          ]
                          expression (ast_quotation.ml[98,3559+13]..[113,4242+46])
                            Pexp_match
                            expression (ast_quotation.ml[98,3559+19]..[98,3559+50])
                              Pexp_apply
                              expression (ast_quotation.ml[98,3559+19]..[98,3559+32])
                                Pexp_ident "expander_name" (ast_quotation.ml[98,3559+19]..[98,3559+32])
                              [
                                <label> "pos"
                                  expression (ast_quotation.ml[98,3559+38]..[98,3559+45])
                                    Pexp_ident "pos_tag" (ast_quotation.ml[98,3559+38]..[98,3559+45])
                                <label> ""
                                  expression (ast_quotation.ml[98,3559+46]..[98,3559+50])
                                    Pexp_ident "name" (ast_quotation.ml[98,3559+46]..[98,3559+50])
                              ]
                            [
                              <case>
                                pattern (ast_quotation.ml[99,3615+15]..[99,3615+19])
                                  Ppat_construct "None" (ast_quotation.ml[99,3615+15]..[99,3615+19])
                                  None
                                expression (ast_quotation.ml[100,3639+17]..[101,3700+47])
                                  Pexp_apply
                                  expression (ast_quotation.ml[100,3639+58]..[100,3639+60])
                                    Pexp_ident "@@" (ast_quotation.ml[100,3639+58]..[100,3639+60])
                                  [
                                    <label> ""
                                      expression (ast_quotation.ml[100,3639+18]..[100,3639+56])
                                        Pexp_apply
                                        expression (ast_quotation.ml[100,3639+18]..[100,3639+28])
                                          Pexp_ident "Locf.failf" (ast_quotation.ml[100,3639+18]..[100,3639+28])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[100,3639+29]..[100,3639+34])
                                              Pexp_field
                                              expression (ast_quotation.ml[100,3639+29]..[100,3639+30])
                                                Pexp_ident "x" (ast_quotation.ml[100,3639+29]..[100,3639+30])
                                              "loc" (ast_quotation.ml[100,3639+31]..[100,3639+34])
                                          <label> ""
                                            expression (ast_quotation.ml[100,3639+35]..[100,3639+56])
                                              Pexp_constant Const_string("DDSL `%s' not found",None)
                                        ]
                                    <label> ""
                                      expression (ast_quotation.ml[101,3700+20]..[101,3700+46])
                                        Pexp_apply
                                        expression (ast_quotation.ml[101,3700+20]..[101,3700+41])
                                          Pexp_ident "Tokenf.string_of_name" (ast_quotation.ml[101,3700+20]..[101,3700+41])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[101,3700+42]..[101,3700+46])
                                              Pexp_ident "name" (ast_quotation.ml[101,3700+42]..[101,3700+46])
                                        ]
                                  ]
                              <case>
                                pattern (ast_quotation.ml[102,3748+15]..[102,3748+33])
                                  Ppat_construct "Some" (ast_quotation.ml[102,3748+15]..[102,3748+19])
                                  Some
                                    pattern (ast_quotation.ml[102,3748+20]..[102,3748+33])
                                      Ppat_var "absolute_name" (ast_quotation.ml[102,3748+20]..[102,3748+33])
                                expression (ast_quotation.ml[103,3785+17]..[113,4242+46])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (ast_quotation.ml[103,3785+21]..[103,3785+25])
                                        Ppat_var "pack" (ast_quotation.ml[103,3785+21]..[103,3785+25])
                                      expression (ast_quotation.ml[104,3813+19]..[111,4119+61])
                                        Pexp_try
                                        expression (ast_quotation.ml[105,3836+21]..[106,3905+41])
                                          Pexp_apply
                                          expression (ast_quotation.ml[105,3836+21]..[105,3836+30])
                                            Pexp_ident "QMap.find" (ast_quotation.ml[105,3836+21]..[105,3836+30])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[105,3836+31]..[105,3836+68])
                                                Pexp_tuple
                                                [
                                                  expression (ast_quotation.ml[105,3836+32]..[105,3836+45])
                                                    Pexp_ident "absolute_name" (ast_quotation.ml[105,3836+32]..[105,3836+45])
                                                  expression (ast_quotation.ml[105,3836+48]..[105,3836+66])
                                                    Pexp_apply
                                                    expression (ast_quotation.ml[105,3836+48]..[105,3836+59])
                                                      Pexp_ident "ExpKey.pack" (ast_quotation.ml[105,3836+48]..[105,3836+59])
                                                    [
                                                      <label> ""
                                                        expression (ast_quotation.ml[105,3836+60]..[105,3836+63])
                                                          Pexp_ident "tag" (ast_quotation.ml[105,3836+60]..[105,3836+63])
                                                      <label> ""
                                                        expression (ast_quotation.ml[105,3836+64]..[105,3836+66])
                                                          Pexp_construct "()" (ast_quotation.ml[105,3836+64]..[105,3836+66])
                                                          None
                                                    ]
                                                ]
                                            <label> ""
                                              expression (ast_quotation.ml[106,3905+24]..[106,3905+40])
                                                Pexp_apply
                                                expression (ast_quotation.ml[106,3905+24]..[106,3905+25])
                                                  Pexp_ident "!" (ast_quotation.ml[106,3905+24]..[106,3905+25])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[106,3905+25]..[106,3905+40])
                                                      Pexp_ident "expanders_table" (ast_quotation.ml[106,3905+25]..[106,3905+40])
                                                ]
                                          ]
                                        [
                                          <case>
                                            pattern (ast_quotation.ml[108,3971+21]..[108,3971+30])
                                              Ppat_construct "Not_found" (ast_quotation.ml[108,3971+21]..[108,3971+30])
                                              None
                                            expression (ast_quotation.ml[109,4006+23]..[111,4119+61])
                                              Pexp_apply
                                              expression (ast_quotation.ml[109,4006+23]..[109,4006+33])
                                                Pexp_ident "Locf.failf" (ast_quotation.ml[109,4006+23]..[109,4006+33])
                                              [
                                                <label> ""
                                                  expression (ast_quotation.ml[109,4006+34]..[109,4006+39])
                                                    Pexp_field
                                                    expression (ast_quotation.ml[109,4006+34]..[109,4006+35])
                                                      Pexp_ident "x" (ast_quotation.ml[109,4006+34]..[109,4006+35])
                                                    "loc" (ast_quotation.ml[109,4006+36]..[109,4006+39])
                                                <label> ""
                                                  expression (ast_quotation.ml[110,4046+25]..[110,4046+72])
                                                    Pexp_constant Const_string("DDSL expander `%s' at position `%s' not found",None)
                                                <label> ""
                                                  expression (ast_quotation.ml[111,4119+26]..[111,4119+52])
                                                    Pexp_apply
                                                    expression (ast_quotation.ml[111,4119+26]..[111,4119+47])
                                                      Pexp_ident "Tokenf.string_of_name" (ast_quotation.ml[111,4119+26]..[111,4119+47])
                                                    [
                                                      <label> ""
                                                        expression (ast_quotation.ml[111,4119+48]..[111,4119+52])
                                                          Pexp_ident "name" (ast_quotation.ml[111,4119+48]..[111,4119+52])
                                                    ]
                                                <label> ""
                                                  expression (ast_quotation.ml[111,4119+54]..[111,4119+61])
                                                    Pexp_ident "pos_tag" (ast_quotation.ml[111,4119+54]..[111,4119+61])
                                              ]
                                        ]
                                  ]
                                  expression (ast_quotation.ml[112,4184+17]..[113,4242+46])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (ast_quotation.ml[112,4184+21]..[112,4184+29])
                                          Ppat_var "expander" (ast_quotation.ml[112,4184+21]..[112,4184+29])
                                        expression (ast_quotation.ml[112,4184+32]..[112,4184+54])
                                          Pexp_apply
                                          expression (ast_quotation.ml[112,4184+32]..[112,4184+45])
                                            Pexp_ident "ExpFun.unpack" (ast_quotation.ml[112,4184+32]..[112,4184+45])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[112,4184+46]..[112,4184+49])
                                                Pexp_ident "tag" (ast_quotation.ml[112,4184+46]..[112,4184+49])
                                            <label> ""
                                              expression (ast_quotation.ml[112,4184+50]..[112,4184+54])
                                                Pexp_ident "pack" (ast_quotation.ml[112,4184+50]..[112,4184+54])
                                          ]
                                    ]
                                    expression (ast_quotation.ml[113,4242+17]..[113,4242+46])
                                      Pexp_apply
                                      expression (ast_quotation.ml[113,4242+17]..[113,4242+35])
                                        Pexp_ident "Tokenf.quot_expand" (ast_quotation.ml[113,4242+17]..[113,4242+35])
                                      [
                                        <label> ""
                                          expression (ast_quotation.ml[113,4242+36]..[113,4242+44])
                                            Pexp_ident "expander" (ast_quotation.ml[113,4242+36]..[113,4242+44])
                                        <label> ""
                                          expression (ast_quotation.ml[113,4242+45]..[113,4242+46])
                                            Pexp_ident "x" (ast_quotation.ml[113,4242+45]..[113,4242+46])
                                      ]
                            ]
                      core_type (ast_quotation.ml[113,4242+50]..[113,4242+52])
                        Ptyp_var a
                ]
          ]
    ]
  structure_item (ast_quotation.ml[114,4297+0]..[202,8809+47])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[114,4297+4]..[114,4297+17])
          Ppat_var "add_quotation" (ast_quotation.ml[114,4297+4]..[114,4297+17])
        expression (ast_quotation.ml[114,4297+18]..[202,8809+47])
          Pexp_fun "?lexer"
          Some
            expression (ast_quotation.ml[114,4297+27]..[114,4297+46])
              Pexp_ident "Lex_fan.from_stream" (ast_quotation.ml[114,4297+27]..[114,4297+46])
          pattern (ast_quotation.ml[114,4297+20]..[114,4297+25])
            Ppat_var "lexer" (ast_quotation.ml[114,4297+20]..[114,4297+25])
          expression (ast_quotation.ml[114,4297+49]..[202,8809+47])
            Pexp_fun "exp_filter"
            None
            pattern (ast_quotation.ml[114,4297+50]..[114,4297+60])
              Ppat_var "exp_filter" (ast_quotation.ml[114,4297+50]..[114,4297+60])
            expression (ast_quotation.ml[114,4297+62]..[202,8809+47])
              Pexp_fun "pat_filter"
              None
              pattern (ast_quotation.ml[114,4297+63]..[114,4297+73])
                Ppat_var "pat_filter" (ast_quotation.ml[114,4297+63]..[114,4297+73])
              expression (ast_quotation.ml[115,4372+2]..[202,8809+47])
                Pexp_fun "mexp"
                None
                pattern (ast_quotation.ml[115,4372+3]..[115,4372+7])
                  Ppat_var "mexp" (ast_quotation.ml[115,4372+3]..[115,4372+7])
                expression (ast_quotation.ml[115,4372+9]..[202,8809+47])
                  Pexp_fun "mpat"
                  None
                  pattern (ast_quotation.ml[115,4372+10]..[115,4372+14])
                    Ppat_var "mpat" (ast_quotation.ml[115,4372+10]..[115,4372+14])
                  expression (ast_quotation.ml[116,4390+2]..[202,8809+47])
                    Pexp_function
                    [
                      <case>
                        pattern (ast_quotation.ml[117,4401+4]..[117,4401+8])
                          Ppat_var "name" (ast_quotation.ml[117,4401+4]..[117,4401+8])
                        expression (ast_quotation.ml[118,4413+7]..[202,8809+46])
                          Pexp_function
                          [
                            <case>
                              pattern (ast_quotation.ml[119,4429+9]..[119,4429+14])
                                Ppat_var "entry" (ast_quotation.ml[119,4429+9]..[119,4429+14])
                              expression (ast_quotation.ml[120,4447+11]..[202,8809+46])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (ast_quotation.ml[120,4447+15]..[120,4447+25])
                                      Ppat_var "expand_exp" (ast_quotation.ml[120,4447+15]..[120,4447+25])
                                    expression (ast_quotation.ml[121,4475+13]..[134,5025+52])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (ast_quotation.ml[122,4497+15]..[122,4497+18])
                                            Ppat_var "loc" (ast_quotation.ml[122,4497+15]..[122,4497+18])
                                          expression (ast_quotation.ml[123,4519+18]..[134,5025+51])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (ast_quotation.ml[124,4546+20]..[124,4546+32])
                                                  Ppat_var "loc_name_opt" (ast_quotation.ml[124,4546+20]..[124,4546+32])
                                                expression (ast_quotation.ml[125,4582+23]..[134,5025+50])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (ast_quotation.ml[126,4614+25]..[126,4614+26])
                                                        Ppat_var "s" (ast_quotation.ml[126,4614+25]..[126,4614+26])
                                                      expression (ast_quotation.ml[127,4644+27]..[134,5025+50])
                                                        Pexp_apply
                                                        expression (ast_quotation.ml[127,4644+27]..[127,4644+39])
                                                          Pexp_ident "Ref.protect2" (ast_quotation.ml[127,4644+27]..[127,4644+39])
                                                        [
                                                          <label> ""
                                                            expression (ast_quotation.ml[127,4644+40]..[127,4644+70])
                                                              Pexp_tuple
                                                              [
                                                                expression (ast_quotation.ml[127,4644+41]..[127,4644+63])
                                                                  Pexp_ident "Configf.antiquotations" (ast_quotation.ml[127,4644+41]..[127,4644+63])
                                                                expression (ast_quotation.ml[127,4644+65]..[127,4644+69])
                                                                  Pexp_construct "true" (ast_quotation.ml[127,4644+65]..[127,4644+69])
                                                                  None
                                                              ]
                                                          <label> ""
                                                            expression (ast_quotation.ml[128,4715+29]..[128,4715+61])
                                                              Pexp_tuple
                                                              [
                                                                expression (ast_quotation.ml[128,4715+30]..[128,4715+46])
                                                                  Pexp_ident "current_loc_name" (ast_quotation.ml[128,4715+30]..[128,4715+46])
                                                                expression (ast_quotation.ml[128,4715+48]..[128,4715+60])
                                                                  Pexp_ident "loc_name_opt" (ast_quotation.ml[128,4715+48]..[128,4715+60])
                                                              ]
                                                          <label> ""
                                                            expression (ast_quotation.ml[129,4777+30]..[134,5025+49])
                                                              Pexp_function
                                                              [
                                                                <case>
                                                                  pattern (ast_quotation.ml[130,4816+32]..[130,4816+33])
                                                                    Ppat_any
                                                                  expression (ast_quotation.ml[131,4853+34]..[134,5025+49])
                                                                    Pexp_apply
                                                                    expression (ast_quotation.ml[134,5025+36]..[134,5025+38])
                                                                      Pexp_ident "|>" (ast_quotation.ml[134,5025+36]..[134,5025+38])
                                                                    [
                                                                      <label> ""
expression (ast_quotation.ml[131,4853+35]..[133,4973+50])
  Pexp_apply
  expression (ast_quotation.ml[133,4973+37]..[133,4973+39])
    Pexp_ident "|>" (ast_quotation.ml[133,4973+37]..[133,4973+39])
  [
    <label> ""
      expression (ast_quotation.ml[131,4853+36]..[132,4927+44])
        Pexp_apply
        expression (ast_quotation.ml[131,4853+36]..[131,4853+60])
          Pexp_ident "Gramlib.parse_string_eoi" (ast_quotation.ml[131,4853+36]..[131,4853+60])
        [
          <label> "lexer"
            expression (ast_quotation.ml[131,4853+62]..[131,4853+67])
              Pexp_ident "lexer" (ast_quotation.ml[131,4853+62]..[131,4853+67])
          <label> ""
            expression (ast_quotation.ml[131,4853+68]..[131,4853+73])
              Pexp_ident "entry" (ast_quotation.ml[131,4853+68]..[131,4853+73])
          <label> "loc"
            expression (ast_quotation.ml[132,4927+39]..[132,4927+42])
              Pexp_ident "loc" (ast_quotation.ml[132,4927+39]..[132,4927+42])
          <label> ""
            expression (ast_quotation.ml[132,4927+43]..[132,4927+44])
              Pexp_ident "s" (ast_quotation.ml[132,4927+43]..[132,4927+44])
        ]
    <label> ""
      expression (ast_quotation.ml[133,4973+41]..[133,4973+49])
        Pexp_apply
        expression (ast_quotation.ml[133,4973+41]..[133,4973+45])
          Pexp_ident "mexp" (ast_quotation.ml[133,4973+41]..[133,4973+45])
        [
          <label> ""
            expression (ast_quotation.ml[133,4973+46]..[133,4973+49])
              Pexp_ident "loc" (ast_quotation.ml[133,4973+46]..[133,4973+49])
        ]
  ]
                                                                      <label> ""
expression (ast_quotation.ml[134,5025+39]..[134,5025+49])
  Pexp_ident "exp_filter" (ast_quotation.ml[134,5025+39]..[134,5025+49])
                                                                    ]
                                                              ]
                                                        ]
                                                  ]
                                            ]
                                      ]
                                ]
                                expression (ast_quotation.ml[135,5081+11]..[202,8809+46])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (ast_quotation.ml[135,5081+15]..[135,5081+26])
                                        Ppat_var "expand_stru" (ast_quotation.ml[135,5081+15]..[135,5081+26])
                                      expression (ast_quotation.ml[136,5110+13]..[143,5353+50])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (ast_quotation.ml[137,5132+15]..[137,5132+18])
                                              Ppat_var "loc" (ast_quotation.ml[137,5132+15]..[137,5132+18])
                                            expression (ast_quotation.ml[138,5154+18]..[143,5353+49])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (ast_quotation.ml[139,5181+20]..[139,5181+32])
                                                    Ppat_var "loc_name_opt" (ast_quotation.ml[139,5181+20]..[139,5181+32])
                                                  expression (ast_quotation.ml[140,5217+23]..[143,5353+48])
                                                    Pexp_function
                                                    [
                                                      <case>
                                                        pattern (ast_quotation.ml[141,5249+25]..[141,5249+26])
                                                          Ppat_var "s" (ast_quotation.ml[141,5249+25]..[141,5249+26])
                                                        expression (ast_quotation.ml[142,5279+27]..[143,5353+48])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (ast_quotation.ml[142,5279+31]..[142,5279+38])
                                                                Ppat_var "exp_ast" (ast_quotation.ml[142,5279+31]..[142,5279+38])
                                                              expression (ast_quotation.ml[142,5279+41]..[142,5279+70])
                                                                Pexp_apply
                                                                expression (ast_quotation.ml[142,5279+41]..[142,5279+51])
                                                                  Pexp_ident "expand_exp" (ast_quotation.ml[142,5279+41]..[142,5279+51])
                                                                [
                                                                  <label> ""
                                                                    expression (ast_quotation.ml[142,5279+52]..[142,5279+55])
                                                                      Pexp_ident "loc" (ast_quotation.ml[142,5279+52]..[142,5279+55])
                                                                  <label> ""
                                                                    expression (ast_quotation.ml[142,5279+56]..[142,5279+68])
                                                                      Pexp_ident "loc_name_opt" (ast_quotation.ml[142,5279+56]..[142,5279+68])
                                                                  <label> ""
                                                                    expression (ast_quotation.ml[142,5279+69]..[142,5279+70])
                                                                      Pexp_ident "s" (ast_quotation.ml[142,5279+69]..[142,5279+70])
                                                                ]
                                                          ]
                                                          expression (ast_quotation.ml[143,5353+27]..[143,5353+48])
                                                            Pexp_variant "StExp"
                                                            Some
                                                              expression (ast_quotation.ml[143,5353+34]..[143,5353+48])
                                                                Pexp_tuple
                                                                [
                                                                  expression (ast_quotation.ml[143,5353+35]..[143,5353+38])
                                                                    Pexp_ident "loc" (ast_quotation.ml[143,5353+35]..[143,5353+38])
                                                                  expression (ast_quotation.ml[143,5353+40]..[143,5353+47])
                                                                    Pexp_ident "exp_ast" (ast_quotation.ml[143,5353+40]..[143,5353+47])
                                                                ]
                                                    ]
                                              ]
                                        ]
                                  ]
                                  expression (ast_quotation.ml[144,5407+11]..[202,8809+46])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (ast_quotation.ml[144,5407+15]..[144,5407+25])
                                          Ppat_var "expand_pat" (ast_quotation.ml[144,5407+15]..[144,5407+25])
                                        expression (ast_quotation.ml[145,5435+13]..[199,8644+71])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[146,5457+15]..[146,5457+19])
                                                Ppat_var "_loc" (ast_quotation.ml[146,5457+15]..[146,5457+19])
                                              expression (ast_quotation.ml[147,5480+18]..[199,8644+70])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (ast_quotation.ml[148,5507+20]..[148,5507+32])
                                                      Ppat_var "loc_name_opt" (ast_quotation.ml[148,5507+20]..[148,5507+32])
                                                    expression (ast_quotation.ml[149,5543+23]..[199,8644+69])
                                                      Pexp_function
                                                      [
                                                        <case>
                                                          pattern (ast_quotation.ml[150,5575+25]..[150,5575+26])
                                                            Ppat_var "s" (ast_quotation.ml[150,5575+25]..[150,5575+26])
                                                          expression (ast_quotation.ml[151,5605+27]..[199,8644+69])
                                                            Pexp_apply
                                                            expression (ast_quotation.ml[151,5605+27]..[151,5605+38])
                                                              Pexp_ident "Ref.protect" (ast_quotation.ml[151,5605+27]..[151,5605+38])
                                                            [
                                                              <label> ""
                                                                expression (ast_quotation.ml[151,5605+39]..[151,5605+61])
                                                                  Pexp_ident "Configf.antiquotations" (ast_quotation.ml[151,5605+39]..[151,5605+61])
                                                              <label> ""
                                                                expression (ast_quotation.ml[151,5605+62]..[151,5605+66])
                                                                  Pexp_construct "true" (ast_quotation.ml[151,5605+62]..[151,5605+66])
                                                                  None
                                                              <label> ""
                                                                expression (ast_quotation.ml[152,5672+30]..[199,8644+68])
                                                                  Pexp_function
                                                                  [
                                                                    <case>
                                                                      pattern (ast_quotation.ml[153,5711+32]..[153,5711+33])
Ppat_any
                                                                      expression (ast_quotation.ml[154,5748+34]..[199,8644+68])
Pexp_let Nonrec
[
  <def>
    pattern (ast_quotation.ml[154,5748+38]..[154,5748+41])
      Ppat_var "ast" (ast_quotation.ml[154,5748+38]..[154,5748+41])
    expression (ast_quotation.ml[155,5792+36]..[156,5866+49])
      Pexp_apply
      expression (ast_quotation.ml[155,5792+36]..[155,5792+60])
        Pexp_ident "Gramlib.parse_string_eoi" (ast_quotation.ml[155,5792+36]..[155,5792+60])
      [
        <label> "lexer"
          expression (ast_quotation.ml[155,5792+62]..[155,5792+67])
            Pexp_ident "lexer" (ast_quotation.ml[155,5792+62]..[155,5792+67])
        <label> ""
          expression (ast_quotation.ml[155,5792+68]..[155,5792+73])
            Pexp_ident "entry" (ast_quotation.ml[155,5792+68]..[155,5792+73])
        <label> "loc"
          expression (ast_quotation.ml[156,5866+43]..[156,5866+47])
            Pexp_ident "_loc" (ast_quotation.ml[156,5866+43]..[156,5866+47])
        <label> ""
          expression (ast_quotation.ml[156,5866+48]..[156,5866+49])
            Pexp_ident "s" (ast_quotation.ml[156,5866+48]..[156,5866+49])
      ]
]
expression (ast_quotation.ml[157,5919+34]..[199,8644+68])
  Pexp_let Nonrec
  [
    <def>
      pattern (ast_quotation.ml[157,5919+38]..[157,5919+46])
        Ppat_var "meta_ast" (ast_quotation.ml[157,5919+38]..[157,5919+46])
      expression (ast_quotation.ml[157,5919+49]..[157,5919+62])
        Pexp_apply
        expression (ast_quotation.ml[157,5919+49]..[157,5919+53])
          Pexp_ident "mpat" (ast_quotation.ml[157,5919+49]..[157,5919+53])
        [
          <label> ""
            expression (ast_quotation.ml[157,5919+54]..[157,5919+58])
              Pexp_ident "_loc" (ast_quotation.ml[157,5919+54]..[157,5919+58])
          <label> ""
            expression (ast_quotation.ml[157,5919+59]..[157,5919+62])
              Pexp_ident "ast" (ast_quotation.ml[157,5919+59]..[157,5919+62])
        ]
  ]
  expression (ast_quotation.ml[158,5985+34]..[199,8644+68])
    Pexp_let Nonrec
    [
      <def>
        pattern (ast_quotation.ml[158,5985+38]..[158,5985+45])
          Ppat_var "exp_ast" (ast_quotation.ml[158,5985+38]..[158,5985+45])
        expression (ast_quotation.ml[158,5985+48]..[158,5985+67])
          Pexp_apply
          expression (ast_quotation.ml[158,5985+48]..[158,5985+58])
            Pexp_ident "pat_filter" (ast_quotation.ml[158,5985+48]..[158,5985+58])
          [
            <label> ""
              expression (ast_quotation.ml[158,5985+59]..[158,5985+67])
                Pexp_ident "meta_ast" (ast_quotation.ml[158,5985+59]..[158,5985+67])
          ]
    ]
    expression (ast_quotation.ml[159,6056+34]..[199,8644+68])
      Pexp_let Rec
      [
        <def>
          pattern (ast_quotation.ml[159,6056+42]..[159,6056+57])
            Ppat_var "subst_first_loc" (ast_quotation.ml[159,6056+42]..[159,6056+57])
          expression (ast_quotation.ml[160,6116+36]..[193,8283+69])
            Pexp_function
            [
              <case>
                pattern (ast_quotation.ml[161,6161+38]..[161,6161+42])
                  Ppat_var "name" (ast_quotation.ml[161,6161+38]..[161,6161+42])
                expression (ast_quotation.ml[162,6207+41]..[193,8283+68])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[163,6257+43]..[163,6257+57])
                        Ppat_constraint
                        pattern (ast_quotation.ml[163,6257+44]..[163,6257+45])
                          Ppat_var "x" (ast_quotation.ml[163,6257+44]..[163,6257+45])
                        core_type (ast_quotation.ml[163,6257+48]..[163,6257+56])
                          Ptyp_constr "Astf.pat" (ast_quotation.ml[163,6257+48]..[163,6257+56])
                          []
                      expression (ast_quotation.ml[164,6318+45]..[193,8283+68])
                        Pexp_constraint
                        expression (ast_quotation.ml[164,6318+47]..[193,8283+55])
                          Pexp_match
                          expression (ast_quotation.ml[164,6318+53]..[164,6318+54])
                            Pexp_ident "x" (ast_quotation.ml[164,6318+53]..[164,6318+54])
                          [
                            <case>
                              pattern (ast_quotation.ml[165,6378+49]..[170,6721+82])
                                Ppat_variant "App"
                                Some
                                  pattern (ast_quotation.ml[165,6378+49]..[170,6721+82])
                                    Ppat_tuple
                                    [
                                      pattern (ast_quotation.ml[166,6432+52]..[166,6432+55])
                                        Ppat_var "loc" (ast_quotation.ml[166,6432+52]..[166,6432+55])
                                      pattern (ast_quotation.ml[166,6432+56]..[166,6432+66])
                                        Ppat_variant "Vrn"
                                        Some
                                          pattern (ast_quotation.ml[166,6432+56]..[166,6432+66])
                                            Ppat_tuple
                                            [
                                              pattern (ast_quotation.ml[166,6432+62]..[166,6432+63])
                                                Ppat_any
                                              pattern (ast_quotation.ml[166,6432+64]..[166,6432+65])
                                                Ppat_var "u" (ast_quotation.ml[166,6432+64]..[166,6432+65])
                                            ]
                                      pattern (ast_quotation.ml[166,6432+67]..[170,6721+81])
                                        Ppat_variant "Par"
                                        Some
                                          pattern (ast_quotation.ml[166,6432+67]..[170,6721+81])
                                            Ppat_tuple
                                            [
                                              pattern (ast_quotation.ml[167,6504+69]..[167,6504+70])
                                                Ppat_any
                                              pattern (ast_quotation.ml[168,6576+68]..[170,6721+80])
                                                Ppat_variant "Com"
                                                Some
                                                  pattern (ast_quotation.ml[168,6576+68]..[170,6721+80])
                                                    Ppat_tuple
                                                    [
                                                      pattern (ast_quotation.ml[169,6649+69]..[169,6649+70])
                                                        Ppat_any
                                                      pattern (ast_quotation.ml[170,6721+68]..[170,6721+74])
                                                        Ppat_variant "Any"
                                                        Some
                                                          pattern (ast_quotation.ml[170,6721+73]..[170,6721+74])
                                                            Ppat_any
                                                      pattern (ast_quotation.ml[170,6721+75]..[170,6721+79])
                                                        Ppat_var "rest" (ast_quotation.ml[170,6721+75]..[170,6721+79])
                                                    ]
                                            ]
                                    ]
                              expression (ast_quotation.ml[172,6858+51]..[181,7472+74])
                                Pexp_variant "App"
                                Some
                                  expression (ast_quotation.ml[173,6914+53]..[181,7472+74])
                                    Pexp_tuple
                                    [
                                      expression (ast_quotation.ml[173,6914+54]..[173,6914+57])
                                        Pexp_ident "loc" (ast_quotation.ml[173,6914+54]..[173,6914+57])
                                      expression (ast_quotation.ml[173,6914+60]..[173,6914+73])
                                        Pexp_variant "Vrn"
                                        Some
                                          expression (ast_quotation.ml[173,6914+65]..[173,6914+73])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[173,6914+66]..[173,6914+69])
                                                Pexp_ident "loc" (ast_quotation.ml[173,6914+66]..[173,6914+69])
                                              expression (ast_quotation.ml[173,6914+71]..[173,6914+72])
                                                Pexp_ident "u" (ast_quotation.ml[173,6914+71]..[173,6914+72])
                                            ]
                                      expression (ast_quotation.ml[174,6990+56]..[181,7472+72])
                                        Pexp_variant "Par"
                                        Some
                                          expression (ast_quotation.ml[175,7051+58]..[181,7472+72])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[175,7051+59]..[175,7051+62])
                                                Pexp_ident "loc" (ast_quotation.ml[175,7051+59]..[175,7051+62])
                                              expression (ast_quotation.ml[176,7115+61]..[181,7472+70])
                                                Pexp_variant "Com"
                                                Some
                                                  expression (ast_quotation.ml[177,7181+63]..[181,7472+70])
                                                    Pexp_tuple
                                                    [
                                                      expression (ast_quotation.ml[177,7181+64]..[177,7181+67])
                                                        Pexp_ident "loc" (ast_quotation.ml[177,7181+64]..[177,7181+67])
                                                      expression (ast_quotation.ml[178,7250+66]..[180,7396+73])
                                                        Pexp_variant "Lid"
                                                        Some
                                                          expression (ast_quotation.ml[179,7321+68]..[180,7396+73])
                                                            Pexp_tuple
                                                            [
                                                              expression (ast_quotation.ml[179,7321+69]..[179,7321+73])
                                                                Pexp_ident "_loc" (ast_quotation.ml[179,7321+69]..[179,7321+73])
                                                              expression (ast_quotation.ml[180,7396+68]..[180,7396+72])
                                                                Pexp_ident "name" (ast_quotation.ml[180,7396+68]..[180,7396+72])
                                                            ]
                                                      expression (ast_quotation.ml[181,7472+65]..[181,7472+69])
                                                        Pexp_ident "rest" (ast_quotation.ml[181,7472+65]..[181,7472+69])
                                                    ]
                                            ]
                                    ]
                            <case>
                              pattern (ast_quotation.ml[182,7547+49]..[183,7601+75])
                                Ppat_variant "App"
                                Some
                                  pattern (ast_quotation.ml[182,7547+49]..[183,7601+75])
                                    Ppat_tuple
                                    [
                                      pattern (ast_quotation.ml[183,7601+52]..[183,7601+56])
                                        Ppat_var "_loc" (ast_quotation.ml[183,7601+52]..[183,7601+56])
                                      pattern (ast_quotation.ml[183,7601+57]..[183,7601+67])
                                        Ppat_variant "Vrn"
                                        Some
                                          pattern (ast_quotation.ml[183,7601+57]..[183,7601+67])
                                            Ppat_tuple
                                            [
                                              pattern (ast_quotation.ml[183,7601+63]..[183,7601+64])
                                                Ppat_any
                                              pattern (ast_quotation.ml[183,7601+65]..[183,7601+66])
                                                Ppat_var "u" (ast_quotation.ml[183,7601+65]..[183,7601+66])
                                            ]
                                      pattern (ast_quotation.ml[183,7601+68]..[183,7601+74])
                                        Ppat_variant "Any"
                                        Some
                                          pattern (ast_quotation.ml[183,7601+73]..[183,7601+74])
                                            Ppat_any
                                    ]
                              expression (ast_quotation.ml[185,7731+51]..[187,7865+75])
                                Pexp_variant "App"
                                Some
                                  expression (ast_quotation.ml[186,7787+53]..[187,7865+75])
                                    Pexp_tuple
                                    [
                                      expression (ast_quotation.ml[186,7787+54]..[186,7787+58])
                                        Pexp_ident "_loc" (ast_quotation.ml[186,7787+54]..[186,7787+58])
                                      expression (ast_quotation.ml[186,7787+61]..[186,7787+75])
                                        Pexp_variant "Vrn"
                                        Some
                                          expression (ast_quotation.ml[186,7787+66]..[186,7787+75])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[186,7787+67]..[186,7787+71])
                                                Pexp_ident "_loc" (ast_quotation.ml[186,7787+67]..[186,7787+71])
                                              expression (ast_quotation.ml[186,7787+73]..[186,7787+74])
                                                Pexp_ident "u" (ast_quotation.ml[186,7787+73]..[186,7787+74])
                                            ]
                                      expression (ast_quotation.ml[187,7865+56]..[187,7865+73])
                                        Pexp_variant "Lid"
                                        Some
                                          expression (ast_quotation.ml[187,7865+61]..[187,7865+73])
                                            Pexp_tuple
                                            [
                                              expression (ast_quotation.ml[187,7865+62]..[187,7865+66])
                                                Pexp_ident "_loc" (ast_quotation.ml[187,7865+62]..[187,7865+66])
                                              expression (ast_quotation.ml[187,7865+68]..[187,7865+72])
                                                Pexp_ident "name" (ast_quotation.ml[187,7865+68]..[187,7865+72])
                                            ]
                                    ]
                            <case>
                              pattern (ast_quotation.ml[188,7941+49]..[188,7941+72])
                                Ppat_variant "Constraint"
                                Some
                                  pattern (ast_quotation.ml[188,7941+49]..[188,7941+72])
                                    Ppat_tuple
                                    [
                                      pattern (ast_quotation.ml[188,7941+62]..[188,7941+66])
                                        Ppat_var "_loc" (ast_quotation.ml[188,7941+62]..[188,7941+66])
                                      pattern (ast_quotation.ml[188,7941+67]..[188,7941+68])
                                        Ppat_var "a" (ast_quotation.ml[188,7941+67]..[188,7941+68])
                                      pattern (ast_quotation.ml[188,7941+69]..[188,7941+71])
                                        Ppat_var "ty" (ast_quotation.ml[188,7941+69]..[188,7941+71])
                                    ]
                              expression (ast_quotation.ml[189,8017+51]..[192,8217+65])
                                Pexp_variant "Constraint"
                                Some
                                  expression (ast_quotation.ml[190,8080+53]..[192,8217+65])
                                    Pexp_tuple
                                    [
                                      expression (ast_quotation.ml[190,8080+54]..[190,8080+58])
                                        Pexp_ident "_loc" (ast_quotation.ml[190,8080+54]..[190,8080+58])
                                      expression (ast_quotation.ml[191,8140+56]..[192,8217+59])
                                        Pexp_apply
                                        expression (ast_quotation.ml[191,8140+56]..[191,8140+71])
                                          Pexp_ident "subst_first_loc" (ast_quotation.ml[191,8140+56]..[191,8140+71])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[191,8140+72]..[191,8140+76])
                                              Pexp_ident "name" (ast_quotation.ml[191,8140+72]..[191,8140+76])
                                          <label> ""
                                            expression (ast_quotation.ml[192,8217+58]..[192,8217+59])
                                              Pexp_ident "a" (ast_quotation.ml[192,8217+58]..[192,8217+59])
                                        ]
                                      expression (ast_quotation.ml[192,8217+62]..[192,8217+64])
                                        Pexp_ident "ty" (ast_quotation.ml[192,8217+62]..[192,8217+64])
                                    ]
                            <case>
                              pattern (ast_quotation.ml[193,8283+49]..[193,8283+50])
                                Ppat_var "p" (ast_quotation.ml[193,8283+49]..[193,8283+50])
                              expression (ast_quotation.ml[193,8283+54]..[193,8283+55])
                                Pexp_ident "p" (ast_quotation.ml[193,8283+54]..[193,8283+55])
                          ]
                        core_type (ast_quotation.ml[193,8283+59]..[193,8283+67])
                          Ptyp_constr "Astf.pat" (ast_quotation.ml[193,8283+59]..[193,8283+67])
                          []
                  ]
            ]
      ]
      expression (ast_quotation.ml[194,8356+35]..[199,8644+67])
        Pexp_match
        expression (ast_quotation.ml[194,8356+41]..[194,8356+53])
          Pexp_ident "loc_name_opt" (ast_quotation.ml[194,8356+41]..[194,8356+53])
        [
          <case>
            pattern (ast_quotation.ml[195,8415+37]..[195,8415+41])
              Ppat_construct "None" (ast_quotation.ml[195,8415+37]..[195,8415+41])
              None
            expression (ast_quotation.ml[196,8461+39]..[196,8461+75])
              Pexp_apply
              expression (ast_quotation.ml[196,8461+39]..[196,8461+54])
                Pexp_ident "subst_first_loc" (ast_quotation.ml[196,8461+39]..[196,8461+54])
              [
                <label> ""
                  expression (ast_quotation.ml[196,8461+56]..[196,8461+66])
                    Pexp_apply
                    expression (ast_quotation.ml[196,8461+56]..[196,8461+57])
                      Pexp_ident "!" (ast_quotation.ml[196,8461+56]..[196,8461+57])
                    [
                      <label> ""
                        expression (ast_quotation.ml[196,8461+57]..[196,8461+66])
                          Pexp_ident "Locf.name" (ast_quotation.ml[196,8461+57]..[196,8461+66])
                    ]
                <label> ""
                  expression (ast_quotation.ml[196,8461+68]..[196,8461+75])
                    Pexp_ident "exp_ast" (ast_quotation.ml[196,8461+68]..[196,8461+75])
              ]
          <case>
            pattern (ast_quotation.ml[197,8537+37]..[197,8537+45])
              Ppat_construct "Some" (ast_quotation.ml[197,8537+37]..[197,8537+41])
              Some
                pattern (ast_quotation.ml[197,8537+42]..[197,8537+45])
                  Ppat_constant Const_string("_",None)
            expression (ast_quotation.ml[197,8537+49]..[197,8537+56])
              Pexp_ident "exp_ast" (ast_quotation.ml[197,8537+49]..[197,8537+56])
          <case>
            pattern (ast_quotation.ml[198,8594+37]..[198,8594+46])
              Ppat_construct "Some" (ast_quotation.ml[198,8594+37]..[198,8594+41])
              Some
                pattern (ast_quotation.ml[198,8594+42]..[198,8594+46])
                  Ppat_var "name" (ast_quotation.ml[198,8594+42]..[198,8594+46])
            expression (ast_quotation.ml[199,8644+39]..[199,8644+67])
              Pexp_apply
              expression (ast_quotation.ml[199,8644+39]..[199,8644+54])
                Pexp_ident "subst_first_loc" (ast_quotation.ml[199,8644+39]..[199,8644+54])
              [
                <label> ""
                  expression (ast_quotation.ml[199,8644+55]..[199,8644+59])
                    Pexp_ident "name" (ast_quotation.ml[199,8644+55]..[199,8644+59])
                <label> ""
                  expression (ast_quotation.ml[199,8644+60]..[199,8644+67])
                    Pexp_ident "exp_ast" (ast_quotation.ml[199,8644+60]..[199,8644+67])
              ]
        ]
                                                                  ]
                                                            ]
                                                      ]
                                                ]
                                          ]
                                    ]
                                    expression (ast_quotation.ml[200,8719+11]..[202,8809+46])
                                      Pexp_sequence
                                      expression (ast_quotation.ml[200,8719+12]..[200,8719+43])
                                        Pexp_apply
                                        expression (ast_quotation.ml[200,8719+12]..[200,8719+15])
                                          Pexp_ident "add" (ast_quotation.ml[200,8719+12]..[200,8719+15])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[200,8719+16]..[200,8719+20])
                                              Pexp_ident "name" (ast_quotation.ml[200,8719+16]..[200,8719+20])
                                          <label> ""
                                            expression (ast_quotation.ml[200,8719+21]..[200,8719+32])
                                              Pexp_ident "Dyn_tag.exp" (ast_quotation.ml[200,8719+21]..[200,8719+32])
                                          <label> ""
                                            expression (ast_quotation.ml[200,8719+33]..[200,8719+43])
                                              Pexp_ident "expand_exp" (ast_quotation.ml[200,8719+33]..[200,8719+43])
                                        ]
                                      expression (ast_quotation.ml[200,8719+11]..[202,8809+46])
                                        Pexp_sequence
                                        expression (ast_quotation.ml[201,8764+12]..[201,8764+43])
                                          Pexp_apply
                                          expression (ast_quotation.ml[201,8764+12]..[201,8764+15])
                                            Pexp_ident "add" (ast_quotation.ml[201,8764+12]..[201,8764+15])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[201,8764+16]..[201,8764+20])
                                                Pexp_ident "name" (ast_quotation.ml[201,8764+16]..[201,8764+20])
                                            <label> ""
                                              expression (ast_quotation.ml[201,8764+21]..[201,8764+32])
                                                Pexp_ident "Dyn_tag.pat" (ast_quotation.ml[201,8764+21]..[201,8764+32])
                                            <label> ""
                                              expression (ast_quotation.ml[201,8764+33]..[201,8764+43])
                                                Pexp_ident "expand_pat" (ast_quotation.ml[201,8764+33]..[201,8764+43])
                                          ]
                                        expression (ast_quotation.ml[200,8719+11]..[202,8809+46])
                                          Pexp_apply
                                          expression (ast_quotation.ml[202,8809+12]..[202,8809+15])
                                            Pexp_ident "add" (ast_quotation.ml[202,8809+12]..[202,8809+15])
                                          [
                                            <label> ""
                                              expression (ast_quotation.ml[202,8809+16]..[202,8809+20])
                                                Pexp_ident "name" (ast_quotation.ml[202,8809+16]..[202,8809+20])
                                            <label> ""
                                              expression (ast_quotation.ml[202,8809+21]..[202,8809+33])
                                                Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[202,8809+21]..[202,8809+33])
                                            <label> ""
                                              expression (ast_quotation.ml[202,8809+34]..[202,8809+45])
                                                Pexp_ident "expand_stru" (ast_quotation.ml[202,8809+34]..[202,8809+45])
                                          ]
                          ]
                    ]
    ]
  structure_item (ast_quotation.ml[203,8857+0]..[215,9217+79])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[203,8857+4]..[203,8857+15])
          Ppat_var "make_parser" (ast_quotation.ml[203,8857+4]..[203,8857+15])
        expression (ast_quotation.ml[203,8857+16]..[215,9217+79])
          Pexp_fun "?lexer"
          Some
            expression (ast_quotation.ml[203,8857+25]..[203,8857+44])
              Pexp_ident "Lex_fan.from_stream" (ast_quotation.ml[203,8857+25]..[203,8857+44])
          pattern (ast_quotation.ml[203,8857+18]..[203,8857+23])
            Ppat_var "lexer" (ast_quotation.ml[203,8857+18]..[203,8857+23])
          expression (ast_quotation.ml[204,8906+2]..[215,9217+79])
            Pexp_function
            [
              <case>
                pattern (ast_quotation.ml[205,8917+4]..[205,8917+9])
                  Ppat_var "entry" (ast_quotation.ml[205,8917+4]..[205,8917+9])
                expression (ast_quotation.ml[206,8930+7]..[215,9217+78])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[207,8946+9]..[207,8946+12])
                        Ppat_var "loc" (ast_quotation.ml[207,8946+9]..[207,8946+12])
                      expression (ast_quotation.ml[208,8962+12]..[215,9217+77])
                        Pexp_function
                        [
                          <case>
                            pattern (ast_quotation.ml[209,8983+14]..[209,8983+26])
                              Ppat_var "loc_name_opt" (ast_quotation.ml[209,8983+14]..[209,8983+26])
                            expression (ast_quotation.ml[210,9013+17]..[215,9217+76])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[211,9039+19]..[211,9039+20])
                                    Ppat_var "s" (ast_quotation.ml[211,9039+19]..[211,9039+20])
                                  expression (ast_quotation.ml[212,9063+21]..[215,9217+76])
                                    Pexp_apply
                                    expression (ast_quotation.ml[212,9063+21]..[212,9063+33])
                                      Pexp_ident "Ref.protect2" (ast_quotation.ml[212,9063+21]..[212,9063+33])
                                    [
                                      <label> ""
                                        expression (ast_quotation.ml[212,9063+34]..[212,9063+64])
                                          Pexp_tuple
                                          [
                                            expression (ast_quotation.ml[212,9063+35]..[212,9063+57])
                                              Pexp_ident "Configf.antiquotations" (ast_quotation.ml[212,9063+35]..[212,9063+57])
                                            expression (ast_quotation.ml[212,9063+59]..[212,9063+63])
                                              Pexp_construct "true" (ast_quotation.ml[212,9063+59]..[212,9063+63])
                                              None
                                          ]
                                      <label> ""
                                        expression (ast_quotation.ml[213,9128+23]..[213,9128+55])
                                          Pexp_tuple
                                          [
                                            expression (ast_quotation.ml[213,9128+24]..[213,9128+40])
                                              Pexp_ident "current_loc_name" (ast_quotation.ml[213,9128+24]..[213,9128+40])
                                            expression (ast_quotation.ml[213,9128+42]..[213,9128+54])
                                              Pexp_ident "loc_name_opt" (ast_quotation.ml[213,9128+42]..[213,9128+54])
                                          ]
                                      <label> ""
                                        expression (ast_quotation.ml[214,9184+24]..[215,9217+75])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[215,9217+26]..[215,9217+27])
                                                Ppat_any
                                              expression (ast_quotation.ml[215,9217+31]..[215,9217+75])
                                                Pexp_apply
                                                expression (ast_quotation.ml[215,9217+31]..[215,9217+55])
                                                  Pexp_ident "Gramlib.parse_string_eoi" (ast_quotation.ml[215,9217+31]..[215,9217+55])
                                                [
                                                  <label> "lexer"
                                                    expression (ast_quotation.ml[215,9217+57]..[215,9217+62])
                                                      Pexp_ident "lexer" (ast_quotation.ml[215,9217+57]..[215,9217+62])
                                                  <label> ""
                                                    expression (ast_quotation.ml[215,9217+63]..[215,9217+68])
                                                      Pexp_ident "entry" (ast_quotation.ml[215,9217+63]..[215,9217+68])
                                                  <label> "loc"
                                                    expression (ast_quotation.ml[215,9217+70]..[215,9217+73])
                                                      Pexp_ident "loc" (ast_quotation.ml[215,9217+70]..[215,9217+73])
                                                  <label> ""
                                                    expression (ast_quotation.ml[215,9217+74]..[215,9217+75])
                                                      Pexp_ident "s" (ast_quotation.ml[215,9217+74]..[215,9217+75])
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
            ]
    ]
  structure_item (ast_quotation.ml[216,9297+0]..[217,9334+67])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[216,9297+4]..[216,9297+11])
          Ppat_var "of_stru" (ast_quotation.ml[216,9297+4]..[216,9297+11])
        expression (ast_quotation.ml[216,9297+12]..[217,9334+67])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[216,9297+13]..[216,9297+18])
            Ppat_var "lexer" (ast_quotation.ml[216,9297+13]..[216,9297+18])
          expression (ast_quotation.ml[216,9297+20]..[217,9334+67])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[216,9297+21]..[216,9297+25])
              Ppat_var "name" (ast_quotation.ml[216,9297+21]..[216,9297+25])
            expression (ast_quotation.ml[216,9297+27]..[217,9334+67])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[216,9297+28]..[216,9297+33])
                Ppat_var "entry" (ast_quotation.ml[216,9297+28]..[216,9297+33])
              expression (ast_quotation.ml[217,9334+2]..[217,9334+67])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[217,9334+13]..[217,9334+15])
                      Ppat_construct "()" (ast_quotation.ml[217,9334+13]..[217,9334+15])
                      None
                    expression (ast_quotation.ml[217,9334+19]..[217,9334+67])
                      Pexp_apply
                      expression (ast_quotation.ml[217,9334+19]..[217,9334+22])
                        Pexp_ident "add" (ast_quotation.ml[217,9334+19]..[217,9334+22])
                      [
                        <label> ""
                          expression (ast_quotation.ml[217,9334+23]..[217,9334+27])
                            Pexp_ident "name" (ast_quotation.ml[217,9334+23]..[217,9334+27])
                        <label> ""
                          expression (ast_quotation.ml[217,9334+28]..[217,9334+40])
                            Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[217,9334+28]..[217,9334+40])
                        <label> ""
                          expression (ast_quotation.ml[217,9334+42]..[217,9334+66])
                            Pexp_apply
                            expression (ast_quotation.ml[217,9334+42]..[217,9334+53])
                              Pexp_ident "make_parser" (ast_quotation.ml[217,9334+42]..[217,9334+53])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[217,9334+54]..[217,9334+60])
                                  Pexp_ident "lexer" (ast_quotation.ml[217,9334+54]..[217,9334+60])
                              <label> ""
                                expression (ast_quotation.ml[217,9334+61]..[217,9334+66])
                                  Pexp_ident "entry" (ast_quotation.ml[217,9334+61]..[217,9334+66])
                            ]
                      ]
                ]
    ]
  structure_item (ast_quotation.ml[218,9402+0]..[228,9654+78])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[218,9402+4]..[218,9402+23])
          Ppat_var "of_stru_with_filter" (ast_quotation.ml[218,9402+4]..[218,9402+23])
        expression (ast_quotation.ml[218,9402+24]..[228,9654+78])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[218,9402+25]..[218,9402+30])
            Ppat_var "lexer" (ast_quotation.ml[218,9402+25]..[218,9402+30])
          expression (ast_quotation.ml[218,9402+32]..[228,9654+78])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[218,9402+33]..[218,9402+37])
              Ppat_var "name" (ast_quotation.ml[218,9402+33]..[218,9402+37])
            expression (ast_quotation.ml[218,9402+39]..[228,9654+78])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[218,9402+40]..[218,9402+45])
                Ppat_var "entry" (ast_quotation.ml[218,9402+40]..[218,9402+45])
              expression (ast_quotation.ml[218,9402+47]..[228,9654+78])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[218,9402+48]..[218,9402+54])
                  Ppat_var "filter" (ast_quotation.ml[218,9402+48]..[218,9402+54])
                expression (ast_quotation.ml[219,9460+2]..[228,9654+78])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[220,9471+4]..[220,9471+6])
                        Ppat_construct "()" (ast_quotation.ml[220,9471+4]..[220,9471+6])
                        None
                      expression (ast_quotation.ml[221,9481+6]..[228,9654+78])
                        Pexp_apply
                        expression (ast_quotation.ml[221,9481+6]..[221,9481+9])
                          Pexp_ident "add" (ast_quotation.ml[221,9481+6]..[221,9481+9])
                        [
                          <label> ""
                            expression (ast_quotation.ml[221,9481+10]..[221,9481+14])
                              Pexp_ident "name" (ast_quotation.ml[221,9481+10]..[221,9481+14])
                          <label> ""
                            expression (ast_quotation.ml[221,9481+15]..[221,9481+27])
                              Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[221,9481+15]..[221,9481+27])
                          <label> ""
                            expression (ast_quotation.ml[222,9509+9]..[228,9654+77])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[223,9527+11]..[223,9527+14])
                                    Ppat_var "loc" (ast_quotation.ml[223,9527+11]..[223,9527+14])
                                  expression (ast_quotation.ml[224,9545+14]..[228,9654+76])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[225,9568+16]..[225,9568+28])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[225,9568+16]..[225,9568+28])
                                        expression (ast_quotation.ml[226,9600+19]..[228,9654+75])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[227,9628+21]..[227,9628+22])
                                                Ppat_var "s" (ast_quotation.ml[227,9628+21]..[227,9628+22])
                                              expression (ast_quotation.ml[228,9654+23]..[228,9654+75])
                                                Pexp_apply
                                                expression (ast_quotation.ml[228,9654+23]..[228,9654+29])
                                                  Pexp_ident "filter" (ast_quotation.ml[228,9654+23]..[228,9654+29])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[228,9654+31]..[228,9654+74])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[228,9654+31]..[228,9654+42])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[228,9654+31]..[228,9654+42])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[228,9654+43]..[228,9654+49])
                                                            Pexp_ident "lexer" (ast_quotation.ml[228,9654+43]..[228,9654+49])
                                                        <label> ""
                                                          expression (ast_quotation.ml[228,9654+50]..[228,9654+55])
                                                            Pexp_ident "entry" (ast_quotation.ml[228,9654+50]..[228,9654+55])
                                                        <label> ""
                                                          expression (ast_quotation.ml[228,9654+56]..[228,9654+59])
                                                            Pexp_ident "loc" (ast_quotation.ml[228,9654+56]..[228,9654+59])
                                                        <label> ""
                                                          expression (ast_quotation.ml[228,9654+60]..[228,9654+72])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[228,9654+60]..[228,9654+72])
                                                        <label> ""
                                                          expression (ast_quotation.ml[228,9654+73]..[228,9654+74])
                                                            Pexp_ident "s" (ast_quotation.ml[228,9654+73]..[228,9654+74])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (ast_quotation.ml[229,9733+0]..[230,9769+66])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[229,9733+4]..[229,9733+10])
          Ppat_var "of_pat" (ast_quotation.ml[229,9733+4]..[229,9733+10])
        expression (ast_quotation.ml[229,9733+11]..[230,9769+66])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[229,9733+12]..[229,9733+17])
            Ppat_var "lexer" (ast_quotation.ml[229,9733+12]..[229,9733+17])
          expression (ast_quotation.ml[229,9733+19]..[230,9769+66])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[229,9733+20]..[229,9733+24])
              Ppat_var "name" (ast_quotation.ml[229,9733+20]..[229,9733+24])
            expression (ast_quotation.ml[229,9733+26]..[230,9769+66])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[229,9733+27]..[229,9733+32])
                Ppat_var "entry" (ast_quotation.ml[229,9733+27]..[229,9733+32])
              expression (ast_quotation.ml[230,9769+2]..[230,9769+66])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[230,9769+13]..[230,9769+15])
                      Ppat_construct "()" (ast_quotation.ml[230,9769+13]..[230,9769+15])
                      None
                    expression (ast_quotation.ml[230,9769+19]..[230,9769+66])
                      Pexp_apply
                      expression (ast_quotation.ml[230,9769+19]..[230,9769+22])
                        Pexp_ident "add" (ast_quotation.ml[230,9769+19]..[230,9769+22])
                      [
                        <label> ""
                          expression (ast_quotation.ml[230,9769+23]..[230,9769+27])
                            Pexp_ident "name" (ast_quotation.ml[230,9769+23]..[230,9769+27])
                        <label> ""
                          expression (ast_quotation.ml[230,9769+28]..[230,9769+39])
                            Pexp_ident "Dyn_tag.pat" (ast_quotation.ml[230,9769+28]..[230,9769+39])
                        <label> ""
                          expression (ast_quotation.ml[230,9769+41]..[230,9769+65])
                            Pexp_apply
                            expression (ast_quotation.ml[230,9769+41]..[230,9769+52])
                              Pexp_ident "make_parser" (ast_quotation.ml[230,9769+41]..[230,9769+52])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[230,9769+53]..[230,9769+59])
                                  Pexp_ident "lexer" (ast_quotation.ml[230,9769+53]..[230,9769+59])
                              <label> ""
                                expression (ast_quotation.ml[230,9769+60]..[230,9769+65])
                                  Pexp_ident "entry" (ast_quotation.ml[230,9769+60]..[230,9769+65])
                            ]
                      ]
                ]
    ]
  structure_item (ast_quotation.ml[231,9836+0]..[244,10212+69])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[231,9836+4]..[231,9836+10])
          Ppat_var "of_exp" (ast_quotation.ml[231,9836+4]..[231,9836+10])
        expression (ast_quotation.ml[231,9836+11]..[244,10212+69])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[231,9836+12]..[231,9836+17])
            Ppat_var "lexer" (ast_quotation.ml[231,9836+12]..[231,9836+17])
          expression (ast_quotation.ml[231,9836+19]..[244,10212+69])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[231,9836+20]..[231,9836+24])
              Ppat_var "name" (ast_quotation.ml[231,9836+20]..[231,9836+24])
            expression (ast_quotation.ml[231,9836+26]..[244,10212+69])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[231,9836+27]..[231,9836+32])
                Ppat_var "entry" (ast_quotation.ml[231,9836+27]..[231,9836+32])
              expression (ast_quotation.ml[232,9872+2]..[244,10212+69])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[233,9883+4]..[233,9883+6])
                      Ppat_construct "()" (ast_quotation.ml[233,9883+4]..[233,9883+6])
                      None
                    expression (ast_quotation.ml[234,9893+6]..[244,10212+69])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (ast_quotation.ml[234,9893+10]..[234,9893+20])
                            Ppat_var "expand_fun" (ast_quotation.ml[234,9893+10]..[234,9893+20])
                          expression (ast_quotation.ml[234,9893+23]..[234,9893+47])
                            Pexp_apply
                            expression (ast_quotation.ml[234,9893+23]..[234,9893+34])
                              Pexp_ident "make_parser" (ast_quotation.ml[234,9893+23]..[234,9893+34])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[234,9893+35]..[234,9893+41])
                                  Pexp_ident "lexer" (ast_quotation.ml[234,9893+35]..[234,9893+41])
                              <label> ""
                                expression (ast_quotation.ml[234,9893+42]..[234,9893+47])
                                  Pexp_ident "entry" (ast_quotation.ml[234,9893+42]..[234,9893+47])
                            ]
                      ]
                      expression (ast_quotation.ml[235,9944+6]..[244,10212+69])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (ast_quotation.ml[235,9944+10]..[235,9944+16])
                              Ppat_var "mk_fun" (ast_quotation.ml[235,9944+10]..[235,9944+16])
                            expression (ast_quotation.ml[236,9963+8]..[243,10174+34])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[237,9980+10]..[237,9980+13])
                                    Ppat_var "loc" (ast_quotation.ml[237,9980+10]..[237,9980+13])
                                  expression (ast_quotation.ml[238,9997+13]..[243,10174+33])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[239,10019+15]..[239,10019+27])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[239,10019+15]..[239,10019+27])
                                        expression (ast_quotation.ml[240,10050+18]..[243,10174+32])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[241,10077+20]..[241,10077+21])
                                                Ppat_var "s" (ast_quotation.ml[241,10077+20]..[241,10077+21])
                                              expression (ast_quotation.ml[242,10102+22]..[243,10174+32])
                                                Pexp_constraint
                                                expression (ast_quotation.ml[242,10102+23]..[242,10102+68])
                                                  Pexp_variant "StExp"
                                                  Some
                                                    expression (ast_quotation.ml[242,10102+30]..[242,10102+68])
                                                      Pexp_tuple
                                                      [
                                                        expression (ast_quotation.ml[242,10102+31]..[242,10102+34])
                                                          Pexp_ident "loc" (ast_quotation.ml[242,10102+31]..[242,10102+34])
                                                        expression (ast_quotation.ml[242,10102+37]..[242,10102+66])
                                                          Pexp_apply
                                                          expression (ast_quotation.ml[242,10102+37]..[242,10102+47])
                                                            Pexp_ident "expand_fun" (ast_quotation.ml[242,10102+37]..[242,10102+47])
                                                          [
                                                            <label> ""
                                                              expression (ast_quotation.ml[242,10102+48]..[242,10102+51])
                                                                Pexp_ident "loc" (ast_quotation.ml[242,10102+48]..[242,10102+51])
                                                            <label> ""
                                                              expression (ast_quotation.ml[242,10102+52]..[242,10102+64])
                                                                Pexp_ident "loc_name_opt" (ast_quotation.ml[242,10102+52]..[242,10102+64])
                                                            <label> ""
                                                              expression (ast_quotation.ml[242,10102+65]..[242,10102+66])
                                                                Pexp_ident "s" (ast_quotation.ml[242,10102+65]..[242,10102+66])
                                                          ]
                                                      ]
                                                core_type (ast_quotation.ml[243,10174+22]..[243,10174+31])
                                                  Ptyp_constr "Astf.stru" (ast_quotation.ml[243,10174+22]..[243,10174+31])
                                                  []
                                          ]
                                    ]
                              ]
                        ]
                        expression (ast_quotation.ml[244,10212+6]..[244,10212+69])
                          Pexp_sequence
                          expression (ast_quotation.ml[244,10212+7]..[244,10212+38])
                            Pexp_apply
                            expression (ast_quotation.ml[244,10212+7]..[244,10212+10])
                              Pexp_ident "add" (ast_quotation.ml[244,10212+7]..[244,10212+10])
                            [
                              <label> ""
                                expression (ast_quotation.ml[244,10212+11]..[244,10212+15])
                                  Pexp_ident "name" (ast_quotation.ml[244,10212+11]..[244,10212+15])
                              <label> ""
                                expression (ast_quotation.ml[244,10212+16]..[244,10212+27])
                                  Pexp_ident "Dyn_tag.exp" (ast_quotation.ml[244,10212+16]..[244,10212+27])
                              <label> ""
                                expression (ast_quotation.ml[244,10212+28]..[244,10212+38])
                                  Pexp_ident "expand_fun" (ast_quotation.ml[244,10212+28]..[244,10212+38])
                            ]
                          expression (ast_quotation.ml[244,10212+6]..[244,10212+69])
                            Pexp_apply
                            expression (ast_quotation.ml[244,10212+40]..[244,10212+43])
                              Pexp_ident "add" (ast_quotation.ml[244,10212+40]..[244,10212+43])
                            [
                              <label> ""
                                expression (ast_quotation.ml[244,10212+44]..[244,10212+48])
                                  Pexp_ident "name" (ast_quotation.ml[244,10212+44]..[244,10212+48])
                              <label> ""
                                expression (ast_quotation.ml[244,10212+49]..[244,10212+61])
                                  Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[244,10212+49]..[244,10212+61])
                              <label> ""
                                expression (ast_quotation.ml[244,10212+62]..[244,10212+68])
                                  Pexp_ident "mk_fun" (ast_quotation.ml[244,10212+62]..[244,10212+68])
                            ]
                ]
    ]
  structure_item (ast_quotation.ml[245,10282+0]..[265,11080+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[245,10282+4]..[245,10282+9])
          Ppat_var "of_ep" (ast_quotation.ml[245,10282+4]..[245,10282+9])
        expression (ast_quotation.ml[245,10282+10]..[265,11080+36])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[245,10282+11]..[245,10282+16])
            Ppat_var "lexer" (ast_quotation.ml[245,10282+11]..[245,10282+16])
          expression (ast_quotation.ml[245,10282+18]..[265,11080+36])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[245,10282+19]..[245,10282+23])
              Ppat_var "name" (ast_quotation.ml[245,10282+19]..[245,10282+23])
            expression (ast_quotation.ml[245,10282+25]..[265,11080+36])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[245,10282+26]..[245,10282+31])
                Ppat_var "entry" (ast_quotation.ml[245,10282+26]..[245,10282+31])
              expression (ast_quotation.ml[246,10317+2]..[265,11080+36])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[247,10328+4]..[247,10328+6])
                      Ppat_construct "()" (ast_quotation.ml[247,10328+4]..[247,10328+6])
                      None
                    expression (ast_quotation.ml[248,10338+6]..[265,11080+36])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (ast_quotation.ml[248,10338+10]..[248,10338+49])
                            Ppat_constraint
                            pattern (ast_quotation.ml[248,10338+11]..[248,10338+21])
                              Ppat_var "expand_fun" (ast_quotation.ml[248,10338+11]..[248,10338+21])
                            core_type (ast_quotation.ml[248,10338+23]..[248,10338+48])
                              Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[248,10338+31]..[248,10338+48])
                              [
                                core_type (ast_quotation.ml[248,10338+23]..[248,10338+30])
                                  Ptyp_constr "Astf.ep" (ast_quotation.ml[248,10338+23]..[248,10338+30])
                                  []
                              ]
                          expression (ast_quotation.ml[248,10338+51]..[248,10338+75])
                            Pexp_apply
                            expression (ast_quotation.ml[248,10338+51]..[248,10338+62])
                              Pexp_ident "make_parser" (ast_quotation.ml[248,10338+51]..[248,10338+62])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[248,10338+63]..[248,10338+69])
                                  Pexp_ident "lexer" (ast_quotation.ml[248,10338+63]..[248,10338+69])
                              <label> ""
                                expression (ast_quotation.ml[248,10338+70]..[248,10338+75])
                                  Pexp_ident "entry" (ast_quotation.ml[248,10338+70]..[248,10338+75])
                            ]
                      ]
                      expression (ast_quotation.ml[249,10417+6]..[265,11080+36])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (ast_quotation.ml[249,10417+10]..[249,10417+16])
                              Ppat_var "mk_fun" (ast_quotation.ml[249,10417+10]..[249,10417+16])
                            expression (ast_quotation.ml[250,10436+8]..[258,10685+34])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[251,10453+10]..[251,10453+13])
                                    Ppat_var "loc" (ast_quotation.ml[251,10453+10]..[251,10453+13])
                                  expression (ast_quotation.ml[252,10470+13]..[258,10685+33])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[253,10492+15]..[253,10492+27])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[253,10492+15]..[253,10492+27])
                                        expression (ast_quotation.ml[254,10523+18]..[258,10685+32])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[255,10550+20]..[255,10550+21])
                                                Ppat_var "s" (ast_quotation.ml[255,10550+20]..[255,10550+21])
                                              expression (ast_quotation.ml[256,10575+22]..[258,10685+32])
                                                Pexp_coerce
                                                expression (ast_quotation.ml[256,10575+23]..[257,10605+75])
                                                  Pexp_variant "StExp"
                                                  Some
                                                    expression (ast_quotation.ml[257,10605+25]..[257,10605+75])
                                                      Pexp_tuple
                                                      [
                                                        expression (ast_quotation.ml[257,10605+26]..[257,10605+29])
                                                          Pexp_ident "loc" (ast_quotation.ml[257,10605+26]..[257,10605+29])
                                                        expression (ast_quotation.ml[257,10605+31]..[257,10605+74])
                                                          Pexp_coerce
                                                          expression (ast_quotation.ml[257,10605+32]..[257,10605+61])
                                                            Pexp_apply
                                                            expression (ast_quotation.ml[257,10605+32]..[257,10605+42])
                                                              Pexp_ident "expand_fun" (ast_quotation.ml[257,10605+32]..[257,10605+42])
                                                            [
                                                              <label> ""
                                                                expression (ast_quotation.ml[257,10605+43]..[257,10605+46])
                                                                  Pexp_ident "loc" (ast_quotation.ml[257,10605+43]..[257,10605+46])
                                                              <label> ""
                                                                expression (ast_quotation.ml[257,10605+47]..[257,10605+59])
                                                                  Pexp_ident "loc_name_opt" (ast_quotation.ml[257,10605+47]..[257,10605+59])
                                                              <label> ""
                                                                expression (ast_quotation.ml[257,10605+60]..[257,10605+61])
                                                                  Pexp_ident "s" (ast_quotation.ml[257,10605+60]..[257,10605+61])
                                                            ]
                                                          None
                                                          core_type (ast_quotation.ml[257,10605+65]..[257,10605+73])
                                                            Ptyp_constr "Astf.exp" (ast_quotation.ml[257,10605+65]..[257,10605+73])
                                                            []
                                                      ]
                                                None
                                                core_type (ast_quotation.ml[258,10685+22]..[258,10685+31])
                                                  Ptyp_constr "Astf.stru" (ast_quotation.ml[258,10685+22]..[258,10685+31])
                                                  []
                                          ]
                                    ]
                              ]
                        ]
                        expression (ast_quotation.ml[259,10723+6]..[265,11080+36])
                          Pexp_sequence
                          expression (ast_quotation.ml[259,10723+7]..[261,10827+86])
                            Pexp_apply
                            expression (ast_quotation.ml[259,10723+7]..[259,10723+10])
                              Pexp_ident "add" (ast_quotation.ml[259,10723+7]..[259,10723+10])
                            [
                              <label> ""
                                expression (ast_quotation.ml[259,10723+11]..[259,10723+15])
                                  Pexp_ident "name" (ast_quotation.ml[259,10723+11]..[259,10723+15])
                              <label> ""
                                expression (ast_quotation.ml[259,10723+16]..[259,10723+27])
                                  Pexp_ident "Dyn_tag.pat" (ast_quotation.ml[259,10723+16]..[259,10723+27])
                              <label> ""
                                expression (ast_quotation.ml[260,10751+9]..[261,10827+86])
                                  Pexp_coerce
                                  expression (ast_quotation.ml[260,10751+10]..[260,10751+34])
                                    Pexp_apply
                                    expression (ast_quotation.ml[260,10751+10]..[260,10751+21])
                                      Pexp_ident "make_parser" (ast_quotation.ml[260,10751+10]..[260,10751+21])
                                    [
                                      <label> "?lexer"
                                        expression (ast_quotation.ml[260,10751+22]..[260,10751+28])
                                          Pexp_ident "lexer" (ast_quotation.ml[260,10751+22]..[260,10751+28])
                                      <label> ""
                                        expression (ast_quotation.ml[260,10751+29]..[260,10751+34])
                                          Pexp_ident "entry" (ast_quotation.ml[260,10751+29]..[260,10751+34])
                                    ]
                                  Some
                                    core_type (ast_quotation.ml[260,10751+37]..[260,10751+62])
                                      Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[260,10751+45]..[260,10751+62])
                                      [
                                        core_type (ast_quotation.ml[260,10751+37]..[260,10751+44])
                                          Ptyp_constr "Astf.ep" (ast_quotation.ml[260,10751+37]..[260,10751+44])
                                          []
                                      ]
                                  core_type (ast_quotation.ml[260,10751+67]..[261,10827+85])
                                    Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[261,10827+68]..[261,10827+85])
                                    [
                                      core_type (ast_quotation.ml[260,10751+67]..[260,10751+75])
                                        Ptyp_constr "Astf.pat" (ast_quotation.ml[260,10751+67]..[260,10751+75])
                                        []
                                    ]
                            ]
                          expression (ast_quotation.ml[259,10723+6]..[265,11080+36])
                            Pexp_sequence
                            expression (ast_quotation.ml[262,10915+7]..[264,11005+73])
                              Pexp_apply
                              expression (ast_quotation.ml[262,10915+7]..[262,10915+10])
                                Pexp_ident "add" (ast_quotation.ml[262,10915+7]..[262,10915+10])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[262,10915+11]..[262,10915+15])
                                    Pexp_ident "name" (ast_quotation.ml[262,10915+11]..[262,10915+15])
                                <label> ""
                                  expression (ast_quotation.ml[262,10915+16]..[262,10915+27])
                                    Pexp_ident "Dyn_tag.exp" (ast_quotation.ml[262,10915+16]..[262,10915+27])
                                <label> ""
                                  expression (ast_quotation.ml[263,10943+9]..[264,11005+73])
                                    Pexp_coerce
                                    expression (ast_quotation.ml[263,10943+10]..[263,10943+20])
                                      Pexp_ident "expand_fun" (ast_quotation.ml[263,10943+10]..[263,10943+20])
                                    Some
                                      core_type (ast_quotation.ml[263,10943+23]..[263,10943+48])
                                        Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[263,10943+31]..[263,10943+48])
                                        [
                                          core_type (ast_quotation.ml[263,10943+23]..[263,10943+30])
                                            Ptyp_constr "Astf.ep" (ast_quotation.ml[263,10943+23]..[263,10943+30])
                                            []
                                        ]
                                    core_type (ast_quotation.ml[263,10943+53]..[264,11005+72])
                                      Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[264,11005+55]..[264,11005+72])
                                      [
                                        core_type (ast_quotation.ml[263,10943+53]..[263,10943+61])
                                          Ptyp_constr "Astf.exp" (ast_quotation.ml[263,10943+53]..[263,10943+61])
                                          []
                                      ]
                              ]
                            expression (ast_quotation.ml[259,10723+6]..[265,11080+36])
                              Pexp_apply
                              expression (ast_quotation.ml[265,11080+7]..[265,11080+10])
                                Pexp_ident "add" (ast_quotation.ml[265,11080+7]..[265,11080+10])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[265,11080+11]..[265,11080+15])
                                    Pexp_ident "name" (ast_quotation.ml[265,11080+11]..[265,11080+15])
                                <label> ""
                                  expression (ast_quotation.ml[265,11080+16]..[265,11080+28])
                                    Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[265,11080+16]..[265,11080+28])
                                <label> ""
                                  expression (ast_quotation.ml[265,11080+29]..[265,11080+35])
                                    Pexp_ident "mk_fun" (ast_quotation.ml[265,11080+29]..[265,11080+35])
                              ]
                ]
    ]
  structure_item (ast_quotation.ml[266,11117+0]..[276,11367+78])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[266,11117+4]..[266,11117+22])
          Ppat_var "of_pat_with_filter" (ast_quotation.ml[266,11117+4]..[266,11117+22])
        expression (ast_quotation.ml[266,11117+23]..[276,11367+78])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[266,11117+24]..[266,11117+29])
            Ppat_var "lexer" (ast_quotation.ml[266,11117+24]..[266,11117+29])
          expression (ast_quotation.ml[266,11117+31]..[276,11367+78])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[266,11117+32]..[266,11117+36])
              Ppat_var "name" (ast_quotation.ml[266,11117+32]..[266,11117+36])
            expression (ast_quotation.ml[266,11117+38]..[276,11367+78])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[266,11117+39]..[266,11117+44])
                Ppat_var "entry" (ast_quotation.ml[266,11117+39]..[266,11117+44])
              expression (ast_quotation.ml[266,11117+46]..[276,11367+78])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[266,11117+47]..[266,11117+53])
                  Ppat_var "filter" (ast_quotation.ml[266,11117+47]..[266,11117+53])
                expression (ast_quotation.ml[267,11174+2]..[276,11367+78])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[268,11185+4]..[268,11185+6])
                        Ppat_construct "()" (ast_quotation.ml[268,11185+4]..[268,11185+6])
                        None
                      expression (ast_quotation.ml[269,11195+6]..[276,11367+78])
                        Pexp_apply
                        expression (ast_quotation.ml[269,11195+6]..[269,11195+9])
                          Pexp_ident "add" (ast_quotation.ml[269,11195+6]..[269,11195+9])
                        [
                          <label> ""
                            expression (ast_quotation.ml[269,11195+10]..[269,11195+14])
                              Pexp_ident "name" (ast_quotation.ml[269,11195+10]..[269,11195+14])
                          <label> ""
                            expression (ast_quotation.ml[269,11195+15]..[269,11195+26])
                              Pexp_ident "Dyn_tag.pat" (ast_quotation.ml[269,11195+15]..[269,11195+26])
                          <label> ""
                            expression (ast_quotation.ml[270,11222+9]..[276,11367+77])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[271,11240+11]..[271,11240+14])
                                    Ppat_var "loc" (ast_quotation.ml[271,11240+11]..[271,11240+14])
                                  expression (ast_quotation.ml[272,11258+14]..[276,11367+76])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[273,11281+16]..[273,11281+28])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[273,11281+16]..[273,11281+28])
                                        expression (ast_quotation.ml[274,11313+19]..[276,11367+75])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[275,11341+21]..[275,11341+22])
                                                Ppat_var "s" (ast_quotation.ml[275,11341+21]..[275,11341+22])
                                              expression (ast_quotation.ml[276,11367+23]..[276,11367+75])
                                                Pexp_apply
                                                expression (ast_quotation.ml[276,11367+23]..[276,11367+29])
                                                  Pexp_ident "filter" (ast_quotation.ml[276,11367+23]..[276,11367+29])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[276,11367+31]..[276,11367+74])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[276,11367+31]..[276,11367+42])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[276,11367+31]..[276,11367+42])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[276,11367+43]..[276,11367+49])
                                                            Pexp_ident "lexer" (ast_quotation.ml[276,11367+43]..[276,11367+49])
                                                        <label> ""
                                                          expression (ast_quotation.ml[276,11367+50]..[276,11367+55])
                                                            Pexp_ident "entry" (ast_quotation.ml[276,11367+50]..[276,11367+55])
                                                        <label> ""
                                                          expression (ast_quotation.ml[276,11367+56]..[276,11367+59])
                                                            Pexp_ident "loc" (ast_quotation.ml[276,11367+56]..[276,11367+59])
                                                        <label> ""
                                                          expression (ast_quotation.ml[276,11367+60]..[276,11367+72])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[276,11367+60]..[276,11367+72])
                                                        <label> ""
                                                          expression (ast_quotation.ml[276,11367+73]..[276,11367+74])
                                                            Pexp_ident "s" (ast_quotation.ml[276,11367+73]..[276,11367+74])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (ast_quotation.ml[277,11446+0]..[278,11486+70])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[277,11446+4]..[277,11446+14])
          Ppat_var "of_clfield" (ast_quotation.ml[277,11446+4]..[277,11446+14])
        expression (ast_quotation.ml[277,11446+15]..[278,11486+70])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[277,11446+16]..[277,11446+21])
            Ppat_var "lexer" (ast_quotation.ml[277,11446+16]..[277,11446+21])
          expression (ast_quotation.ml[277,11446+23]..[278,11486+70])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[277,11446+24]..[277,11446+28])
              Ppat_var "name" (ast_quotation.ml[277,11446+24]..[277,11446+28])
            expression (ast_quotation.ml[277,11446+30]..[278,11486+70])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[277,11446+31]..[277,11446+36])
                Ppat_var "entry" (ast_quotation.ml[277,11446+31]..[277,11446+36])
              expression (ast_quotation.ml[278,11486+2]..[278,11486+70])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[278,11486+13]..[278,11486+15])
                      Ppat_construct "()" (ast_quotation.ml[278,11486+13]..[278,11486+15])
                      None
                    expression (ast_quotation.ml[278,11486+19]..[278,11486+70])
                      Pexp_apply
                      expression (ast_quotation.ml[278,11486+19]..[278,11486+22])
                        Pexp_ident "add" (ast_quotation.ml[278,11486+19]..[278,11486+22])
                      [
                        <label> ""
                          expression (ast_quotation.ml[278,11486+23]..[278,11486+27])
                            Pexp_ident "name" (ast_quotation.ml[278,11486+23]..[278,11486+27])
                        <label> ""
                          expression (ast_quotation.ml[278,11486+28]..[278,11486+43])
                            Pexp_ident "Dyn_tag.clfield" (ast_quotation.ml[278,11486+28]..[278,11486+43])
                        <label> ""
                          expression (ast_quotation.ml[278,11486+45]..[278,11486+69])
                            Pexp_apply
                            expression (ast_quotation.ml[278,11486+45]..[278,11486+56])
                              Pexp_ident "make_parser" (ast_quotation.ml[278,11486+45]..[278,11486+56])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[278,11486+57]..[278,11486+63])
                                  Pexp_ident "lexer" (ast_quotation.ml[278,11486+57]..[278,11486+63])
                              <label> ""
                                expression (ast_quotation.ml[278,11486+64]..[278,11486+69])
                                  Pexp_ident "entry" (ast_quotation.ml[278,11486+64]..[278,11486+69])
                            ]
                      ]
                ]
    ]
  structure_item (ast_quotation.ml[279,11557+0]..[289,11826+80])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[279,11557+4]..[279,11557+26])
          Ppat_var "of_clfield_with_filter" (ast_quotation.ml[279,11557+4]..[279,11557+26])
        expression (ast_quotation.ml[279,11557+27]..[289,11826+80])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[279,11557+28]..[279,11557+33])
            Ppat_var "lexer" (ast_quotation.ml[279,11557+28]..[279,11557+33])
          expression (ast_quotation.ml[279,11557+35]..[289,11826+80])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[279,11557+36]..[279,11557+40])
              Ppat_var "name" (ast_quotation.ml[279,11557+36]..[279,11557+40])
            expression (ast_quotation.ml[279,11557+42]..[289,11826+80])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[279,11557+43]..[279,11557+48])
                Ppat_var "entry" (ast_quotation.ml[279,11557+43]..[279,11557+48])
              expression (ast_quotation.ml[279,11557+50]..[289,11826+80])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[279,11557+51]..[279,11557+57])
                  Ppat_var "filter" (ast_quotation.ml[279,11557+51]..[279,11557+57])
                expression (ast_quotation.ml[280,11618+2]..[289,11826+80])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[281,11629+4]..[281,11629+6])
                        Ppat_construct "()" (ast_quotation.ml[281,11629+4]..[281,11629+6])
                        None
                      expression (ast_quotation.ml[282,11639+6]..[289,11826+80])
                        Pexp_apply
                        expression (ast_quotation.ml[282,11639+33]..[282,11639+35])
                          Pexp_ident "@@" (ast_quotation.ml[282,11639+33]..[282,11639+35])
                        [
                          <label> ""
                            expression (ast_quotation.ml[282,11639+7]..[282,11639+31])
                              Pexp_apply
                              expression (ast_quotation.ml[282,11639+7]..[282,11639+10])
                                Pexp_ident "add" (ast_quotation.ml[282,11639+7]..[282,11639+10])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[282,11639+11]..[282,11639+15])
                                    Pexp_ident "name" (ast_quotation.ml[282,11639+11]..[282,11639+15])
                                <label> ""
                                  expression (ast_quotation.ml[282,11639+16]..[282,11639+31])
                                    Pexp_ident "Dyn_tag.clfield" (ast_quotation.ml[282,11639+16]..[282,11639+31])
                              ]
                          <label> ""
                            expression (ast_quotation.ml[283,11675+10]..[289,11826+78])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[284,11694+12]..[284,11694+15])
                                    Ppat_var "loc" (ast_quotation.ml[284,11694+12]..[284,11694+15])
                                  expression (ast_quotation.ml[285,11713+15]..[289,11826+77])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[286,11737+17]..[286,11737+29])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[286,11737+17]..[286,11737+29])
                                        expression (ast_quotation.ml[287,11770+20]..[289,11826+76])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[288,11799+22]..[288,11799+23])
                                                Ppat_var "s" (ast_quotation.ml[288,11799+22]..[288,11799+23])
                                              expression (ast_quotation.ml[289,11826+24]..[289,11826+76])
                                                Pexp_apply
                                                expression (ast_quotation.ml[289,11826+24]..[289,11826+30])
                                                  Pexp_ident "filter" (ast_quotation.ml[289,11826+24]..[289,11826+30])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[289,11826+32]..[289,11826+75])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[289,11826+32]..[289,11826+43])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[289,11826+32]..[289,11826+43])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[289,11826+44]..[289,11826+50])
                                                            Pexp_ident "lexer" (ast_quotation.ml[289,11826+44]..[289,11826+50])
                                                        <label> ""
                                                          expression (ast_quotation.ml[289,11826+51]..[289,11826+56])
                                                            Pexp_ident "entry" (ast_quotation.ml[289,11826+51]..[289,11826+56])
                                                        <label> ""
                                                          expression (ast_quotation.ml[289,11826+57]..[289,11826+60])
                                                            Pexp_ident "loc" (ast_quotation.ml[289,11826+57]..[289,11826+60])
                                                        <label> ""
                                                          expression (ast_quotation.ml[289,11826+61]..[289,11826+73])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[289,11826+61]..[289,11826+73])
                                                        <label> ""
                                                          expression (ast_quotation.ml[289,11826+74]..[289,11826+75])
                                                            Pexp_ident "s" (ast_quotation.ml[289,11826+74]..[289,11826+75])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (ast_quotation.ml[290,11907+0]..[291,11944+67])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[290,11907+4]..[290,11907+11])
          Ppat_var "of_case" (ast_quotation.ml[290,11907+4]..[290,11907+11])
        expression (ast_quotation.ml[290,11907+12]..[291,11944+67])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[290,11907+13]..[290,11907+18])
            Ppat_var "lexer" (ast_quotation.ml[290,11907+13]..[290,11907+18])
          expression (ast_quotation.ml[290,11907+20]..[291,11944+67])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[290,11907+21]..[290,11907+25])
              Ppat_var "name" (ast_quotation.ml[290,11907+21]..[290,11907+25])
            expression (ast_quotation.ml[290,11907+27]..[291,11944+67])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[290,11907+28]..[290,11907+33])
                Ppat_var "entry" (ast_quotation.ml[290,11907+28]..[290,11907+33])
              expression (ast_quotation.ml[291,11944+2]..[291,11944+67])
                Pexp_function
                [
                  <case>
                    pattern (ast_quotation.ml[291,11944+13]..[291,11944+15])
                      Ppat_construct "()" (ast_quotation.ml[291,11944+13]..[291,11944+15])
                      None
                    expression (ast_quotation.ml[291,11944+19]..[291,11944+67])
                      Pexp_apply
                      expression (ast_quotation.ml[291,11944+19]..[291,11944+22])
                        Pexp_ident "add" (ast_quotation.ml[291,11944+19]..[291,11944+22])
                      [
                        <label> ""
                          expression (ast_quotation.ml[291,11944+23]..[291,11944+27])
                            Pexp_ident "name" (ast_quotation.ml[291,11944+23]..[291,11944+27])
                        <label> ""
                          expression (ast_quotation.ml[291,11944+28]..[291,11944+40])
                            Pexp_ident "Dyn_tag.case" (ast_quotation.ml[291,11944+28]..[291,11944+40])
                        <label> ""
                          expression (ast_quotation.ml[291,11944+42]..[291,11944+66])
                            Pexp_apply
                            expression (ast_quotation.ml[291,11944+42]..[291,11944+53])
                              Pexp_ident "make_parser" (ast_quotation.ml[291,11944+42]..[291,11944+53])
                            [
                              <label> "?lexer"
                                expression (ast_quotation.ml[291,11944+54]..[291,11944+60])
                                  Pexp_ident "lexer" (ast_quotation.ml[291,11944+54]..[291,11944+60])
                              <label> ""
                                expression (ast_quotation.ml[291,11944+61]..[291,11944+66])
                                  Pexp_ident "entry" (ast_quotation.ml[291,11944+61]..[291,11944+66])
                            ]
                      ]
                ]
    ]
  structure_item (ast_quotation.ml[292,12012+0]..[302,12264+78])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[292,12012+4]..[292,12012+23])
          Ppat_var "of_case_with_filter" (ast_quotation.ml[292,12012+4]..[292,12012+23])
        expression (ast_quotation.ml[292,12012+24]..[302,12264+78])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[292,12012+25]..[292,12012+30])
            Ppat_var "lexer" (ast_quotation.ml[292,12012+25]..[292,12012+30])
          expression (ast_quotation.ml[292,12012+32]..[302,12264+78])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[292,12012+33]..[292,12012+37])
              Ppat_var "name" (ast_quotation.ml[292,12012+33]..[292,12012+37])
            expression (ast_quotation.ml[292,12012+39]..[302,12264+78])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[292,12012+40]..[292,12012+45])
                Ppat_var "entry" (ast_quotation.ml[292,12012+40]..[292,12012+45])
              expression (ast_quotation.ml[292,12012+47]..[302,12264+78])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[292,12012+48]..[292,12012+54])
                  Ppat_var "filter" (ast_quotation.ml[292,12012+48]..[292,12012+54])
                expression (ast_quotation.ml[293,12070+2]..[302,12264+78])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[294,12081+4]..[294,12081+6])
                        Ppat_construct "()" (ast_quotation.ml[294,12081+4]..[294,12081+6])
                        None
                      expression (ast_quotation.ml[295,12091+6]..[302,12264+78])
                        Pexp_apply
                        expression (ast_quotation.ml[295,12091+6]..[295,12091+9])
                          Pexp_ident "add" (ast_quotation.ml[295,12091+6]..[295,12091+9])
                        [
                          <label> ""
                            expression (ast_quotation.ml[295,12091+10]..[295,12091+14])
                              Pexp_ident "name" (ast_quotation.ml[295,12091+10]..[295,12091+14])
                          <label> ""
                            expression (ast_quotation.ml[295,12091+15]..[295,12091+27])
                              Pexp_ident "Dyn_tag.case" (ast_quotation.ml[295,12091+15]..[295,12091+27])
                          <label> ""
                            expression (ast_quotation.ml[296,12119+9]..[302,12264+77])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[297,12137+11]..[297,12137+14])
                                    Ppat_var "loc" (ast_quotation.ml[297,12137+11]..[297,12137+14])
                                  expression (ast_quotation.ml[298,12155+14]..[302,12264+76])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[299,12178+16]..[299,12178+28])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[299,12178+16]..[299,12178+28])
                                        expression (ast_quotation.ml[300,12210+19]..[302,12264+75])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[301,12238+21]..[301,12238+22])
                                                Ppat_var "s" (ast_quotation.ml[301,12238+21]..[301,12238+22])
                                              expression (ast_quotation.ml[302,12264+23]..[302,12264+75])
                                                Pexp_apply
                                                expression (ast_quotation.ml[302,12264+23]..[302,12264+29])
                                                  Pexp_ident "filter" (ast_quotation.ml[302,12264+23]..[302,12264+29])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[302,12264+31]..[302,12264+74])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[302,12264+31]..[302,12264+42])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[302,12264+31]..[302,12264+42])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[302,12264+43]..[302,12264+49])
                                                            Pexp_ident "lexer" (ast_quotation.ml[302,12264+43]..[302,12264+49])
                                                        <label> ""
                                                          expression (ast_quotation.ml[302,12264+50]..[302,12264+55])
                                                            Pexp_ident "entry" (ast_quotation.ml[302,12264+50]..[302,12264+55])
                                                        <label> ""
                                                          expression (ast_quotation.ml[302,12264+56]..[302,12264+59])
                                                            Pexp_ident "loc" (ast_quotation.ml[302,12264+56]..[302,12264+59])
                                                        <label> ""
                                                          expression (ast_quotation.ml[302,12264+60]..[302,12264+72])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[302,12264+60]..[302,12264+72])
                                                        <label> ""
                                                          expression (ast_quotation.ml[302,12264+73]..[302,12264+74])
                                                            Pexp_ident "s" (ast_quotation.ml[302,12264+73]..[302,12264+74])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (ast_quotation.ml[303,12343+0]..[322,12909+69])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[303,12343+4]..[303,12343+22])
          Ppat_var "of_exp_with_filter" (ast_quotation.ml[303,12343+4]..[303,12343+22])
        expression (ast_quotation.ml[303,12343+23]..[322,12909+69])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[303,12343+24]..[303,12343+29])
            Ppat_var "lexer" (ast_quotation.ml[303,12343+24]..[303,12343+29])
          expression (ast_quotation.ml[303,12343+31]..[322,12909+69])
            Pexp_fun "name"
            None
            pattern (ast_quotation.ml[303,12343+32]..[303,12343+36])
              Ppat_var "name" (ast_quotation.ml[303,12343+32]..[303,12343+36])
            expression (ast_quotation.ml[303,12343+38]..[322,12909+69])
              Pexp_fun "entry"
              None
              pattern (ast_quotation.ml[303,12343+39]..[303,12343+44])
                Ppat_var "entry" (ast_quotation.ml[303,12343+39]..[303,12343+44])
              expression (ast_quotation.ml[303,12343+46]..[322,12909+69])
                Pexp_fun "filter"
                None
                pattern (ast_quotation.ml[303,12343+47]..[303,12343+53])
                  Ppat_var "filter" (ast_quotation.ml[303,12343+47]..[303,12343+53])
                expression (ast_quotation.ml[304,12400+2]..[322,12909+69])
                  Pexp_function
                  [
                    <case>
                      pattern (ast_quotation.ml[305,12411+4]..[305,12411+6])
                        Ppat_construct "()" (ast_quotation.ml[305,12411+4]..[305,12411+6])
                        None
                      expression (ast_quotation.ml[306,12421+6]..[322,12909+69])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (ast_quotation.ml[306,12421+10]..[306,12421+20])
                              Ppat_var "expand_fun" (ast_quotation.ml[306,12421+10]..[306,12421+20])
                            expression (ast_quotation.ml[307,12444+8]..[312,12558+79])
                              Pexp_function
                              [
                                <case>
                                  pattern (ast_quotation.ml[308,12461+10]..[308,12461+13])
                                    Ppat_var "loc" (ast_quotation.ml[308,12461+10]..[308,12461+13])
                                  expression (ast_quotation.ml[309,12478+13]..[312,12558+78])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (ast_quotation.ml[310,12500+15]..[310,12500+27])
                                          Ppat_var "loc_name_opt" (ast_quotation.ml[310,12500+15]..[310,12500+27])
                                        expression (ast_quotation.ml[311,12531+18]..[312,12558+77])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ast_quotation.ml[312,12558+20]..[312,12558+21])
                                                Ppat_var "s" (ast_quotation.ml[312,12558+20]..[312,12558+21])
                                              expression (ast_quotation.ml[312,12558+25]..[312,12558+77])
                                                Pexp_apply
                                                expression (ast_quotation.ml[312,12558+25]..[312,12558+31])
                                                  Pexp_ident "filter" (ast_quotation.ml[312,12558+25]..[312,12558+31])
                                                [
                                                  <label> ""
                                                    expression (ast_quotation.ml[312,12558+33]..[312,12558+76])
                                                      Pexp_apply
                                                      expression (ast_quotation.ml[312,12558+33]..[312,12558+44])
                                                        Pexp_ident "make_parser" (ast_quotation.ml[312,12558+33]..[312,12558+44])
                                                      [
                                                        <label> "?lexer"
                                                          expression (ast_quotation.ml[312,12558+45]..[312,12558+51])
                                                            Pexp_ident "lexer" (ast_quotation.ml[312,12558+45]..[312,12558+51])
                                                        <label> ""
                                                          expression (ast_quotation.ml[312,12558+52]..[312,12558+57])
                                                            Pexp_ident "entry" (ast_quotation.ml[312,12558+52]..[312,12558+57])
                                                        <label> ""
                                                          expression (ast_quotation.ml[312,12558+58]..[312,12558+61])
                                                            Pexp_ident "loc" (ast_quotation.ml[312,12558+58]..[312,12558+61])
                                                        <label> ""
                                                          expression (ast_quotation.ml[312,12558+62]..[312,12558+74])
                                                            Pexp_ident "loc_name_opt" (ast_quotation.ml[312,12558+62]..[312,12558+74])
                                                        <label> ""
                                                          expression (ast_quotation.ml[312,12558+75]..[312,12558+76])
                                                            Pexp_ident "s" (ast_quotation.ml[312,12558+75]..[312,12558+76])
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                        expression (ast_quotation.ml[313,12641+6]..[322,12909+69])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (ast_quotation.ml[313,12641+10]..[313,12641+16])
                                Ppat_var "mk_fun" (ast_quotation.ml[313,12641+10]..[313,12641+16])
                              expression (ast_quotation.ml[314,12660+8]..[321,12871+34])
                                Pexp_function
                                [
                                  <case>
                                    pattern (ast_quotation.ml[315,12677+10]..[315,12677+13])
                                      Ppat_var "loc" (ast_quotation.ml[315,12677+10]..[315,12677+13])
                                    expression (ast_quotation.ml[316,12694+13]..[321,12871+33])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (ast_quotation.ml[317,12716+15]..[317,12716+27])
                                            Ppat_var "loc_name_opt" (ast_quotation.ml[317,12716+15]..[317,12716+27])
                                          expression (ast_quotation.ml[318,12747+18]..[321,12871+32])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (ast_quotation.ml[319,12774+20]..[319,12774+21])
                                                  Ppat_var "s" (ast_quotation.ml[319,12774+20]..[319,12774+21])
                                                expression (ast_quotation.ml[320,12799+22]..[321,12871+32])
                                                  Pexp_constraint
                                                  expression (ast_quotation.ml[320,12799+23]..[320,12799+68])
                                                    Pexp_variant "StExp"
                                                    Some
                                                      expression (ast_quotation.ml[320,12799+30]..[320,12799+68])
                                                        Pexp_tuple
                                                        [
                                                          expression (ast_quotation.ml[320,12799+31]..[320,12799+34])
                                                            Pexp_ident "loc" (ast_quotation.ml[320,12799+31]..[320,12799+34])
                                                          expression (ast_quotation.ml[320,12799+37]..[320,12799+66])
                                                            Pexp_apply
                                                            expression (ast_quotation.ml[320,12799+37]..[320,12799+47])
                                                              Pexp_ident "expand_fun" (ast_quotation.ml[320,12799+37]..[320,12799+47])
                                                            [
                                                              <label> ""
                                                                expression (ast_quotation.ml[320,12799+48]..[320,12799+51])
                                                                  Pexp_ident "loc" (ast_quotation.ml[320,12799+48]..[320,12799+51])
                                                              <label> ""
                                                                expression (ast_quotation.ml[320,12799+52]..[320,12799+64])
                                                                  Pexp_ident "loc_name_opt" (ast_quotation.ml[320,12799+52]..[320,12799+64])
                                                              <label> ""
                                                                expression (ast_quotation.ml[320,12799+65]..[320,12799+66])
                                                                  Pexp_ident "s" (ast_quotation.ml[320,12799+65]..[320,12799+66])
                                                            ]
                                                        ]
                                                  core_type (ast_quotation.ml[321,12871+22]..[321,12871+31])
                                                    Ptyp_constr "Astf.stru" (ast_quotation.ml[321,12871+22]..[321,12871+31])
                                                    []
                                            ]
                                      ]
                                ]
                          ]
                          expression (ast_quotation.ml[322,12909+6]..[322,12909+69])
                            Pexp_sequence
                            expression (ast_quotation.ml[322,12909+7]..[322,12909+38])
                              Pexp_apply
                              expression (ast_quotation.ml[322,12909+7]..[322,12909+10])
                                Pexp_ident "add" (ast_quotation.ml[322,12909+7]..[322,12909+10])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[322,12909+11]..[322,12909+15])
                                    Pexp_ident "name" (ast_quotation.ml[322,12909+11]..[322,12909+15])
                                <label> ""
                                  expression (ast_quotation.ml[322,12909+16]..[322,12909+27])
                                    Pexp_ident "Dyn_tag.exp" (ast_quotation.ml[322,12909+16]..[322,12909+27])
                                <label> ""
                                  expression (ast_quotation.ml[322,12909+28]..[322,12909+38])
                                    Pexp_ident "expand_fun" (ast_quotation.ml[322,12909+28]..[322,12909+38])
                              ]
                            expression (ast_quotation.ml[322,12909+6]..[322,12909+69])
                              Pexp_apply
                              expression (ast_quotation.ml[322,12909+40]..[322,12909+43])
                                Pexp_ident "add" (ast_quotation.ml[322,12909+40]..[322,12909+43])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[322,12909+44]..[322,12909+48])
                                    Pexp_ident "name" (ast_quotation.ml[322,12909+44]..[322,12909+48])
                                <label> ""
                                  expression (ast_quotation.ml[322,12909+49]..[322,12909+61])
                                    Pexp_ident "Dyn_tag.stru" (ast_quotation.ml[322,12909+49]..[322,12909+61])
                                <label> ""
                                  expression (ast_quotation.ml[322,12909+62]..[322,12909+68])
                                    Pexp_ident "mk_fun" (ast_quotation.ml[322,12909+62]..[322,12909+68])
                              ]
                  ]
    ]
  structure_item (ast_quotation.ml[323,12979+0]..[324,13043+19])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[323,12979+4]..[323,12979+13])
          Ppat_var "dir_table" (ast_quotation.ml[323,12979+4]..[323,12979+13])
        expression (ast_quotation.ml[323,12979+13]..[324,13043+19])
          Pexp_constraint
          expression (ast_quotation.ml[324,13043+2]..[324,13043+19])
            Pexp_apply
            expression (ast_quotation.ml[324,13043+2]..[324,13043+16])
              Pexp_ident "Hashtbl.create" (ast_quotation.ml[324,13043+2]..[324,13043+16])
            [
              <label> ""
                expression (ast_quotation.ml[324,13043+17]..[324,13043+19])
                  Pexp_constant Const_int 50
            ]
          core_type (ast_quotation.ml[323,12979+16]..[323,12979+61])
            Ptyp_constr "Hashtbl.t" (ast_quotation.ml[323,12979+52]..[323,12979+61])
            [
              core_type (ast_quotation.ml[323,12979+16]..[323,12979+27])
                Ptyp_constr "Tokenf.name" (ast_quotation.ml[323,12979+16]..[323,12979+27])
                []
              core_type (ast_quotation.ml[323,12979+28]..[323,12979+50])
                Ptyp_constr "Tokenf.expand_fun" (ast_quotation.ml[323,12979+33]..[323,12979+50])
                [
                  core_type (ast_quotation.ml[323,12979+28]..[323,12979+32])
                    Ptyp_constr "unit" (ast_quotation.ml[323,12979+28]..[323,12979+32])
                    []
                ]
            ]
    ]
  structure_item (ast_quotation.ml[325,13063+0]..[335,13313+65])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[325,13063+4]..[325,13063+19])
          Ppat_var "dump_directives" (ast_quotation.ml[325,13063+4]..[325,13063+19])
        expression (ast_quotation.ml[326,13085+2]..[335,13313+65])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[327,13096+4]..[327,13096+6])
                Ppat_construct "()" (ast_quotation.ml[327,13096+4]..[327,13096+6])
                None
              expression (ast_quotation.ml[328,13106+6]..[335,13313+65])
                Pexp_apply
                expression (ast_quotation.ml[328,13106+16]..[328,13106+18])
                  Pexp_ident "|>" (ast_quotation.ml[328,13106+16]..[328,13106+18])
                [
                  <label> ""
                    expression (ast_quotation.ml[328,13106+6]..[328,13106+15])
                      Pexp_ident "dir_table" (ast_quotation.ml[328,13106+6]..[328,13106+15])
                  <label> ""
                    expression (ast_quotation.ml[329,13125+9]..[335,13313+64])
                      Pexp_apply
                      expression (ast_quotation.ml[329,13125+9]..[329,13125+21])
                        Pexp_ident "Hashtbl.iter" (ast_quotation.ml[329,13125+9]..[329,13125+21])
                      [
                        <label> ""
                          expression (ast_quotation.ml[330,13147+12]..[335,13313+63])
                            Pexp_function
                            [
                              <case>
                                pattern (ast_quotation.ml[331,13168+14]..[331,13168+31])
                                  Ppat_constraint
                                  pattern (ast_quotation.ml[331,13168+15]..[331,13168+16])
                                    Ppat_var "n" (ast_quotation.ml[331,13168+15]..[331,13168+16])
                                  core_type (ast_quotation.ml[331,13168+19]..[331,13168+30])
                                    Ptyp_constr "Tokenf.name" (ast_quotation.ml[331,13168+19]..[331,13168+30])
                                    []
                                expression (ast_quotation.ml[332,13203+17]..[335,13313+62])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ast_quotation.ml[333,13229+19]..[333,13229+20])
                                        Ppat_any
                                      expression (ast_quotation.ml[334,13253+21]..[335,13313+62])
                                        Pexp_apply
                                        expression (ast_quotation.ml[334,13253+21]..[334,13253+28])
                                          Pexp_ident "fprintf" (ast_quotation.ml[334,13253+21]..[334,13253+28])
                                        [
                                          <label> ""
                                            expression (ast_quotation.ml[334,13253+29]..[334,13253+49])
                                              Pexp_ident "Format.std_formatter" (ast_quotation.ml[334,13253+29]..[334,13253+49])
                                          <label> ""
                                            expression (ast_quotation.ml[334,13253+50]..[334,13253+59])
                                              Pexp_constant Const_string("%a.%s@.",None)
                                          <label> ""
                                            expression (ast_quotation.ml[335,13313+23]..[335,13313+46])
                                              Pexp_ident "Tokenf.pp_print_domains" (ast_quotation.ml[335,13313+23]..[335,13313+46])
                                          <label> ""
                                            expression (ast_quotation.ml[335,13313+47]..[335,13313+55])
                                              Pexp_field
                                              expression (ast_quotation.ml[335,13313+47]..[335,13313+48])
                                                Pexp_ident "n" (ast_quotation.ml[335,13313+47]..[335,13313+48])
                                              "domain" (ast_quotation.ml[335,13313+49]..[335,13313+55])
                                          <label> ""
                                            expression (ast_quotation.ml[335,13313+56]..[335,13313+62])
                                              Pexp_field
                                              expression (ast_quotation.ml[335,13313+56]..[335,13313+57])
                                                Pexp_ident "n" (ast_quotation.ml[335,13313+56]..[335,13313+57])
                                              "name" (ast_quotation.ml[335,13313+58]..[335,13313+62])
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ast_quotation.ml[336,13379+0]..[345,13652+43])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[336,13379+4]..[336,13379+15])
          Ppat_var "handle_quot" (ast_quotation.ml[336,13379+4]..[336,13379+15])
        expression (ast_quotation.ml[337,13397+2]..[345,13652+43])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[338,13408+4]..[338,13408+21])
                Ppat_constraint
                pattern (ast_quotation.ml[338,13408+5]..[338,13408+6])
                  Ppat_var "x" (ast_quotation.ml[338,13408+5]..[338,13408+6])
                core_type (ast_quotation.ml[338,13408+9]..[338,13408+20])
                  Ptyp_constr "Tokenf.quot" (ast_quotation.ml[338,13408+9]..[338,13408+20])
                  []
              expression (ast_quotation.ml[339,13433+6]..[345,13652+43])
                Pexp_constraint
                expression (ast_quotation.ml[339,13433+7]..[345,13652+35])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (ast_quotation.ml[339,13433+11]..[339,13433+18])
                        Ppat_var "handler" (ast_quotation.ml[339,13433+11]..[339,13433+18])
                      expression (ast_quotation.ml[340,13454+9]..[344,13603+45])
                        Pexp_try
                        expression (ast_quotation.ml[340,13454+13]..[340,13454+42])
                          Pexp_apply
                          expression (ast_quotation.ml[340,13454+13]..[340,13454+25])
                            Pexp_ident "Hashtbl.find" (ast_quotation.ml[340,13454+13]..[340,13454+25])
                          [
                            <label> ""
                              expression (ast_quotation.ml[340,13454+26]..[340,13454+35])
                                Pexp_ident "dir_table" (ast_quotation.ml[340,13454+26]..[340,13454+35])
                            <label> ""
                              expression (ast_quotation.ml[340,13454+36]..[340,13454+42])
                                Pexp_field
                                expression (ast_quotation.ml[340,13454+36]..[340,13454+37])
                                  Pexp_ident "x" (ast_quotation.ml[340,13454+36]..[340,13454+37])
                                "name" (ast_quotation.ml[340,13454+38]..[340,13454+42])
                          ]
                        [
                          <case>
                            pattern (ast_quotation.ml[342,13511+11]..[342,13511+20])
                              Ppat_construct "Not_found" (ast_quotation.ml[342,13511+11]..[342,13511+20])
                              None
                            expression (ast_quotation.ml[343,13536+13]..[344,13603+45])
                              Pexp_apply
                              expression (ast_quotation.ml[343,13536+64]..[343,13536+66])
                                Pexp_ident "@@" (ast_quotation.ml[343,13536+64]..[343,13536+66])
                              [
                                <label> ""
                                  expression (ast_quotation.ml[343,13536+14]..[343,13536+62])
                                    Pexp_apply
                                    expression (ast_quotation.ml[343,13536+14]..[343,13536+24])
                                      Pexp_ident "Locf.failf" (ast_quotation.ml[343,13536+14]..[343,13536+24])
                                    [
                                      <label> ""
                                        expression (ast_quotation.ml[343,13536+25]..[343,13536+30])
                                          Pexp_field
                                          expression (ast_quotation.ml[343,13536+25]..[343,13536+26])
                                            Pexp_ident "x" (ast_quotation.ml[343,13536+25]..[343,13536+26])
                                          "loc" (ast_quotation.ml[343,13536+27]..[343,13536+30])
                                      <label> ""
                                        expression (ast_quotation.ml[343,13536+31]..[343,13536+62])
                                          Pexp_constant Const_string("Unfound directive language %s",None)
                                    ]
                                <label> ""
                                  expression (ast_quotation.ml[344,13603+16]..[344,13603+44])
                                    Pexp_apply
                                    expression (ast_quotation.ml[344,13603+16]..[344,13603+37])
                                      Pexp_ident "Tokenf.string_of_name" (ast_quotation.ml[344,13603+16]..[344,13603+37])
                                    [
                                      <label> ""
                                        expression (ast_quotation.ml[344,13603+38]..[344,13603+44])
                                          Pexp_field
                                          expression (ast_quotation.ml[344,13603+38]..[344,13603+39])
                                            Pexp_ident "x" (ast_quotation.ml[344,13603+38]..[344,13603+39])
                                          "name" (ast_quotation.ml[344,13603+40]..[344,13603+44])
                                    ]
                              ]
                        ]
                  ]
                  expression (ast_quotation.ml[345,13652+7]..[345,13652+35])
                    Pexp_apply
                    expression (ast_quotation.ml[345,13652+7]..[345,13652+25])
                      Pexp_ident "Tokenf.quot_expand" (ast_quotation.ml[345,13652+7]..[345,13652+25])
                    [
                      <label> ""
                        expression (ast_quotation.ml[345,13652+26]..[345,13652+33])
                          Pexp_ident "handler" (ast_quotation.ml[345,13652+26]..[345,13652+33])
                      <label> ""
                        expression (ast_quotation.ml[345,13652+34]..[345,13652+35])
                          Pexp_ident "x" (ast_quotation.ml[345,13652+34]..[345,13652+35])
                    ]
                core_type (ast_quotation.ml[345,13652+38]..[345,13652+42])
                  Ptyp_constr "unit" (ast_quotation.ml[345,13652+38]..[345,13652+42])
                  []
          ]
    ]
  structure_item (ast_quotation.ml[346,13696+0]..[352,13857+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[346,13696+4]..[346,13696+12])
          Ppat_var "register" (ast_quotation.ml[346,13696+4]..[346,13696+12])
        expression (ast_quotation.ml[347,13711+2]..[352,13857+36])
          Pexp_function
          [
            <case>
              pattern (ast_quotation.ml[348,13722+4]..[348,13722+9])
                Ppat_tuple
                [
                  pattern (ast_quotation.ml[348,13722+5]..[348,13722+6])
                    Ppat_var "v" (ast_quotation.ml[348,13722+5]..[348,13722+6])
                  pattern (ast_quotation.ml[348,13722+7]..[348,13722+8])
                    Ppat_var "f" (ast_quotation.ml[348,13722+7]..[348,13722+8])
                ]
              expression (ast_quotation.ml[349,13735+6]..[352,13857+36])
                Pexp_ifthenelse
                expression (ast_quotation.ml[349,13735+9]..[349,13735+32])
                  Pexp_apply
                  expression (ast_quotation.ml[349,13735+9]..[349,13735+20])
                    Pexp_ident "Hashtbl.mem" (ast_quotation.ml[349,13735+9]..[349,13735+20])
                  [
                    <label> ""
                      expression (ast_quotation.ml[349,13735+21]..[349,13735+30])
                        Pexp_ident "dir_table" (ast_quotation.ml[349,13735+21]..[349,13735+30])
                    <label> ""
                      expression (ast_quotation.ml[349,13735+31]..[349,13735+32])
                        Pexp_ident "v" (ast_quotation.ml[349,13735+31]..[349,13735+32])
                  ]
                expression (ast_quotation.ml[351,13779+8]..[351,13779+77])
                  Pexp_apply
                  expression (ast_quotation.ml[351,13779+49]..[351,13779+51])
                    Pexp_ident "@@" (ast_quotation.ml[351,13779+49]..[351,13779+51])
                  [
                    <label> ""
                      expression (ast_quotation.ml[351,13779+9]..[351,13779+47])
                        Pexp_apply
                        expression (ast_quotation.ml[351,13779+9]..[351,13779+23])
                          Pexp_ident "Format.eprintf" (ast_quotation.ml[351,13779+9]..[351,13779+23])
                        [
                          <label> ""
                            expression (ast_quotation.ml[351,13779+24]..[351,13779+47])
                              Pexp_constant Const_string("%s already registered",None)
                        ]
                    <label> ""
                      expression (ast_quotation.ml[351,13779+53]..[351,13779+76])
                        Pexp_apply
                        expression (ast_quotation.ml[351,13779+53]..[351,13779+74])
                          Pexp_ident "Tokenf.string_of_name" (ast_quotation.ml[351,13779+53]..[351,13779+74])
                        [
                          <label> ""
                            expression (ast_quotation.ml[351,13779+75]..[351,13779+76])
                              Pexp_ident "v" (ast_quotation.ml[351,13779+75]..[351,13779+76])
                        ]
                  ]
                Some
                  expression (ast_quotation.ml[352,13857+11]..[352,13857+36])
                    Pexp_apply
                    expression (ast_quotation.ml[352,13857+11]..[352,13857+22])
                      Pexp_ident "Hashtbl.add" (ast_quotation.ml[352,13857+11]..[352,13857+22])
                    [
                      <label> ""
                        expression (ast_quotation.ml[352,13857+23]..[352,13857+32])
                          Pexp_ident "dir_table" (ast_quotation.ml[352,13857+23]..[352,13857+32])
                      <label> ""
                        expression (ast_quotation.ml[352,13857+33]..[352,13857+34])
                          Pexp_ident "v" (ast_quotation.ml[352,13857+33]..[352,13857+34])
                      <label> ""
                        expression (ast_quotation.ml[352,13857+35]..[352,13857+36])
                          Pexp_ident "f" (ast_quotation.ml[352,13857+35]..[352,13857+36])
                    ]
          ]
    ]
  structure_item (ast_quotation.ml[353,13894+0]..[356,13957+67])
    Pstr_value Nonrec
    [
      <def>
        pattern (ast_quotation.ml[353,13894+4]..[353,13894+24])
          Ppat_var "register_unit_parser" (ast_quotation.ml[353,13894+4]..[353,13894+24])
        expression (ast_quotation.ml[353,13894+25]..[356,13957+67])
          Pexp_fun "?lexer"
          None
          pattern (ast_quotation.ml[353,13894+26]..[353,13894+31])
            Ppat_var "lexer" (ast_quotation.ml[353,13894+26]..[353,13894+31])
          expression (ast_quotation.ml[354,13929+2]..[356,13957+67])
            Pexp_function
            [
              <case>
                pattern (ast_quotation.ml[355,13940+4]..[355,13940+13])
                  Ppat_tuple
                  [
                    pattern (ast_quotation.ml[355,13940+5]..[355,13940+6])
                      Ppat_var "v" (ast_quotation.ml[355,13940+5]..[355,13940+6])
                    pattern (ast_quotation.ml[355,13940+7]..[355,13940+12])
                      Ppat_var "entry" (ast_quotation.ml[355,13940+7]..[355,13940+12])
                  ]
                expression (ast_quotation.ml[356,13957+6]..[356,13957+67])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (ast_quotation.ml[356,13957+10]..[356,13957+16])
                        Ppat_var "expand" (ast_quotation.ml[356,13957+10]..[356,13957+16])
                      expression (ast_quotation.ml[356,13957+19]..[356,13957+43])
                        Pexp_apply
                        expression (ast_quotation.ml[356,13957+19]..[356,13957+30])
                          Pexp_ident "make_parser" (ast_quotation.ml[356,13957+19]..[356,13957+30])
                        [
                          <label> "?lexer"
                            expression (ast_quotation.ml[356,13957+31]..[356,13957+37])
                              Pexp_ident "lexer" (ast_quotation.ml[356,13957+31]..[356,13957+37])
                          <label> ""
                            expression (ast_quotation.ml[356,13957+38]..[356,13957+43])
                              Pexp_ident "entry" (ast_quotation.ml[356,13957+38]..[356,13957+43])
                        ]
                  ]
                  expression (ast_quotation.ml[356,13957+47]..[356,13957+67])
                    Pexp_apply
                    expression (ast_quotation.ml[356,13957+47]..[356,13957+55])
                      Pexp_ident "register" (ast_quotation.ml[356,13957+47]..[356,13957+55])
                    [
                      <label> ""
                        expression (ast_quotation.ml[356,13957+56]..[356,13957+67])
                          Pexp_tuple
                          [
                            expression (ast_quotation.ml[356,13957+57]..[356,13957+58])
                              Pexp_ident "v" (ast_quotation.ml[356,13957+57]..[356,13957+58])
                            expression (ast_quotation.ml[356,13957+60]..[356,13957+66])
                              Pexp_ident "expand" (ast_quotation.ml[356,13957+60]..[356,13957+66])
                          ]
                    ]
            ]
    ]
]
