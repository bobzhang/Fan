[
  structure_item (compile_stream.ml[]..[])
    Pstr_open Fresh "Astf" (compile_stream.ml[]..[])
  structure_item (compile_stream.ml[]..[])
    Pstr_open Fresh "Ast_gen" (compile_stream.ml[]..[])
  structure_item (compile_stream.ml[]..[])
    Pstr_type
    [
      type_declaration "spat_comp" (compile_stream.ml[]..[]) (compile_stream.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (compile_stream.ml[]..[])
                "When" (compile_stream.ml[]..[])
                [
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "loc" (compile_stream.ml[]..[])
                    []
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "pat" (compile_stream.ml[]..[])
                    []
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "option" (compile_stream.ml[]..[])
                    [
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "exp" (compile_stream.ml[]..[])
                        []
                    ]
                ]
                None
              (compile_stream.ml[]..[])
                "Match" (compile_stream.ml[]..[])
                [
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "loc" (compile_stream.ml[]..[])
                    []
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "pat" (compile_stream.ml[]..[])
                    []
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "exp" (compile_stream.ml[]..[])
                    []
                ]
                None
              (compile_stream.ml[]..[])
                "Str" (compile_stream.ml[]..[])
                [
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "loc" (compile_stream.ml[]..[])
                    []
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "pat" (compile_stream.ml[]..[])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_type
    [
      type_declaration "stream_pat" (compile_stream.ml[]..[]) (compile_stream.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (compile_stream.ml[]..[])
              Ptyp_tuple
              [
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "spat_comp" (compile_stream.ml[]..[])
                  []
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "option" (compile_stream.ml[]..[])
                  [
                    core_type (compile_stream.ml[]..[])
                      Ptyp_constr "exp" (compile_stream.ml[]..[])
                      []
                  ]
              ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_type
    [
      type_declaration "stream_pats" (compile_stream.ml[]..[]) (compile_stream.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (compile_stream.ml[]..[])
              Ptyp_constr "list" (compile_stream.ml[]..[])
              [
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "stream_pat" (compile_stream.ml[]..[])
                  []
              ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_type
    [
      type_declaration "stream_case" (compile_stream.ml[]..[]) (compile_stream.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (compile_stream.ml[]..[])
              Ptyp_tuple
              [
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "stream_pats" (compile_stream.ml[]..[])
                  []
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "option" (compile_stream.ml[]..[])
                  [
                    core_type (compile_stream.ml[]..[])
                      Ptyp_constr "pat" (compile_stream.ml[]..[])
                      []
                  ]
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "exp" (compile_stream.ml[]..[])
                  []
              ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_type
    [
      type_declaration "stream_cases" (compile_stream.ml[]..[]) (compile_stream.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (compile_stream.ml[]..[])
              Ptyp_constr "list" (compile_stream.ml[]..[])
              [
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "stream_case" (compile_stream.ml[]..[])
                  []
              ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "grammar_module_name" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_apply
          expression (compile_stream.ml[]..[])
            Pexp_ident "ref" (compile_stream.ml[]..[])
          [
            <label> ""
              expression (compile_stream.ml[]..[])
                Pexp_constant Const_string("Streamf",None)
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "gm" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_construct "()" (compile_stream.ml[]..[])
                None
              expression (compile_stream.ml[]..[])
                Pexp_apply
                expression (compile_stream.ml[]..[])
                  Pexp_ident "!" (compile_stream.ml[]..[])
                [
                  <label> ""
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "grammar_module_name" (compile_stream.ml[]..[])
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "strm_n" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_constant Const_string("__strm",None)
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "peek_fun" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[]) 
                Pexp_coerce
                expression (compile_stream.ml[]..[])
                  Pexp_variant "Dot"
                  Some
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "Uid"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "gm" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_construct "()" (compile_stream.ml[]..[])
                                        None
                                  ]
                              ]
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "Lid"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_constant Const_string("peek",None)
                              ]
                      ]
                None
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                  []
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "junk_fun" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[]) 
                Pexp_coerce
                expression (compile_stream.ml[]..[])
                  Pexp_variant "Dot"
                  Some
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "Uid"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "gm" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_construct "()" (compile_stream.ml[]..[])
                                        None
                                  ]
                              ]
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "Lid"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_constant Const_string("junk",None)
                              ]
                      ]
                None
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                  []
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "empty" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[]) 
                Pexp_coerce
                expression (compile_stream.ml[]..[])
                  Pexp_variant "Dot"
                  Some
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "Uid"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "gm" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_construct "()" (compile_stream.ml[]..[])
                                        None
                                  ]
                              ]
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "Lid"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_constant Const_string("sempty",None)
                              ]
                      ]
                None
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                  []
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "is_constr_apply" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "a" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_match
                expression (compile_stream.ml[]..[])
                  Pexp_ident "a" (compile_stream.ml[]..[])
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "Uid"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_any
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_construct "true" (compile_stream.ml[]..[])
                      None
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "App"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "x" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_any
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_apply
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "is_constr_apply" (compile_stream.ml[]..[])
                      [
                        <label> ""
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "x" (compile_stream.ml[]..[])
                      ]
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "Lid"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_any
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_construct "false" (compile_stream.ml[]..[])
                      None
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_any
                    expression (compile_stream.ml[]..[])
                      Pexp_construct "false" (compile_stream.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "handle_failure" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "e" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_match
                expression (compile_stream.ml[]..[])
                  Pexp_ident "e" (compile_stream.ml[]..[])
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "Try"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_any
                              pattern (compile_stream.ml[]..[])
                                Ppat_variant "Case"
                                Some
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_any
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_variant "Dot"
                                        Some
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_any
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_variant "Uid"
                                                Some
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_tuple
                                                    [
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_any
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_var "m" (compile_stream.ml[]..[])
                                                    ]
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_variant "Uid"
                                                Some
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_tuple
                                                    [
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_any
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_constant Const_string("NotConsumed",None)
                                                    ]
                                            ]
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_var "e" (compile_stream.ml[]..[])
                                    ]
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    <when>
                      expression (compile_stream.ml[]..[])
                        Pexp_apply
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "=" (compile_stream.ml[]..[])
                        [
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "m" (compile_stream.ml[]..[])
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_apply
                              expression (compile_stream.ml[]..[])
                                Pexp_ident "gm" (compile_stream.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_stream.ml[]..[])
                                    Pexp_construct "()" (compile_stream.ml[]..[])
                                    None
                              ]
                        ]
                    expression (compile_stream.ml[]..[])
                      Pexp_apply
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                      [
                        <label> ""
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "e" (compile_stream.ml[]..[])
                      ]
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "Match"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "me" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "a" (compile_stream.ml[]..[])
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_let Rec
                      [
                        <def>
                          pattern (compile_stream.ml[]..[])
                            Ppat_var "case_handle_failure" (compile_stream.ml[]..[])
                          expression (compile_stream.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_variant "Bar"
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "a1" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "a2" (compile_stream.ml[]..[])
                                        ]
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.case" (compile_stream.ml[]..[])
                                    []
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "&&" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_apply
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "case_handle_failure" (compile_stream.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "a1" (compile_stream.ml[]..[])
                                        ]
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_apply
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "case_handle_failure" (compile_stream.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "a2" (compile_stream.ml[]..[])
                                        ]
                                  ]
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_variant "Case"
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_any
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "e" (compile_stream.ml[]..[])
                                        ]
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.case" (compile_stream.ml[]..[])
                                    []
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "e" (compile_stream.ml[]..[])
                                  ]
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_any
                                expression (compile_stream.ml[]..[])
                                  Pexp_construct "false" (compile_stream.ml[]..[])
                                  None
                            ]
                      ]
                      expression (compile_stream.ml[]..[])
                        Pexp_apply
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "&&" (compile_stream.ml[]..[])
                        [
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_apply
                              expression (compile_stream.ml[]..[])
                                Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "me" (compile_stream.ml[]..[])
                              ]
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_apply
                              expression (compile_stream.ml[]..[])
                                Pexp_ident "case_handle_failure" (compile_stream.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "a" (compile_stream.ml[]..[])
                              ]
                        ]
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "LetIn"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_variant "Negative"
                                Some
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_any
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "bi" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "e" (compile_stream.ml[]..[])
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_let Rec
                      [
                        <def>
                          pattern (compile_stream.ml[]..[])
                            Ppat_var "bind_handle_failure" (compile_stream.ml[]..[])
                          expression (compile_stream.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_variant "And"
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "b1" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "b2" (compile_stream.ml[]..[])
                                        ]
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
                                    []
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "&&" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_apply
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "bind_handle_failure" (compile_stream.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "b1" (compile_stream.ml[]..[])
                                        ]
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_apply
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "bind_handle_failure" (compile_stream.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "b2" (compile_stream.ml[]..[])
                                        ]
                                  ]
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_variant "Bind"
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_any
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "e" (compile_stream.ml[]..[])
                                        ]
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
                                    []
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "e" (compile_stream.ml[]..[])
                                  ]
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_any
                                expression (compile_stream.ml[]..[])
                                  Pexp_construct "false" (compile_stream.ml[]..[])
                                  None
                            ]
                      ]
                      expression (compile_stream.ml[]..[])
                        Pexp_apply
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "&&" (compile_stream.ml[]..[])
                        [
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_apply
                              expression (compile_stream.ml[]..[])
                                Pexp_ident "bind_handle_failure" (compile_stream.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "bi" (compile_stream.ml[]..[])
                              ]
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_apply
                              expression (compile_stream.ml[]..[])
                                Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "e" (compile_stream.ml[]..[])
                              ]
                        ]
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_or
                      pattern (compile_stream.ml[]..[])
                        Ppat_type
                        "literal" (compile_stream.ml[]..[])
                      pattern (compile_stream.ml[]..[])
                        Ppat_type
                        "vid'" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_construct "true" (compile_stream.ml[]..[])
                      None
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "Fun"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_any
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_construct "true" (compile_stream.ml[]..[])
                      None
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "App"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_variant "Lid"
                                Some
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_any
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_constant Const_string("raise",None)
                                    ]
                              pattern (compile_stream.ml[]..[])
                                Ppat_variant "Dot"
                                Some
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_any
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_variant "Uid"
                                        Some
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_any
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_var "m" (compile_stream.ml[]..[])
                                            ]
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_variant "Uid"
                                        Some
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_any
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_constant Const_string("NotConsumed",None)
                                            ]
                                    ]
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_apply
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "<>" (compile_stream.ml[]..[])
                      [
                        <label> ""
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "m" (compile_stream.ml[]..[])
                        <label> ""
                          expression (compile_stream.ml[]..[])
                            Pexp_apply
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "gm" (compile_stream.ml[]..[])
                            [
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_construct "()" (compile_stream.ml[]..[])
                                  None
                            ]
                      ]
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "App"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_variant "Lid"
                                Some
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_any
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_constant Const_string("raise",None)
                                    ]
                              pattern (compile_stream.ml[]..[])
                                Ppat_any
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_construct "true" (compile_stream.ml[]..[])
                      None
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_variant "App"
                        Some
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "_loc" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "f" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "x" (compile_stream.ml[]..[])
                            ]
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_apply
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "&&" (compile_stream.ml[]..[])
                      [
                        <label> ""
                          expression (compile_stream.ml[]..[])
                            Pexp_apply
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "is_constr_apply" (compile_stream.ml[]..[])
                            [
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "f" (compile_stream.ml[]..[])
                            ]
                        <label> ""
                          expression (compile_stream.ml[]..[])
                            Pexp_apply
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "&&" (compile_stream.ml[]..[])
                            [
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "f" (compile_stream.ml[]..[])
                                  ]
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "x" (compile_stream.ml[]..[])
                                  ]
                            ]
                      ]
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_any
                    expression (compile_stream.ml[]..[])
                      Pexp_construct "false" (compile_stream.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "stream_pattern_component" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_constraint
                pattern (compile_stream.ml[]..[])
                  Ppat_var "skont" (compile_stream.ml[]..[])
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "exp" (compile_stream.ml[]..[])
                  []
              expression (compile_stream.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_var "ckont" (compile_stream.ml[]..[])
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "exp" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_constraint
                            pattern (compile_stream.ml[]..[])
                              Ppat_var "x" (compile_stream.ml[]..[])
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "spat_comp" (compile_stream.ml[]..[])
                              []
                          expression (compile_stream.ml[]..[]) 
                            Pexp_constraint
                            expression (compile_stream.ml[]..[])
                              Pexp_match
                              expression (compile_stream.ml[]..[]) 
                                Pexp_constraint
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "x" (compile_stream.ml[]..[])
                                core_type (compile_stream.ml[]..[])
                                  Ptyp_constr "spat_comp" (compile_stream.ml[]..[])
                                  []
                              [
                                <case>
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_construct "When" (compile_stream.ml[]..[])
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "p" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_construct "None" (compile_stream.ml[]..[])
                                            None
                                        ]
                                  expression (compile_stream.ml[]..[]) 
                                    Pexp_coerce
                                    expression (compile_stream.ml[]..[])
                                      Pexp_variant "Match"
                                      Some
                                        expression (compile_stream.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                            expression (compile_stream.ml[]..[])
                                              Pexp_variant "App"
                                              Some
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "peek_fun" (compile_stream.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                        ]
                                                      None
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                        []
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                                          ]
                                                  ]
                                            expression (compile_stream.ml[]..[])
                                              Pexp_variant "Bar"
                                              Some
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_variant "Case"
                                                      Some
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_variant "App"
                                                              Some
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_variant "Uid"
                                                                      Some
expression (compile_stream.ml[]..[])
  Pexp_tuple
  [
    expression (compile_stream.ml[]..[])
      Pexp_ident "_loc" (compile_stream.ml[]..[])
    expression (compile_stream.ml[]..[])
      Pexp_constant Const_string("Some",None)
  ]
                                                                    expression (compile_stream.ml[]..[]) 
                                                                      Pexp_coerce
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "p" (compile_stream.ml[]..[])
                                                                      None
                                                                      core_type (compile_stream.ml[]..[])
Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
[]
                                                                  ]
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_variant "Seq"
                                                              Some
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_variant "Sem"
                                                                      Some
expression (compile_stream.ml[]..[])
  Pexp_tuple
  [
    expression (compile_stream.ml[]..[])
      Pexp_ident "_loc" (compile_stream.ml[]..[])
    expression (compile_stream.ml[]..[])
      Pexp_variant "App"
      Some
        expression (compile_stream.ml[]..[])
          Pexp_tuple
          [
            expression (compile_stream.ml[]..[])
              Pexp_ident "_loc" (compile_stream.ml[]..[])
            expression (compile_stream.ml[]..[]) 
              Pexp_coerce
              expression (compile_stream.ml[]..[])
                Pexp_apply
                expression (compile_stream.ml[]..[])
                  Pexp_ident "junk_fun" (compile_stream.ml[]..[])
                [
                  <label> ""
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                ]
              None
              core_type (compile_stream.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                []
            expression (compile_stream.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_stream.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "strm_n" (compile_stream.ml[]..[])
                  ]
          ]
    expression (compile_stream.ml[]..[]) 
      Pexp_coerce
      expression (compile_stream.ml[]..[])
        Pexp_ident "skont" (compile_stream.ml[]..[])
      None
      core_type (compile_stream.ml[]..[])
        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
        []
  ]
                                                                  ]
                                                          ]
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_variant "Case"
                                                      Some
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_variant "Any"
                                                              Some
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "ckont" (compile_stream.ml[]..[])
                                                              None
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                          ]
                                                  ]
                                          ]
                                    None
                                    core_type (compile_stream.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                      []
                                <case>
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_construct "When" (compile_stream.ml[]..[])
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "p" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_construct "Some" (compile_stream.ml[]..[])
                                            Some
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_var "w" (compile_stream.ml[]..[])
                                        ]
                                  expression (compile_stream.ml[]..[]) 
                                    Pexp_coerce
                                    expression (compile_stream.ml[]..[])
                                      Pexp_variant "Match"
                                      Some
                                        expression (compile_stream.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                            expression (compile_stream.ml[]..[])
                                              Pexp_variant "App"
                                              Some
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "peek_fun" (compile_stream.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                        ]
                                                      None
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                        []
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                                          ]
                                                  ]
                                            expression (compile_stream.ml[]..[])
                                              Pexp_variant "Bar"
                                              Some
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_variant "CaseWhen"
                                                      Some
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_variant "App"
                                                              Some
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_variant "Uid"
                                                                      Some
expression (compile_stream.ml[]..[])
  Pexp_tuple
  [
    expression (compile_stream.ml[]..[])
      Pexp_ident "_loc" (compile_stream.ml[]..[])
    expression (compile_stream.ml[]..[])
      Pexp_constant Const_string("Some",None)
  ]
                                                                    expression (compile_stream.ml[]..[]) 
                                                                      Pexp_coerce
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "p" (compile_stream.ml[]..[])
                                                                      None
                                                                      core_type (compile_stream.ml[]..[])
Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
[]
                                                                  ]
                                                            expression (compile_stream.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "w" (compile_stream.ml[]..[])
                                                              None
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_variant "Seq"
                                                              Some
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_variant "Sem"
                                                                      Some
expression (compile_stream.ml[]..[])
  Pexp_tuple
  [
    expression (compile_stream.ml[]..[])
      Pexp_ident "_loc" (compile_stream.ml[]..[])
    expression (compile_stream.ml[]..[])
      Pexp_variant "App"
      Some
        expression (compile_stream.ml[]..[])
          Pexp_tuple
          [
            expression (compile_stream.ml[]..[])
              Pexp_ident "_loc" (compile_stream.ml[]..[])
            expression (compile_stream.ml[]..[]) 
              Pexp_coerce
              expression (compile_stream.ml[]..[])
                Pexp_apply
                expression (compile_stream.ml[]..[])
                  Pexp_ident "junk_fun" (compile_stream.ml[]..[])
                [
                  <label> ""
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                ]
              None
              core_type (compile_stream.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                []
            expression (compile_stream.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_stream.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "strm_n" (compile_stream.ml[]..[])
                  ]
          ]
    expression (compile_stream.ml[]..[]) 
      Pexp_coerce
      expression (compile_stream.ml[]..[])
        Pexp_ident "skont" (compile_stream.ml[]..[])
      None
      core_type (compile_stream.ml[]..[])
        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
        []
  ]
                                                                  ]
                                                          ]
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_variant "Case"
                                                      Some
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_variant "Any"
                                                              Some
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "ckont" (compile_stream.ml[]..[])
                                                              None
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                          ]
                                                  ]
                                          ]
                                    None
                                    core_type (compile_stream.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                      []
                                <case>
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_construct "Match" (compile_stream.ml[]..[])
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "p" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "e" (compile_stream.ml[]..[])
                                        ]
                                  expression (compile_stream.ml[]..[])
                                    Pexp_let Rec
                                    [
                                      <def>
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_var "pat_eq_exp" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_var "p" (compile_stream.ml[]..[])
                                              expression (compile_stream.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_var "e" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_match
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "p" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "e" (compile_stream.ml[]..[])
                                                        ]
                                                      [
                                                        <case>
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_or
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_tuple
                                                              [
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_constraint
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_variant "Lid"
                                                                    Some
                                                                      pattern (compile_stream.ml[]..[])
Ppat_tuple
[
  pattern (compile_stream.ml[]..[])
    Ppat_var "_loc" (compile_stream.ml[]..[])
  pattern (compile_stream.ml[]..[])
    Ppat_var "a" (compile_stream.ml[]..[])
]
                                                                  core_type (compile_stream.ml[]..[])
                                                                    Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                                    []
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_constraint
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_variant "Lid"
                                                                    Some
                                                                      pattern (compile_stream.ml[]..[])
Ppat_tuple
[
  pattern (compile_stream.ml[]..[])
    Ppat_any
  pattern (compile_stream.ml[]..[])
    Ppat_var "b" (compile_stream.ml[]..[])
]
                                                                  core_type (compile_stream.ml[]..[])
                                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                    []
                                                              ]
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_tuple
                                                              [
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_constraint
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_variant "Uid"
                                                                    Some
                                                                      pattern (compile_stream.ml[]..[])
Ppat_tuple
[
  pattern (compile_stream.ml[]..[])
    Ppat_var "_loc" (compile_stream.ml[]..[])
  pattern (compile_stream.ml[]..[])
    Ppat_var "a" (compile_stream.ml[]..[])
]
                                                                  core_type (compile_stream.ml[]..[])
                                                                    Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                                    []
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_constraint
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_variant "Uid"
                                                                    Some
                                                                      pattern (compile_stream.ml[]..[])
Ppat_tuple
[
  pattern (compile_stream.ml[]..[])
    Ppat_any
  pattern (compile_stream.ml[]..[])
    Ppat_var "b" (compile_stream.ml[]..[])
]
                                                                  core_type (compile_stream.ml[]..[])
                                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                    []
                                                              ]
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "=" (compile_stream.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "a" (compile_stream.ml[]..[])
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "b" (compile_stream.ml[]..[])
                                                            ]
                                                        <case>
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_constraint
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_variant "App"
                                                                  Some
                                                                    pattern (compile_stream.ml[]..[])
                                                                      Ppat_tuple
                                                                      [
pattern (compile_stream.ml[]..[])
  Ppat_var "_loc" (compile_stream.ml[]..[])
pattern (compile_stream.ml[]..[])
  Ppat_var "p1" (compile_stream.ml[]..[])
pattern (compile_stream.ml[]..[])
  Ppat_var "p2" (compile_stream.ml[]..[])
                                                                      ]
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                                  []
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_constraint
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_variant "App"
                                                                  Some
                                                                    pattern (compile_stream.ml[]..[])
                                                                      Ppat_tuple
                                                                      [
pattern (compile_stream.ml[]..[])
  Ppat_any
pattern (compile_stream.ml[]..[])
  Ppat_var "e1" (compile_stream.ml[]..[])
pattern (compile_stream.ml[]..[])
  Ppat_var "e2" (compile_stream.ml[]..[])
                                                                      ]
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                  []
                                                            ]
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "&&" (compile_stream.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "pat_eq_exp" (compile_stream.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "p1" (compile_stream.ml[]..[])
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "e1" (compile_stream.ml[]..[])
                                                                  ]
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "pat_eq_exp" (compile_stream.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "p2" (compile_stream.ml[]..[])
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "e2" (compile_stream.ml[]..[])
                                                                  ]
                                                            ]
                                                        <case>
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_any
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_construct "false" (compile_stream.ml[]..[])
                                                            None
                                                      ]
                                                ]
                                          ]
                                    ]
                                    expression (compile_stream.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "e" (compile_stream.ml[]..[])
                                          expression (compile_stream.ml[]..[])
                                            Pexp_match
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "e" (compile_stream.ml[]..[])
                                            [
                                              <case>
                                                pattern (compile_stream.ml[]..[])
                                                  Ppat_constraint
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_variant "Fun"
                                                    Some
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_variant "Case"
                                                            Some
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_any
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_variant "Constraint"
                                                                    Some
                                                                      pattern (compile_stream.ml[]..[])
Ppat_tuple
[
  pattern (compile_stream.ml[]..[])
    Ppat_any
  pattern (compile_stream.ml[]..[])
    Ppat_variant "Lid"
    Some
      pattern (compile_stream.ml[]..[])
        Ppat_tuple
        [
          pattern (compile_stream.ml[]..[])
            Ppat_any
          pattern (compile_stream.ml[]..[])
            Ppat_var "v" (compile_stream.ml[]..[])
        ]
  pattern (compile_stream.ml[]..[])
    Ppat_variant "App"
    Some
      pattern (compile_stream.ml[]..[])
        Ppat_tuple
        [
          pattern (compile_stream.ml[]..[])
            Ppat_any
          pattern (compile_stream.ml[]..[])
            Ppat_variant "Dot"
            Some
              pattern (compile_stream.ml[]..[])
                Ppat_tuple
                [
                  pattern (compile_stream.ml[]..[])
                    Ppat_any
                  pattern (compile_stream.ml[]..[])
                    Ppat_variant "Uid"
                    Some
                      pattern (compile_stream.ml[]..[])
                        Ppat_tuple
                        [
                          pattern (compile_stream.ml[]..[])
                            Ppat_any
                          pattern (compile_stream.ml[]..[])
                            Ppat_var "m" (compile_stream.ml[]..[])
                        ]
                  pattern (compile_stream.ml[]..[])
                    Ppat_variant "Lid"
                    Some
                      pattern (compile_stream.ml[]..[])
                        Ppat_tuple
                        [
                          pattern (compile_stream.ml[]..[])
                            Ppat_any
                          pattern (compile_stream.ml[]..[])
                            Ppat_constant Const_string("t",None)
                        ]
                ]
          pattern (compile_stream.ml[]..[])
            Ppat_variant "Any"
            Some
              pattern (compile_stream.ml[]..[])
                Ppat_any
        ]
]
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_var "e" (compile_stream.ml[]..[])
                                                                ]
                                                        ]
                                                  core_type (compile_stream.ml[]..[])
                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                    []
                                                <when>
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "&&" (compile_stream.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "=" (compile_stream.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "v" (compile_stream.ml[]..[])
                                                            <label> ""
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                                          ]
                                                      <label> ""
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "=" (compile_stream.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "m" (compile_stream.ml[]..[])
                                                            <label> ""
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_apply
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "gm" (compile_stream.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_construct "()" (compile_stream.ml[]..[])
                                                                      None
                                                                ]
                                                          ]
                                                    ]
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_ident "e" (compile_stream.ml[]..[])
                                              <case>
                                                pattern (compile_stream.ml[]..[])
                                                  Ppat_any
                                                expression (compile_stream.ml[]..[]) 
                                                  Pexp_coerce
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_variant "App"
                                                    Some
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[]) 
                                                            Pexp_coerce
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "e" (compile_stream.ml[]..[])
                                                            None
                                                            core_type (compile_stream.ml[]..[])
                                                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                              []
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_variant "Lid"
                                                            Some
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                                                ]
                                                        ]
                                                  None
                                                  core_type (compile_stream.ml[]..[])
                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                    []
                                            ]
                                      ]
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ifthenelse
                                        expression (compile_stream.ml[]..[])
                                          Pexp_apply
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "pat_eq_exp" (compile_stream.ml[]..[])
                                          [
                                            <label> ""
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "p" (compile_stream.ml[]..[])
                                            <label> ""
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "skont" (compile_stream.ml[]..[])
                                          ]
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ifthenelse
                                          expression (compile_stream.ml[]..[])
                                            Pexp_apply
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "||" (compile_stream.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_function
                                                    [
                                                      <case>
                                                        pattern (compile_stream.ml[]..[])
                                                          Ppat_constraint
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_variant "App"
                                                            Some
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_var "_loc" (compile_stream.ml[]..[])
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_variant "Lid"
                                                                    Some
                                                                      pattern (compile_stream.ml[]..[])
Ppat_tuple
[
  pattern (compile_stream.ml[]..[])
    Ppat_any
  pattern (compile_stream.ml[]..[])
    Ppat_constant Const_string("raise",None)
]
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_variant "Dot"
                                                                    Some
                                                                      pattern (compile_stream.ml[]..[])
Ppat_tuple
[
  pattern (compile_stream.ml[]..[])
    Ppat_any
  pattern (compile_stream.ml[]..[])
    Ppat_variant "Uid"
    Some
      pattern (compile_stream.ml[]..[])
        Ppat_tuple
        [
          pattern (compile_stream.ml[]..[])
            Ppat_any
          pattern (compile_stream.ml[]..[])
            Ppat_var "m" (compile_stream.ml[]..[])
        ]
  pattern (compile_stream.ml[]..[])
    Ppat_variant "Uid"
    Some
      pattern (compile_stream.ml[]..[])
        Ppat_tuple
        [
          pattern (compile_stream.ml[]..[])
            Ppat_any
          pattern (compile_stream.ml[]..[])
            Ppat_constant Const_string("NotConsumed",None)
        ]
]
                                                                ]
                                                          core_type (compile_stream.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                            []
                                                        <when>
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "=" (compile_stream.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "m" (compile_stream.ml[]..[])
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "gm" (compile_stream.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_construct "()" (compile_stream.ml[]..[])
None
                                                                  ]
                                                            ]
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_construct "true" (compile_stream.ml[]..[])
                                                          None
                                                      <case>
                                                        pattern (compile_stream.ml[]..[])
                                                          Ppat_any
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_construct "false" (compile_stream.ml[]..[])
                                                          None
                                                    ]
                                                  [
                                                    <label> ""
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "ckont" (compile_stream.ml[]..[])
                                                  ]
                                              <label> ""
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "e" (compile_stream.ml[]..[])
                                                  ]
                                            ]
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "e" (compile_stream.ml[]..[])
                                          Some
                                            expression (compile_stream.ml[]..[]) 
                                              Pexp_coerce
                                              expression (compile_stream.ml[]..[])
                                                Pexp_variant "Try"
                                                Some
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                      expression (compile_stream.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "e" (compile_stream.ml[]..[])
                                                        None
                                                        core_type (compile_stream.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                          []
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_variant "Case"
                                                        Some
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_variant "Dot"
                                                                Some
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                      expression (compile_stream.ml[]..[])
Pexp_variant "Uid"
Some
  expression (compile_stream.ml[]..[])
    Pexp_tuple
    [
      expression (compile_stream.ml[]..[])
        Pexp_ident "_loc" (compile_stream.ml[]..[])
      expression (compile_stream.ml[]..[])
        Pexp_apply
        expression (compile_stream.ml[]..[])
          Pexp_ident "gm" (compile_stream.ml[]..[])
        [
          <label> ""
            expression (compile_stream.ml[]..[])
              Pexp_construct "()" (compile_stream.ml[]..[])
              None
        ]
    ]
                                                                      expression (compile_stream.ml[]..[])
Pexp_variant "Uid"
Some
  expression (compile_stream.ml[]..[])
    Pexp_tuple
    [
      expression (compile_stream.ml[]..[])
        Pexp_ident "_loc" (compile_stream.ml[]..[])
      expression (compile_stream.ml[]..[])
        Pexp_constant Const_string("NotConsumed",None)
    ]
                                                                    ]
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "ckont" (compile_stream.ml[]..[])
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                  []
                                                            ]
                                                    ]
                                              None
                                              core_type (compile_stream.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                []
                                        Some
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ifthenelse
                                            expression (compile_stream.ml[]..[])
                                              Pexp_apply
                                              expression (compile_stream.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_constraint
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_variant "App"
                                                        Some
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_var "_loc" (compile_stream.ml[]..[])
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "Lid"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_any
                                                                      pattern (compile_stream.ml[]..[])
Ppat_constant Const_string("raise",None)
                                                                    ]
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "Dot"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_any
                                                                      pattern (compile_stream.ml[]..[])
Ppat_variant "Uid"
Some
  pattern (compile_stream.ml[]..[])
    Ppat_tuple
    [
      pattern (compile_stream.ml[]..[])
        Ppat_any
      pattern (compile_stream.ml[]..[])
        Ppat_var "m" (compile_stream.ml[]..[])
    ]
                                                                      pattern (compile_stream.ml[]..[])
Ppat_variant "Uid"
Some
  pattern (compile_stream.ml[]..[])
    Ppat_tuple
    [
      pattern (compile_stream.ml[]..[])
        Ppat_any
      pattern (compile_stream.ml[]..[])
        Ppat_constant Const_string("NotConsumed",None)
    ]
                                                                    ]
                                                            ]
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                        []
                                                    <when>
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "=" (compile_stream.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "m" (compile_stream.ml[]..[])
                                                          <label> ""
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "gm" (compile_stream.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_construct "()" (compile_stream.ml[]..[])
                                                                    None
                                                              ]
                                                        ]
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_construct "true" (compile_stream.ml[]..[])
                                                      None
                                                  <case>
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_any
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_construct "false" (compile_stream.ml[]..[])
                                                      None
                                                ]
                                              [
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "ckont" (compile_stream.ml[]..[])
                                              ]
                                            expression (compile_stream.ml[]..[]) 
                                              Pexp_coerce
                                              expression (compile_stream.ml[]..[])
                                                Pexp_variant "LetIn"
                                                Some
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_variant "Negative"
                                                        Some
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_variant "Bind"
                                                        Some
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "p" (compile_stream.ml[]..[])
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                                  []
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "e" (compile_stream.ml[]..[])
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                  []
                                                            ]
                                                      expression (compile_stream.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "skont" (compile_stream.ml[]..[])
                                                        None
                                                        core_type (compile_stream.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                          []
                                                    ]
                                              None
                                              core_type (compile_stream.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                []
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ifthenelse
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "pat_eq_exp" (compile_stream.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (compile_stream.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_variant "App"
                                                          Some
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Uid"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_constant Const_string("Some",None)
                                                                      ]
                                                                expression (compile_stream.ml[]..[]) 
                                                                  Pexp_coerce
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "p" (compile_stream.ml[]..[])
                                                                  None
                                                                  core_type (compile_stream.ml[]..[])
                                                                    Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                                    []
                                                              ]
                                                        None
                                                        core_type (compile_stream.ml[]..[])
                                                          Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                          []
                                                    <label> ""
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "skont" (compile_stream.ml[]..[])
                                                  ]
                                                expression (compile_stream.ml[]..[]) 
                                                  Pexp_coerce
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_variant "Try"
                                                    Some
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_variant "Uid"
                                                                    Some
                                                                      expression (compile_stream.ml[]..[])
Pexp_tuple
[
  expression (compile_stream.ml[]..[])
    Pexp_ident "_loc" (compile_stream.ml[]..[])
  expression (compile_stream.ml[]..[])
    Pexp_constant Const_string("Some",None)
]
                                                                  expression (compile_stream.ml[]..[]) 
                                                                    Pexp_coerce
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "e" (compile_stream.ml[]..[])
                                                                    None
                                                                    core_type (compile_stream.ml[]..[])
                                                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                      []
                                                                ]
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_variant "Case"
                                                            Some
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_variant "Dot"
                                                                    Some
                                                                      expression (compile_stream.ml[]..[])
Pexp_tuple
[
  expression (compile_stream.ml[]..[])
    Pexp_ident "_loc" (compile_stream.ml[]..[])
  expression (compile_stream.ml[]..[])
    Pexp_variant "Uid"
    Some
      expression (compile_stream.ml[]..[])
        Pexp_tuple
        [
          expression (compile_stream.ml[]..[])
            Pexp_ident "_loc" (compile_stream.ml[]..[])
          expression (compile_stream.ml[]..[])
            Pexp_apply
            expression (compile_stream.ml[]..[])
              Pexp_ident "gm" (compile_stream.ml[]..[])
            [
              <label> ""
                expression (compile_stream.ml[]..[])
                  Pexp_construct "()" (compile_stream.ml[]..[])
                  None
            ]
        ]
  expression (compile_stream.ml[]..[])
    Pexp_variant "Uid"
    Some
      expression (compile_stream.ml[]..[])
        Pexp_tuple
        [
          expression (compile_stream.ml[]..[])
            Pexp_ident "_loc" (compile_stream.ml[]..[])
          expression (compile_stream.ml[]..[])
            Pexp_constant Const_string("NotConsumed",None)
        ]
]
                                                                  expression (compile_stream.ml[]..[]) 
                                                                    Pexp_coerce
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "ckont" (compile_stream.ml[]..[])
                                                                    None
                                                                    core_type (compile_stream.ml[]..[])
                                                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                      []
                                                                ]
                                                        ]
                                                  None
                                                  core_type (compile_stream.ml[]..[])
                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                    []
                                                Some
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ifthenelse
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_function
                                                        [
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_constraint
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "App"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "_loc" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_variant "Lid"
Some
  pattern (compile_stream.ml[]..[])
    Ppat_tuple
    [
      pattern (compile_stream.ml[]..[])
        Ppat_any
      pattern (compile_stream.ml[]..[])
        Ppat_constant Const_string("raise",None)
    ]
                                                                      pattern (compile_stream.ml[]..[])
Ppat_any
                                                                    ]
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_construct "true" (compile_stream.ml[]..[])
                                                              None
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_any
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_construct "false" (compile_stream.ml[]..[])
                                                              None
                                                        ]
                                                      [
                                                        <label> ""
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "ckont" (compile_stream.ml[]..[])
                                                      ]
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_var "tst" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ifthenelse
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "handle_failure" (compile_stream.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "e" (compile_stream.ml[]..[])
                                                              ]
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "e" (compile_stream.ml[]..[])
                                                            Some
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Try"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[]) 
  Pexp_coerce
  expression (compile_stream.ml[]..[])
    Pexp_ident "e" (compile_stream.ml[]..[])
  None
  core_type (compile_stream.ml[]..[])
    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
    []
expression (compile_stream.ml[]..[])
  Pexp_variant "Case"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_variant "Dot"
          Some
            expression (compile_stream.ml[]..[])
              Pexp_tuple
              [
                expression (compile_stream.ml[]..[])
                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                expression (compile_stream.ml[]..[])
                  Pexp_variant "Uid"
                  Some
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                        expression (compile_stream.ml[]..[])
                          Pexp_apply
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "gm" (compile_stream.ml[]..[])
                          [
                            <label> ""
                              expression (compile_stream.ml[]..[])
                                Pexp_construct "()" (compile_stream.ml[]..[])
                                None
                          ]
                      ]
                expression (compile_stream.ml[]..[])
                  Pexp_variant "Uid"
                  Some
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                        expression (compile_stream.ml[]..[])
                          Pexp_constant Const_string("NotConsumed",None)
                      ]
              ]
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "ckont" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
            []
      ]
                                                                      ]
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                  []
                                                      ]
                                                      expression (compile_stream.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_variant "LetIn"
                                                          Some
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Negative"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Bind"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[]) 
  Pexp_coerce
  expression (compile_stream.ml[]..[])
    Pexp_ident "p" (compile_stream.ml[]..[])
  None
  core_type (compile_stream.ml[]..[])
    Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
    []
expression (compile_stream.ml[]..[]) 
  Pexp_coerce
  expression (compile_stream.ml[]..[])
    Pexp_ident "tst" (compile_stream.ml[]..[])
  None
  core_type (compile_stream.ml[]..[])
    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
    []
                                                                      ]
                                                                expression (compile_stream.ml[]..[]) 
                                                                  Pexp_coerce
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "skont" (compile_stream.ml[]..[])
                                                                  None
                                                                  core_type (compile_stream.ml[]..[])
                                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                    []
                                                              ]
                                                        None
                                                        core_type (compile_stream.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                          []
                                                    Some
                                                      expression (compile_stream.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_variant "Match"
                                                          Some
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Try"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_variant "App"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_variant "Uid"
          Some
            expression (compile_stream.ml[]..[])
              Pexp_tuple
              [
                expression (compile_stream.ml[]..[])
                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                expression (compile_stream.ml[]..[])
                  Pexp_constant Const_string("Some",None)
              ]
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "e" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
            []
      ]
expression (compile_stream.ml[]..[])
  Pexp_variant "Case"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_variant "Dot"
          Some
            expression (compile_stream.ml[]..[])
              Pexp_tuple
              [
                expression (compile_stream.ml[]..[])
                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                expression (compile_stream.ml[]..[])
                  Pexp_variant "Uid"
                  Some
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                        expression (compile_stream.ml[]..[])
                          Pexp_apply
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "gm" (compile_stream.ml[]..[])
                          [
                            <label> ""
                              expression (compile_stream.ml[]..[])
                                Pexp_construct "()" (compile_stream.ml[]..[])
                                None
                          ]
                      ]
                expression (compile_stream.ml[]..[])
                  Pexp_variant "Uid"
                  Some
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                        expression (compile_stream.ml[]..[])
                          Pexp_constant Const_string("NotConsumed",None)
                      ]
              ]
        expression (compile_stream.ml[]..[])
          Pexp_variant "Uid"
          Some
            expression (compile_stream.ml[]..[])
              Pexp_tuple
              [
                expression (compile_stream.ml[]..[])
                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                expression (compile_stream.ml[]..[])
                  Pexp_constant Const_string("None",None)
              ]
      ]
                                                                      ]
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Bar"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_variant "Case"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_variant "App"
          Some
            expression (compile_stream.ml[]..[])
              Pexp_tuple
              [
                expression (compile_stream.ml[]..[])
                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                expression (compile_stream.ml[]..[])
                  Pexp_variant "Uid"
                  Some
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                        expression (compile_stream.ml[]..[])
                          Pexp_constant Const_string("Some",None)
                      ]
                expression (compile_stream.ml[]..[]) 
                  Pexp_coerce
                  expression (compile_stream.ml[]..[])
                    Pexp_ident "p" (compile_stream.ml[]..[])
                  None
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                    []
              ]
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "skont" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
            []
      ]
expression (compile_stream.ml[]..[])
  Pexp_variant "Case"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_variant "Any"
          Some
            expression (compile_stream.ml[]..[])
              Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "ckont" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
            []
      ]
                                                                      ]
                                                              ]
                                                        None
                                                        core_type (compile_stream.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                          []
                                <case>
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_construct "Str" (compile_stream.ml[]..[])
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "p" (compile_stream.ml[]..[])
                                        ]
                                  expression (compile_stream.ml[]..[])
                                    Pexp_let Rec
                                    [
                                      <def>
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_var "subst" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_constraint
                                                pattern (compile_stream.ml[]..[])
                                                  Ppat_var "v" (compile_stream.ml[]..[])
                                                core_type (compile_stream.ml[]..[])
                                                  Ptyp_constr "string" (compile_stream.ml[]..[])
                                                  []
                                              expression (compile_stream.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_constraint
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_var "e" (compile_stream.ml[]..[])
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "exp" (compile_stream.ml[]..[])
                                                        []
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "loc_of" (compile_stream.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "e" (compile_stream.ml[]..[])
                                                            ]
                                                      ]
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_match
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "e" (compile_stream.ml[]..[])
                                                        [
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_constraint
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "Lid"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "_loc" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "x" (compile_stream.ml[]..[])
                                                                    ]
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_var "x" (compile_stream.ml[]..[])
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ifthenelse
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "=" (compile_stream.ml[]..[])
                                                                      [
<label> ""
  expression (compile_stream.ml[]..[])
    Pexp_ident "x" (compile_stream.ml[]..[])
<label> ""
  expression (compile_stream.ml[]..[])
    Pexp_ident "v" (compile_stream.ml[]..[])
                                                                      ]
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                                                    Some
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "x" (compile_stream.ml[]..[])
                                                              ]
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_ident "x" (compile_stream.ml[]..[])
                                                                      ]
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                  []
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_or
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_or
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (compile_stream.ml[]..[])
                                                                      Ppat_constraint
                                                                      pattern (compile_stream.ml[]..[])
Ppat_variant "Uid"
Some
  pattern (compile_stream.ml[]..[])
    Ppat_tuple
    [
      pattern (compile_stream.ml[]..[])
        Ppat_var "_loc" (compile_stream.ml[]..[])
      pattern (compile_stream.ml[]..[])
        Ppat_any
    ]
                                                                      core_type (compile_stream.ml[]..[])
Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
[]
                                                                    pattern (compile_stream.ml[]..[])
                                                                      Ppat_constraint
                                                                      pattern (compile_stream.ml[]..[])
Ppat_variant "Int"
Some
  pattern (compile_stream.ml[]..[])
    Ppat_tuple
    [
      pattern (compile_stream.ml[]..[])
        Ppat_var "_loc" (compile_stream.ml[]..[])
      pattern (compile_stream.ml[]..[])
        Ppat_any
    ]
                                                                      core_type (compile_stream.ml[]..[])
Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
[]
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_constraint
                                                                    pattern (compile_stream.ml[]..[])
                                                                      Ppat_variant "Chr"
                                                                      Some
pattern (compile_stream.ml[]..[])
  Ppat_tuple
  [
    pattern (compile_stream.ml[]..[])
      Ppat_var "_loc" (compile_stream.ml[]..[])
    pattern (compile_stream.ml[]..[])
      Ppat_any
  ]
                                                                    core_type (compile_stream.ml[]..[])
                                                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                      []
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_constraint
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_variant "Str"
                                                                    Some
                                                                      pattern (compile_stream.ml[]..[])
Ppat_tuple
[
  pattern (compile_stream.ml[]..[])
    Ppat_var "_loc" (compile_stream.ml[]..[])
  pattern (compile_stream.ml[]..[])
    Ppat_any
]
                                                                  core_type (compile_stream.ml[]..[])
                                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                    []
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_constraint
                                                                pattern (compile_stream.ml[]..[])
                                                                  Ppat_variant "Field"
                                                                  Some
                                                                    pattern (compile_stream.ml[]..[])
                                                                      Ppat_tuple
                                                                      [
pattern (compile_stream.ml[]..[])
  Ppat_var "_loc" (compile_stream.ml[]..[])
pattern (compile_stream.ml[]..[])
  Ppat_any
pattern (compile_stream.ml[]..[])
  Ppat_any
                                                                      ]
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                  []
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "e" (compile_stream.ml[]..[])
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_constraint
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "LetIn"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "_loc" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "rf" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "bi" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "e" (compile_stream.ml[]..[])
                                                                    ]
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                            expression (compile_stream.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_variant "LetIn"
                                                                Some
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                      expression (compile_stream.ml[]..[]) 
Pexp_coerce
expression (compile_stream.ml[]..[])
  Pexp_ident "rf" (compile_stream.ml[]..[])
None
core_type (compile_stream.ml[]..[])
  Ptyp_constr "Astf.flag" (compile_stream.ml[]..[])
  []
                                                                      expression (compile_stream.ml[]..[]) 
Pexp_coerce
expression (compile_stream.ml[]..[])
  Pexp_apply
  expression (compile_stream.ml[]..[])
    Pexp_ident "subst_bind" (compile_stream.ml[]..[])
  [
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "v" (compile_stream.ml[]..[])
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "bi" (compile_stream.ml[]..[])
  ]
None
core_type (compile_stream.ml[]..[])
  Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
  []
                                                                      expression (compile_stream.ml[]..[]) 
Pexp_coerce
expression (compile_stream.ml[]..[])
  Pexp_apply
  expression (compile_stream.ml[]..[])
    Pexp_ident "subst" (compile_stream.ml[]..[])
  [
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "v" (compile_stream.ml[]..[])
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "e" (compile_stream.ml[]..[])
  ]
None
core_type (compile_stream.ml[]..[])
  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
  []
                                                                    ]
                                                              None
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_constraint
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "App"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "_loc" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "e1" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "e2" (compile_stream.ml[]..[])
                                                                    ]
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                            expression (compile_stream.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_variant "App"
                                                                Some
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                      expression (compile_stream.ml[]..[]) 
Pexp_coerce
expression (compile_stream.ml[]..[])
  Pexp_apply
  expression (compile_stream.ml[]..[])
    Pexp_ident "subst" (compile_stream.ml[]..[])
  [
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "v" (compile_stream.ml[]..[])
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "e1" (compile_stream.ml[]..[])
  ]
None
core_type (compile_stream.ml[]..[])
  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
  []
                                                                      expression (compile_stream.ml[]..[]) 
Pexp_coerce
expression (compile_stream.ml[]..[])
  Pexp_apply
  expression (compile_stream.ml[]..[])
    Pexp_ident "subst" (compile_stream.ml[]..[])
  [
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "v" (compile_stream.ml[]..[])
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "e2" (compile_stream.ml[]..[])
  ]
None
core_type (compile_stream.ml[]..[])
  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
  []
                                                                    ]
                                                              None
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_constraint
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "Par"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "_loc" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "e" (compile_stream.ml[]..[])
                                                                    ]
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                            expression (compile_stream.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_variant "Par"
                                                                Some
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                      expression (compile_stream.ml[]..[])
Pexp_apply
expression (compile_stream.ml[]..[])
  Pexp_ident "subst" (compile_stream.ml[]..[])
[
  <label> ""
    expression (compile_stream.ml[]..[])
      Pexp_ident "v" (compile_stream.ml[]..[])
  <label> ""
    expression (compile_stream.ml[]..[])
      Pexp_ident "e" (compile_stream.ml[]..[])
]
                                                                    ]
                                                              None
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_constraint
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "Com"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "_loc" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "e1" (compile_stream.ml[]..[])
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "e2" (compile_stream.ml[]..[])
                                                                    ]
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                            expression (compile_stream.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_variant "Com"
                                                                Some
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                      expression (compile_stream.ml[]..[]) 
Pexp_coerce
expression (compile_stream.ml[]..[])
  Pexp_apply
  expression (compile_stream.ml[]..[])
    Pexp_ident "subst" (compile_stream.ml[]..[])
  [
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "v" (compile_stream.ml[]..[])
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "e1" (compile_stream.ml[]..[])
  ]
None
core_type (compile_stream.ml[]..[])
  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
  []
                                                                      expression (compile_stream.ml[]..[]) 
Pexp_coerce
expression (compile_stream.ml[]..[])
  Pexp_apply
  expression (compile_stream.ml[]..[])
    Pexp_ident "subst" (compile_stream.ml[]..[])
  [
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "v" (compile_stream.ml[]..[])
    <label> ""
      expression (compile_stream.ml[]..[])
        Pexp_ident "e2" (compile_stream.ml[]..[])
  ]
None
core_type (compile_stream.ml[]..[])
  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
  []
                                                                    ]
                                                              None
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                []
                                                          <case>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_any
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "raise" (compile_stream.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_construct "Not_found" (compile_stream.ml[]..[])
                                                                    None
                                                              ]
                                                        ]
                                                ]
                                          ]
                                      <def>
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_var "subst_bind" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_var "v" (compile_stream.ml[]..[])
                                              expression (compile_stream.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_constraint
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_variant "And"
                                                        Some
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_var "_loc" (compile_stream.ml[]..[])
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_var "b1" (compile_stream.ml[]..[])
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_var "b2" (compile_stream.ml[]..[])
                                                            ]
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
                                                        []
                                                    expression (compile_stream.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_variant "And"
                                                        Some
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "subst_bind" (compile_stream.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "v" (compile_stream.ml[]..[])
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "b1" (compile_stream.ml[]..[])
                                                                  ]
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
                                                                  []
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "subst_bind" (compile_stream.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "v" (compile_stream.ml[]..[])
                                                                    <label> ""
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "b2" (compile_stream.ml[]..[])
                                                                  ]
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
                                                                  []
                                                            ]
                                                      None
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
                                                        []
                                                  <case>
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_constraint
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_variant "Bind"
                                                        Some
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_var "_loc" (compile_stream.ml[]..[])
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_variant "Lid"
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (compile_stream.ml[]..[])
Ppat_any
                                                                      pattern (compile_stream.ml[]..[])
Ppat_var "v'" (compile_stream.ml[]..[])
                                                                    ]
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_var "e" (compile_stream.ml[]..[])
                                                            ]
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
                                                        []
                                                    expression (compile_stream.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_variant "Bind"
                                                        Some
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "v'" (compile_stream.ml[]..[])
                                                                    ]
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ifthenelse
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "=" (compile_stream.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (compile_stream.ml[]..[])
  Pexp_ident "v" (compile_stream.ml[]..[])
                                                                      <label> ""
expression (compile_stream.ml[]..[])
  Pexp_ident "v'" (compile_stream.ml[]..[])
                                                                    ]
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_ident "e" (compile_stream.ml[]..[])
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "subst" (compile_stream.ml[]..[])
                                                                      [
<label> ""
  expression (compile_stream.ml[]..[])
    Pexp_ident "v" (compile_stream.ml[]..[])
<label> ""
  expression (compile_stream.ml[]..[])
    Pexp_ident "e" (compile_stream.ml[]..[])
                                                                      ]
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                  []
                                                            ]
                                                      None
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.bind" (compile_stream.ml[]..[])
                                                        []
                                                  <case>
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_any
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "raise" (compile_stream.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_construct "Not_found" (compile_stream.ml[]..[])
                                                            None
                                                      ]
                                                ]
                                          ]
                                    ]
                                    expression (compile_stream.ml[]..[])
                                      Pexp_try
                                      expression (compile_stream.ml[]..[])
                                        Pexp_match
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "p" (compile_stream.ml[]..[])
                                        [
                                          <case>
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_constraint
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_variant "Lid"
                                                Some
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_tuple
                                                    [
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_var "_loc" (compile_stream.ml[]..[])
                                                      pattern (compile_stream.ml[]..[])
                                                        Ppat_var "v" (compile_stream.ml[]..[])
                                                    ]
                                              core_type (compile_stream.ml[]..[])
                                                Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                []
                                            expression (compile_stream.ml[]..[])
                                              Pexp_apply
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "subst" (compile_stream.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "v" (compile_stream.ml[]..[])
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "skont" (compile_stream.ml[]..[])
                                              ]
                                          <case>
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_any
                                            expression (compile_stream.ml[]..[])
                                              Pexp_apply
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "raise" (compile_stream.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_construct "Not_found" (compile_stream.ml[]..[])
                                                    None
                                              ]
                                        ]
                                      [
                                        <case>
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_construct "Not_found" (compile_stream.ml[]..[])
                                            None
                                          expression (compile_stream.ml[]..[]) 
                                            Pexp_coerce
                                            expression (compile_stream.ml[]..[])
                                              Pexp_variant "LetIn"
                                              Some
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_variant "Negative"
                                                      Some
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_variant "Bind"
                                                      Some
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "p" (compile_stream.ml[]..[])
                                                              None
                                                              core_type (compile_stream.ml[]..[])
                                                                Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                                []
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                                                  ]
                                                          ]
                                                    expression (compile_stream.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "skont" (compile_stream.ml[]..[])
                                                      None
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                        []
                                                  ]
                                            None
                                            core_type (compile_stream.ml[]..[])
                                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                              []
                                      ]
                              ]
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "exp" (compile_stream.ml[]..[])
                              []
                      ]
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "stream_pattern" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_tuple
                      [
                        pattern (compile_stream.ml[]..[])
                          Ppat_var "x" (compile_stream.ml[]..[])
                        pattern (compile_stream.ml[]..[])
                          Ppat_var "epo" (compile_stream.ml[]..[])
                        pattern (compile_stream.ml[]..[])
                          Ppat_var "e" (compile_stream.ml[]..[])
                      ]
                    expression (compile_stream.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_constraint
                            pattern (compile_stream.ml[]..[])
                              Ppat_var "ekont" (compile_stream.ml[]..[])
                            core_type (compile_stream.ml[]..[])
                              Ptyp_arrow
                              ""
                              core_type (compile_stream.ml[]..[])
                                Ptyp_constr "option" (compile_stream.ml[]..[])
                                [
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "exp" (compile_stream.ml[]..[])
                                    []
                                ]
                              core_type (compile_stream.ml[]..[])
                                Ptyp_constr "exp" (compile_stream.ml[]..[])
                                []
                          expression (compile_stream.ml[]..[])
                            Pexp_match
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "x" (compile_stream.ml[]..[])
                            [
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_construct "[]" (compile_stream.ml[]..[])
                                  None
                                expression (compile_stream.ml[]..[])
                                  Pexp_match
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "epo" (compile_stream.ml[]..[])
                                  [
                                    <case>
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_construct "Some" (compile_stream.ml[]..[])
                                        Some
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "ep" (compile_stream.ml[]..[])
                                      expression (compile_stream.ml[]..[]) 
                                        Pexp_coerce
                                        expression (compile_stream.ml[]..[])
                                          Pexp_variant "LetIn"
                                          Some
                                            expression (compile_stream.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_variant "Negative"
                                                  Some
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_variant "Bind"
                                                  Some
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                        expression (compile_stream.ml[]..[]) 
                                                          Pexp_coerce
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "ep" (compile_stream.ml[]..[])
                                                          None
                                                          core_type (compile_stream.ml[]..[])
                                                            Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                            []
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_variant "App"
                                                          Some
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Dot"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_variant "Uid"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_apply
          expression (compile_stream.ml[]..[])
            Pexp_ident "gm" (compile_stream.ml[]..[])
          [
            <label> ""
              expression (compile_stream.ml[]..[])
                Pexp_construct "()" (compile_stream.ml[]..[])
                None
          ]
      ]
expression (compile_stream.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_constant Const_string("count",None)
      ]
                                                                      ]
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                                                      ]
                                                              ]
                                                      ]
                                                expression (compile_stream.ml[]..[]) 
                                                  Pexp_coerce
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "e" (compile_stream.ml[]..[])
                                                  None
                                                  core_type (compile_stream.ml[]..[])
                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                    []
                                              ]
                                        None
                                        core_type (compile_stream.ml[]..[])
                                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                          []
                                    <case>
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_any
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "e" (compile_stream.ml[]..[])
                                  ]
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_construct "::" (compile_stream.ml[]..[])
                                  Some
                                    pattern (compile_stream.ml[]..[]) 
                                      Ppat_tuple
                                      [
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_tuple
                                          [
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_var "spc" (compile_stream.ml[]..[])
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_var "err" (compile_stream.ml[]..[])
                                          ]
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_var "spcl" (compile_stream.ml[]..[])
                                      ]
                                expression (compile_stream.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_var "skont" (compile_stream.ml[]..[])
                                      expression (compile_stream.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_var "ekont0" (compile_stream.ml[]..[])
                                            expression (compile_stream.ml[]..[])
                                              Pexp_function
                                              [
                                                <case>
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_var "err" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (compile_stream.ml[]..[])
                                                          Ppat_var "str" (compile_stream.ml[]..[])
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_match
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "err" (compile_stream.ml[]..[])
                                                          [
                                                            <case>
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_construct "Some" (compile_stream.ml[]..[])
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_var "estr" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "estr" (compile_stream.ml[]..[])
                                                            <case>
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_any
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Str"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_constant Const_string("",None)
                                                                      ]
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                  []
                                                          ]
                                                    ]
                                                    expression (compile_stream.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_variant "App"
                                                        Some
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                      expression (compile_stream.ml[]..[])
Pexp_constant Const_string("raise",None)
                                                                    ]
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_variant "App"
                                                                Some
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                      expression (compile_stream.ml[]..[])
Pexp_variant "Dot"
Some
  expression (compile_stream.ml[]..[])
    Pexp_tuple
    [
      expression (compile_stream.ml[]..[])
        Pexp_ident "_loc" (compile_stream.ml[]..[])
      expression (compile_stream.ml[]..[])
        Pexp_variant "Uid"
        Some
          expression (compile_stream.ml[]..[])
            Pexp_tuple
            [
              expression (compile_stream.ml[]..[])
                Pexp_ident "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_apply
                expression (compile_stream.ml[]..[])
                  Pexp_ident "gm" (compile_stream.ml[]..[])
                [
                  <label> ""
                    expression (compile_stream.ml[]..[])
                      Pexp_construct "()" (compile_stream.ml[]..[])
                      None
                ]
            ]
      expression (compile_stream.ml[]..[])
        Pexp_variant "Uid"
        Some
          expression (compile_stream.ml[]..[])
            Pexp_tuple
            [
              expression (compile_stream.ml[]..[])
                Pexp_ident "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_constant Const_string("Error",None)
            ]
    ]
                                                                      expression (compile_stream.ml[]..[]) 
Pexp_coerce
expression (compile_stream.ml[]..[])
  Pexp_ident "str" (compile_stream.ml[]..[])
None
core_type (compile_stream.ml[]..[])
  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
  []
                                                                    ]
                                                            ]
                                                      None
                                                      core_type (compile_stream.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                        []
                                              ]
                                        ]
                                        expression (compile_stream.ml[]..[])
                                          Pexp_apply
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "stream_pattern" (compile_stream.ml[]..[])
                                          [
                                            <label> ""
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                            <label> ""
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "spcl" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "epo" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "e" (compile_stream.ml[]..[])
                                                ]
                                            <label> ""
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "ekont0" (compile_stream.ml[]..[])
                                          ]
                                  ]
                                  expression (compile_stream.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_var "ckont" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_apply
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "ekont" (compile_stream.ml[]..[])
                                          [
                                            <label> ""
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "err" (compile_stream.ml[]..[])
                                          ]
                                    ]
                                    expression (compile_stream.ml[]..[])
                                      Pexp_apply
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "stream_pattern_component" (compile_stream.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "skont" (compile_stream.ml[]..[])
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "ckont" (compile_stream.ml[]..[])
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "spc" (compile_stream.ml[]..[])
                                      ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "group_terms" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_constraint
                pattern (compile_stream.ml[]..[])
                  Ppat_var "xs" (compile_stream.ml[]..[])
                core_type (compile_stream.ml[]..[])
                  Ptyp_constr "stream_cases" (compile_stream.ml[]..[])
                  []
              expression (compile_stream.ml[]..[])
                Pexp_match
                expression (compile_stream.ml[]..[])
                  Pexp_ident "xs" (compile_stream.ml[]..[])
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_construct "::" (compile_stream.ml[]..[])
                      Some
                        pattern (compile_stream.ml[]..[]) 
                          Ppat_tuple
                          [
                            pattern (compile_stream.ml[]..[])
                              Ppat_tuple
                              [
                                pattern (compile_stream.ml[]..[])
                                  Ppat_construct "::" (compile_stream.ml[]..[])
                                  Some
                                    pattern (compile_stream.ml[]..[]) 
                                      Ppat_tuple
                                      [
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_tuple
                                          [
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_construct "When" (compile_stream.ml[]..[])
                                              Some
                                                pattern (compile_stream.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_var "p" (compile_stream.ml[]..[])
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_var "w" (compile_stream.ml[]..[])
                                                  ]
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_construct "None" (compile_stream.ml[]..[])
                                              None
                                          ]
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_var "spcl" (compile_stream.ml[]..[])
                                      ]
                                pattern (compile_stream.ml[]..[])
                                  Ppat_var "epo" (compile_stream.ml[]..[])
                                pattern (compile_stream.ml[]..[])
                                  Ppat_var "e" (compile_stream.ml[]..[])
                              ]
                            pattern (compile_stream.ml[]..[])
                              Ppat_var "spel" (compile_stream.ml[]..[])
                          ]
                    expression (compile_stream.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (compile_stream.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "tspel" (compile_stream.ml[]..[])
                              pattern (compile_stream.ml[]..[])
                                Ppat_var "spel" (compile_stream.ml[]..[])
                            ]
                          expression (compile_stream.ml[]..[])
                            Pexp_apply
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "group_terms" (compile_stream.ml[]..[])
                            [
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "spel" (compile_stream.ml[]..[])
                            ]
                      ]
                      expression (compile_stream.ml[]..[])
                        Pexp_tuple
                        [
                          expression (compile_stream.ml[]..[])
                            Pexp_construct "::" (compile_stream.ml[]..[])
                            Some
                              expression (compile_stream.ml[]..[]) 
                                Pexp_tuple
                                [
                                  expression (compile_stream.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "p" (compile_stream.ml[]..[])
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "w" (compile_stream.ml[]..[])
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "spcl" (compile_stream.ml[]..[])
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "epo" (compile_stream.ml[]..[])
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "e" (compile_stream.ml[]..[])
                                    ]
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "tspel" (compile_stream.ml[]..[])
                                ]
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "spel" (compile_stream.ml[]..[])
                        ]
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_var "spel" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_stream.ml[]..[])
                          Pexp_construct "[]" (compile_stream.ml[]..[])
                          None
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "spel" (compile_stream.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "stream_patterns_term" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_var "ekont" (compile_stream.ml[]..[])
                      core_type (compile_stream.ml[]..[])
                        Ptyp_arrow
                        ""
                        core_type (compile_stream.ml[]..[])
                          Ptyp_constr "unit" (compile_stream.ml[]..[])
                          []
                        core_type (compile_stream.ml[]..[])
                          Ptyp_constr "exp" (compile_stream.ml[]..[])
                          []
                    expression (compile_stream.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_var "tspel" (compile_stream.ml[]..[])
                          expression (compile_stream.ml[]..[]) 
                            Pexp_constraint
                            expression (compile_stream.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_var "pel" (compile_stream.ml[]..[])
                                  expression (compile_stream.ml[]..[])
                                    Pexp_apply
                                    expression (compile_stream.ml[]..[])
                                      Pexp_ident "List.fold_right" (compile_stream.ml[]..[])
                                    [
                                      <label> ""
                                        expression (compile_stream.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (compile_stream.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_var "p" (compile_stream.ml[]..[])
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_var "w" (compile_stream.ml[]..[])
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_var "_loc" (compile_stream.ml[]..[])
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_var "spcl" (compile_stream.ml[]..[])
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_var "epo" (compile_stream.ml[]..[])
                                                  pattern (compile_stream.ml[]..[])
                                                    Ppat_var "e" (compile_stream.ml[]..[])
                                                ]
                                              expression (compile_stream.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (compile_stream.ml[]..[])
                                                      Ppat_var "acc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (compile_stream.ml[]..[])
                                                            Ppat_var "p" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[]) 
                                                            Pexp_coerce
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_variant "App"
                                                              Some
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_variant "Uid"
                                                                      Some
expression (compile_stream.ml[]..[])
  Pexp_tuple
  [
    expression (compile_stream.ml[]..[])
      Pexp_ident "_loc" (compile_stream.ml[]..[])
    expression (compile_stream.ml[]..[])
      Pexp_constant Const_string("Some",None)
  ]
                                                                    expression (compile_stream.ml[]..[]) 
                                                                      Pexp_coerce
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "p" (compile_stream.ml[]..[])
                                                                      None
                                                                      core_type (compile_stream.ml[]..[])
Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
[]
                                                                  ]
                                                            None
                                                            core_type (compile_stream.ml[]..[])
                                                              Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                                              []
                                                      ]
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (compile_stream.ml[]..[])
                                                              Ppat_var "e" (compile_stream.ml[]..[])
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_var "ekont" (compile_stream.ml[]..[])
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_function
                                                                    [
                                                                      <case>
pattern (compile_stream.ml[]..[])
  Ppat_var "err" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_let Nonrec
  [
    <def>
      pattern (compile_stream.ml[]..[])
        Ppat_var "str" (compile_stream.ml[]..[])
      expression (compile_stream.ml[]..[])
        Pexp_match
        expression (compile_stream.ml[]..[])
          Pexp_ident "err" (compile_stream.ml[]..[])
        [
          <case>
            pattern (compile_stream.ml[]..[])
              Ppat_construct "Some" (compile_stream.ml[]..[])
              Some
                pattern (compile_stream.ml[]..[])
                  Ppat_var "estr" (compile_stream.ml[]..[])
            expression (compile_stream.ml[]..[])
              Pexp_ident "estr" (compile_stream.ml[]..[])
          <case>
            pattern (compile_stream.ml[]..[])
              Ppat_any
            expression (compile_stream.ml[]..[]) 
              Pexp_coerce
              expression (compile_stream.ml[]..[])
                Pexp_variant "Str"
                Some
                  expression (compile_stream.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                      expression (compile_stream.ml[]..[])
                        Pexp_constant Const_string("",None)
                    ]
              None
              core_type (compile_stream.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                []
        ]
  ]
  expression (compile_stream.ml[]..[]) 
    Pexp_coerce
    expression (compile_stream.ml[]..[])
      Pexp_variant "App"
      Some
        expression (compile_stream.ml[]..[])
          Pexp_tuple
          [
            expression (compile_stream.ml[]..[])
              Pexp_ident "_loc" (compile_stream.ml[]..[])
            expression (compile_stream.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_stream.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_constant Const_string("raise",None)
                  ]
            expression (compile_stream.ml[]..[])
              Pexp_variant "App"
              Some
                expression (compile_stream.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_stream.ml[]..[])
                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_variant "Dot"
                      Some
                        expression (compile_stream.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                            expression (compile_stream.ml[]..[])
                              Pexp_variant "Uid"
                              Some
                                expression (compile_stream.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_stream.ml[]..[])
                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                    expression (compile_stream.ml[]..[])
                                      Pexp_apply
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "gm" (compile_stream.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_construct "()" (compile_stream.ml[]..[])
                                            None
                                      ]
                                  ]
                            expression (compile_stream.ml[]..[])
                              Pexp_variant "Uid"
                              Some
                                expression (compile_stream.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_stream.ml[]..[])
                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                    expression (compile_stream.ml[]..[])
                                      Pexp_constant Const_string("Error",None)
                                  ]
                          ]
                    expression (compile_stream.ml[]..[]) 
                      Pexp_coerce
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "str" (compile_stream.ml[]..[])
                      None
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                        []
                  ]
          ]
    None
    core_type (compile_stream.ml[]..[])
      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
      []
                                                                    ]
                                                              ]
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (compile_stream.ml[]..[])
                                                                      Ppat_var "skont" (compile_stream.ml[]..[])
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (compile_stream.ml[]..[])
Pexp_ident "stream_pattern" (compile_stream.ml[]..[])
                                                                      [
<label> ""
  expression (compile_stream.ml[]..[])
    Pexp_ident "_loc" (compile_stream.ml[]..[])
<label> ""
  expression (compile_stream.ml[]..[])
    Pexp_tuple
    [
      expression (compile_stream.ml[]..[])
        Pexp_ident "spcl" (compile_stream.ml[]..[])
      expression (compile_stream.ml[]..[])
        Pexp_ident "epo" (compile_stream.ml[]..[])
      expression (compile_stream.ml[]..[])
        Pexp_ident "e" (compile_stream.ml[]..[])
    ]
<label> ""
  expression (compile_stream.ml[]..[])
    Pexp_ident "ekont" (compile_stream.ml[]..[])
                                                                      ]
                                                                ]
                                                                expression (compile_stream.ml[]..[]) 
                                                                  Pexp_coerce
                                                                  expression (compile_stream.ml[]..[])
                                                                    Pexp_variant "Seq"
                                                                    Some
                                                                      expression (compile_stream.ml[]..[])
Pexp_tuple
[
  expression (compile_stream.ml[]..[])
    Pexp_ident "_loc" (compile_stream.ml[]..[])
  expression (compile_stream.ml[]..[])
    Pexp_variant "Sem"
    Some
      expression (compile_stream.ml[]..[])
        Pexp_tuple
        [
          expression (compile_stream.ml[]..[])
            Pexp_ident "_loc" (compile_stream.ml[]..[])
          expression (compile_stream.ml[]..[])
            Pexp_variant "App"
            Some
              expression (compile_stream.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_stream.ml[]..[])
                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                  expression (compile_stream.ml[]..[]) 
                    Pexp_coerce
                    expression (compile_stream.ml[]..[])
                      Pexp_apply
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "junk_fun" (compile_stream.ml[]..[])
                      [
                        <label> ""
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                      ]
                    None
                    core_type (compile_stream.ml[]..[])
                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                      []
                  expression (compile_stream.ml[]..[])
                    Pexp_variant "Lid"
                    Some
                      expression (compile_stream.ml[]..[])
                        Pexp_tuple
                        [
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "strm_n" (compile_stream.ml[]..[])
                        ]
                ]
          expression (compile_stream.ml[]..[]) 
            Pexp_coerce
            expression (compile_stream.ml[]..[])
              Pexp_ident "skont" (compile_stream.ml[]..[])
            None
            core_type (compile_stream.ml[]..[])
              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
              []
        ]
]
                                                                  None
                                                                  core_type (compile_stream.ml[]..[])
                                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                                    []
                                                        ]
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_match
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "w" (compile_stream.ml[]..[])
                                                          [
                                                            <case>
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_construct "Some" (compile_stream.ml[]..[])
                                                                Some
                                                                  pattern (compile_stream.ml[]..[])
                                                                    Ppat_var "w" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Bar"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_variant "CaseWhen"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "p" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
            []
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "w" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
            []
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "e" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
            []
      ]
expression (compile_stream.ml[]..[])
  Pexp_ident "acc" (compile_stream.ml[]..[])
                                                                      ]
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.case" (compile_stream.ml[]..[])
                                                                  []
                                                            <case>
                                                              pattern (compile_stream.ml[]..[])
                                                                Ppat_construct "None" (compile_stream.ml[]..[])
                                                                None
                                                              expression (compile_stream.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_variant "Bar"
                                                                  Some
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_stream.ml[]..[])
  Pexp_ident "_loc" (compile_stream.ml[]..[])
expression (compile_stream.ml[]..[])
  Pexp_variant "Case"
  Some
    expression (compile_stream.ml[]..[])
      Pexp_tuple
      [
        expression (compile_stream.ml[]..[])
          Pexp_ident "_loc" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "p" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
            []
        expression (compile_stream.ml[]..[]) 
          Pexp_coerce
          expression (compile_stream.ml[]..[])
            Pexp_ident "e" (compile_stream.ml[]..[])
          None
          core_type (compile_stream.ml[]..[])
            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
            []
      ]
expression (compile_stream.ml[]..[])
  Pexp_ident "acc" (compile_stream.ml[]..[])
                                                                      ]
                                                                None
                                                                core_type (compile_stream.ml[]..[])
                                                                  Ptyp_constr "Astf.case" (compile_stream.ml[]..[])
                                                                  []
                                                          ]
                                                ]
                                          ]
                                      <label> ""
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "tspel" (compile_stream.ml[]..[])
                                      <label> ""
                                        expression (compile_stream.ml[]..[]) 
                                          Pexp_coerce
                                          expression (compile_stream.ml[]..[])
                                            Pexp_variant "Case"
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_variant "Any"
                                                    Some
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[]) 
                                                    Pexp_coerce
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "ekont" (compile_stream.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_construct "()" (compile_stream.ml[]..[])
                                                            None
                                                      ]
                                                    None
                                                    core_type (compile_stream.ml[]..[])
                                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                      []
                                                ]
                                          None
                                          core_type (compile_stream.ml[]..[])
                                            Ptyp_constr "Astf.case" (compile_stream.ml[]..[])
                                            []
                                    ]
                              ]
                              expression (compile_stream.ml[]..[]) 
                                Pexp_coerce
                                expression (compile_stream.ml[]..[])
                                  Pexp_variant "Match"
                                  Some
                                    expression (compile_stream.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_variant "App"
                                          Some
                                            expression (compile_stream.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                expression (compile_stream.ml[]..[]) 
                                                  Pexp_coerce
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "peek_fun" (compile_stream.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    ]
                                                  None
                                                  core_type (compile_stream.ml[]..[])
                                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                    []
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                                      ]
                                              ]
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "pel" (compile_stream.ml[]..[])
                                      ]
                                None
                                core_type (compile_stream.ml[]..[])
                                  Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                  []
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "exp" (compile_stream.ml[]..[])
                              []
                      ]
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "parser_cases" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_constraint
                      pattern (compile_stream.ml[]..[])
                        Ppat_var "x" (compile_stream.ml[]..[])
                      core_type (compile_stream.ml[]..[])
                        Ptyp_constr "stream_cases" (compile_stream.ml[]..[])
                        []
                    expression (compile_stream.ml[]..[])
                      Pexp_match
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "x" (compile_stream.ml[]..[])
                      [
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_construct "[]" (compile_stream.ml[]..[])
                            None
                          expression (compile_stream.ml[]..[]) 
                            Pexp_coerce
                            expression (compile_stream.ml[]..[])
                              Pexp_variant "App"
                              Some
                                expression (compile_stream.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_stream.ml[]..[])
                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                    expression (compile_stream.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_stream.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                            expression (compile_stream.ml[]..[])
                                              Pexp_constant Const_string("raise",None)
                                          ]
                                    expression (compile_stream.ml[]..[])
                                      Pexp_variant "Dot"
                                      Some
                                        expression (compile_stream.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                            expression (compile_stream.ml[]..[])
                                              Pexp_variant "Uid"
                                              Some
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "gm" (compile_stream.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_construct "()" (compile_stream.ml[]..[])
                                                            None
                                                      ]
                                                  ]
                                            expression (compile_stream.ml[]..[])
                                              Pexp_variant "Uid"
                                              Some
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_constant Const_string("NotConsumed",None)
                                                  ]
                                          ]
                                  ]
                            None
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                              []
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_var "spel" (compile_stream.ml[]..[])
                          expression (compile_stream.ml[]..[])
                            Pexp_match
                            expression (compile_stream.ml[]..[])
                              Pexp_apply
                              expression (compile_stream.ml[]..[])
                                Pexp_ident "group_terms" (compile_stream.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "spel" (compile_stream.ml[]..[])
                              ]
                            [
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_construct "[]" (compile_stream.ml[]..[])
                                      None
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_construct "::" (compile_stream.ml[]..[])
                                      Some
                                        pattern (compile_stream.ml[]..[]) 
                                          Ppat_tuple
                                          [
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_var "x" (compile_stream.ml[]..[])
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_var "spel" (compile_stream.ml[]..[])
                                          ]
                                  ]
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "stream_pattern" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "x" (compile_stream.ml[]..[])
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_any
                                            expression (compile_stream.ml[]..[])
                                              Pexp_apply
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "parser_cases" (compile_stream.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "spel" (compile_stream.ml[]..[])
                                              ]
                                        ]
                                  ]
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "tspel" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "spel" (compile_stream.ml[]..[])
                                  ]
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "stream_patterns_term" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (compile_stream.ml[]..[])
                                              Ppat_any
                                            expression (compile_stream.ml[]..[])
                                              Pexp_apply
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "parser_cases" (compile_stream.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "spel" (compile_stream.ml[]..[])
                                              ]
                                        ]
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "tspel" (compile_stream.ml[]..[])
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "cparser" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_var "pc" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (compile_stream.ml[]..[])
                            Ppat_var "e" (compile_stream.ml[]..[])
                          expression (compile_stream.ml[]..[])
                            Pexp_apply
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "parser_cases" (compile_stream.ml[]..[])
                            [
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "pc" (compile_stream.ml[]..[])
                            ]
                      ]
                      expression (compile_stream.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (compile_stream.ml[]..[])
                              Ppat_var "p" (compile_stream.ml[]..[])
                            expression (compile_stream.ml[]..[]) 
                              Pexp_coerce
                              expression (compile_stream.ml[]..[])
                                Pexp_variant "Constraint"
                                Some
                                  expression (compile_stream.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                      expression (compile_stream.ml[]..[])
                                        Pexp_variant "Lid"
                                        Some
                                          expression (compile_stream.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "strm_n" (compile_stream.ml[]..[])
                                            ]
                                      expression (compile_stream.ml[]..[])
                                        Pexp_variant "App"
                                        Some
                                          expression (compile_stream.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                              expression (compile_stream.ml[]..[])
                                                Pexp_variant "Dot"
                                                Some
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_variant "Uid"
                                                        Some
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_apply
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_ident "gm" (compile_stream.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (compile_stream.ml[]..[])
                                                                      Pexp_construct "()" (compile_stream.ml[]..[])
                                                                      None
                                                                ]
                                                            ]
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_variant "Lid"
                                                        Some
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_constant Const_string("t",None)
                                                            ]
                                                    ]
                                              expression (compile_stream.ml[]..[])
                                                Pexp_variant "Any"
                                                Some
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                            ]
                                    ]
                              None
                              core_type (compile_stream.ml[]..[])
                                Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                []
                        ]
                        expression (compile_stream.ml[]..[]) 
                          Pexp_coerce
                          expression (compile_stream.ml[]..[])
                            Pexp_variant "Fun"
                            Some
                              expression (compile_stream.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                  expression (compile_stream.ml[]..[])
                                    Pexp_variant "Case"
                                    Some
                                      expression (compile_stream.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                          expression (compile_stream.ml[]..[]) 
                                            Pexp_coerce
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "p" (compile_stream.ml[]..[])
                                            None
                                            core_type (compile_stream.ml[]..[])
                                              Ptyp_constr "Astf.pat" (compile_stream.ml[]..[])
                                              []
                                          expression (compile_stream.ml[]..[]) 
                                            Pexp_coerce
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "e" (compile_stream.ml[]..[])
                                            None
                                            core_type (compile_stream.ml[]..[])
                                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                              []
                                        ]
                                ]
                          None
                          core_type (compile_stream.ml[]..[])
                            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                            []
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_type
    [
      type_declaration "sexp_comp" (compile_stream.ml[]..[]) (compile_stream.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (compile_stream.ml[]..[])
                "Trm" (compile_stream.ml[]..[])
                [
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "loc" (compile_stream.ml[]..[])
                    []
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "exp" (compile_stream.ml[]..[])
                    []
                ]
                None
              (compile_stream.ml[]..[])
                "Ntr" (compile_stream.ml[]..[])
                [
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "loc" (compile_stream.ml[]..[])
                    []
                  core_type (compile_stream.ml[]..[])
                    Ptyp_constr "exp" (compile_stream.ml[]..[])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "not_computing" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "x" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_let Rec
                [
                  <def>
                    pattern (compile_stream.ml[]..[])
                      Ppat_var "aux" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_var "x" (compile_stream.ml[]..[])
                          expression (compile_stream.ml[]..[])
                            Pexp_match
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "x" (compile_stream.ml[]..[])
                            [
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_type
                                  "literal" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_construct "true" (compile_stream.ml[]..[])
                                  None
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_type
                                  "vid'" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_construct "true" (compile_stream.ml[]..[])
                                  None
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_variant "App"
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "x" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "y" (compile_stream.ml[]..[])
                                        ]
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                    []
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "&&" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_apply
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "is_cons_apply_not_computing" (compile_stream.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "x" (compile_stream.ml[]..[])
                                        ]
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_apply
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "aux" (compile_stream.ml[]..[])
                                        [
                                          <label> ""
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "y" (compile_stream.ml[]..[])
                                        ]
                                  ]
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_any
                                expression (compile_stream.ml[]..[])
                                  Pexp_construct "false" (compile_stream.ml[]..[])
                                  None
                            ]
                      ]
                  <def>
                    pattern (compile_stream.ml[]..[])
                      Ppat_var "is_cons_apply_not_computing" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_constraint
                            pattern (compile_stream.ml[]..[])
                              Ppat_variant "Uid"
                              Some
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_any
                                  ]
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                              []
                          expression (compile_stream.ml[]..[])
                            Pexp_construct "true" (compile_stream.ml[]..[])
                            None
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_constraint
                            pattern (compile_stream.ml[]..[])
                              Ppat_variant "Lid"
                              Some
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_any
                                  ]
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                              []
                          expression (compile_stream.ml[]..[])
                            Pexp_construct "false" (compile_stream.ml[]..[])
                            None
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_constraint
                            pattern (compile_stream.ml[]..[])
                              Ppat_variant "App"
                              Some
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "x" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "y" (compile_stream.ml[]..[])
                                  ]
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                              []
                          expression (compile_stream.ml[]..[])
                            Pexp_apply
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "&&" (compile_stream.ml[]..[])
                            [
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "is_cons_apply_not_computing" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "x" (compile_stream.ml[]..[])
                                  ]
                              <label> ""
                                expression (compile_stream.ml[]..[])
                                  Pexp_apply
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "aux" (compile_stream.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "y" (compile_stream.ml[]..[])
                                  ]
                            ]
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_any
                          expression (compile_stream.ml[]..[])
                            Pexp_construct "false" (compile_stream.ml[]..[])
                            None
                      ]
                ]
                expression (compile_stream.ml[]..[])
                  Pexp_apply
                  expression (compile_stream.ml[]..[])
                    Pexp_ident "aux" (compile_stream.ml[]..[])
                  [
                    <label> ""
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "x" (compile_stream.ml[]..[])
                  ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "slazy" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "_loc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_var "e" (compile_stream.ml[]..[])
                    expression (compile_stream.ml[]..[])
                      Pexp_match
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "e" (compile_stream.ml[]..[])
                      [
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_constraint
                            pattern (compile_stream.ml[]..[])
                              Ppat_variant "App"
                              Some
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "f" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_variant "Unit"
                                      Some
                                        pattern (compile_stream.ml[]..[])
                                          Ppat_any
                                  ]
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                              []
                          expression (compile_stream.ml[]..[])
                            Pexp_match
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "f" (compile_stream.ml[]..[])
                            [
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_stream.ml[]..[])
                                    Ppat_variant "Lid"
                                    Some
                                      pattern (compile_stream.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_var "_loc" (compile_stream.ml[]..[])
                                          pattern (compile_stream.ml[]..[])
                                            Ppat_any
                                        ]
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                    []
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "f" (compile_stream.ml[]..[])
                              <case>
                                pattern (compile_stream.ml[]..[])
                                  Ppat_any
                                expression (compile_stream.ml[]..[]) 
                                  Pexp_coerce
                                  expression (compile_stream.ml[]..[])
                                    Pexp_variant "Fun"
                                    Some
                                      expression (compile_stream.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                          expression (compile_stream.ml[]..[])
                                            Pexp_variant "Case"
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_variant "Any"
                                                    Some
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[]) 
                                                    Pexp_coerce
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "e" (compile_stream.ml[]..[])
                                                    None
                                                    core_type (compile_stream.ml[]..[])
                                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                      []
                                                ]
                                        ]
                                  None
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                    []
                            ]
                        <case>
                          pattern (compile_stream.ml[]..[])
                            Ppat_any
                          expression (compile_stream.ml[]..[]) 
                            Pexp_coerce
                            expression (compile_stream.ml[]..[])
                              Pexp_variant "Fun"
                              Some
                                expression (compile_stream.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_stream.ml[]..[])
                                      Pexp_ident "_loc" (compile_stream.ml[]..[])
                                    expression (compile_stream.ml[]..[])
                                      Pexp_variant "Case"
                                      Some
                                        expression (compile_stream.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_stream.ml[]..[])
                                              Pexp_ident "_loc" (compile_stream.ml[]..[])
                                            expression (compile_stream.ml[]..[])
                                              Pexp_variant "Any"
                                              Some
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                            expression (compile_stream.ml[]..[]) 
                                              Pexp_coerce
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "e" (compile_stream.ml[]..[])
                                              None
                                              core_type (compile_stream.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                                []
                                          ]
                                  ]
                            None
                            core_type (compile_stream.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                              []
                      ]
                ]
          ]
    ]
  structure_item (compile_stream.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (compile_stream.ml[]..[])
          Ppat_var "cstream" (compile_stream.ml[]..[])
        expression (compile_stream.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_stream.ml[]..[])
                Ppat_var "gloc" (compile_stream.ml[]..[])
              expression (compile_stream.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_construct "[]" (compile_stream.ml[]..[])
                      None
                    expression (compile_stream.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (compile_stream.ml[]..[])
                            Ppat_var "_loc" (compile_stream.ml[]..[])
                          expression (compile_stream.ml[]..[])
                            Pexp_ident "gloc" (compile_stream.ml[]..[])
                      ]
                      expression (compile_stream.ml[]..[]) 
                        Pexp_coerce
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "Dot"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_variant "Uid"
                                  Some
                                    expression (compile_stream.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_apply
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "gm" (compile_stream.ml[]..[])
                                          [
                                            <label> ""
                                              expression (compile_stream.ml[]..[])
                                                Pexp_construct "()" (compile_stream.ml[]..[])
                                                None
                                          ]
                                      ]
                                expression (compile_stream.ml[]..[])
                                  Pexp_variant "Lid"
                                  Some
                                    expression (compile_stream.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_constant Const_string("sempty",None)
                                      ]
                              ]
                        None
                        core_type (compile_stream.ml[]..[])
                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                          []
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_construct "::" (compile_stream.ml[]..[])
                      Some
                        pattern (compile_stream.ml[]..[]) 
                          Ppat_tuple
                          [
                            pattern (compile_stream.ml[]..[])
                              Ppat_construct "Trm" (compile_stream.ml[]..[])
                              Some
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "e" (compile_stream.ml[]..[])
                                  ]
                            pattern (compile_stream.ml[]..[])
                              Ppat_construct "[]" (compile_stream.ml[]..[])
                              None
                          ]
                    expression (compile_stream.ml[]..[])
                      Pexp_ifthenelse
                      expression (compile_stream.ml[]..[])
                        Pexp_apply
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "not_computing" (compile_stream.ml[]..[])
                        [
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "e" (compile_stream.ml[]..[])
                        ]
                      expression (compile_stream.ml[]..[]) 
                        Pexp_coerce
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "App"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_variant "Dot"
                                  Some
                                    expression (compile_stream.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_variant "Uid"
                                          Some
                                            expression (compile_stream.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "gm" (compile_stream.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_construct "()" (compile_stream.ml[]..[])
                                                        None
                                                  ]
                                              ]
                                        expression (compile_stream.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (compile_stream.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_constant Const_string("ising",None)
                                              ]
                                      ]
                                expression (compile_stream.ml[]..[]) 
                                  Pexp_coerce
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "e" (compile_stream.ml[]..[])
                                  None
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                    []
                              ]
                        None
                        core_type (compile_stream.ml[]..[])
                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                          []
                      Some
                        expression (compile_stream.ml[]..[]) 
                          Pexp_coerce
                          expression (compile_stream.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (compile_stream.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                  expression (compile_stream.ml[]..[])
                                    Pexp_variant "Dot"
                                    Some
                                      expression (compile_stream.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                          expression (compile_stream.ml[]..[])
                                            Pexp_variant "Uid"
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "gm" (compile_stream.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_construct "()" (compile_stream.ml[]..[])
                                                          None
                                                    ]
                                                ]
                                          expression (compile_stream.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_constant Const_string("lsing",None)
                                                ]
                                        ]
                                  expression (compile_stream.ml[]..[]) 
                                    Pexp_coerce
                                    expression (compile_stream.ml[]..[])
                                      Pexp_apply
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "slazy" (compile_stream.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "e" (compile_stream.ml[]..[])
                                      ]
                                    None
                                    core_type (compile_stream.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                      []
                                ]
                          None
                          core_type (compile_stream.ml[]..[])
                            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                            []
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_construct "::" (compile_stream.ml[]..[])
                      Some
                        pattern (compile_stream.ml[]..[]) 
                          Ppat_tuple
                          [
                            pattern (compile_stream.ml[]..[])
                              Ppat_construct "Trm" (compile_stream.ml[]..[])
                              Some
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "e" (compile_stream.ml[]..[])
                                  ]
                            pattern (compile_stream.ml[]..[])
                              Ppat_var "secl" (compile_stream.ml[]..[])
                          ]
                    expression (compile_stream.ml[]..[])
                      Pexp_ifthenelse
                      expression (compile_stream.ml[]..[])
                        Pexp_apply
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "not_computing" (compile_stream.ml[]..[])
                        [
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "e" (compile_stream.ml[]..[])
                        ]
                      expression (compile_stream.ml[]..[]) 
                        Pexp_coerce
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "App"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_variant "App"
                                  Some
                                    expression (compile_stream.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_variant "Dot"
                                          Some
                                            expression (compile_stream.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_variant "Uid"
                                                  Some
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "gm" (compile_stream.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_construct "()" (compile_stream.ml[]..[])
                                                                None
                                                          ]
                                                      ]
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_constant Const_string("icons",None)
                                                      ]
                                              ]
                                        expression (compile_stream.ml[]..[]) 
                                          Pexp_coerce
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "e" (compile_stream.ml[]..[])
                                          None
                                          core_type (compile_stream.ml[]..[])
                                            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                            []
                                      ]
                                expression (compile_stream.ml[]..[]) 
                                  Pexp_coerce
                                  expression (compile_stream.ml[]..[])
                                    Pexp_apply
                                    expression (compile_stream.ml[]..[])
                                      Pexp_ident "cstream" (compile_stream.ml[]..[])
                                    [
                                      <label> ""
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "gloc" (compile_stream.ml[]..[])
                                      <label> ""
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "secl" (compile_stream.ml[]..[])
                                    ]
                                  None
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                    []
                              ]
                        None
                        core_type (compile_stream.ml[]..[])
                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                          []
                      Some
                        expression (compile_stream.ml[]..[]) 
                          Pexp_coerce
                          expression (compile_stream.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (compile_stream.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                  expression (compile_stream.ml[]..[])
                                    Pexp_variant "App"
                                    Some
                                      expression (compile_stream.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                          expression (compile_stream.ml[]..[])
                                            Pexp_variant "Dot"
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_variant "Uid"
                                                    Some
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "gm" (compile_stream.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_construct "()" (compile_stream.ml[]..[])
                                                                  None
                                                            ]
                                                        ]
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_variant "Lid"
                                                    Some
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_constant Const_string("lcons",None)
                                                        ]
                                                ]
                                          expression (compile_stream.ml[]..[]) 
                                            Pexp_coerce
                                            expression (compile_stream.ml[]..[])
                                              Pexp_apply
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "slazy" (compile_stream.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "e" (compile_stream.ml[]..[])
                                              ]
                                            None
                                            core_type (compile_stream.ml[]..[])
                                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                              []
                                        ]
                                  expression (compile_stream.ml[]..[]) 
                                    Pexp_coerce
                                    expression (compile_stream.ml[]..[])
                                      Pexp_apply
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "cstream" (compile_stream.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "gloc" (compile_stream.ml[]..[])
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "secl" (compile_stream.ml[]..[])
                                      ]
                                    None
                                    core_type (compile_stream.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                      []
                                ]
                          None
                          core_type (compile_stream.ml[]..[])
                            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                            []
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_construct "::" (compile_stream.ml[]..[])
                      Some
                        pattern (compile_stream.ml[]..[]) 
                          Ppat_tuple
                          [
                            pattern (compile_stream.ml[]..[])
                              Ppat_construct "Ntr" (compile_stream.ml[]..[])
                              Some
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "e" (compile_stream.ml[]..[])
                                  ]
                            pattern (compile_stream.ml[]..[])
                              Ppat_construct "[]" (compile_stream.ml[]..[])
                              None
                          ]
                    expression (compile_stream.ml[]..[])
                      Pexp_ifthenelse
                      expression (compile_stream.ml[]..[])
                        Pexp_apply
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "not_computing" (compile_stream.ml[]..[])
                        [
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "e" (compile_stream.ml[]..[])
                        ]
                      expression (compile_stream.ml[]..[])
                        Pexp_ident "e" (compile_stream.ml[]..[])
                      Some
                        expression (compile_stream.ml[]..[]) 
                          Pexp_coerce
                          expression (compile_stream.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (compile_stream.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                  expression (compile_stream.ml[]..[])
                                    Pexp_variant "Dot"
                                    Some
                                      expression (compile_stream.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                          expression (compile_stream.ml[]..[])
                                            Pexp_variant "Uid"
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_ident "gm" (compile_stream.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_construct "()" (compile_stream.ml[]..[])
                                                          None
                                                    ]
                                                ]
                                          expression (compile_stream.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_constant Const_string("slazy",None)
                                                ]
                                        ]
                                  expression (compile_stream.ml[]..[]) 
                                    Pexp_coerce
                                    expression (compile_stream.ml[]..[])
                                      Pexp_apply
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "slazy" (compile_stream.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "e" (compile_stream.ml[]..[])
                                      ]
                                    None
                                    core_type (compile_stream.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                      []
                                ]
                          None
                          core_type (compile_stream.ml[]..[])
                            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                            []
                  <case>
                    pattern (compile_stream.ml[]..[])
                      Ppat_construct "::" (compile_stream.ml[]..[])
                      Some
                        pattern (compile_stream.ml[]..[]) 
                          Ppat_tuple
                          [
                            pattern (compile_stream.ml[]..[])
                              Ppat_construct "Ntr" (compile_stream.ml[]..[])
                              Some
                                pattern (compile_stream.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "_loc" (compile_stream.ml[]..[])
                                    pattern (compile_stream.ml[]..[])
                                      Ppat_var "e" (compile_stream.ml[]..[])
                                  ]
                            pattern (compile_stream.ml[]..[])
                              Ppat_var "secl" (compile_stream.ml[]..[])
                          ]
                    expression (compile_stream.ml[]..[])
                      Pexp_ifthenelse
                      expression (compile_stream.ml[]..[])
                        Pexp_apply
                        expression (compile_stream.ml[]..[])
                          Pexp_ident "not_computing" (compile_stream.ml[]..[])
                        [
                          <label> ""
                            expression (compile_stream.ml[]..[])
                              Pexp_ident "e" (compile_stream.ml[]..[])
                        ]
                      expression (compile_stream.ml[]..[]) 
                        Pexp_coerce
                        expression (compile_stream.ml[]..[])
                          Pexp_variant "App"
                          Some
                            expression (compile_stream.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_stream.ml[]..[])
                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                expression (compile_stream.ml[]..[])
                                  Pexp_variant "App"
                                  Some
                                    expression (compile_stream.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                        expression (compile_stream.ml[]..[])
                                          Pexp_variant "Dot"
                                          Some
                                            expression (compile_stream.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_variant "Uid"
                                                  Some
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "gm" (compile_stream.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_stream.ml[]..[])
                                                                Pexp_construct "()" (compile_stream.ml[]..[])
                                                                None
                                                          ]
                                                      ]
                                                expression (compile_stream.ml[]..[])
                                                  Pexp_variant "Lid"
                                                  Some
                                                    expression (compile_stream.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                        expression (compile_stream.ml[]..[])
                                                          Pexp_constant Const_string("iapp",None)
                                                      ]
                                              ]
                                        expression (compile_stream.ml[]..[]) 
                                          Pexp_coerce
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "e" (compile_stream.ml[]..[])
                                          None
                                          core_type (compile_stream.ml[]..[])
                                            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                            []
                                      ]
                                expression (compile_stream.ml[]..[]) 
                                  Pexp_coerce
                                  expression (compile_stream.ml[]..[])
                                    Pexp_apply
                                    expression (compile_stream.ml[]..[])
                                      Pexp_ident "cstream" (compile_stream.ml[]..[])
                                    [
                                      <label> ""
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "gloc" (compile_stream.ml[]..[])
                                      <label> ""
                                        expression (compile_stream.ml[]..[])
                                          Pexp_ident "secl" (compile_stream.ml[]..[])
                                    ]
                                  None
                                  core_type (compile_stream.ml[]..[])
                                    Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                    []
                              ]
                        None
                        core_type (compile_stream.ml[]..[])
                          Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                          []
                      Some
                        expression (compile_stream.ml[]..[]) 
                          Pexp_coerce
                          expression (compile_stream.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (compile_stream.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_stream.ml[]..[])
                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                  expression (compile_stream.ml[]..[])
                                    Pexp_variant "App"
                                    Some
                                      expression (compile_stream.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                          expression (compile_stream.ml[]..[])
                                            Pexp_variant "Dot"
                                            Some
                                              expression (compile_stream.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_variant "Uid"
                                                    Some
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_stream.ml[]..[])
                                                              Pexp_ident "gm" (compile_stream.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_stream.ml[]..[])
                                                                  Pexp_construct "()" (compile_stream.ml[]..[])
                                                                  None
                                                            ]
                                                        ]
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_variant "Lid"
                                                    Some
                                                      expression (compile_stream.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                          expression (compile_stream.ml[]..[])
                                                            Pexp_constant Const_string("lapp",None)
                                                        ]
                                                ]
                                          expression (compile_stream.ml[]..[]) 
                                            Pexp_coerce
                                            expression (compile_stream.ml[]..[])
                                              Pexp_apply
                                              expression (compile_stream.ml[]..[])
                                                Pexp_ident "slazy" (compile_stream.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "_loc" (compile_stream.ml[]..[])
                                                <label> ""
                                                  expression (compile_stream.ml[]..[])
                                                    Pexp_ident "e" (compile_stream.ml[]..[])
                                              ]
                                            None
                                            core_type (compile_stream.ml[]..[])
                                              Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                              []
                                        ]
                                  expression (compile_stream.ml[]..[]) 
                                    Pexp_coerce
                                    expression (compile_stream.ml[]..[])
                                      Pexp_apply
                                      expression (compile_stream.ml[]..[])
                                        Pexp_ident "cstream" (compile_stream.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "gloc" (compile_stream.ml[]..[])
                                        <label> ""
                                          expression (compile_stream.ml[]..[])
                                            Pexp_ident "secl" (compile_stream.ml[]..[])
                                      ]
                                    None
                                    core_type (compile_stream.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                                      []
                                ]
                          None
                          core_type (compile_stream.ml[]..[])
                            Ptyp_constr "Astf.exp" (compile_stream.ml[]..[])
                            []
                ]
          ]
    ]
]
