[
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "fprintf" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_ident "Format.fprintf" (lexing_util.ml[]..[])
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "eprintf" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_ident "Format.eprintf" (lexing_util.ml[]..[])
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "lexing_store" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "s" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "buff" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "max" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "self" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_var "n" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_var "s" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ifthenelse
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident ">=" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "n" (lexing_util.ml[]..[])
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "max" (lexing_util.ml[]..[])
                                                ]
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "n" (lexing_util.ml[]..[])
                                              Some
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_match
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_apply
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "Streamf.peek" (lexing_util.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (lexing_util.ml[]..[])
                                                          Pexp_ident "s" (lexing_util.ml[]..[])
                                                    ]
                                                  [
                                                    <case>
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_construct "Some" (lexing_util.ml[]..[])
                                                        Some
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_var "x" (lexing_util.ml[]..[])
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_sequence
                                                        expression (lexing_util.ml[]..[])
                                                          Pexp_apply
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_ident "Streamf.junk" (lexing_util.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (lexing_util.ml[]..[])
                                                                Pexp_ident "s" (lexing_util.ml[]..[])
                                                          ]
                                                        expression (lexing_util.ml[]..[])
                                                          Pexp_sequence
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_apply
                                                            expression (lexing_util.ml[]..[])
                                                              Pexp_ident "String.set" (lexing_util.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (lexing_util.ml[]..[])
                                                                  Pexp_ident "buff" (lexing_util.ml[]..[])
                                                              <label> ""
                                                                expression (lexing_util.ml[]..[])
                                                                  Pexp_ident "n" (lexing_util.ml[]..[])
                                                              <label> ""
                                                                expression (lexing_util.ml[]..[])
                                                                  Pexp_ident "x" (lexing_util.ml[]..[])
                                                            ]
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_apply
                                                            expression (lexing_util.ml[]..[])
                                                              Pexp_ident "+" (lexing_util.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (lexing_util.ml[]..[])
                                                                  Pexp_ident "n" (lexing_util.ml[]..[])
                                                              <label> ""
                                                                expression (lexing_util.ml[]..[])
                                                                  Pexp_constant Const_int 1
                                                            ]
                                                    <case>
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_any
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "n" (lexing_util.ml[]..[])
                                                  ]
                                        ]
                                  ]
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "self" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_constant Const_int 0
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "s" (lexing_util.ml[]..[])
                              ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_type
    [
      type_declaration "lex_error" (lexing_util.ml[]..[]) (lexing_util.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lexing_util.ml[]..[])
                "Illegal_character" (lexing_util.ml[]..[])
                [
                  core_type (lexing_util.ml[]..[])
                    Ptyp_constr "char" (lexing_util.ml[]..[])
                    []
                ]
                None
              (lexing_util.ml[]..[])
                "Illegal_escape" (lexing_util.ml[]..[])
                [
                  core_type (lexing_util.ml[]..[])
                    Ptyp_constr "string" (lexing_util.ml[]..[])
                    []
                ]
                None
              (lexing_util.ml[]..[])
                "Illegal_quotation" (lexing_util.ml[]..[])
                [
                  core_type (lexing_util.ml[]..[])
                    Ptyp_constr "string" (lexing_util.ml[]..[])
                    []
                ]
                None
              (lexing_util.ml[]..[])
                "Illegal_antiquote" (lexing_util.ml[]..[])
                []
                None
              (lexing_util.ml[]..[])
                "Unterminated_comment" (lexing_util.ml[]..[])
                []
                None
              (lexing_util.ml[]..[])
                "Unterminated_string" (lexing_util.ml[]..[])
                []
                None
              (lexing_util.ml[]..[])
                "Unterminated_quotation" (lexing_util.ml[]..[])
                []
                None
              (lexing_util.ml[]..[])
                "Unterminated_antiquot" (lexing_util.ml[]..[])
                []
                None
              (lexing_util.ml[]..[])
                "Comment_start" (lexing_util.ml[]..[])
                []
                None
              (lexing_util.ml[]..[])
                "Comment_not_end" (lexing_util.ml[]..[])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_exception
    extension_constructor (lexing_util.ml[]..[])
      pext_name = "Lexing_error"
      pext_kind =
        Pext_decl
          [
            core_type (lexing_util.ml[]..[])
              Ptyp_constr "lex_error" (lexing_util.ml[]..[])
              []
          ]
          None
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "print_lex_error" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "ppf" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "e" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_match
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "e" (lexing_util.ml[]..[])
                      [
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Illegal_antiquote" (lexing_util.ml[]..[])
                            None
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("Illegal_antiquote",None)
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Illegal_character" (lexing_util.ml[]..[])
                            Some
                              pattern (lexing_util.ml[]..[])
                                Ppat_var "c" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("Illegal character (%s)",None)
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "Char.escaped" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "c" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Illegal_quotation" (lexing_util.ml[]..[])
                            Some
                              pattern (lexing_util.ml[]..[])
                                Ppat_var "s" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("Illegal quotation (%s)",None)
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "String.escaped" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "s" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Illegal_escape" (lexing_util.ml[]..[])
                            Some
                              pattern (lexing_util.ml[]..[])
                                Ppat_var "s" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("Illegal backslash escape in string or character (%s)",None)
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "s" (lexing_util.ml[]..[])
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Unterminated_comment" (lexing_util.ml[]..[])
                            None
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("Comment not terminated",None)
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Unterminated_string" (lexing_util.ml[]..[])
                            None
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("String literal not terminated",None)
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Unterminated_quotation" (lexing_util.ml[]..[])
                            None
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("Quotation not terminated",None)
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Unterminated_antiquot" (lexing_util.ml[]..[])
                            None
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("Antiquotation not terminated",None)
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Comment_start" (lexing_util.ml[]..[])
                            None
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("this is the start of a comment",None)
                            ]
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_construct "Comment_not_end" (lexing_util.ml[]..[])
                            None
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "fprintf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ppf" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("this is not the end of a comment",None)
                            ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "lex_error_to_string" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_apply
          expression (lexing_util.ml[]..[])
            Pexp_ident "Formatf.to_string" (lexing_util.ml[]..[])
          [
            <label> ""
              expression (lexing_util.ml[]..[])
                Pexp_ident "print_lex_error" (lexing_util.ml[]..[])
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "debug" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_apply
          expression (lexing_util.ml[]..[])
            Pexp_ident "ref" (lexing_util.ml[]..[])
          [
            <label> ""
              expression (lexing_util.ml[]..[])
                Pexp_construct "false" (lexing_util.ml[]..[])
                None
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "opt_char_len" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_construct "Some" (lexing_util.ml[]..[])
                Some
                  pattern (lexing_util.ml[]..[])
                    Ppat_any
              expression (lexing_util.ml[]..[])
                Pexp_constant Const_int 1
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_construct "None" (lexing_util.ml[]..[])
                None
              expression (lexing_util.ml[]..[])
                Pexp_constant Const_int 0
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "print_opt_char" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "fmt" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_construct "Some" (lexing_util.ml[]..[])
                      Some
                        pattern (lexing_util.ml[]..[])
                          Ppat_var "c" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "fprintf" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "fmt" (lexing_util.ml[]..[])
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_constant Const_string("Some %c",None)
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "c" (lexing_util.ml[]..[])
                      ]
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_construct "None" (lexing_util.ml[]..[])
                      None
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "fprintf" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "fmt" (lexing_util.ml[]..[])
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_constant Const_string("None",None)
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "turn_on_quotation_debug" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_construct "()" (lexing_util.ml[]..[])
                None
              expression (lexing_util.ml[]..[])
                Pexp_apply
                expression (lexing_util.ml[]..[])
                  Pexp_ident ":=" (lexing_util.ml[]..[])
                [
                  <label> ""
                    expression (lexing_util.ml[]..[])
                      Pexp_ident "debug" (lexing_util.ml[]..[])
                  <label> ""
                    expression (lexing_util.ml[]..[])
                      Pexp_construct "true" (lexing_util.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "turn_off_quotation_debug" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_construct "()" (lexing_util.ml[]..[])
                None
              expression (lexing_util.ml[]..[])
                Pexp_apply
                expression (lexing_util.ml[]..[])
                  Pexp_ident ":=" (lexing_util.ml[]..[])
                [
                  <label> ""
                    expression (lexing_util.ml[]..[])
                      Pexp_ident "debug" (lexing_util.ml[]..[])
                  <label> ""
                    expression (lexing_util.ml[]..[])
                      Pexp_construct "false" (lexing_util.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_type
    [
      type_declaration "context" (lexing_util.ml[]..[]) (lexing_util.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lexing_util.ml[]..[])
                Mutable
                "loc" (lexing_util.ml[]..[])                core_type (lexing_util.ml[]..[])
                  Ptyp_poly
                  core_type (lexing_util.ml[]..[])
                    Ptyp_constr "list" (lexing_util.ml[]..[])
                    [
                      core_type (lexing_util.ml[]..[])
                        Ptyp_constr "Locf.position" (lexing_util.ml[]..[])
                        []
                    ]
              (lexing_util.ml[]..[])
                Immutable
                "buffer" (lexing_util.ml[]..[])                core_type (lexing_util.ml[]..[])
                  Ptyp_poly
                  core_type (lexing_util.ml[]..[])
                    Ptyp_constr "Buffer.t" (lexing_util.ml[]..[])
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "new_cxt" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_construct "()" (lexing_util.ml[]..[])
                None
              expression (lexing_util.ml[]..[])
                Pexp_record
                [
                  "loc" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_construct "[]" (lexing_util.ml[]..[])
                      None
                  "buffer" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "Buffer.create" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_constant Const_int 256
                      ]
                ]
                None
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "++" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_ident "Buffer.add_string" (lexing_util.ml[]..[])
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "+>" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_ident "Buffer.add_char" (lexing_util.ml[]..[])
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "from_lexbuf" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_ident "Location_util.from_lexbuf" (lexing_util.ml[]..[])
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "!!" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_ident "Location_util.from_lexbuf" (lexing_util.ml[]..[])
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "--" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_ident "Location_util.--" (lexing_util.ml[]..[])
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "store" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "lexbuf" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "++" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_field
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "c" (lexing_util.ml[]..[])
                            "buffer" (lexing_util.ml[]..[])
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "Lexing.lexeme" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                            ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "with_store" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "lexbuf" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "f" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "store" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "c" (lexing_util.ml[]..[])
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              ]
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "f" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "c" (lexing_util.ml[]..[])
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "buff_contents" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "contents" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "Buffer.contents" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_field
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "c" (lexing_util.ml[]..[])
                            "buffer" (lexing_util.ml[]..[])
                      ]
                ]
                expression (lexing_util.ml[]..[])
                  Pexp_sequence
                  expression (lexing_util.ml[]..[])
                    Pexp_apply
                    expression (lexing_util.ml[]..[])
                      Pexp_ident "Buffer.reset" (lexing_util.ml[]..[])
                    [
                      <label> ""
                        expression (lexing_util.ml[]..[])
                          Pexp_field
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "c" (lexing_util.ml[]..[])
                          "buffer" (lexing_util.ml[]..[])
                    ]
                  expression (lexing_util.ml[]..[])
                    Pexp_ident "contents" (lexing_util.ml[]..[])
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "move_curr_p" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "shift" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_constraint
                      pattern (lexing_util.ml[]..[])
                        Ppat_var "lexbuf" (lexing_util.ml[]..[])
                      core_type (lexing_util.ml[]..[])
                        Ptyp_constr "Lexing.lexbuf" (lexing_util.ml[]..[])
                        []
                    expression (lexing_util.ml[]..[])
                      Pexp_setfield
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                      "lex_curr_pos" (lexing_util.ml[]..[])
                      expression (lexing_util.ml[]..[])
                        Pexp_apply
                        expression (lexing_util.ml[]..[])
                          Pexp_ident "+" (lexing_util.ml[]..[])
                        [
                          <label> ""
                            expression (lexing_util.ml[]..[])
                              Pexp_field
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_curr_pos" (lexing_util.ml[]..[])
                          <label> ""
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "shift" (lexing_util.ml[]..[])
                        ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "push_loc_cont" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "lexbuf" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "lexer" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "c" (lexing_util.ml[]..[])
                              "loc" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_construct "::" (lexing_util.ml[]..[])
                                Some
                                  expression (lexing_util.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "Lexing.lexeme_start_p" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_field
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "c" (lexing_util.ml[]..[])
                                        "loc" (lexing_util.ml[]..[])
                                    ]
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexer" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "c" (lexing_util.ml[]..[])
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "pop_loc" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_setfield
                expression (lexing_util.ml[]..[])
                  Pexp_ident "c" (lexing_util.ml[]..[])
                "loc" (lexing_util.ml[]..[])
                expression (lexing_util.ml[]..[])
                  Pexp_apply
                  expression (lexing_util.ml[]..[])
                    Pexp_ident "List.tl" (lexing_util.ml[]..[])
                  [
                    <label> ""
                      expression (lexing_util.ml[]..[])
                        Pexp_field
                        expression (lexing_util.ml[]..[])
                          Pexp_ident "c" (lexing_util.ml[]..[])
                        "loc" (lexing_util.ml[]..[])
                  ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "null_loc" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_apply
                expression (lexing_util.ml[]..[])
                  Pexp_ident "=" (lexing_util.ml[]..[])
                [
                  <label> ""
                    expression (lexing_util.ml[]..[])
                      Pexp_field
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "c" (lexing_util.ml[]..[])
                      "loc" (lexing_util.ml[]..[])
                  <label> ""
                    expression (lexing_util.ml[]..[])
                      Pexp_construct "[]" (lexing_util.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "update_loc" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_fun "?file"
          None
          pattern (lexing_util.ml[]..[])
            Ppat_var "file" (lexing_util.ml[]..[])
          expression (lexing_util.ml[]..[])
            Pexp_fun "?absolute"
            Some
              expression (lexing_util.ml[]..[])
                Pexp_construct "false" (lexing_util.ml[]..[])
                None
            pattern (lexing_util.ml[]..[])
              Ppat_var "absolute" (lexing_util.ml[]..[])
            expression (lexing_util.ml[]..[])
              Pexp_fun "?retract"
              Some
                expression (lexing_util.ml[]..[])
                  Pexp_constant Const_int 0
              pattern (lexing_util.ml[]..[])
                Ppat_var "retract" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_fun "?line"
                Some
                  expression (lexing_util.ml[]..[])
                    Pexp_constant Const_int 1
                pattern (lexing_util.ml[]..[])
                  Ppat_var "line" (lexing_util.ml[]..[])
                expression (lexing_util.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (lexing_util.ml[]..[])
                        Ppat_constraint
                        pattern (lexing_util.ml[]..[])
                          Ppat_var "lexbuf" (lexing_util.ml[]..[])
                        core_type (lexing_util.ml[]..[])
                          Ptyp_constr "Lexing.lexbuf" (lexing_util.ml[]..[])
                          []
                      expression (lexing_util.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lexing_util.ml[]..[])
                              Ppat_var "pos" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_field
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_curr_p" (lexing_util.ml[]..[])
                        ]
                        expression (lexing_util.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lexing_util.ml[]..[])
                                Ppat_var "new_file" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_match
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "file" (lexing_util.ml[]..[])
                                [
                                  <case>
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_construct "None" (lexing_util.ml[]..[])
                                      None
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "pos" (lexing_util.ml[]..[])
                                      "pos_fname" (lexing_util.ml[]..[])
                                  <case>
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_construct "Some" (lexing_util.ml[]..[])
                                      Some
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_var "s" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "s" (lexing_util.ml[]..[])
                                ]
                          ]
                          expression (lexing_util.ml[]..[])
                            Pexp_setfield
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                            "lex_curr_p" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_record
                              [
                                "pos_fname" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "new_file" (lexing_util.ml[]..[])
                                "pos_lnum" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ifthenelse
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "absolute" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "line" (lexing_util.ml[]..[])
                                    Some
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "+" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "pos" (lexing_util.ml[]..[])
                                              "pos_lnum" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "line" (lexing_util.ml[]..[])
                                        ]
                                "pos_bol" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "-" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "pos" (lexing_util.ml[]..[])
                                          "pos_cnum" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "retract" (lexing_util.ml[]..[])
                                    ]
                              ]
                              Some
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "pos" (lexing_util.ml[]..[])
                  ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "err" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_constraint
                pattern (lexing_util.ml[]..[])
                  Ppat_var "error" (lexing_util.ml[]..[])
                core_type (lexing_util.ml[]..[])
                  Ptyp_constr "lex_error" (lexing_util.ml[]..[])
                  []
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_constraint
                      pattern (lexing_util.ml[]..[])
                        Ppat_var "loc" (lexing_util.ml[]..[])
                      core_type (lexing_util.ml[]..[])
                        Ptyp_constr "Locf.t" (lexing_util.ml[]..[])
                        []
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "raise" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_construct "Locf.Exc_located" (lexing_util.ml[]..[])
                            Some
                              expression (lexing_util.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "loc" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_construct "Lexing_error" (lexing_util.ml[]..[])
                                    Some
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "error" (lexing_util.ml[]..[])
                                ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "warn" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "error" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_constraint
                      pattern (lexing_util.ml[]..[])
                        Ppat_var "loc" (lexing_util.ml[]..[])
                      core_type (lexing_util.ml[]..[])
                        Ptyp_constr "Locf.t" (lexing_util.ml[]..[])
                        []
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "@@" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "Fan_warnings.emitf" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_field
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "loc" (lexing_util.ml[]..[])
                                  "loc_start" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_string("Warning: %s",None)
                            ]
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "lex_error_to_string" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "error" (lexing_util.ml[]..[])
                            ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "lex_comment" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_constraint
                      pattern (lexing_util.ml[]..[])
                        Ppat_var "lexbuf" (lexing_util.ml[]..[])
                      core_type (lexing_util.ml[]..[])
                        Ptyp_constr "Lexing.lexbuf" (lexing_util.ml[]..[])
                        []
                    expression (lexing_util.ml[]..[])
                      Pexp_let Rec
                      [
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_ifthenelse
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident ">=" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_buffer_len" (lexing_util.ml[]..[])
                                    ]
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ifthenelse
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_eof_reached" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_constant Const_int 256
                                    Some
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "refill_buff" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          ]
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_construct "()" (lexing_util.ml[]..[])
                                                None
                                          ]
                                  Some
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_var "i" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                        ]
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "+" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "i" (lexing_util.ml[]..[])
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_constant Const_int 1
                                            ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "Char.code" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "String.get" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_field
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                    "lex_buffer" (lexing_util.ml[]..[])
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "i" (lexing_util.ml[]..[])
                                              ]
                                        ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state0" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 13
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state3" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 40
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state6" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 10
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state4" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 42
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state5" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 256
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state2" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state1" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state1" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 4
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state2" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 3
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state3" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 2
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 10
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state4" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state4" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 2
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state5" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 4
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 41
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state8" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state6" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 4
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 42
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state7" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state7" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 0
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state8" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 1
                            ]
                      ]
                      expression (lexing_util.ml[]..[])
                        Pexp_sequence
                        expression (lexing_util.ml[]..[])
                          Pexp_sequence
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "pos" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_field
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                  "lex_curr_pos" (lexing_util.ml[]..[])
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_start_pos" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "pos" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_last_pos" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "pos" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_last_action" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_constant Const_int -1
                        expression (lexing_util.ml[]..[])
                          Pexp_sequence
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "__ocaml_lex_result" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "__ocaml_lex_state0" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_construct "()" (lexing_util.ml[]..[])
                                        None
                                  ]
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_start_p" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_field
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                "lex_curr_p" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_curr_p" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_record
                                [
                                  "pos_cnum" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "+" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_abs_pos" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_curr_pos" (lexing_util.ml[]..[])
                                      ]
                                ]
                                Some
                                  expression (lexing_util.ml[]..[])
                                    Pexp_field
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_curr_p" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_match
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__ocaml_lex_result" (lexing_util.ml[]..[])
                              [
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 0
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "push_loc_cont" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lex_comment" (lexing_util.ml[]..[])
                                        ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_comment" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 1
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "pop_loc" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                      ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 2
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "update_loc" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "with_store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lex_comment" (lexing_util.ml[]..[])
                                      ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 3
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "@@" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "err" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_construct "Unterminated_comment" (lexing_util.ml[]..[])
                                                None
                                          ]
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "Location_util.of_positions" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "List.hd" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_field
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "c" (lexing_util.ml[]..[])
                                                      "loc" (lexing_util.ml[]..[])
                                                ]
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_curr_p" (lexing_util.ml[]..[])
                                          ]
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 4
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "with_store" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "c" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_comment" (lexing_util.ml[]..[])
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_any
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "failwith" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "^" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_constant Const_string("Lexing_util",None)
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "^" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_constant Const_string(".",None)
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_apply
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "^" (lexing_util.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_constant Const_string("lex_comment",None)
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_constant Const_string(" lexing: empty token",None)
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "lex_string" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_constraint
                      pattern (lexing_util.ml[]..[])
                        Ppat_var "lexbuf" (lexing_util.ml[]..[])
                      core_type (lexing_util.ml[]..[])
                        Ptyp_constr "Lexing.lexbuf" (lexing_util.ml[]..[])
                        []
                    expression (lexing_util.ml[]..[])
                      Pexp_let Rec
                      [
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_ifthenelse
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident ">=" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_buffer_len" (lexing_util.ml[]..[])
                                    ]
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ifthenelse
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_eof_reached" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_constant Const_int 256
                                    Some
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "refill_buff" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          ]
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_construct "()" (lexing_util.ml[]..[])
                                                None
                                          ]
                                  Some
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_var "i" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                        ]
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "+" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "i" (lexing_util.ml[]..[])
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_constant Const_int 1
                                            ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "Char.code" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "String.get" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_field
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                    "lex_buffer" (lexing_util.ml[]..[])
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "i" (lexing_util.ml[]..[])
                                              ]
                                        ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state0" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 13
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state3" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 34
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state6" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 10
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state4" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 92
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state5" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 256
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state2" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state1" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state1" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 6
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state2" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 5
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state3" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 4
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 10
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state4" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state4" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 4
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state5" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 6
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 13
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "Array.set" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_field
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                    "lex_mem" (lexing_util.ml[]..[])
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_constant Const_int 1
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_field
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                    "lex_curr_pos" (lexing_util.ml[]..[])
                                              ]
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "__ocaml_lex_state11" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_construct "()" (lexing_util.ml[]..[])
                                                    None
                                              ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 48
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 49
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 50
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 51
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 52
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 53
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 54
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 55
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 56
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 57
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state9" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 120
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state8" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 256
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 32
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 34
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 39
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 92
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 98
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 110
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 114
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 116
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state10" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 10
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "Array.set" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_field
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                    "lex_mem" (lexing_util.ml[]..[])
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_constant Const_int 1
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_field
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                    "lex_curr_pos" (lexing_util.ml[]..[])
                                              ]
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "__ocaml_lex_state12" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_construct "()" (lexing_util.ml[]..[])
                                                    None
                                              ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state7" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state6" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 0
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state7" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 3
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state8" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 3
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 48
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 49
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 50
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 51
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 52
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 53
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 54
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 55
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 56
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 57
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 65
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 66
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 67
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 68
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 69
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 70
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 97
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 98
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 99
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 100
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 101
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 102
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state14" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state9" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 3
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 48
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 49
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 50
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 51
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 52
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 53
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 54
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 55
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 56
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 57
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state13" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state10" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 2
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state11" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "Array.set" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_mem" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_constant Const_int 0
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "Array.get" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_mem" (lexing_util.ml[]..[])
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_constant Const_int 1
                                          ]
                                    ]
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_pos" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_field
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        "lex_curr_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_setfield
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        "lex_last_action" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_constant Const_int 1
                                      expression (lexing_util.ml[]..[])
                                        Pexp_match
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_construct "()" (lexing_util.ml[]..[])
                                                None
                                          ]
                                        [
                                          <case>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 9
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 10
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 32
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "__ocaml_lex_state12" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_construct "()" (lexing_util.ml[]..[])
                                                    None
                                              ]
                                          <case>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_any
                                            expression (lexing_util.ml[]..[])
                                              Pexp_sequence
                                              expression (lexing_util.ml[]..[])
                                                Pexp_setfield
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_curr_pos" (lexing_util.ml[]..[])
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_field
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                  "lex_last_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_action" (lexing_util.ml[]..[])
                                        ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state12" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "Array.set" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_mem" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_constant Const_int 0
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "Array.get" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_mem" (lexing_util.ml[]..[])
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_constant Const_int 1
                                          ]
                                    ]
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_pos" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_field
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        "lex_curr_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_setfield
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        "lex_last_action" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_constant Const_int 1
                                      expression (lexing_util.ml[]..[])
                                        Pexp_match
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_construct "()" (lexing_util.ml[]..[])
                                                None
                                          ]
                                        [
                                          <case>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 9
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 32
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "__ocaml_lex_state12" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_construct "()" (lexing_util.ml[]..[])
                                                    None
                                              ]
                                          <case>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_any
                                            expression (lexing_util.ml[]..[])
                                              Pexp_sequence
                                              expression (lexing_util.ml[]..[])
                                                Pexp_setfield
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_curr_pos" (lexing_util.ml[]..[])
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_field
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                  "lex_last_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_action" (lexing_util.ml[]..[])
                                        ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state13" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 48
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 49
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 50
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 51
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 52
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 53
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 54
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 55
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 56
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 57
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state10" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state14" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 48
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 49
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 50
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 51
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 52
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 53
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 54
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 55
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 56
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 57
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 65
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 66
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 67
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 68
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 69
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 70
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 97
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 98
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 99
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 100
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 101
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 102
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state10" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                      ]
                      expression (lexing_util.ml[]..[])
                        Pexp_sequence
                        expression (lexing_util.ml[]..[])
                          Pexp_sequence
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_var "pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_field
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_curr_pos" (lexing_util.ml[]..[])
                              ]
                              expression (lexing_util.ml[]..[])
                                Pexp_setfield
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                "lex_start_pos" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "pos" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_sequence
                              expression (lexing_util.ml[]..[])
                                Pexp_setfield
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                "lex_last_pos" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "pos" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_setfield
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                "lex_last_action" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int -1
                          expression (lexing_util.ml[]..[])
                            Pexp_setfield
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                            "lex_mem" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "Array.create" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_constant Const_int 2
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_constant Const_int -1
                              ]
                        expression (lexing_util.ml[]..[])
                          Pexp_sequence
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "__ocaml_lex_result" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "__ocaml_lex_state0" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_construct "()" (lexing_util.ml[]..[])
                                        None
                                  ]
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_start_p" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_field
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                "lex_curr_p" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_curr_p" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_record
                                [
                                  "pos_cnum" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "+" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_abs_pos" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_curr_pos" (lexing_util.ml[]..[])
                                      ]
                                ]
                                Some
                                  expression (lexing_util.ml[]..[])
                                    Pexp_field
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_curr_p" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_match
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__ocaml_lex_result" (lexing_util.ml[]..[])
                              [
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 0
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "pop_loc" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "c" (lexing_util.ml[]..[])
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 1
                                  expression (lexing_util.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_var "space" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "Lexing.sub_lexeme" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "Array.get" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_field
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                      "lex_mem" (lexing_util.ml[]..[])
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_constant Const_int 0
                                                ]
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_curr_pos" (lexing_util.ml[]..[])
                                          ]
                                    ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "update_loc" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          <label> "retract"
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "String.length" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "space" (lexing_util.ml[]..[])
                                              ]
                                        ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_string" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 2
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "with_store" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "c" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_string" (lexing_util.ml[]..[])
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 3
                                  expression (lexing_util.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_var "x" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "Lexing.sub_lexeme_char" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "+" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_field
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                      "lex_start_pos" (lexing_util.ml[]..[])
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_constant Const_int 1
                                                ]
                                          ]
                                    ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "@@" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "warn" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_construct "Illegal_escape" (lexing_util.ml[]..[])
                                                    Some
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_apply
                                                        expression (lexing_util.ml[]..[])
                                                          Pexp_ident "String.make" (lexing_util.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (lexing_util.ml[]..[])
                                                              Pexp_constant Const_int 1
                                                          <label> ""
                                                            expression (lexing_util.ml[]..[])
                                                              Pexp_ident "x" (lexing_util.ml[]..[])
                                                        ]
                                              ]
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "Location_util.from_lexbuf" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              ]
                                        ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "with_store" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lex_string" (lexing_util.ml[]..[])
                                        ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 4
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "update_loc" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "with_store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lex_string" (lexing_util.ml[]..[])
                                      ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 5
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "@@" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "err" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_construct "Unterminated_string" (lexing_util.ml[]..[])
                                                None
                                          ]
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "Location_util.of_positions" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "List.hd" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_field
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "c" (lexing_util.ml[]..[])
                                                      "loc" (lexing_util.ml[]..[])
                                                ]
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_curr_p" (lexing_util.ml[]..[])
                                          ]
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 6
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "with_store" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "c" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_string" (lexing_util.ml[]..[])
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_any
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "failwith" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "^" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_constant Const_string("Lexing_util",None)
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "^" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_constant Const_string(".",None)
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_apply
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "^" (lexing_util.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_constant Const_string("lex_string",None)
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_constant Const_string(" lexing: empty token",None)
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "lex_quotation" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "c" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_constraint
                      pattern (lexing_util.ml[]..[])
                        Ppat_var "lexbuf" (lexing_util.ml[]..[])
                      core_type (lexing_util.ml[]..[])
                        Ptyp_constr "Lexing.lexbuf" (lexing_util.ml[]..[])
                        []
                    expression (lexing_util.ml[]..[])
                      Pexp_let Rec
                      [
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_ifthenelse
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident ">=" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_buffer_len" (lexing_util.ml[]..[])
                                    ]
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ifthenelse
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_eof_reached" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_constant Const_int 256
                                    Some
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "refill_buff" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          ]
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_construct "()" (lexing_util.ml[]..[])
                                                None
                                          ]
                                  Some
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_var "i" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                        ]
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "+" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "i" (lexing_util.ml[]..[])
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_constant Const_int 1
                                            ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "Char.code" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "String.get" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_field
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                    "lex_buffer" (lexing_util.ml[]..[])
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "i" (lexing_util.ml[]..[])
                                              ]
                                        ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state0" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 10
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state6" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 256
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state3" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 125
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state9" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 34
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state4" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 123
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state8" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 13
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state5" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 40
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state7" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 37
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state10" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 39
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state2" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state1" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state1" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 8
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state2" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 8
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 10
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 13
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 256
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 92
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state19" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state20" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state3" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 6
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state4" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 5
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state5" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 4
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 10
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state6" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state6" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 4
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state7" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 8
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 42
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state18" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state8" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 2
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state9" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 1
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state10" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_sequence
                                  expression (lexing_util.ml[]..[])
                                    Pexp_setfield
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_last_pos" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_field
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_curr_pos" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_setfield
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      "lex_last_action" (lexing_util.ml[]..[])
                                      expression (lexing_util.ml[]..[])
                                        Pexp_constant Const_int 8
                                    expression (lexing_util.ml[]..[])
                                      Pexp_match
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 95
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 97
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 98
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 99
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 100
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 101
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 102
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 103
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 104
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 105
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 106
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 107
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 108
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 109
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 110
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 111
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 112
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 113
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 114
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 115
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 116
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 117
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 118
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 119
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 120
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 121
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 122
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 223
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 224
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 225
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 226
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 227
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 228
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 229
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 230
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 231
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 232
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 233
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 234
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 235
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 236
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 237
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 238
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 239
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 240
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 241
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 242
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 243
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 244
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 245
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 246
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 248
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 249
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 250
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 251
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 252
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 253
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 254
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 255
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state13" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 123
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state11" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 46
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state15" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 37
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state16" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 64
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state12" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 65
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 66
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 67
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 68
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 69
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 70
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 71
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 72
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 73
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 74
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 75
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 76
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 77
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 78
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 79
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 80
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 81
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 82
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 83
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 84
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 85
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 86
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 87
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 88
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 89
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 90
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 192
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 193
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 194
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 195
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 196
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 197
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 198
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 199
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 200
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 201
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 202
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 203
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 204
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 205
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 206
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 207
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 208
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 209
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 210
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 211
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 212
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 213
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 214
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 216
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 217
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 218
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 219
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 220
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 221
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 222
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "__ocaml_lex_state14" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_construct "()" (lexing_util.ml[]..[])
                                                  None
                                            ]
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_any
                                          expression (lexing_util.ml[]..[])
                                            Pexp_sequence
                                            expression (lexing_util.ml[]..[])
                                              Pexp_setfield
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_curr_pos" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_last_pos" (lexing_util.ml[]..[])
                                            expression (lexing_util.ml[]..[])
                                              Pexp_field
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                              "lex_last_action" (lexing_util.ml[]..[])
                                      ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state11" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 0
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state12" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 65
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 66
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 67
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 68
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 69
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 70
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 71
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 72
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 73
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 74
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 75
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 76
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 77
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 78
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 79
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 80
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 81
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 82
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 83
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 84
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 85
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 86
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 87
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 88
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 89
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 90
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 95
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 97
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 98
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 99
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 100
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 101
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 102
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 103
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 104
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 105
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 106
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 107
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 108
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 109
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 110
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 111
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 112
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 113
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 114
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 115
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 116
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 117
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 118
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 119
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 120
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 121
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 122
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 192
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 193
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 194
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 195
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 196
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 197
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 198
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 199
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 200
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 201
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 202
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 203
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 204
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 205
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 206
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 207
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 208
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 209
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 210
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 211
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 212
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 213
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 214
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 216
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 217
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 218
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 219
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 220
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 221
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 222
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 223
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 224
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 225
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 226
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 227
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 228
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 229
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 230
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 231
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 232
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 233
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 234
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 235
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 236
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 237
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 238
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 239
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 240
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 241
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 242
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 243
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 244
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 245
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 246
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 248
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 249
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 250
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 251
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 252
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 253
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 254
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 255
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state17" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state13" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 39
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 45
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 48
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 49
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 50
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 51
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 52
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 53
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 54
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 55
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 56
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 57
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 65
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 66
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 67
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 68
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 69
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 70
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 71
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 72
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 73
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 74
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 75
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 76
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 77
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 78
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 79
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 80
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 81
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 82
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 83
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 84
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 85
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 86
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 87
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 88
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 89
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 90
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 95
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 97
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 98
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 99
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 100
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 101
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 102
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 103
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 104
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 105
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 106
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 107
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 108
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 109
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 110
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 111
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 112
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 113
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 114
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 115
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 116
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 117
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 118
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 119
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 120
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 121
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 122
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 192
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 193
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 194
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 195
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 196
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 197
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 198
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 199
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 200
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 201
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 202
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 203
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 204
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 205
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 206
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 207
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 208
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 209
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 210
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 211
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 212
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 213
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 214
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 216
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 217
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 218
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 219
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 220
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 221
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 222
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 223
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 224
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 225
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 226
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 227
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 228
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 229
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 230
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 231
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 232
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 233
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 234
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 235
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 236
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 237
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 238
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 239
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 240
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 241
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 242
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 243
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 244
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 245
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 246
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 248
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 249
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 250
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 251
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 252
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 253
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 254
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 255
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state13" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 123
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state11" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 64
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state12" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state14" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 46
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state15" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 39
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 48
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 49
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 50
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 51
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 52
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 53
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 54
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 55
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 56
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 57
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 65
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 66
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 67
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 68
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 69
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 70
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 71
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 72
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 73
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 74
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 75
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 76
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 77
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 78
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 79
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 80
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 81
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 82
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 83
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 84
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 85
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 86
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 87
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 88
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 89
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 90
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 95
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 97
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 98
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 99
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 100
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 101
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 102
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 103
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 104
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 105
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 106
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 107
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 108
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 109
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 110
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 111
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 112
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 113
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 114
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 115
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 116
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 117
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 118
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 119
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 120
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 121
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 122
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 192
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 193
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 194
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 195
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 196
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 197
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 198
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 199
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 200
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 201
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 202
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 203
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 204
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 205
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 206
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 207
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 208
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 209
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 210
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 211
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 212
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 213
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 214
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 216
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 217
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 218
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 219
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 220
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 221
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 222
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 223
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 224
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 225
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 226
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 227
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 228
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 229
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 230
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 231
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 232
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 233
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 234
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 235
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 236
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 237
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 238
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 239
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 240
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 241
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 242
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 243
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 244
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 245
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 246
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 248
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 249
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 250
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 251
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 252
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 253
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 254
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 255
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state14" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state15" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 95
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 97
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 98
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 99
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 100
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 101
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 102
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 103
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 104
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 105
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 106
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 107
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 108
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 109
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 110
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 111
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 112
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 113
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 114
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 115
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 116
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 117
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 118
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 119
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 120
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 121
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 122
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 223
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 224
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 225
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 226
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 227
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 228
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 229
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 230
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 231
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 232
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 233
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 234
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 235
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 236
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 237
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 238
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 239
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 240
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 241
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 242
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 243
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 244
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 245
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 246
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 248
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 249
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 250
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 251
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 252
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 253
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 254
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 255
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state13" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 65
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 66
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 67
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 68
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 69
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 70
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 71
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 72
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 73
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 74
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 75
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 76
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 77
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 78
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 79
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 80
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 81
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 82
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 83
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 84
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 85
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 86
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 87
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 88
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 89
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 90
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 192
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 193
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 194
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 195
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 196
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 197
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 198
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 199
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 200
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 201
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 202
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 203
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 204
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 205
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 206
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 207
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 208
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 209
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 210
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 211
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 212
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 213
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 214
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 216
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 217
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 218
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 219
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 220
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 221
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 222
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state14" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state16" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 95
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 97
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 98
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 99
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 100
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 101
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 102
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 103
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 104
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 105
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 106
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 107
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 108
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 109
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 110
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 111
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 112
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 113
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 114
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 115
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 116
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 117
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 118
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 119
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 120
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 121
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 122
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 223
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 224
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 225
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 226
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 227
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 228
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 229
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 230
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 231
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 232
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 233
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 234
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 235
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 236
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 237
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 238
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 239
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 240
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 241
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 242
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 243
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 244
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 245
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 246
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 248
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 249
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 250
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 251
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 252
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 253
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 254
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 255
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state13" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 123
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state11" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 46
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state15" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 64
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state12" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 65
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 66
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 67
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 68
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 69
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 70
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 71
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 72
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 73
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 74
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 75
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 76
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 77
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 78
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 79
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 80
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 81
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 82
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 83
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 84
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 85
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 86
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 87
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 88
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 89
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 90
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 192
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 193
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 194
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 195
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 196
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 197
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 198
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 199
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 200
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 201
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 202
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 203
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 204
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 205
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 206
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 207
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 208
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 209
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 210
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 211
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 212
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 213
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 214
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 216
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 217
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 218
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 219
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 220
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 221
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 222
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state14" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state17" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 123
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state11" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_or
          pattern (lexing_util.ml[]..[])
            Ppat_or
            pattern (lexing_util.ml[]..[])
              Ppat_or
              pattern (lexing_util.ml[]..[])
                Ppat_or
                pattern (lexing_util.ml[]..[])
                  Ppat_or
                  pattern (lexing_util.ml[]..[])
                    Ppat_or
                    pattern (lexing_util.ml[]..[])
                      Ppat_or
                      pattern (lexing_util.ml[]..[])
                        Ppat_or
                        pattern (lexing_util.ml[]..[])
                          Ppat_or
                          pattern (lexing_util.ml[]..[])
                            Ppat_or
                            pattern (lexing_util.ml[]..[])
                              Ppat_or
                              pattern (lexing_util.ml[]..[])
                                Ppat_or
                                pattern (lexing_util.ml[]..[])
                                  Ppat_or
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_or
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_or
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 39
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 48
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 49
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 50
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 51
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 52
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 53
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 54
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 55
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 56
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 57
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 65
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 66
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 67
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 68
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 69
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 70
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 71
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 72
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 73
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 74
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 75
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 76
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 77
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 78
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 79
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 80
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 81
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 82
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 83
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 84
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 85
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 86
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 87
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 88
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 89
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 90
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 95
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 97
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 98
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 99
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 100
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 101
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 102
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 103
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 104
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 105
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 106
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 107
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 108
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 109
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 110
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 111
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 112
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 113
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 114
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 115
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 116
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 117
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 118
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 119
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 120
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 121
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 122
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 192
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 193
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 194
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 195
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 196
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 197
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 198
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 199
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 200
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 201
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 202
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 203
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 204
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 205
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 206
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 207
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 208
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 209
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 210
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 211
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 212
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 213
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 214
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 216
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 217
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 218
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 219
                                    pattern (lexing_util.ml[]..[])
                                      Ppat_constant Const_int 220
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 221
                                pattern (lexing_util.ml[]..[])
                                  Ppat_constant Const_int 222
                              pattern (lexing_util.ml[]..[])
                                Ppat_constant Const_int 223
                            pattern (lexing_util.ml[]..[])
                              Ppat_constant Const_int 224
                          pattern (lexing_util.ml[]..[])
                            Ppat_constant Const_int 225
                        pattern (lexing_util.ml[]..[])
                          Ppat_constant Const_int 226
                      pattern (lexing_util.ml[]..[])
                        Ppat_constant Const_int 227
                    pattern (lexing_util.ml[]..[])
                      Ppat_constant Const_int 228
                  pattern (lexing_util.ml[]..[])
                    Ppat_constant Const_int 229
                pattern (lexing_util.ml[]..[])
                  Ppat_constant Const_int 230
              pattern (lexing_util.ml[]..[])
                Ppat_constant Const_int 231
            pattern (lexing_util.ml[]..[])
              Ppat_constant Const_int 232
          pattern (lexing_util.ml[]..[])
            Ppat_constant Const_int 233
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 234
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 235
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 236
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 237
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 238
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 239
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 240
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 241
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 242
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 243
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 244
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 245
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 246
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 248
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 249
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 250
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 251
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 252
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 253
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 254
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 255
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state17" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state18" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 3
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state19" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 32
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 34
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 39
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 92
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 98
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 110
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 114
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 116
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state20" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 120
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state22" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 48
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 49
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 50
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 51
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 52
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 53
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 54
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 55
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 56
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 57
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state23" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state20" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_constant Const_int 39
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state21" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state21" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_constant Const_int 7
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state22" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 48
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 49
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 50
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 51
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 52
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 53
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 54
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 55
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 56
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 57
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 65
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 66
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 67
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 68
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 69
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 70
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 97
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 98
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 99
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 100
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 101
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 102
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state25" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state23" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 48
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 49
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 50
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 51
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 52
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 53
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 54
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 55
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 56
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 57
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state24" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state24" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 48
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 49
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 50
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 51
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 52
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 53
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 54
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 55
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 56
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 57
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state20" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "__ocaml_lex_state25" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_construct "()" (lexing_util.ml[]..[])
                                  None
                                expression (lexing_util.ml[]..[])
                                  Pexp_match
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "__ocaml_lex_next_char" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "()" (lexing_util.ml[]..[])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_or
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_or
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_or
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_or
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_or
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_or
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_or
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_or
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_or
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_or
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_or
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_or
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_or
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_or
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_or
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_or
                                                                      pattern (lexing_util.ml[]..[])
Ppat_or
pattern (lexing_util.ml[]..[])
  Ppat_or
  pattern (lexing_util.ml[]..[])
    Ppat_or
    pattern (lexing_util.ml[]..[])
      Ppat_or
      pattern (lexing_util.ml[]..[])
        Ppat_or
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 48
        pattern (lexing_util.ml[]..[])
          Ppat_constant Const_int 49
      pattern (lexing_util.ml[]..[])
        Ppat_constant Const_int 50
    pattern (lexing_util.ml[]..[])
      Ppat_constant Const_int 51
  pattern (lexing_util.ml[]..[])
    Ppat_constant Const_int 52
pattern (lexing_util.ml[]..[])
  Ppat_constant Const_int 53
                                                                      pattern (lexing_util.ml[]..[])
Ppat_constant Const_int 54
                                                                    pattern (lexing_util.ml[]..[])
                                                                      Ppat_constant Const_int 55
                                                                  pattern (lexing_util.ml[]..[])
                                                                    Ppat_constant Const_int 56
                                                                pattern (lexing_util.ml[]..[])
                                                                  Ppat_constant Const_int 57
                                                              pattern (lexing_util.ml[]..[])
                                                                Ppat_constant Const_int 65
                                                            pattern (lexing_util.ml[]..[])
                                                              Ppat_constant Const_int 66
                                                          pattern (lexing_util.ml[]..[])
                                                            Ppat_constant Const_int 67
                                                        pattern (lexing_util.ml[]..[])
                                                          Ppat_constant Const_int 68
                                                      pattern (lexing_util.ml[]..[])
                                                        Ppat_constant Const_int 69
                                                    pattern (lexing_util.ml[]..[])
                                                      Ppat_constant Const_int 70
                                                  pattern (lexing_util.ml[]..[])
                                                    Ppat_constant Const_int 97
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_constant Const_int 98
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_constant Const_int 99
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_constant Const_int 100
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_constant Const_int 101
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_constant Const_int 102
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "__ocaml_lex_state20" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "()" (lexing_util.ml[]..[])
                                              None
                                        ]
                                    <case>
                                      pattern (lexing_util.ml[]..[])
                                        Ppat_any
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_setfield
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_curr_pos" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_last_pos" (lexing_util.ml[]..[])
                                        expression (lexing_util.ml[]..[])
                                          Pexp_field
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          "lex_last_action" (lexing_util.ml[]..[])
                                  ]
                            ]
                      ]
                      expression (lexing_util.ml[]..[])
                        Pexp_sequence
                        expression (lexing_util.ml[]..[])
                          Pexp_sequence
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "pos" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_field
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                  "lex_curr_pos" (lexing_util.ml[]..[])
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_start_pos" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "pos" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_last_pos" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "pos" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_last_action" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_constant Const_int -1
                        expression (lexing_util.ml[]..[])
                          Pexp_sequence
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "__ocaml_lex_result" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "__ocaml_lex_state0" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_construct "()" (lexing_util.ml[]..[])
                                        None
                                  ]
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_start_p" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_field
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                "lex_curr_p" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                              "lex_curr_p" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_record
                                [
                                  "pos_cnum" (lexing_util.ml[]..[])
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "+" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_abs_pos" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_field
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                            "lex_curr_pos" (lexing_util.ml[]..[])
                                      ]
                                ]
                                Some
                                  expression (lexing_util.ml[]..[])
                                    Pexp_field
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                    "lex_curr_p" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_match
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__ocaml_lex_result" (lexing_util.ml[]..[])
                              [
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 0
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "push_loc_cont" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                        ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 1
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "pop_loc" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                      ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 2
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "push_loc_cont" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                        ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 3
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "push_loc_cont" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lex_comment" (lexing_util.ml[]..[])
                                        ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 4
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "update_loc" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "with_store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                      ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 5
                                  expression (lexing_util.ml[]..[])
                                    Pexp_sequence
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "store" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "c" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      ]
                                    expression (lexing_util.ml[]..[])
                                      Pexp_sequence
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "push_loc_cont" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "c" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "lex_string" (lexing_util.ml[]..[])
                                        ]
                                      expression (lexing_util.ml[]..[])
                                        Pexp_sequence
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "Buffer.add_char" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "c" (lexing_util.ml[]..[])
                                                "buffer" (lexing_util.ml[]..[])
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_constant Const_char 22
                                          ]
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "c" (lexing_util.ml[]..[])
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                          ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 6
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "@@" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "err" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_construct "Unterminated_quotation" (lexing_util.ml[]..[])
                                                None
                                          ]
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "Location_util.of_positions" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "List.hd" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_field
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "c" (lexing_util.ml[]..[])
                                                      "loc" (lexing_util.ml[]..[])
                                                ]
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_field
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                                "lex_curr_p" (lexing_util.ml[]..[])
                                          ]
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 7
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "with_store" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "c" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_constant Const_int 8
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "with_store" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "c" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexbuf" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lex_quotation" (lexing_util.ml[]..[])
                                    ]
                                <case>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_any
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "failwith" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "^" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_constant Const_string("Lexing_util",None)
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "^" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_constant Const_string(".",None)
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_apply
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "^" (lexing_util.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_constant Const_string("lex_quotation",None)
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_constant Const_string(" lexing: empty token",None)
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "adapt_to_stream" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "token" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_constraint
                      pattern (lexing_util.ml[]..[])
                        Ppat_var "loc" (lexing_util.ml[]..[])
                      core_type (lexing_util.ml[]..[])
                        Ptyp_constr "Locf.t" (lexing_util.ml[]..[])
                        []
                    expression (lexing_util.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "strm" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "lb" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "Lexing.from_function" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_apply
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "lexing_store" (lexing_util.ml[]..[])
                                        [
                                          <label> ""
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "strm" (lexing_util.ml[]..[])
                                        ]
                                  ]
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_sequence
                              expression (lexing_util.ml[]..[])
                                Pexp_setfield
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "lb" (lexing_util.ml[]..[])
                                "lex_abs_pos" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_field
                                  expression (lexing_util.ml[]..[])
                                    Pexp_field
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "loc" (lexing_util.ml[]..[])
                                    "loc_start" (lexing_util.ml[]..[])
                                  "pos_cnum" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_sequence
                                expression (lexing_util.ml[]..[])
                                  Pexp_setfield
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "lb" (lexing_util.ml[]..[])
                                  "lex_curr_p" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_field
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "loc" (lexing_util.ml[]..[])
                                    "loc_start" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "Streamf.from" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_any
                                            expression (lexing_util.ml[]..[])
                                              Pexp_construct "Some" (lexing_util.ml[]..[])
                                              Some
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_apply
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "token" (lexing_util.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "lb" (lexing_util.ml[]..[])
                                                  ]
                                        ]
                                  ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "adapt_to_string" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "token" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "str" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "loc" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "Locf.string_loc" (lexing_util.ml[]..[])
                      ]
                      expression (lexing_util.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lexing_util.ml[]..[])
                              Ppat_var "lb" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "Lexing.from_string" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "str" (lexing_util.ml[]..[])
                              ]
                        ]
                        expression (lexing_util.ml[]..[])
                          Pexp_sequence
                          expression (lexing_util.ml[]..[])
                            Pexp_setfield
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "lb" (lexing_util.ml[]..[])
                            "lex_abs_pos" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_field
                              expression (lexing_util.ml[]..[])
                                Pexp_field
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "loc" (lexing_util.ml[]..[])
                                "loc_start" (lexing_util.ml[]..[])
                              "pos_cnum" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_sequence
                            expression (lexing_util.ml[]..[])
                              Pexp_setfield
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "lb" (lexing_util.ml[]..[])
                              "lex_curr_p" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_field
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "loc" (lexing_util.ml[]..[])
                                "loc_start" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lexing_util.ml[]..[])
                                    Ppat_var "next" (lexing_util.ml[]..[])
                                  expression (lexing_util.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (lexing_util.ml[]..[])
                                          Ppat_any
                                        expression (lexing_util.ml[]..[])
                                          Pexp_construct "Some" (lexing_util.ml[]..[])
                                          Some
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "token" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "lb" (lexing_util.ml[]..[])
                                              ]
                                    ]
                              ]
                              expression (lexing_util.ml[]..[])
                                Pexp_apply
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "Streamf.from" (lexing_util.ml[]..[])
                                [
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "next" (lexing_util.ml[]..[])
                                ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "adapt_to_buf" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "token" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "lb" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "Streamf.from" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_any
                                expression (lexing_util.ml[]..[])
                                  Pexp_construct "Some" (lexing_util.ml[]..[])
                                  Some
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "token" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "lb" (lexing_util.ml[]..[])
                                      ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "clean" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_constraint
          expression (lexing_util.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (lexing_util.ml[]..[])
                  Ppat_constraint
                  pattern (lexing_util.ml[]..[])
                    Ppat_var "__strm" (lexing_util.ml[]..[])
                  core_type (lexing_util.ml[]..[])
                    Ptyp_constr "Streamf.t" (lexing_util.ml[]..[])
                    [
                      core_type (lexing_util.ml[]..[])
                        Ptyp_any
                    ]
                expression (lexing_util.ml[]..[])
                  Pexp_match
                  expression (lexing_util.ml[]..[])
                    Pexp_apply
                    expression (lexing_util.ml[]..[])
                      Pexp_ident "Streamf.peek" (lexing_util.ml[]..[])
                    [
                      <label> ""
                        expression (lexing_util.ml[]..[])
                          Pexp_ident "__strm" (lexing_util.ml[]..[])
                    ]
                  [
                    <case>
                      pattern (lexing_util.ml[]..[])
                        Ppat_construct "Some" (lexing_util.ml[]..[])
                        Some
                          pattern (lexing_util.ml[]..[])
                            Ppat_alias "x" (lexing_util.ml[]..[])
                            pattern (lexing_util.ml[]..[])
                              Ppat_variant "EOI"
                              Some
                                pattern (lexing_util.ml[]..[])
                                  Ppat_any
                      expression (lexing_util.ml[]..[])
                        Pexp_sequence
                        expression (lexing_util.ml[]..[])
                          Pexp_apply
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "Streamf.junk" (lexing_util.ml[]..[])
                          [
                            <label> ""
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__strm" (lexing_util.ml[]..[])
                          ]
                        expression (lexing_util.ml[]..[])
                          Pexp_apply
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "Streamf.ising" (lexing_util.ml[]..[])
                          [
                            <label> ""
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "x" (lexing_util.ml[]..[])
                          ]
                    <case>
                      pattern (lexing_util.ml[]..[])
                        Ppat_construct "Some" (lexing_util.ml[]..[])
                        Some
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "x" (lexing_util.ml[]..[])
                      expression (lexing_util.ml[]..[])
                        Pexp_sequence
                        expression (lexing_util.ml[]..[])
                          Pexp_apply
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "Streamf.junk" (lexing_util.ml[]..[])
                          [
                            <label> ""
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__strm" (lexing_util.ml[]..[])
                          ]
                        expression (lexing_util.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lexing_util.ml[]..[])
                                Ppat_var "xs" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__strm" (lexing_util.ml[]..[])
                          ]
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "Streamf.icons" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "x" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "Streamf.slazy" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_any
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "clean" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "xs" (lexing_util.ml[]..[])
                                              ]
                                        ]
                                  ]
                            ]
                    <case>
                      pattern (lexing_util.ml[]..[])
                        Ppat_any
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "Streamf.sempty" (lexing_util.ml[]..[])
                  ]
            ]
          core_type (lexing_util.ml[]..[])
            Ptyp_arrow
            ""
            core_type (lexing_util.ml[]..[])
              Ptyp_constr "Tokenf.stream" (lexing_util.ml[]..[])
              []
            core_type (lexing_util.ml[]..[])
              Ptyp_constr "Tokenf.stream" (lexing_util.ml[]..[])
              []
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Rec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "strict_clean" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_constraint
          expression (lexing_util.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (lexing_util.ml[]..[])
                  Ppat_constraint
                  pattern (lexing_util.ml[]..[])
                    Ppat_var "__strm" (lexing_util.ml[]..[])
                  core_type (lexing_util.ml[]..[])
                    Ptyp_constr "Streamf.t" (lexing_util.ml[]..[])
                    [
                      core_type (lexing_util.ml[]..[])
                        Ptyp_any
                    ]
                expression (lexing_util.ml[]..[])
                  Pexp_match
                  expression (lexing_util.ml[]..[])
                    Pexp_apply
                    expression (lexing_util.ml[]..[])
                      Pexp_ident "Streamf.peek" (lexing_util.ml[]..[])
                    [
                      <label> ""
                        expression (lexing_util.ml[]..[])
                          Pexp_ident "__strm" (lexing_util.ml[]..[])
                    ]
                  [
                    <case>
                      pattern (lexing_util.ml[]..[])
                        Ppat_construct "Some" (lexing_util.ml[]..[])
                        Some
                          pattern (lexing_util.ml[]..[])
                            Ppat_variant "EOI"
                            Some
                              pattern (lexing_util.ml[]..[])
                                Ppat_any
                      expression (lexing_util.ml[]..[])
                        Pexp_sequence
                        expression (lexing_util.ml[]..[])
                          Pexp_apply
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "Streamf.junk" (lexing_util.ml[]..[])
                          [
                            <label> ""
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__strm" (lexing_util.ml[]..[])
                          ]
                        expression (lexing_util.ml[]..[])
                          Pexp_ident "Streamf.sempty" (lexing_util.ml[]..[])
                    <case>
                      pattern (lexing_util.ml[]..[])
                        Ppat_construct "Some" (lexing_util.ml[]..[])
                        Some
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "x" (lexing_util.ml[]..[])
                      expression (lexing_util.ml[]..[])
                        Pexp_sequence
                        expression (lexing_util.ml[]..[])
                          Pexp_apply
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "Streamf.junk" (lexing_util.ml[]..[])
                          [
                            <label> ""
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__strm" (lexing_util.ml[]..[])
                          ]
                        expression (lexing_util.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lexing_util.ml[]..[])
                                Ppat_var "xs" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "__strm" (lexing_util.ml[]..[])
                          ]
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "Streamf.icons" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "x" (lexing_util.ml[]..[])
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "Streamf.slazy" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (lexing_util.ml[]..[])
                                              Ppat_any
                                            expression (lexing_util.ml[]..[])
                                              Pexp_apply
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "strict_clean" (lexing_util.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ident "xs" (lexing_util.ml[]..[])
                                              ]
                                        ]
                                  ]
                            ]
                    <case>
                      pattern (lexing_util.ml[]..[])
                        Ppat_any
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "Streamf.sempty" (lexing_util.ml[]..[])
                  ]
            ]
          core_type (lexing_util.ml[]..[])
            Ptyp_arrow
            ""
            core_type (lexing_util.ml[]..[])
              Ptyp_constr "Tokenf.stream" (lexing_util.ml[]..[])
              []
            core_type (lexing_util.ml[]..[])
              Ptyp_constr "Tokenf.stream" (lexing_util.ml[]..[])
              []
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "debug_of_string" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "token" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "str" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "from_string" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "adapt_to_string" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "token" (lexing_util.ml[]..[])
                            ]
                      ]
                      expression (lexing_util.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lexing_util.ml[]..[])
                              Ppat_var "stream" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "from_string" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "str" (lexing_util.ml[]..[])
                              ]
                        ]
                        expression (lexing_util.ml[]..[])
                          Pexp_apply
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "|>" (lexing_util.ml[]..[])
                          [
                            <label> ""
                              expression (lexing_util.ml[]..[])
                                Pexp_apply
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "|>" (lexing_util.ml[]..[])
                                [
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "stream" (lexing_util.ml[]..[])
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "clean" (lexing_util.ml[]..[])
                                ]
                            <label> ""
                              expression (lexing_util.ml[]..[])
                                Pexp_apply
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "Streamf.iter" (lexing_util.ml[]..[])
                                [
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (lexing_util.ml[]..[])
                                            Ppat_var "t" (lexing_util.ml[]..[])
                                          expression (lexing_util.ml[]..[])
                                            Pexp_apply
                                            expression (lexing_util.ml[]..[])
                                              Pexp_ident "Format.fprintf" (lexing_util.ml[]..[])
                                            [
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "Format.std_formatter" (lexing_util.ml[]..[])
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_constant Const_string("%a@\n",None)
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "Tokenf.print" (lexing_util.ml[]..[])
                                              <label> ""
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "t" (lexing_util.ml[]..[])
                                            ]
                                      ]
                                ]
                          ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "debug_of_file" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "token" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "file" (lexing_util.ml[]..[])
                    expression (lexing_util.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lexing_util.ml[]..[])
                            Ppat_var "from_stream" (lexing_util.ml[]..[])
                          expression (lexing_util.ml[]..[])
                            Pexp_apply
                            expression (lexing_util.ml[]..[])
                              Pexp_ident "adapt_to_stream" (lexing_util.ml[]..[])
                            [
                              <label> ""
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "token" (lexing_util.ml[]..[])
                            ]
                      ]
                      expression (lexing_util.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lexing_util.ml[]..[])
                              Ppat_var "loc" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "Locf.mk" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "file" (lexing_util.ml[]..[])
                              ]
                        ]
                        expression (lexing_util.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lexing_util.ml[]..[])
                                Ppat_var "chan" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_apply
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "open_in" (lexing_util.ml[]..[])
                                [
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "file" (lexing_util.ml[]..[])
                                ]
                          ]
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "stream" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "Streamf.of_channel" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "chan" (lexing_util.ml[]..[])
                                  ]
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "|>" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "|>" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_apply
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "from_stream" (lexing_util.ml[]..[])
                                          [
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "loc" (lexing_util.ml[]..[])
                                            <label> ""
                                              expression (lexing_util.ml[]..[])
                                                Pexp_ident "stream" (lexing_util.ml[]..[])
                                          ]
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "clean" (lexing_util.ml[]..[])
                                    ]
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_apply
                                    expression (lexing_util.ml[]..[])
                                      Pexp_ident "@@" (lexing_util.ml[]..[])
                                    [
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_ident "Streamf.iter" (lexing_util.ml[]..[])
                                      <label> ""
                                        expression (lexing_util.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (lexing_util.ml[]..[])
                                                Ppat_var "t" (lexing_util.ml[]..[])
                                              expression (lexing_util.ml[]..[])
                                                Pexp_apply
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_ident "Format.fprintf" (lexing_util.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "Format.std_formatter" (lexing_util.ml[]..[])
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_constant Const_string("%a@\n",None)
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "Tokenf.print" (lexing_util.ml[]..[])
                                                  <label> ""
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "t" (lexing_util.ml[]..[])
                                                ]
                                          ]
                                    ]
                              ]
                ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "list_of_string" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (lexing_util.ml[]..[])
                Ppat_var "token" (lexing_util.ml[]..[])
              expression (lexing_util.ml[]..[])
                Pexp_fun "?verbose"
                Some
                  expression (lexing_util.ml[]..[])
                    Pexp_construct "true" (lexing_util.ml[]..[])
                    None
                pattern (lexing_util.ml[]..[])
                  Ppat_var "verbose" (lexing_util.ml[]..[])
                expression (lexing_util.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (lexing_util.ml[]..[])
                        Ppat_var "str" (lexing_util.ml[]..[])
                      expression (lexing_util.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lexing_util.ml[]..[])
                              Ppat_var "from_string" (lexing_util.ml[]..[])
                            expression (lexing_util.ml[]..[])
                              Pexp_apply
                              expression (lexing_util.ml[]..[])
                                Pexp_ident "adapt_to_string" (lexing_util.ml[]..[])
                              [
                                <label> ""
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "token" (lexing_util.ml[]..[])
                              ]
                        ]
                        expression (lexing_util.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lexing_util.ml[]..[])
                                Ppat_var "result" (lexing_util.ml[]..[])
                              expression (lexing_util.ml[]..[])
                                Pexp_apply
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "ref" (lexing_util.ml[]..[])
                                [
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_construct "[]" (lexing_util.ml[]..[])
                                      None
                                ]
                          ]
                          expression (lexing_util.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lexing_util.ml[]..[])
                                  Ppat_var "stream" (lexing_util.ml[]..[])
                                expression (lexing_util.ml[]..[])
                                  Pexp_apply
                                  expression (lexing_util.ml[]..[])
                                    Pexp_ident "from_string" (lexing_util.ml[]..[])
                                  [
                                    <label> ""
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "str" (lexing_util.ml[]..[])
                                  ]
                            ]
                            expression (lexing_util.ml[]..[])
                              Pexp_sequence
                              expression (lexing_util.ml[]..[])
                                Pexp_apply
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "|>" (lexing_util.ml[]..[])
                                [
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "|>" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "stream" (lexing_util.ml[]..[])
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "clean" (lexing_util.ml[]..[])
                                      ]
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "Streamf.iter" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (lexing_util.ml[]..[])
                                                  Ppat_var "t" (lexing_util.ml[]..[])
                                                expression (lexing_util.ml[]..[])
                                                  Pexp_sequence
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_apply
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident ":=" (lexing_util.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (lexing_util.ml[]..[])
                                                          Pexp_ident "result" (lexing_util.ml[]..[])
                                                      <label> ""
                                                        expression (lexing_util.ml[]..[])
                                                          Pexp_construct "::" (lexing_util.ml[]..[])
                                                          Some
                                                            expression (lexing_util.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (lexing_util.ml[]..[])
                                                                  Pexp_ident "t" (lexing_util.ml[]..[])
                                                                expression (lexing_util.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (lexing_util.ml[]..[])
                                                                    Pexp_ident "!" (lexing_util.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (lexing_util.ml[]..[])
Pexp_ident "result" (lexing_util.ml[]..[])
                                                                  ]
                                                              ]
                                                    ]
                                                  expression (lexing_util.ml[]..[])
                                                    Pexp_ifthenelse
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_ident "verbose" (lexing_util.ml[]..[])
                                                    expression (lexing_util.ml[]..[])
                                                      Pexp_apply
                                                      expression (lexing_util.ml[]..[])
                                                        Pexp_ident "Format.fprintf" (lexing_util.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_ident "Format.std_formatter" (lexing_util.ml[]..[])
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_constant Const_string("%a@\n",None)
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_ident "Tokenf.print" (lexing_util.ml[]..[])
                                                        <label> ""
                                                          expression (lexing_util.ml[]..[])
                                                            Pexp_ident "t" (lexing_util.ml[]..[])
                                                      ]
                                                    None
                                            ]
                                      ]
                                ]
                              expression (lexing_util.ml[]..[])
                                Pexp_apply
                                expression (lexing_util.ml[]..[])
                                  Pexp_ident "List.rev" (lexing_util.ml[]..[])
                                [
                                  <label> ""
                                    expression (lexing_util.ml[]..[])
                                      Pexp_apply
                                      expression (lexing_util.ml[]..[])
                                        Pexp_ident "!" (lexing_util.ml[]..[])
                                      [
                                        <label> ""
                                          expression (lexing_util.ml[]..[])
                                            Pexp_ident "result" (lexing_util.ml[]..[])
                                      ]
                                ]
                  ]
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (lexing_util.ml[]..[])
          Ppat_var "get_tokens" (lexing_util.ml[]..[])
        expression (lexing_util.ml[]..[])
          Pexp_apply
          expression (lexing_util.ml[]..[])
            Pexp_ident "list_of_string" (lexing_util.ml[]..[])
          [
            <label> "verbose"
              expression (lexing_util.ml[]..[])
                Pexp_construct "false" (lexing_util.ml[]..[])
                None
          ]
    ]
  structure_item (lexing_util.ml[]..[])
    Pstr_eval
    expression (lexing_util.ml[]..[])
      Pexp_apply
      expression (lexing_util.ml[]..[])
        Pexp_ident "@@" (lexing_util.ml[]..[])
      [
        <label> ""
          expression (lexing_util.ml[]..[])
            Pexp_ident "Printexc.register_printer" (lexing_util.ml[]..[])
        <label> ""
          expression (lexing_util.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (lexing_util.ml[]..[])
                  Ppat_construct "Lexing_error" (lexing_util.ml[]..[])
                  Some
                    pattern (lexing_util.ml[]..[])
                      Ppat_var "e" (lexing_util.ml[]..[])
                expression (lexing_util.ml[]..[])
                  Pexp_construct "Some" (lexing_util.ml[]..[])
                  Some
                    expression (lexing_util.ml[]..[])
                      Pexp_apply
                      expression (lexing_util.ml[]..[])
                        Pexp_ident "lex_error_to_string" (lexing_util.ml[]..[])
                      [
                        <label> ""
                          expression (lexing_util.ml[]..[])
                            Pexp_ident "e" (lexing_util.ml[]..[])
                      ]
              <case>
                pattern (lexing_util.ml[]..[])
                  Ppat_any
                expression (lexing_util.ml[]..[])
                  Pexp_construct "None" (lexing_util.ml[]..[])
                  None
            ]
      ]
]
