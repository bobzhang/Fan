[
  structure_item (commentFilter.ml[1,0+0]..[1,0+63])
    Pstr_type
    [
      type_declaration "t" (commentFilter.ml[1,0+5]..[1,0+6]) (commentFilter.ml[1,0+5]..[1,0+63])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (commentFilter.ml[1,0+9]..[1,0+63])
              Ptyp_tuple
              [
                core_type (commentFilter.ml[1,0+10]..[1,0+36])
                  Ptyp_constr "Fstream.t" (commentFilter.ml[1,0+27]..[1,0+36])
                  [
                    core_type (commentFilter.ml[1,0+10]..[1,0+26])
                      Ptyp_tuple
                      [
                        core_type (commentFilter.ml[1,0+11]..[1,0+17])
                          Ptyp_constr "string" (commentFilter.ml[1,0+11]..[1,0+17])
                          []
                        core_type (commentFilter.ml[1,0+19]..[1,0+25])
                          Ptyp_constr "Locf.t" (commentFilter.ml[1,0+19]..[1,0+25])
                          []
                      ]
                  ]
                core_type (commentFilter.ml[1,0+38]..[1,0+62])
                  Ptyp_constr "Queue.t" (commentFilter.ml[1,0+55]..[1,0+62])
                  [
                    core_type (commentFilter.ml[1,0+38]..[1,0+54])
                      Ptyp_tuple
                      [
                        core_type (commentFilter.ml[1,0+39]..[1,0+45])
                          Ptyp_constr "string" (commentFilter.ml[1,0+39]..[1,0+45])
                          []
                        core_type (commentFilter.ml[1,0+47]..[1,0+53])
                          Ptyp_constr "Locf.t" (commentFilter.ml[1,0+47]..[1,0+53])
                          []
                      ]
                  ]
              ]
    ]
  structure_item (commentFilter.ml[2,65+0]..[5,173+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (commentFilter.ml[2,65+4]..[2,65+6])
          Ppat_var "mk" (commentFilter.ml[2,65+4]..[2,65+6])
        expression (commentFilter.ml[2,65+7]..[5,173+23])
          Pexp_function
          [
            <case>
              pattern (commentFilter.ml[2,65+7]..[2,65+9])
                Ppat_construct "()" (commentFilter.ml[2,65+7]..[2,65+9])
                None
              expression (commentFilter.ml[3,77+2]..[5,173+23])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (commentFilter.ml[3,77+6]..[3,77+7])
                      Ppat_var "q" (commentFilter.ml[3,77+6]..[3,77+7])
                    expression (commentFilter.ml[3,77+10]..[3,77+25])
                      Pexp_apply
                      expression (commentFilter.ml[3,77+10]..[3,77+22])
                        Pexp_ident "Queue.create" (commentFilter.ml[3,77+10]..[3,77+22])
                      [
                        <label> ""
                          expression (commentFilter.ml[3,77+23]..[3,77+25])
                            Pexp_construct "()" (commentFilter.ml[3,77+23]..[3,77+25])
                            None
                      ]
                ]
                expression (commentFilter.ml[4,106+2]..[5,173+23])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (commentFilter.ml[4,106+6]..[4,106+7])
                        Ppat_var "f" (commentFilter.ml[4,106+6]..[4,106+7])
                      expression (commentFilter.ml[4,106+8]..[4,106+63])
                        Pexp_function
                        [
                          <case>
                            pattern (commentFilter.ml[4,106+8]..[4,106+9])
                              Ppat_any
                            expression (commentFilter.ml[4,106+12]..[4,106+63])
                              Pexp_try
                              expression (commentFilter.ml[4,106+16]..[4,106+35])
                                Pexp_construct "Some" (commentFilter.ml[4,106+16]..[4,106+20])
                                Some
                                  expression (commentFilter.ml[4,106+22]..[4,106+34])
                                    Pexp_apply
                                    expression (commentFilter.ml[4,106+22]..[4,106+32])
                                      Pexp_ident "Queue.take" (commentFilter.ml[4,106+22]..[4,106+32])
                                    [
                                      <label> ""
                                        expression (commentFilter.ml[4,106+33]..[4,106+34])
                                          Pexp_ident "q" (commentFilter.ml[4,106+33]..[4,106+34])
                                    ]
                              [
                                <case>
                                  pattern (commentFilter.ml[4,106+43]..[4,106+54])
                                    Ppat_construct "Queue.Empty" (commentFilter.ml[4,106+43]..[4,106+54])
                                    None
                                  expression (commentFilter.ml[4,106+59]..[4,106+63])
                                    Pexp_construct "None" (commentFilter.ml[4,106+59]..[4,106+63])
                                    None
                              ]
                        ]
                  ]
                  expression (commentFilter.ml[5,173+2]..[5,173+23])
                    Pexp_tuple
                    [
                      expression (commentFilter.ml[5,173+4]..[5,173+18])
                        Pexp_apply
                        expression (commentFilter.ml[5,173+4]..[5,173+16])
                          Pexp_ident "Fstream.from" (commentFilter.ml[5,173+4]..[5,173+16])
                        [
                          <label> ""
                            expression (commentFilter.ml[5,173+17]..[5,173+18])
                              Pexp_ident "f" (commentFilter.ml[5,173+17]..[5,173+18])
                        ]
                      expression (commentFilter.ml[5,173+21]..[5,173+22])
                        Pexp_ident "q" (commentFilter.ml[5,173+21]..[5,173+22])
                    ]
          ]
    ]
  structure_item (commentFilter.ml[6,197+0]..[17,581+6])
    Pstr_value Nonrec
    [
      <def>
        pattern (commentFilter.ml[6,197+4]..[6,197+10])
          Ppat_var "filter" (commentFilter.ml[6,197+4]..[6,197+10])
        expression (commentFilter.ml[6,197+11]..[17,581+6])
          Pexp_function
          [
            <case>
              pattern (commentFilter.ml[6,197+11]..[6,197+16])
                Ppat_tuple
                [
                  pattern (commentFilter.ml[6,197+12]..[6,197+13])
                    Ppat_any
                  pattern (commentFilter.ml[6,197+14]..[6,197+15])
                    Ppat_var "q" (commentFilter.ml[6,197+14]..[6,197+15])
                ]
              expression (commentFilter.ml[7,216+2]..[17,581+6])
                Pexp_let Rec
                [
                  <def>
                    pattern (commentFilter.ml[7,216+10]..[7,216+14])
                      Ppat_var "self" (commentFilter.ml[7,216+10]..[7,216+14])
                    expression (commentFilter.ml[7,216+15]..[16,552+25])
                      Pexp_function
                      [
                        <case>
                          pattern (commentFilter.ml[7,216+15]..[7,216+37])
                            Ppat_constraint
                            pattern (commentFilter.ml[7,216+16]..[7,216+22])
                              Ppat_var "__strm" (commentFilter.ml[7,216+16]..[7,216+22])
                            core_type (commentFilter.ml[7,216+25]..[7,216+36])
                              Ptyp_constr "Fstream.t" (commentFilter.ml[7,216+27]..[7,216+36])
                              [
                                core_type (commentFilter.ml[7,216+25]..[7,216+26])
                                  Ptyp_any
                              ]
                          expression (commentFilter.ml[8,256+4]..[16,552+25])
                            Pexp_match
                            expression (commentFilter.ml[8,256+10]..[8,256+29])
                              Pexp_apply
                              expression (commentFilter.ml[8,256+10]..[8,256+22])
                                Pexp_ident "Fstream.peek" (commentFilter.ml[8,256+10]..[8,256+22])
                              [
                                <label> ""
                                  expression (commentFilter.ml[8,256+23]..[8,256+29])
                                    Pexp_ident "__strm" (commentFilter.ml[8,256+23]..[8,256+29])
                              ]
                            [
                              <case>
                                pattern (commentFilter.ml[9,291+6]..[9,291+27])
                                  Ppat_construct "Some" (commentFilter.ml[9,291+6]..[9,291+10])
                                  Some
                                    pattern (commentFilter.ml[9,291+6]..[9,291+27])
                                      Ppat_tuple
                                      [
                                        pattern (commentFilter.ml[9,291+12]..[9,291+22])
                                          Ppat_variant "Comment"
                                          Some
                                            pattern (commentFilter.ml[9,291+21]..[9,291+22])
                                              Ppat_var "x" (commentFilter.ml[9,291+21]..[9,291+22])
                                        pattern (commentFilter.ml[9,291+23]..[9,291+26])
                                          Ppat_var "loc" (commentFilter.ml[9,291+23]..[9,291+26])
                                      ]
                                expression (commentFilter.ml[10,322+8]..[11,352+60])
                                  Pexp_sequence
                                  expression (commentFilter.ml[10,322+9]..[10,322+28])
                                    Pexp_apply
                                    expression (commentFilter.ml[10,322+9]..[10,322+21])
                                      Pexp_ident "Fstream.junk" (commentFilter.ml[10,322+9]..[10,322+21])
                                    [
                                      <label> ""
                                        expression (commentFilter.ml[10,322+22]..[10,322+28])
                                          Pexp_ident "__strm" (commentFilter.ml[10,322+22]..[10,322+28])
                                    ]
                                  expression (commentFilter.ml[10,322+8]..[11,352+60])
                                    Pexp_sequence
                                    expression (commentFilter.ml[11,352+10]..[11,352+49])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (commentFilter.ml[11,352+14]..[11,352+16])
                                            Ppat_var "xs" (commentFilter.ml[11,352+14]..[11,352+16])
                                          expression (commentFilter.ml[11,352+19]..[11,352+25])
                                            Pexp_ident "__strm" (commentFilter.ml[11,352+19]..[11,352+25])
                                      ]
                                      expression (commentFilter.ml[11,352+29]..[11,352+49])
                                        Pexp_apply
                                        expression (commentFilter.ml[11,352+29]..[11,352+38])
                                          Pexp_ident "Queue.add" (commentFilter.ml[11,352+29]..[11,352+38])
                                        [
                                          <label> ""
                                            expression (commentFilter.ml[11,352+39]..[11,352+47])
                                              Pexp_tuple
                                              [
                                                expression (commentFilter.ml[11,352+40]..[11,352+41])
                                                  Pexp_ident "x" (commentFilter.ml[11,352+40]..[11,352+41])
                                                expression (commentFilter.ml[11,352+43]..[11,352+46])
                                                  Pexp_ident "loc" (commentFilter.ml[11,352+43]..[11,352+46])
                                              ]
                                          <label> ""
                                            expression (commentFilter.ml[11,352+48]..[11,352+49])
                                              Pexp_ident "q" (commentFilter.ml[11,352+48]..[11,352+49])
                                        ]
                                    expression (commentFilter.ml[10,322+8]..[11,352+60])
                                      Pexp_apply
                                      expression (commentFilter.ml[11,352+51]..[11,352+55])
                                        Pexp_ident "self" (commentFilter.ml[11,352+51]..[11,352+55])
                                      [
                                        <label> ""
                                          expression (commentFilter.ml[11,352+56]..[11,352+58])
                                            Pexp_ident "xs" (commentFilter.ml[11,352+56]..[11,352+58])
                                      ]
                              <case>
                                pattern (commentFilter.ml[12,413+6]..[12,413+12])
                                  Ppat_construct "Some" (commentFilter.ml[12,413+6]..[12,413+10])
                                  Some
                                    pattern (commentFilter.ml[12,413+11]..[12,413+12])
                                      Ppat_var "x" (commentFilter.ml[12,413+11]..[12,413+12])
                                expression (commentFilter.ml[13,429+8]..[15,488+63])
                                  Pexp_sequence
                                  expression (commentFilter.ml[13,429+9]..[13,429+28])
                                    Pexp_apply
                                    expression (commentFilter.ml[13,429+9]..[13,429+21])
                                      Pexp_ident "Fstream.junk" (commentFilter.ml[13,429+9]..[13,429+21])
                                    [
                                      <label> ""
                                        expression (commentFilter.ml[13,429+22]..[13,429+28])
                                          Pexp_ident "__strm" (commentFilter.ml[13,429+22]..[13,429+28])
                                    ]
                                  expression (commentFilter.ml[13,429+8]..[15,488+63])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (commentFilter.ml[14,459+14]..[14,459+16])
                                          Ppat_var "xs" (commentFilter.ml[14,459+14]..[14,459+16])
                                        expression (commentFilter.ml[14,459+19]..[14,459+25])
                                          Pexp_ident "__strm" (commentFilter.ml[14,459+19]..[14,459+25])
                                    ]
                                    expression (commentFilter.ml[15,488+10]..[15,488+61])
                                      Pexp_apply
                                      expression (commentFilter.ml[15,488+10]..[15,488+23])
                                        Pexp_ident "Fstream.icons" (commentFilter.ml[15,488+10]..[15,488+23])
                                      [
                                        <label> ""
                                          expression (commentFilter.ml[15,488+24]..[15,488+25])
                                            Pexp_ident "x" (commentFilter.ml[15,488+24]..[15,488+25])
                                        <label> ""
                                          expression (commentFilter.ml[15,488+27]..[15,488+60])
                                            Pexp_apply
                                            expression (commentFilter.ml[15,488+27]..[15,488+40])
                                              Pexp_ident "Fstream.slazy" (commentFilter.ml[15,488+27]..[15,488+40])
                                            [
                                              <label> ""
                                                expression (commentFilter.ml[15,488+46]..[15,488+47])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (commentFilter.ml[15,488+46]..[15,488+47])
                                                        Ppat_any
                                                      expression (commentFilter.ml[15,488+52]..[15,488+59])
                                                        Pexp_apply
                                                        expression (commentFilter.ml[15,488+52]..[15,488+56])
                                                          Pexp_ident "self" (commentFilter.ml[15,488+52]..[15,488+56])
                                                        [
                                                          <label> ""
                                                            expression (commentFilter.ml[15,488+57]..[15,488+59])
                                                              Pexp_ident "xs" (commentFilter.ml[15,488+57]..[15,488+59])
                                                        ]
                                                  ]
                                            ]
                                      ]
                              <case>
                                pattern (commentFilter.ml[16,552+6]..[16,552+7])
                                  Ppat_any
                                expression (commentFilter.ml[16,552+11]..[16,552+25])
                                  Pexp_ident "Fstream.sempty" (commentFilter.ml[16,552+11]..[16,552+25])
                            ]
                      ]
                ]
                expression (commentFilter.ml[17,581+2]..[17,581+6])
                  Pexp_ident "self" (commentFilter.ml[17,581+2]..[17,581+6])
          ]
    ]
  structure_item (commentFilter.ml[18,588+0]..[21,704+9])
    Pstr_value Nonrec
    [
      <def>
        pattern (commentFilter.ml[18,588+4]..[18,588+13])
          Ppat_var "take_list" (commentFilter.ml[18,588+4]..[18,588+13])
        expression (commentFilter.ml[18,588+14]..[21,704+9])
          Pexp_function
          [
            <case>
              pattern (commentFilter.ml[18,588+14]..[18,588+19])
                Ppat_tuple
                [
                  pattern (commentFilter.ml[18,588+15]..[18,588+16])
                    Ppat_any
                  pattern (commentFilter.ml[18,588+17]..[18,588+18])
                    Ppat_var "q" (commentFilter.ml[18,588+17]..[18,588+18])
                ]
              expression (commentFilter.ml[19,610+2]..[21,704+9])
                Pexp_let Rec
                [
                  <def>
                    pattern (commentFilter.ml[19,610+10]..[19,610+14])
                      Ppat_var "self" (commentFilter.ml[19,610+10]..[19,610+14])
                    expression (commentFilter.ml[19,610+15]..[20,632+68])
                      Pexp_function
                      [
                        <case>
                          pattern (commentFilter.ml[19,610+15]..[19,610+19])
                            Ppat_var "accu" (commentFilter.ml[19,610+15]..[19,610+19])
                          expression (commentFilter.ml[20,632+4]..[20,632+68])
                            Pexp_ifthenelse
                            expression (commentFilter.ml[20,632+7]..[20,632+23])
                              Pexp_apply
                              expression (commentFilter.ml[20,632+7]..[20,632+21])
                                Pexp_ident "Queue.is_empty" (commentFilter.ml[20,632+7]..[20,632+21])
                              [
                                <label> ""
                                  expression (commentFilter.ml[20,632+22]..[20,632+23])
                                    Pexp_ident "q" (commentFilter.ml[20,632+22]..[20,632+23])
                              ]
                            expression (commentFilter.ml[20,632+29]..[20,632+33])
                              Pexp_ident "accu" (commentFilter.ml[20,632+29]..[20,632+33])
                            Some
                              expression (commentFilter.ml[20,632+39]..[20,632+68])
                                Pexp_apply
                                expression (commentFilter.ml[20,632+39]..[20,632+43])
                                  Pexp_ident "self" (commentFilter.ml[20,632+39]..[20,632+43])
                                [
                                  <label> ""
                                    expression (commentFilter.ml[20,632+45]..[20,632+67])
                                      Pexp_construct "::" (commentFilter.ml[20,632+60]..[20,632+62])
                                      Some
                                        expression (commentFilter.ml[20,632+45]..[20,632+67])
                                          Pexp_tuple
                                          [
                                            expression (commentFilter.ml[20,632+46]..[20,632+58])
                                              Pexp_apply
                                              expression (commentFilter.ml[20,632+46]..[20,632+56])
                                                Pexp_ident "Queue.take" (commentFilter.ml[20,632+46]..[20,632+56])
                                              [
                                                <label> ""
                                                  expression (commentFilter.ml[20,632+57]..[20,632+58])
                                                    Pexp_ident "q" (commentFilter.ml[20,632+57]..[20,632+58])
                                              ]
                                            expression (commentFilter.ml[20,632+63]..[20,632+67])
                                              Pexp_ident "accu" (commentFilter.ml[20,632+63]..[20,632+67])
                                          ]
                                ]
                      ]
                ]
                expression (commentFilter.ml[21,704+2]..[21,704+9])
                  Pexp_apply
                  expression (commentFilter.ml[21,704+2]..[21,704+6])
                    Pexp_ident "self" (commentFilter.ml[21,704+2]..[21,704+6])
                  [
                    <label> ""
                      expression (commentFilter.ml[21,704+7]..[21,704+9])
                        Pexp_construct "[]" (commentFilter.ml[21,704+7]..[21,704+9])
                        None
                  ]
          ]
    ]
  structure_item (commentFilter.ml[22,714+0]..[22,714+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (commentFilter.ml[22,714+4]..[22,714+15])
          Ppat_var "take_stream" (commentFilter.ml[22,714+4]..[22,714+15])
        expression (commentFilter.ml[22,714+18]..[22,714+21])
          Pexp_ident "fst" (commentFilter.ml[22,714+18]..[22,714+21])
    ]
  structure_item (commentFilter.ml[23,736+0]..[25,815+65])
    Pstr_value Nonrec
    [
      <def>
        pattern (commentFilter.ml[23,736+4]..[23,736+10])
          Ppat_var "define" (commentFilter.ml[23,736+4]..[23,736+10])
        expression (commentFilter.ml[23,736+11]..[25,815+65])
          Pexp_function
          [
            <case>
              pattern (commentFilter.ml[23,736+11]..[23,736+22])
                Ppat_var "token_fiter" (commentFilter.ml[23,736+11]..[23,736+22])
              expression (commentFilter.ml[23,736+23]..[25,815+65])
                Pexp_function
                [
                  <case>
                    pattern (commentFilter.ml[23,736+23]..[23,736+36])
                      Ppat_var "comments_strm" (commentFilter.ml[23,736+23]..[23,736+36])
                    expression (commentFilter.ml[24,775+2]..[25,815+65])
                      Pexp_apply
                      expression (commentFilter.ml[24,775+2]..[24,775+27])
                        Pexp_ident "FanTokenFilter.set_filter" (commentFilter.ml[24,775+2]..[24,775+27])
                      [
                        <label> ""
                          expression (commentFilter.ml[24,775+28]..[24,775+39])
                            Pexp_ident "token_fiter" (commentFilter.ml[24,775+28]..[24,775+39])
                        <label> ""
                          expression (commentFilter.ml[25,815+9]..[25,815+17])
                            Pexp_function
                            [
                              <case>
                                pattern (commentFilter.ml[25,815+9]..[25,815+17])
                                  Ppat_var "previous" (commentFilter.ml[25,815+9]..[25,815+17])
                                expression (commentFilter.ml[25,815+19]..[25,815+23])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (commentFilter.ml[25,815+19]..[25,815+23])
                                        Ppat_var "strm" (commentFilter.ml[25,815+19]..[25,815+23])
                                      expression (commentFilter.ml[25,815+28]..[25,815+64])
                                        Pexp_apply
                                        expression (commentFilter.ml[25,815+28]..[25,815+36])
                                          Pexp_ident "previous" (commentFilter.ml[25,815+28]..[25,815+36])
                                        [
                                          <label> ""
                                            expression (commentFilter.ml[25,815+38]..[25,815+63])
                                              Pexp_apply
                                              expression (commentFilter.ml[25,815+38]..[25,815+44])
                                                Pexp_ident "filter" (commentFilter.ml[25,815+38]..[25,815+44])
                                              [
                                                <label> ""
                                                  expression (commentFilter.ml[25,815+45]..[25,815+58])
                                                    Pexp_ident "comments_strm" (commentFilter.ml[25,815+45]..[25,815+58])
                                                <label> ""
                                                  expression (commentFilter.ml[25,815+59]..[25,815+63])
                                                    Pexp_ident "strm" (commentFilter.ml[25,815+59]..[25,815+63])
                                              ]
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
]
