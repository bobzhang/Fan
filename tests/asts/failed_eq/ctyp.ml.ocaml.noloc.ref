[
  structure_item (ctyp.ml[]..[])
    Pstr_open Fresh "Astfn" (ctyp.ml[]..[])
  structure_item (ctyp.ml[]..[])
    Pstr_open Fresh "Astn_util" (ctyp.ml[]..[])
  structure_item (ctyp.ml[]..[])
    Pstr_open Fresh "Util" (ctyp.ml[]..[])
  structure_item (ctyp.ml[]..[])
    Pstr_open Fresh "Fid" (ctyp.ml[]..[])
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "vrn" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (ctyp.ml[]..[])
                "Sum" (ctyp.ml[]..[])
                []
                None
              (ctyp.ml[]..[])
                "TyVrnEq" (ctyp.ml[]..[])
                []
                None
              (ctyp.ml[]..[])
                "TyVrnSup" (ctyp.ml[]..[])
                []
                None
              (ctyp.ml[]..[])
                "TyVrnInf" (ctyp.ml[]..[])
                []
                None
              (ctyp.ml[]..[])
                "TyVrnInfSup" (ctyp.ml[]..[])
                []
                None
              (ctyp.ml[]..[])
                "TyAbstr" (ctyp.ml[]..[])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "col" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (ctyp.ml[]..[])
                Immutable
                "label" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "string" (ctyp.ml[]..[])
                  []
              (ctyp.ml[]..[])
                Immutable
                "is_mutable" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "bool" (ctyp.ml[]..[])
                  []
              (ctyp.ml[]..[])
                Immutable
                "ty" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "ctyp" (ctyp.ml[]..[])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "ty_info" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (ctyp.ml[]..[])
                Immutable
                "name_exp" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "exp" (ctyp.ml[]..[])
                  []
              (ctyp.ml[]..[])
                Immutable
                "info_exp" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "exp" (ctyp.ml[]..[])
                  []
              (ctyp.ml[]..[])
                Immutable
                "ep0" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "ep" (ctyp.ml[]..[])
                  []
              (ctyp.ml[]..[])
                Immutable
                "id_ep" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "ep" (ctyp.ml[]..[])
                  []
              (ctyp.ml[]..[])
                Immutable
                "id_eps" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "list" (ctyp.ml[]..[])
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "ep" (ctyp.ml[]..[])
                      []
                  ]
              (ctyp.ml[]..[])
                Immutable
                "ty" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "ctyp" (ctyp.ml[]..[])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "vbranch" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (ctyp.ml[]..[])
              Ptyp_variant closed=Closed
              [
                Rtag "variant" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_tuple
                      [
                        core_type (ctyp.ml[]..[])
                          Ptyp_constr "string" (ctyp.ml[]..[])
                          []
                        core_type (ctyp.ml[]..[])
                          Ptyp_constr "list" (ctyp.ml[]..[])
                          [
                            core_type (ctyp.ml[]..[])
                              Ptyp_constr "ctyp" (ctyp.ml[]..[])
                              []
                          ]
                      ]
                  ]
                Rtag "abbrev" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "ident" (ctyp.ml[]..[])
                      []
                  ]
              ]
              None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "branch" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (ctyp.ml[]..[])
              Ptyp_variant closed=Closed
              [
                Rtag "branch" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_tuple
                      [
                        core_type (ctyp.ml[]..[])
                          Ptyp_constr "string" (ctyp.ml[]..[])
                          []
                        core_type (ctyp.ml[]..[])
                          Ptyp_constr "list" (ctyp.ml[]..[])
                          [
                            core_type (ctyp.ml[]..[])
                              Ptyp_constr "ctyp" (ctyp.ml[]..[])
                              []
                          ]
                      ]
                  ]
              ]
              None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "destination" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (ctyp.ml[]..[])
                "Obj" (ctyp.ml[]..[])
                [
                  core_type (ctyp.ml[]..[])
                    Ptyp_constr "kind" (ctyp.ml[]..[])
                    []
                ]
                None
              (ctyp.ml[]..[])
                "Str_item" (ctyp.ml[]..[])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "kind" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (ctyp.ml[]..[])
                "Fold" (ctyp.ml[]..[])
                []
                None
              (ctyp.ml[]..[])
                "Iter" (ctyp.ml[]..[])
                []
                None
              (ctyp.ml[]..[])
                "Map" (ctyp.ml[]..[])
                []
                None
              (ctyp.ml[]..[])
                "Concrete" (ctyp.ml[]..[])
                [
                  core_type (ctyp.ml[]..[])
                    Ptyp_constr "ctyp" (ctyp.ml[]..[])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_open Fresh "Format" (ctyp.ml[]..[])
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "warning_type" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (ctyp.ml[]..[])
                "Abstract" (ctyp.ml[]..[])
                [
                  core_type (ctyp.ml[]..[])
                    Ptyp_constr "string" (ctyp.ml[]..[])
                    []
                ]
                None
              (ctyp.ml[]..[])
                "Qualified" (ctyp.ml[]..[])
                [
                  core_type (ctyp.ml[]..[])
                    Ptyp_constr "string" (ctyp.ml[]..[])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "pp_print_warning_type" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_constraint
          expression (ctyp.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ctyp.ml[]..[])
                  Ppat_var "fmt" (ctyp.ml[]..[])
                expression (ctyp.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_construct "Abstract" (ctyp.ml[]..[])
                        Some
                          pattern (ctyp.ml[]..[])
                            Ppat_var "_a0" (ctyp.ml[]..[])
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "Format.fprintf" (ctyp.ml[]..[])
                        [
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "fmt" (ctyp.ml[]..[])
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_constant Const_string("@[<1>(Abstract@ %a)@]",None)
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "pp_print_string" (ctyp.ml[]..[])
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "_a0" (ctyp.ml[]..[])
                        ]
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_construct "Qualified" (ctyp.ml[]..[])
                        Some
                          pattern (ctyp.ml[]..[])
                            Ppat_var "_a0" (ctyp.ml[]..[])
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "Format.fprintf" (ctyp.ml[]..[])
                        [
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "fmt" (ctyp.ml[]..[])
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_constant Const_string("@[<1>(Qualified@ %a)@]",None)
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "pp_print_string" (ctyp.ml[]..[])
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "_a0" (ctyp.ml[]..[])
                        ]
                  ]
            ]
          core_type (ctyp.ml[]..[])
            Ptyp_arrow
            ""
            core_type (ctyp.ml[]..[])
              Ptyp_constr "Format.formatter" (ctyp.ml[]..[])
              []
            core_type (ctyp.ml[]..[])
              Ptyp_arrow
              ""
              core_type (ctyp.ml[]..[])
                Ptyp_constr "warning_type" (ctyp.ml[]..[])
                []
              core_type (ctyp.ml[]..[])
                Ptyp_constr "unit" (ctyp.ml[]..[])
                []
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "record_col" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (ctyp.ml[]..[])
                Immutable
                "label" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "string" (ctyp.ml[]..[])
                  []
              (ctyp.ml[]..[])
                Immutable
                "is_mutable" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "bool" (ctyp.ml[]..[])
                  []
              (ctyp.ml[]..[])
                Immutable
                "info" (ctyp.ml[]..[])                core_type (ctyp.ml[]..[])
                  Ptyp_constr "ty_info" (ctyp.ml[]..[])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "record_info" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (ctyp.ml[]..[])
              Ptyp_constr "list" (ctyp.ml[]..[])
              [
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "record_col" (ctyp.ml[]..[])
                  []
              ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "basic_id_transform" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (ctyp.ml[]..[])
              Ptyp_variant closed=Closed
              [
                Rtag "Pre" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "string" (ctyp.ml[]..[])
                      []
                  ]
                Rtag "Post" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "string" (ctyp.ml[]..[])
                      []
                  ]
                Rtag "Fun" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_arrow
                      ""
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "string" (ctyp.ml[]..[])
                        []
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "string" (ctyp.ml[]..[])
                        []
                  ]
              ]
              None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "rhs_basic_id_transform" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (ctyp.ml[]..[])
              Ptyp_variant closed=Closed
              [
                Rinherit
                  core_type (ctyp.ml[]..[])
                    Ptyp_constr "basic_id_transform" (ctyp.ml[]..[])
                    []
                Rtag "Exp" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_arrow
                      ""
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "string" (ctyp.ml[]..[])
                        []
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "exp" (ctyp.ml[]..[])
                        []
                  ]
              ]
              None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_type
    [
      type_declaration "full_id_transform" (ctyp.ml[]..[]) (ctyp.ml[]..[])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (ctyp.ml[]..[])
              Ptyp_variant closed=Closed
              [
                Rinherit
                  core_type (ctyp.ml[]..[])
                    Ptyp_constr "basic_id_transform" (ctyp.ml[]..[])
                    []
                Rtag "Idents" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_arrow
                      ""
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "list" (ctyp.ml[]..[])
                        [
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "vid" (ctyp.ml[]..[])
                            []
                        ]
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "vid" (ctyp.ml[]..[])
                        []
                  ]
                Rtag "Id" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_arrow
                      ""
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "vid" (ctyp.ml[]..[])
                        []
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "vid" (ctyp.ml[]..[])
                        []
                  ]
                Rtag "Last" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_arrow
                      ""
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "string" (ctyp.ml[]..[])
                        []
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "vid" (ctyp.ml[]..[])
                        []
                  ]
                Rtag "Obj" false
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_arrow
                      ""
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "string" (ctyp.ml[]..[])
                        []
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "string" (ctyp.ml[]..[])
                        []
                  ]
              ]
              None
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "arrow_of_list" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_var "f" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_apply
                expression (ctyp.ml[]..[])
                  Pexp_ident "Listf.reduce_right" (ctyp.ml[]..[])
                [
                  <label> ""
                    expression (ctyp.ml[]..[])
                      Pexp_ident "arrow" (ctyp.ml[]..[])
                  <label> ""
                    expression (ctyp.ml[]..[])
                      Pexp_ident "f" (ctyp.ml[]..[])
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "app_arrow" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_var "lst" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "acc" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "List.fold_right" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "arrow" (ctyp.ml[]..[])
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "lst" (ctyp.ml[]..[])
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "acc" (ctyp.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "<+" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "names" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "list" (ctyp.ml[]..[])
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "string" (ctyp.ml[]..[])
                      []
                  ]
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_constraint
                      pattern (ctyp.ml[]..[])
                        Ppat_var "ty" (ctyp.ml[]..[])
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "ctyp" (ctyp.ml[]..[])
                        []
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "List.fold_right" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (ctyp.ml[]..[])
                                  Ppat_var "name" (ctyp.ml[]..[])
                                expression (ctyp.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ctyp.ml[]..[])
                                        Ppat_var "acc" (ctyp.ml[]..[])
                                      expression (ctyp.ml[]..[]) 
                                        Pexp_coerce
                                        expression (ctyp.ml[]..[])
                                          Pexp_variant "Arrow"
                                          Some
                                            expression (ctyp.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (ctyp.ml[]..[])
                                                  Pexp_variant "Quote"
                                                  Some
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_variant "Normal"
                                                          None
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_variant "Lid"
                                                          Some
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_ident "name" (ctyp.ml[]..[])
                                                      ]
                                                expression (ctyp.ml[]..[]) 
                                                  Pexp_coerce
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_ident "acc" (ctyp.ml[]..[])
                                                  None
                                                  core_type (ctyp.ml[]..[])
                                                    Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                    []
                                              ]
                                        None
                                        core_type (ctyp.ml[]..[])
                                          Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                          []
                                  ]
                            ]
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "names" (ctyp.ml[]..[])
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "ty" (ctyp.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "+>" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "params" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "list" (ctyp.ml[]..[])
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "ctyp" (ctyp.ml[]..[])
                      []
                  ]
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_constraint
                      pattern (ctyp.ml[]..[])
                        Ppat_var "base" (ctyp.ml[]..[])
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "ctyp" (ctyp.ml[]..[])
                        []
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "List.fold_right" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "arrow" (ctyp.ml[]..[])
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "params" (ctyp.ml[]..[])
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "base" (ctyp.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "name_length_of_tydcl" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "x" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "typedecl" (ctyp.ml[]..[])
                  []
              expression (ctyp.ml[]..[]) 
                Pexp_constraint
                expression (ctyp.ml[]..[])
                  Pexp_match
                  expression (ctyp.ml[]..[])
                    Pexp_ident "x" (ctyp.ml[]..[])
                  [
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_variant "TyDcl"
                        Some
                          pattern (ctyp.ml[]..[])
                            Ppat_tuple
                            [
                              pattern (ctyp.ml[]..[])
                                Ppat_variant "Lid"
                                Some
                                  pattern (ctyp.ml[]..[])
                                    Ppat_var "name" (ctyp.ml[]..[])
                              pattern (ctyp.ml[]..[])
                                Ppat_var "tyvars" (ctyp.ml[]..[])
                              pattern (ctyp.ml[]..[])
                                Ppat_any
                              pattern (ctyp.ml[]..[])
                                Ppat_any
                            ]
                      expression (ctyp.ml[]..[])
                        Pexp_tuple
                        [
                          expression (ctyp.ml[]..[])
                            Pexp_ident "name" (ctyp.ml[]..[])
                          expression (ctyp.ml[]..[])
                            Pexp_match
                            expression (ctyp.ml[]..[])
                              Pexp_ident "tyvars" (ctyp.ml[]..[])
                            [
                              <case>
                                pattern (ctyp.ml[]..[])
                                  Ppat_variant "None"
                                  None
                                expression (ctyp.ml[]..[])
                                  Pexp_constant Const_int 0
                              <case>
                                pattern (ctyp.ml[]..[])
                                  Ppat_variant "Some"
                                  Some
                                    pattern (ctyp.ml[]..[])
                                      Ppat_var "xs" (ctyp.ml[]..[])
                                expression (ctyp.ml[]..[])
                                  Pexp_apply
                                  expression (ctyp.ml[]..[])
                                    Pexp_ident "@@" (ctyp.ml[]..[])
                                  [
                                    <label> ""
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "List.length" (ctyp.ml[]..[])
                                    <label> ""
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "Ast_basic.N.list_of_com" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "xs" (ctyp.ml[]..[])
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_construct "[]" (ctyp.ml[]..[])
                                              None
                                        ]
                                  ]
                            ]
                        ]
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_var "tydcl" (ctyp.ml[]..[])
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "failwithf" (ctyp.ml[]..[])
                        [
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_constant Const_string("name_length_of_tydcl  %s \n",None)
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_apply
                              expression (ctyp.ml[]..[])
                                Pexp_ident "ObjsN.dump_typedecl" (ctyp.ml[]..[])
                              [
                                <label> ""
                                  expression (ctyp.ml[]..[])
                                    Pexp_ident "tydcl" (ctyp.ml[]..[])
                              ]
                        ]
                  ]
                core_type (ctyp.ml[]..[])
                  Ptyp_tuple
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "string" (ctyp.ml[]..[])
                      []
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "int" (ctyp.ml[]..[])
                      []
                  ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "gen_quantifiers1" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_fun "arity"
          None
          pattern (ctyp.ml[]..[])
            Ppat_var "arity" (ctyp.ml[]..[])
          expression (ctyp.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ctyp.ml[]..[])
                  Ppat_var "n" (ctyp.ml[]..[])
                expression (ctyp.ml[]..[]) 
                  Pexp_constraint
                  expression (ctyp.ml[]..[])
                    Pexp_apply
                    expression (ctyp.ml[]..[])
                      Pexp_ident "|>" (ctyp.ml[]..[])
                    [
                      <label> ""
                        expression (ctyp.ml[]..[])
                          Pexp_apply
                          expression (ctyp.ml[]..[])
                            Pexp_ident "|>" (ctyp.ml[]..[])
                          [
                            <label> ""
                              expression (ctyp.ml[]..[])
                                Pexp_apply
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "Listf.init" (ctyp.ml[]..[])
                                [
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "arity" (ctyp.ml[]..[])
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (ctyp.ml[]..[])
                                            Ppat_var "i" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[])
                                            Pexp_apply
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "@@" (ctyp.ml[]..[])
                                            [
                                              <label> ""
                                                expression (ctyp.ml[]..[])
                                                  Pexp_apply
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_ident "Listf.init" (ctyp.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_ident "n" (ctyp.ml[]..[])
                                                  ]
                                              <label> ""
                                                expression (ctyp.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (ctyp.ml[]..[])
                                                        Ppat_var "j" (ctyp.ml[]..[])
                                                      expression (ctyp.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_variant "Quote"
                                                          Some
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_variant "Normal"
                                                                  None
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (ctyp.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (ctyp.ml[]..[])
Pexp_ident "allx" (ctyp.ml[]..[])
                                                                      [
<label> "off"
  expression (ctyp.ml[]..[])
    Pexp_ident "i" (ctyp.ml[]..[])
<label> ""
  expression (ctyp.ml[]..[])
    Pexp_ident "j" (ctyp.ml[]..[])
                                                                      ]
                                                              ]
                                                        None
                                                        core_type (ctyp.ml[]..[])
                                                          Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                          []
                                                  ]
                                            ]
                                      ]
                                ]
                            <label> ""
                              expression (ctyp.ml[]..[])
                                Pexp_ident "List.concat" (ctyp.ml[]..[])
                          ]
                      <label> ""
                        expression (ctyp.ml[]..[])
                          Pexp_ident "appl_of_list" (ctyp.ml[]..[])
                    ]
                  core_type (ctyp.ml[]..[])
                    Ptyp_constr "ctyp" (ctyp.ml[]..[])
                    []
            ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "of_id_len" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_fun "off"
          None
          pattern (ctyp.ml[]..[])
            Ppat_var "off" (ctyp.ml[]..[])
          expression (ctyp.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ctyp.ml[]..[])
                  Ppat_tuple
                  [
                    pattern (ctyp.ml[]..[])
                      Ppat_constraint
                      pattern (ctyp.ml[]..[])
                        Ppat_var "id" (ctyp.ml[]..[])
                      core_type (ctyp.ml[]..[])
                        Ptyp_constr "ident" (ctyp.ml[]..[])
                        []
                    pattern (ctyp.ml[]..[])
                      Ppat_var "len" (ctyp.ml[]..[])
                  ]
                expression (ctyp.ml[]..[])
                  Pexp_apply
                  expression (ctyp.ml[]..[])
                    Pexp_ident "appl_of_list" (ctyp.ml[]..[])
                  [
                    <label> ""
                      expression (ctyp.ml[]..[])
                        Pexp_construct "::" (ctyp.ml[]..[])
                        Some
                          expression (ctyp.ml[]..[]) 
                            Pexp_tuple
                            [
                              expression (ctyp.ml[]..[]) 
                                Pexp_coerce
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "id" (ctyp.ml[]..[])
                                None
                                core_type (ctyp.ml[]..[])
                                  Ptyp_constr "ctyp" (ctyp.ml[]..[])
                                  []
                              expression (ctyp.ml[]..[])
                                Pexp_apply
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "Listf.init" (ctyp.ml[]..[])
                                [
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "len" (ctyp.ml[]..[])
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (ctyp.ml[]..[])
                                            Ppat_var "i" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[]) 
                                            Pexp_coerce
                                            expression (ctyp.ml[]..[])
                                              Pexp_variant "Quote"
                                              Some
                                                expression (ctyp.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_variant "Normal"
                                                      None
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_apply
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_ident "allx" (ctyp.ml[]..[])
                                                          [
                                                            <label> "off"
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "off" (ctyp.ml[]..[])
                                                            <label> ""
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "i" (ctyp.ml[]..[])
                                                          ]
                                                  ]
                                            None
                                            core_type (ctyp.ml[]..[])
                                              Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                              []
                                      ]
                                ]
                            ]
                  ]
            ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "of_name_len" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_fun "off"
          None
          pattern (ctyp.ml[]..[])
            Ppat_var "off" (ctyp.ml[]..[])
          expression (ctyp.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ctyp.ml[]..[])
                  Ppat_tuple
                  [
                    pattern (ctyp.ml[]..[])
                      Ppat_var "name" (ctyp.ml[]..[])
                    pattern (ctyp.ml[]..[])
                      Ppat_var "len" (ctyp.ml[]..[])
                  ]
                expression (ctyp.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (ctyp.ml[]..[])
                        Ppat_var "id" (ctyp.ml[]..[])
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "lid" (ctyp.ml[]..[])
                        [
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "name" (ctyp.ml[]..[])
                        ]
                  ]
                  expression (ctyp.ml[]..[])
                    Pexp_apply
                    expression (ctyp.ml[]..[])
                      Pexp_ident "of_id_len" (ctyp.ml[]..[])
                    [
                      <label> "off"
                        expression (ctyp.ml[]..[])
                          Pexp_ident "off" (ctyp.ml[]..[])
                      <label> ""
                        expression (ctyp.ml[]..[])
                          Pexp_tuple
                          [
                            expression (ctyp.ml[]..[])
                              Pexp_ident "id" (ctyp.ml[]..[])
                            expression (ctyp.ml[]..[])
                              Pexp_ident "len" (ctyp.ml[]..[])
                          ]
                    ]
            ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "gen_ty_of_tydcl" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_fun "off"
          None
          pattern (ctyp.ml[]..[])
            Ppat_var "off" (ctyp.ml[]..[])
          expression (ctyp.ml[]..[])
            Pexp_function
            [
              <case>
                pattern (ctyp.ml[]..[])
                  Ppat_constraint
                  pattern (ctyp.ml[]..[])
                    Ppat_var "tydcl" (ctyp.ml[]..[])
                  core_type (ctyp.ml[]..[])
                    Ptyp_constr "typedecl" (ctyp.ml[]..[])
                    []
                expression (ctyp.ml[]..[])
                  Pexp_apply
                  expression (ctyp.ml[]..[])
                    Pexp_ident "|>" (ctyp.ml[]..[])
                  [
                    <label> ""
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "|>" (ctyp.ml[]..[])
                        [
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "tydcl" (ctyp.ml[]..[])
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "name_length_of_tydcl" (ctyp.ml[]..[])
                        ]
                    <label> ""
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "of_name_len" (ctyp.ml[]..[])
                        [
                          <label> "off"
                            expression (ctyp.ml[]..[])
                              Pexp_ident "off" (ctyp.ml[]..[])
                        ]
                  ]
            ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "list_of_record" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "ty" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "name_ctyp" (ctyp.ml[]..[])
                  []
              expression (ctyp.ml[]..[]) 
                Pexp_constraint
                expression (ctyp.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (ctyp.ml[]..[])
                        Ppat_constraint
                        pattern (ctyp.ml[]..[])
                          Ppat_var "tys" (ctyp.ml[]..[])
                        core_type (ctyp.ml[]..[])
                          Ptyp_constr "list" (ctyp.ml[]..[])
                          [
                            core_type (ctyp.ml[]..[])
                              Ptyp_constr "name_ctyp" (ctyp.ml[]..[])
                              []
                          ]
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "Ast_basic.N.list_of_sem" (ctyp.ml[]..[])
                        [
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "ty" (ctyp.ml[]..[])
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_construct "[]" (ctyp.ml[]..[])
                              None
                        ]
                  ]
                  expression (ctyp.ml[]..[])
                    Pexp_apply
                    expression (ctyp.ml[]..[])
                      Pexp_ident "|>" (ctyp.ml[]..[])
                    [
                      <label> ""
                        expression (ctyp.ml[]..[])
                          Pexp_ident "tys" (ctyp.ml[]..[])
                      <label> ""
                        expression (ctyp.ml[]..[])
                          Pexp_apply
                          expression (ctyp.ml[]..[])
                            Pexp_ident "List.map" (ctyp.ml[]..[])
                          [
                            <label> ""
                              expression (ctyp.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (ctyp.ml[]..[])
                                      Ppat_variant "TyColMut"
                                      Some
                                        pattern (ctyp.ml[]..[])
                                          Ppat_tuple
                                          [
                                            pattern (ctyp.ml[]..[])
                                              Ppat_variant "Lid"
                                              Some
                                                pattern (ctyp.ml[]..[])
                                                  Ppat_var "label" (ctyp.ml[]..[])
                                            pattern (ctyp.ml[]..[])
                                              Ppat_var "ty" (ctyp.ml[]..[])
                                          ]
                                    expression (ctyp.ml[]..[])
                                      Pexp_record
                                      [
                                        "label" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "label" (ctyp.ml[]..[])
                                        "ty" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "ty" (ctyp.ml[]..[])
                                        "is_mutable" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[])
                                            Pexp_construct "true" (ctyp.ml[]..[])
                                            None
                                      ]
                                      None
                                  <case>
                                    pattern (ctyp.ml[]..[])
                                      Ppat_variant "TyCol"
                                      Some
                                        pattern (ctyp.ml[]..[])
                                          Ppat_tuple
                                          [
                                            pattern (ctyp.ml[]..[])
                                              Ppat_variant "Lid"
                                              Some
                                                pattern (ctyp.ml[]..[])
                                                  Ppat_var "label" (ctyp.ml[]..[])
                                            pattern (ctyp.ml[]..[])
                                              Ppat_var "ty" (ctyp.ml[]..[])
                                          ]
                                    expression (ctyp.ml[]..[])
                                      Pexp_record
                                      [
                                        "label" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "label" (ctyp.ml[]..[])
                                        "ty" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "ty" (ctyp.ml[]..[])
                                        "is_mutable" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[])
                                            Pexp_construct "false" (ctyp.ml[]..[])
                                            None
                                      ]
                                      None
                                  <case>
                                    pattern (ctyp.ml[]..[])
                                      Ppat_var "t0" (ctyp.ml[]..[])
                                    expression (ctyp.ml[]..[])
                                      Pexp_apply
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "failwithf" (ctyp.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_constant Const_string("list_of_record %s",None)
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_apply
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "ObjsN.dump_name_ctyp" (ctyp.ml[]..[])
                                            [
                                              <label> ""
                                                expression (ctyp.ml[]..[])
                                                  Pexp_ident "t0" (ctyp.ml[]..[])
                                            ]
                                      ]
                                ]
                          ]
                    ]
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "list" (ctyp.ml[]..[])
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "col" (ctyp.ml[]..[])
                      []
                  ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "gen_tuple_n" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_var "ty" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "n" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "|>" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "Listf.init" (ctyp.ml[]..[])
                            [
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "n" (ctyp.ml[]..[])
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ctyp.ml[]..[])
                                        Ppat_any
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "ty" (ctyp.ml[]..[])
                                  ]
                            ]
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "tuple_sta" (ctyp.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "repeat_arrow_n" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_var "ty" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "n" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "|>" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "Listf.init" (ctyp.ml[]..[])
                            [
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "n" (ctyp.ml[]..[])
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ctyp.ml[]..[])
                                        Ppat_any
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "ty" (ctyp.ml[]..[])
                                  ]
                            ]
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "arrow_of_list" (ctyp.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "result_id" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_apply
          expression (ctyp.ml[]..[])
            Pexp_ident "ref" (ctyp.ml[]..[])
          [
            <label> ""
              expression (ctyp.ml[]..[])
                Pexp_constant Const_int 0
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "mk_method_type" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_fun "number"
          None
          pattern (ctyp.ml[]..[])
            Ppat_var "number" (ctyp.ml[]..[])
          expression (ctyp.ml[]..[]) 
            Pexp_fun "prefix"
            None
            pattern (ctyp.ml[]..[])
              Ppat_var "prefix" (ctyp.ml[]..[])
            expression (ctyp.ml[]..[])
              Pexp_function
              [
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_tuple
                    [
                      pattern (ctyp.ml[]..[])
                        Ppat_var "id" (ctyp.ml[]..[])
                      pattern (ctyp.ml[]..[])
                        Ppat_var "len" (ctyp.ml[]..[])
                    ]
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_constraint
                          pattern (ctyp.ml[]..[])
                            Ppat_var "k" (ctyp.ml[]..[])
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "destination" (ctyp.ml[]..[])
                            []
                        expression (ctyp.ml[]..[]) 
                          Pexp_constraint
                          expression (ctyp.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (ctyp.ml[]..[])
                                  Ppat_var "prefix" (ctyp.ml[]..[])
                                expression (ctyp.ml[]..[])
                                  Pexp_apply
                                  expression (ctyp.ml[]..[])
                                    Pexp_ident "List.map" (ctyp.ml[]..[])
                                  [
                                    <label> ""
                                      expression (ctyp.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (ctyp.ml[]..[])
                                              Ppat_var "s" (ctyp.ml[]..[])
                                            expression (ctyp.ml[]..[])
                                              Pexp_apply
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "Stringf.drop_while" (ctyp.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_function
                                                    [
                                                      <case>
                                                        pattern (ctyp.ml[]..[])
                                                          Ppat_var "c" (ctyp.ml[]..[])
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_apply
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_ident "=" (ctyp.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "c" (ctyp.ml[]..[])
                                                            <label> ""
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_constant Const_char 5f
                                                          ]
                                                    ]
                                                <label> ""
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_ident "s" (ctyp.ml[]..[])
                                              ]
                                        ]
                                    <label> ""
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "prefix" (ctyp.ml[]..[])
                                  ]
                            ]
                            expression (ctyp.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (ctyp.ml[]..[])
                                    Ppat_var "app_src" (ctyp.ml[]..[])
                                  expression (ctyp.ml[]..[])
                                    Pexp_apply
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "@@" (ctyp.ml[]..[])
                                    [
                                      <label> ""
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "app_arrow" (ctyp.ml[]..[])
                                      <label> ""
                                        expression (ctyp.ml[]..[])
                                          Pexp_apply
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "Listf.init" (ctyp.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "number" (ctyp.ml[]..[])
                                            <label> ""
                                              expression (ctyp.ml[]..[])
                                                Pexp_function
                                                [
                                                  <case>
                                                    pattern (ctyp.ml[]..[])
                                                      Ppat_any
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_apply
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_ident "of_id_len" (ctyp.ml[]..[])
                                                      [
                                                        <label> "off"
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_constant Const_int 0
                                                        <label> ""
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "id" (ctyp.ml[]..[])
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "len" (ctyp.ml[]..[])
                                                            ]
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                              expression (ctyp.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (ctyp.ml[]..[])
                                      Ppat_var "result_type" (ctyp.ml[]..[])
                                    expression (ctyp.ml[]..[]) 
                                      Pexp_coerce
                                      expression (ctyp.ml[]..[])
                                        Pexp_variant "Quote"
                                        Some
                                          expression (ctyp.ml[]..[])
                                            Pexp_tuple
                                            [
                                              expression (ctyp.ml[]..[])
                                                Pexp_variant "Normal"
                                                None
                                              expression (ctyp.ml[]..[])
                                                Pexp_variant "Lid"
                                                Some
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_apply
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "^" (ctyp.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_constant Const_string("result",None)
                                                      <label> ""
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_apply
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_ident "string_of_int" (ctyp.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_apply
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_ident "!" (ctyp.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (ctyp.ml[]..[])
                                                                      Pexp_ident "result_id" (ctyp.ml[]..[])
                                                                ]
                                                          ]
                                                    ]
                                            ]
                                      None
                                      core_type (ctyp.ml[]..[])
                                        Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                        []
                                ]
                                expression (ctyp.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (ctyp.ml[]..[])
                                        Ppat_any
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "incr" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "result_id" (ctyp.ml[]..[])
                                        ]
                                  ]
                                  expression (ctyp.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (ctyp.ml[]..[])
                                          Ppat_var "self_type" (ctyp.ml[]..[])
                                        expression (ctyp.ml[]..[]) 
                                          Pexp_coerce
                                          expression (ctyp.ml[]..[])
                                            Pexp_variant "Quote"
                                            Some
                                              expression (ctyp.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_variant "Normal"
                                                    None
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_variant "Lid"
                                                    Some
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_constant Const_string("self_type",None)
                                                ]
                                          None
                                          core_type (ctyp.ml[]..[])
                                            Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                            []
                                    ]
                                    expression (ctyp.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (ctyp.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (ctyp.ml[]..[])
                                                Ppat_var "quant" (ctyp.ml[]..[])
                                              pattern (ctyp.ml[]..[])
                                                Ppat_var "dst" (ctyp.ml[]..[])
                                            ]
                                          expression (ctyp.ml[]..[])
                                            Pexp_match
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "k" (ctyp.ml[]..[])
                                            [
                                              <case>
                                                pattern (ctyp.ml[]..[])
                                                  Ppat_construct "Obj" (ctyp.ml[]..[])
                                                  Some
                                                    pattern (ctyp.ml[]..[])
                                                      Ppat_construct "Map" (ctyp.ml[]..[])
                                                      None
                                                expression (ctyp.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_constant Const_int 2
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_apply
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_ident "of_id_len" (ctyp.ml[]..[])
                                                      [
                                                        <label> "off"
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_constant Const_int 1
                                                        <label> ""
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "id" (ctyp.ml[]..[])
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "len" (ctyp.ml[]..[])
                                                            ]
                                                      ]
                                                  ]
                                              <case>
                                                pattern (ctyp.ml[]..[])
                                                  Ppat_construct "Obj" (ctyp.ml[]..[])
                                                  Some
                                                    pattern (ctyp.ml[]..[])
                                                      Ppat_construct "Iter" (ctyp.ml[]..[])
                                                      None
                                                expression (ctyp.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_constant Const_int 1
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "result_type" (ctyp.ml[]..[])
                                                  ]
                                              <case>
                                                pattern (ctyp.ml[]..[])
                                                  Ppat_construct "Obj" (ctyp.ml[]..[])
                                                  Some
                                                    pattern (ctyp.ml[]..[])
                                                      Ppat_construct "Fold" (ctyp.ml[]..[])
                                                      None
                                                expression (ctyp.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_constant Const_int 1
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "self_type" (ctyp.ml[]..[])
                                                  ]
                                              <case>
                                                pattern (ctyp.ml[]..[])
                                                  Ppat_construct "Obj" (ctyp.ml[]..[])
                                                  Some
                                                    pattern (ctyp.ml[]..[])
                                                      Ppat_construct "Concrete" (ctyp.ml[]..[])
                                                      Some
                                                        pattern (ctyp.ml[]..[])
                                                          Ppat_var "c" (ctyp.ml[]..[])
                                                expression (ctyp.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_constant Const_int 1
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "c" (ctyp.ml[]..[])
                                                  ]
                                              <case>
                                                pattern (ctyp.ml[]..[])
                                                  Ppat_construct "Str_item" (ctyp.ml[]..[])
                                                  None
                                                expression (ctyp.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_constant Const_int 1
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "result_type" (ctyp.ml[]..[])
                                                  ]
                                            ]
                                      ]
                                      expression (ctyp.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (ctyp.ml[]..[])
                                              Ppat_var "params" (ctyp.ml[]..[])
                                            expression (ctyp.ml[]..[])
                                              Pexp_apply
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "@@" (ctyp.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_apply
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "Listf.init" (ctyp.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_ident "len" (ctyp.ml[]..[])
                                                    ]
                                                <label> ""
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_function
                                                    [
                                                      <case>
                                                        pattern (ctyp.ml[]..[])
                                                          Ppat_var "i" (ctyp.ml[]..[])
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (ctyp.ml[]..[])
                                                                Ppat_var "app_src" (ctyp.ml[]..[])
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_apply
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_ident "@@" (ctyp.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (ctyp.ml[]..[])
                                                                      Pexp_ident "app_arrow" (ctyp.ml[]..[])
                                                                  <label> ""
                                                                    expression (ctyp.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (ctyp.ml[]..[])
Pexp_ident "@@" (ctyp.ml[]..[])
                                                                      [
<label> ""
  expression (ctyp.ml[]..[])
    Pexp_apply
    expression (ctyp.ml[]..[])
      Pexp_ident "Listf.init" (ctyp.ml[]..[])
    [
      <label> ""
        expression (ctyp.ml[]..[])
          Pexp_ident "number" (ctyp.ml[]..[])
    ]
<label> ""
  expression (ctyp.ml[]..[])
    Pexp_function
    [
      <case>
        pattern (ctyp.ml[]..[])
          Ppat_any
        expression (ctyp.ml[]..[]) 
          Pexp_coerce
          expression (ctyp.ml[]..[])
            Pexp_variant "Quote"
            Some
              expression (ctyp.ml[]..[])
                Pexp_tuple
                [
                  expression (ctyp.ml[]..[])
                    Pexp_variant "Normal"
                    None
                  expression (ctyp.ml[]..[])
                    Pexp_variant "Lid"
                    Some
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "allx" (ctyp.ml[]..[])
                        [
                          <label> "off"
                            expression (ctyp.ml[]..[])
                              Pexp_constant Const_int 0
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "i" (ctyp.ml[]..[])
                        ]
                ]
          None
          core_type (ctyp.ml[]..[])
            Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
            []
    ]
                                                                      ]
                                                                ]
                                                          ]
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_match
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_ident "k" (ctyp.ml[]..[])
                                                            [
                                                              <case>
                                                                pattern (ctyp.ml[]..[])
                                                                  Ppat_construct "Obj" (ctyp.ml[]..[])
                                                                  Some
                                                                    pattern (ctyp.ml[]..[])
                                                                      Ppat_var "u" (ctyp.ml[]..[])
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (ctyp.ml[]..[])
Ppat_var "dst" (ctyp.ml[]..[])
                                                                      expression (ctyp.ml[]..[])
Pexp_match
expression (ctyp.ml[]..[])
  Pexp_ident "u" (ctyp.ml[]..[])
[
  <case>
    pattern (ctyp.ml[]..[])
      Ppat_construct "Map" (ctyp.ml[]..[])
      None
    expression (ctyp.ml[]..[])
      Pexp_let Nonrec
      [
        <def>
          pattern (ctyp.ml[]..[])
            Ppat_var "x" (ctyp.ml[]..[])
          expression (ctyp.ml[]..[])
            Pexp_apply
            expression (ctyp.ml[]..[])
              Pexp_ident "allx" (ctyp.ml[]..[])
            [
              <label> "off"
                expression (ctyp.ml[]..[])
                  Pexp_constant Const_int 1
              <label> ""
                expression (ctyp.ml[]..[])
                  Pexp_ident "i" (ctyp.ml[]..[])
            ]
      ]
      expression (ctyp.ml[]..[]) 
        Pexp_coerce
        expression (ctyp.ml[]..[])
          Pexp_variant "Quote"
          Some
            expression (ctyp.ml[]..[])
              Pexp_tuple
              [
                expression (ctyp.ml[]..[])
                  Pexp_variant "Normal"
                  None
                expression (ctyp.ml[]..[])
                  Pexp_variant "Lid"
                  Some
                    expression (ctyp.ml[]..[])
                      Pexp_ident "x" (ctyp.ml[]..[])
              ]
        None
        core_type (ctyp.ml[]..[])
          Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
          []
  <case>
    pattern (ctyp.ml[]..[])
      Ppat_construct "Iter" (ctyp.ml[]..[])
      None
    expression (ctyp.ml[]..[])
      Pexp_ident "result_type" (ctyp.ml[]..[])
  <case>
    pattern (ctyp.ml[]..[])
      Ppat_construct "Concrete" (ctyp.ml[]..[])
      Some
        pattern (ctyp.ml[]..[])
          Ppat_var "c" (ctyp.ml[]..[])
    expression (ctyp.ml[]..[])
      Pexp_ident "c" (ctyp.ml[]..[])
  <case>
    pattern (ctyp.ml[]..[])
      Ppat_construct "Fold" (ctyp.ml[]..[])
      None
    expression (ctyp.ml[]..[])
      Pexp_ident "self_type" (ctyp.ml[]..[])
]
                                                                  ]
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (ctyp.ml[]..[])
                                                                      Pexp_ident "@@" (ctyp.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (ctyp.ml[]..[])
  Pexp_apply
  expression (ctyp.ml[]..[])
    Pexp_ident "arrow" (ctyp.ml[]..[])
  [
    <label> ""
      expression (ctyp.ml[]..[])
        Pexp_ident "self_type" (ctyp.ml[]..[])
  ]
                                                                      <label> ""
expression (ctyp.ml[]..[])
  Pexp_apply
  expression (ctyp.ml[]..[])
    Pexp_ident "<+" (ctyp.ml[]..[])
  [
    <label> ""
      expression (ctyp.ml[]..[])
        Pexp_ident "prefix" (ctyp.ml[]..[])
    <label> ""
      expression (ctyp.ml[]..[])
        Pexp_apply
        expression (ctyp.ml[]..[])
          Pexp_ident "app_src" (ctyp.ml[]..[])
        [
          <label> ""
            expression (ctyp.ml[]..[])
              Pexp_ident "dst" (ctyp.ml[]..[])
        ]
  ]
                                                                    ]
                                                              <case>
                                                                pattern (ctyp.ml[]..[])
                                                                  Ppat_construct "Str_item" (ctyp.ml[]..[])
                                                                  None
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_ident "<+" (ctyp.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (ctyp.ml[]..[])
Pexp_ident "prefix" (ctyp.ml[]..[])
                                                                    <label> ""
                                                                      expression (ctyp.ml[]..[])
Pexp_apply
expression (ctyp.ml[]..[])
  Pexp_ident "app_src" (ctyp.ml[]..[])
[
  <label> ""
    expression (ctyp.ml[]..[])
      Pexp_ident "result_type" (ctyp.ml[]..[])
]
                                                                  ]
                                                            ]
                                                    ]
                                              ]
                                        ]
                                        expression (ctyp.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (ctyp.ml[]..[])
                                                Ppat_var "base" (ctyp.ml[]..[])
                                              expression (ctyp.ml[]..[])
                                                Pexp_apply
                                                expression (ctyp.ml[]..[])
                                                  Pexp_ident "<+" (ctyp.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "prefix" (ctyp.ml[]..[])
                                                  <label> ""
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_apply
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_ident "app_src" (ctyp.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_ident "dst" (ctyp.ml[]..[])
                                                      ]
                                                ]
                                          ]
                                          expression (ctyp.ml[]..[])
                                            Pexp_ifthenelse
                                            expression (ctyp.ml[]..[])
                                              Pexp_apply
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "=" (ctyp.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_ident "len" (ctyp.ml[]..[])
                                                <label> ""
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_constant Const_int 0
                                              ]
                                            expression (ctyp.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (ctyp.ml[]..[])
                                                  Pexp_variant "TyPolEnd"
                                                  Some
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "base" (ctyp.ml[]..[])
                                                expression (ctyp.ml[]..[])
                                                  Pexp_ident "dst" (ctyp.ml[]..[])
                                              ]
                                            Some
                                              expression (ctyp.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (ctyp.ml[]..[])
                                                      Ppat_var "quantifiers" (ctyp.ml[]..[])
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_apply
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_ident "gen_quantifiers1" (ctyp.ml[]..[])
                                                      [
                                                        <label> "arity"
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_ident "quant" (ctyp.ml[]..[])
                                                        <label> ""
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_ident "len" (ctyp.ml[]..[])
                                                      ]
                                                ]
                                                expression (ctyp.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (ctyp.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_variant "TyPol"
                                                        Some
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (ctyp.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_ident "quantifiers" (ctyp.ml[]..[])
                                                                None
                                                                core_type (ctyp.ml[]..[])
                                                                  Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                                  []
                                                              expression (ctyp.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_ident "+>" (ctyp.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (ctyp.ml[]..[])
Pexp_ident "params" (ctyp.ml[]..[])
                                                                    <label> ""
                                                                      expression (ctyp.ml[]..[])
Pexp_ident "base" (ctyp.ml[]..[])
                                                                  ]
                                                                None
                                                                core_type (ctyp.ml[]..[])
                                                                  Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                                  []
                                                            ]
                                                      None
                                                      core_type (ctyp.ml[]..[])
                                                        Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                        []
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "dst" (ctyp.ml[]..[])
                                                  ]
                          core_type (ctyp.ml[]..[])
                            Ptyp_tuple
                            [
                              core_type (ctyp.ml[]..[])
                                Ptyp_constr "ctyp" (ctyp.ml[]..[])
                                []
                              core_type (ctyp.ml[]..[])
                                Ptyp_constr "ctyp" (ctyp.ml[]..[])
                                []
                            ]
                    ]
              ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "mk_method_type_of_name" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_fun "number"
          None
          pattern (ctyp.ml[]..[])
            Ppat_var "number" (ctyp.ml[]..[])
          expression (ctyp.ml[]..[]) 
            Pexp_fun "prefix"
            None
            pattern (ctyp.ml[]..[])
              Ppat_var "prefix" (ctyp.ml[]..[])
            expression (ctyp.ml[]..[])
              Pexp_function
              [
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_tuple
                    [
                      pattern (ctyp.ml[]..[])
                        Ppat_var "name" (ctyp.ml[]..[])
                      pattern (ctyp.ml[]..[])
                        Ppat_var "len" (ctyp.ml[]..[])
                    ]
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_constraint
                          pattern (ctyp.ml[]..[])
                            Ppat_var "k" (ctyp.ml[]..[])
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "destination" (ctyp.ml[]..[])
                            []
                        expression (ctyp.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (ctyp.ml[]..[])
                                Ppat_var "id" (ctyp.ml[]..[])
                              expression (ctyp.ml[]..[])
                                Pexp_apply
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "lid" (ctyp.ml[]..[])
                                [
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "name" (ctyp.ml[]..[])
                                ]
                          ]
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "mk_method_type" (ctyp.ml[]..[])
                            [
                              <label> "number"
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "number" (ctyp.ml[]..[])
                              <label> "prefix"
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "prefix" (ctyp.ml[]..[])
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "id" (ctyp.ml[]..[])
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "len" (ctyp.ml[]..[])
                                  ]
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "k" (ctyp.ml[]..[])
                            ]
                    ]
              ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "mk_obj" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_var "class_name" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "base" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (ctyp.ml[]..[])
                            Ppat_var "body" (ctyp.ml[]..[])
                          expression (ctyp.ml[]..[]) 
                            Pexp_coerce
                            expression (ctyp.ml[]..[])
                              Pexp_variant "Class"
                              Some
                                expression (ctyp.ml[]..[])
                                  Pexp_variant "ClDeclS"
                                  Some
                                    expression (ctyp.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (ctyp.ml[]..[])
                                          Pexp_variant "Negative"
                                          None
                                        expression (ctyp.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "class_name" (ctyp.ml[]..[])
                                        expression (ctyp.ml[]..[])
                                          Pexp_variant "ObjPat"
                                          Some
                                            expression (ctyp.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (ctyp.ml[]..[])
                                                  Pexp_variant "Constraint"
                                                  Some
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_variant "Lid"
                                                          Some
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_constant Const_string("self",None)
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_variant "Quote"
                                                          Some
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_variant "Normal"
                                                                  None
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (ctyp.ml[]..[])
                                                                      Pexp_constant Const_string("self_type",None)
                                                              ]
                                                      ]
                                                expression (ctyp.ml[]..[])
                                                  Pexp_variant "Sem"
                                                  Some
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_variant "Inherit"
                                                          Some
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_variant "Negative"
                                                                  None
                                                                expression (ctyp.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (ctyp.ml[]..[])
                                                                      Pexp_ident "base" (ctyp.ml[]..[])
                                                              ]
                                                        expression (ctyp.ml[]..[]) 
                                                          Pexp_coerce
                                                          expression (ctyp.ml[]..[])
                                                            Pexp_ident "body" (ctyp.ml[]..[])
                                                          None
                                                          core_type (ctyp.ml[]..[])
                                                            Ptyp_constr "Astfn.clfield" (ctyp.ml[]..[])
                                                            []
                                                      ]
                                              ]
                                      ]
                            None
                            core_type (ctyp.ml[]..[])
                              Ptyp_constr "Astfn.stru" (ctyp.ml[]..[])
                              []
                      ]
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "is_recursive" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_var "ty_dcl" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_match
                expression (ctyp.ml[]..[])
                  Pexp_ident "ty_dcl" (ctyp.ml[]..[])
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_variant "TyDcl"
                      Some
                        pattern (ctyp.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (ctyp.ml[]..[])
                              Ppat_variant "Lid"
                              Some
                                pattern (ctyp.ml[]..[])
                                  Ppat_var "name" (ctyp.ml[]..[])
                            pattern (ctyp.ml[]..[])
                              Ppat_any
                            pattern (ctyp.ml[]..[])
                              Ppat_var "ctyp" (ctyp.ml[]..[])
                            pattern (ctyp.ml[]..[])
                              Ppat_any
                          ]
                    expression (ctyp.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (ctyp.ml[]..[])
                            Ppat_var "obj" (ctyp.ml[]..[])
                          expression (ctyp.ml[]..[])
                            Pexp_object
                            class_structure
                              pattern (ctyp.ml[]..[])
                                Ppat_constraint
                                pattern (ctyp.ml[]..[])
                                  Ppat_var "self" (ctyp.ml[]..[])
                                core_type (ctyp.ml[]..[])
                                  Ptyp_var self_type
                              [
                                class_field (ctyp.ml[]..[])
                                  Pcf_inherit Fresh
                                    class_expr (ctyp.ml[]..[])
                                      Pcl_constr "ObjsN.fold" (ctyp.ml[]..[])
                                      []
                                    Some
                                      "super"
                                class_field (ctyp.ml[]..[])
                                  Pcf_val Mutable
                                    "is_recursive" (ctyp.ml[]..[])
                                    Concrete Fresh
                                    expression (ctyp.ml[]..[])
                                      Pexp_construct "false" (ctyp.ml[]..[])
                                      None
                                class_field (ctyp.ml[]..[])
                                  Pcf_method Public
                                    "ctyp" (ctyp.ml[]..[])
                                    Concrete Override
                                    expression (ctyp.ml[]..[]) 
                                      Pexp_poly
                                      expression (ctyp.ml[]..[])
                                        Pexp_function
                                        [
                                          <case>
                                            pattern (ctyp.ml[]..[])
                                              Ppat_constraint
                                              pattern (ctyp.ml[]..[])
                                                Ppat_variant "Lid"
                                                Some
                                                  pattern (ctyp.ml[]..[])
                                                    Ppat_var "i" (ctyp.ml[]..[])
                                              core_type (ctyp.ml[]..[])
                                                Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                []
                                            <when>
                                              expression (ctyp.ml[]..[])
                                                Pexp_apply
                                                expression (ctyp.ml[]..[])
                                                  Pexp_ident "=" (ctyp.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "i" (ctyp.ml[]..[])
                                                  <label> ""
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "name" (ctyp.ml[]..[])
                                                ]
                                            expression (ctyp.ml[]..[])
                                              Pexp_sequence
                                              expression (ctyp.ml[]..[])
                                                Pexp_setinstvar "is_recursive" (ctyp.ml[]..[])
                                                expression (ctyp.ml[]..[])
                                                  Pexp_construct "true" (ctyp.ml[]..[])
                                                  None
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "self" (ctyp.ml[]..[])
                                          <case>
                                            pattern (ctyp.ml[]..[])
                                              Ppat_var "x" (ctyp.ml[]..[])
                                            expression (ctyp.ml[]..[])
                                              Pexp_ifthenelse
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "is_recursive" (ctyp.ml[]..[])
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "self" (ctyp.ml[]..[])
                                              Some
                                                expression (ctyp.ml[]..[])
                                                  Pexp_apply
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_send "ctyp"
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "super" (ctyp.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_ident "x" (ctyp.ml[]..[])
                                                  ]
                                        ]
                                      None
                                class_field (ctyp.ml[]..[])
                                  Pcf_method Public
                                    "is_recursive" (ctyp.ml[]..[])
                                    Concrete Fresh
                                    expression (ctyp.ml[]..[]) 
                                      Pexp_poly
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "is_recursive" (ctyp.ml[]..[])
                                      None
                              ]
                      ]
                      expression (ctyp.ml[]..[])
                        Pexp_send "is_recursive"
                        expression (ctyp.ml[]..[])
                          Pexp_apply
                          expression (ctyp.ml[]..[])
                            Pexp_send "type_info"
                            expression (ctyp.ml[]..[])
                              Pexp_ident "obj" (ctyp.ml[]..[])
                          [
                            <label> ""
                              expression (ctyp.ml[]..[])
                                Pexp_ident "ctyp" (ctyp.ml[]..[])
                          ]
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_variant "And"
                      Some
                        pattern (ctyp.ml[]..[])
                          Ppat_any
                    expression (ctyp.ml[]..[])
                      Pexp_construct "true" (ctyp.ml[]..[])
                      None
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_any
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "failwithf" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_constant Const_string("is_recursive not type declartion: %s",None)
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "ObjsN.dump_typedecl" (ctyp.ml[]..[])
                            [
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "ty_dcl" (ctyp.ml[]..[])
                            ]
                      ]
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "qualified_app_list" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "x" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "ctyp" (ctyp.ml[]..[])
                  []
              expression (ctyp.ml[]..[]) 
                Pexp_constraint
                expression (ctyp.ml[]..[])
                  Pexp_match
                  expression (ctyp.ml[]..[])
                    Pexp_ident "x" (ctyp.ml[]..[])
                  [
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_alias "x" (ctyp.ml[]..[])
                        pattern (ctyp.ml[]..[])
                          Ppat_constraint
                          pattern (ctyp.ml[]..[])
                            Ppat_variant "App"
                            Some
                              pattern (ctyp.ml[]..[])
                                Ppat_tuple
                                [
                                  pattern (ctyp.ml[]..[])
                                    Ppat_var "_loc" (ctyp.ml[]..[])
                                  pattern (ctyp.ml[]..[])
                                    Ppat_any
                                ]
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                            []
                      expression (ctyp.ml[]..[])
                        Pexp_match
                        expression (ctyp.ml[]..[])
                          Pexp_apply
                          expression (ctyp.ml[]..[])
                            Pexp_ident "Ast_basic.N.list_of_app" (ctyp.ml[]..[])
                          [
                            <label> ""
                              expression (ctyp.ml[]..[])
                                Pexp_ident "x" (ctyp.ml[]..[])
                            <label> ""
                              expression (ctyp.ml[]..[])
                                Pexp_construct "[]" (ctyp.ml[]..[])
                                None
                          ]
                        [
                          <case>
                            pattern (ctyp.ml[]..[])
                              Ppat_construct "::" (ctyp.ml[]..[])
                              Some
                                pattern (ctyp.ml[]..[]) 
                                  Ppat_tuple
                                  [
                                    pattern (ctyp.ml[]..[])
                                      Ppat_constraint
                                      pattern (ctyp.ml[]..[])
                                        Ppat_variant "Lid"
                                        Some
                                          pattern (ctyp.ml[]..[])
                                            Ppat_var "_loc" (ctyp.ml[]..[])
                                      core_type (ctyp.ml[]..[])
                                        Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                        []
                                    pattern (ctyp.ml[]..[])
                                      Ppat_any
                                  ]
                            expression (ctyp.ml[]..[])
                              Pexp_construct "None" (ctyp.ml[]..[])
                              None
                          <case>
                            pattern (ctyp.ml[]..[])
                              Ppat_construct "::" (ctyp.ml[]..[])
                              Some
                                pattern (ctyp.ml[]..[]) 
                                  Ppat_tuple
                                  [
                                    pattern (ctyp.ml[]..[])
                                      Ppat_alias "i" (ctyp.ml[]..[])
                                      pattern (ctyp.ml[]..[])
                                        Ppat_type
                                        "ident'" (ctyp.ml[]..[])
                                    pattern (ctyp.ml[]..[])
                                      Ppat_var "ys" (ctyp.ml[]..[])
                                  ]
                            expression (ctyp.ml[]..[])
                              Pexp_construct "Some" (ctyp.ml[]..[])
                              Some
                                expression (ctyp.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "i" (ctyp.ml[]..[])
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "ys" (ctyp.ml[]..[])
                                  ]
                          <case>
                            pattern (ctyp.ml[]..[])
                              Ppat_any
                            expression (ctyp.ml[]..[])
                              Pexp_construct "None" (ctyp.ml[]..[])
                              None
                        ]
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_or
                        pattern (ctyp.ml[]..[])
                          Ppat_variant "Lid"
                          Some
                            pattern (ctyp.ml[]..[])
                              Ppat_any
                        pattern (ctyp.ml[]..[])
                          Ppat_variant "Uid"
                          Some
                            pattern (ctyp.ml[]..[])
                              Ppat_any
                      expression (ctyp.ml[]..[])
                        Pexp_construct "None" (ctyp.ml[]..[])
                        None
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_alias "i" (ctyp.ml[]..[])
                        pattern (ctyp.ml[]..[])
                          Ppat_type
                          "ident'" (ctyp.ml[]..[])
                      expression (ctyp.ml[]..[])
                        Pexp_construct "Some" (ctyp.ml[]..[])
                        Some
                          expression (ctyp.ml[]..[])
                            Pexp_tuple
                            [
                              expression (ctyp.ml[]..[])
                                Pexp_ident "i" (ctyp.ml[]..[])
                              expression (ctyp.ml[]..[])
                                Pexp_construct "[]" (ctyp.ml[]..[])
                                None
                            ]
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_any
                      expression (ctyp.ml[]..[])
                        Pexp_construct "None" (ctyp.ml[]..[])
                        None
                  ]
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "option" (ctyp.ml[]..[])
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_tuple
                      [
                        core_type (ctyp.ml[]..[])
                          Ptyp_constr "ident" (ctyp.ml[]..[])
                          []
                        core_type (ctyp.ml[]..[])
                          Ptyp_constr "list" (ctyp.ml[]..[])
                          [
                            core_type (ctyp.ml[]..[])
                              Ptyp_constr "ctyp" (ctyp.ml[]..[])
                              []
                          ]
                      ]
                  ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "is_abstract" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "x" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "typedecl" (ctyp.ml[]..[])
                  []
              expression (ctyp.ml[]..[])
                Pexp_match
                expression (ctyp.ml[]..[])
                  Pexp_ident "x" (ctyp.ml[]..[])
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_variant "TyAbstr"
                      Some
                        pattern (ctyp.ml[]..[])
                          Ppat_any
                    expression (ctyp.ml[]..[])
                      Pexp_construct "true" (ctyp.ml[]..[])
                      None
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_any
                    expression (ctyp.ml[]..[])
                      Pexp_construct "false" (ctyp.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "abstract_list" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "x" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "typedecl" (ctyp.ml[]..[])
                  []
              expression (ctyp.ml[]..[])
                Pexp_match
                expression (ctyp.ml[]..[])
                  Pexp_ident "x" (ctyp.ml[]..[])
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_variant "TyAbstr"
                      Some
                        pattern (ctyp.ml[]..[])
                          Ppat_tuple
                          [
                            pattern (ctyp.ml[]..[])
                              Ppat_any
                            pattern (ctyp.ml[]..[])
                              Ppat_var "lst" (ctyp.ml[]..[])
                            pattern (ctyp.ml[]..[])
                              Ppat_any
                          ]
                    expression (ctyp.ml[]..[])
                      Pexp_match
                      expression (ctyp.ml[]..[])
                        Pexp_ident "lst" (ctyp.ml[]..[])
                      [
                        <case>
                          pattern (ctyp.ml[]..[])
                            Ppat_variant "None"
                            None
                          expression (ctyp.ml[]..[])
                            Pexp_construct "Some" (ctyp.ml[]..[])
                            Some
                              expression (ctyp.ml[]..[])
                                Pexp_constant Const_int 0
                        <case>
                          pattern (ctyp.ml[]..[])
                            Ppat_variant "Some"
                            Some
                              pattern (ctyp.ml[]..[])
                                Ppat_var "xs" (ctyp.ml[]..[])
                          expression (ctyp.ml[]..[])
                            Pexp_construct "Some" (ctyp.ml[]..[])
                            Some
                              expression (ctyp.ml[]..[])
                                Pexp_apply
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "@@" (ctyp.ml[]..[])
                                [
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "List.length" (ctyp.ml[]..[])
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_apply
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "Ast_basic.N.list_of_com" (ctyp.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "xs" (ctyp.ml[]..[])
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_construct "[]" (ctyp.ml[]..[])
                                            None
                                      ]
                                ]
                      ]
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_any
                    expression (ctyp.ml[]..[])
                      Pexp_construct "None" (ctyp.ml[]..[])
                      None
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "reduce_data_ctors" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "ty" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "or_ctyp" (ctyp.ml[]..[])
                  []
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_constraint
                      pattern (ctyp.ml[]..[])
                        Ppat_var "init" (ctyp.ml[]..[])
                      core_type (ctyp.ml[]..[])
                        Ptyp_var a
                    expression (ctyp.ml[]..[])
                      Pexp_fun "compose"
                      None
                      pattern (ctyp.ml[]..[])
                        Ppat_var "compose" (ctyp.ml[]..[])
                      expression (ctyp.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (ctyp.ml[]..[])
                              Ppat_constraint
                              pattern (ctyp.ml[]..[])
                                Ppat_var "f" (ctyp.ml[]..[])
                              core_type (ctyp.ml[]..[])
                                Ptyp_arrow
                                ""
                                core_type (ctyp.ml[]..[])
                                  Ptyp_constr "string" (ctyp.ml[]..[])
                                  []
                                core_type (ctyp.ml[]..[])
                                  Ptyp_arrow
                                  ""
                                  core_type (ctyp.ml[]..[])
                                    Ptyp_constr "list" (ctyp.ml[]..[])
                                    [
                                      core_type (ctyp.ml[]..[])
                                        Ptyp_constr "ctyp" (ctyp.ml[]..[])
                                        []
                                    ]
                                  core_type (ctyp.ml[]..[])
                                    Ptyp_var e
                            expression (ctyp.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (ctyp.ml[]..[])
                                    Ppat_var "branches" (ctyp.ml[]..[])
                                  expression (ctyp.ml[]..[])
                                    Pexp_apply
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "Ast_basic.N.list_of_bar" (ctyp.ml[]..[])
                                    [
                                      <label> ""
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "ty" (ctyp.ml[]..[])
                                      <label> ""
                                        expression (ctyp.ml[]..[])
                                          Pexp_construct "[]" (ctyp.ml[]..[])
                                          None
                                    ]
                              ]
                              expression (ctyp.ml[]..[])
                                Pexp_apply
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "List.fold_left" (ctyp.ml[]..[])
                                [
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (ctyp.ml[]..[])
                                            Ppat_var "acc" (ctyp.ml[]..[])
                                          expression (ctyp.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (ctyp.ml[]..[])
                                                  Ppat_var "x" (ctyp.ml[]..[])
                                                expression (ctyp.ml[]..[])
                                                  Pexp_match
                                                  expression (ctyp.ml[]..[]) 
                                                    Pexp_constraint
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "x" (ctyp.ml[]..[])
                                                    core_type (ctyp.ml[]..[])
                                                      Ptyp_constr "or_ctyp" (ctyp.ml[]..[])
                                                      []
                                                  [
                                                    <case>
                                                      pattern (ctyp.ml[]..[])
                                                        Ppat_variant "Of"
                                                        Some
                                                          pattern (ctyp.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (ctyp.ml[]..[])
                                                                Ppat_variant "Uid"
                                                                Some
                                                                  pattern (ctyp.ml[]..[])
                                                                    Ppat_var "cons" (ctyp.ml[]..[])
                                                              pattern (ctyp.ml[]..[])
                                                                Ppat_var "tys" (ctyp.ml[]..[])
                                                            ]
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_apply
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_ident "compose" (ctyp.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_apply
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "f" (ctyp.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_ident "cons" (ctyp.ml[]..[])
                                                                <label> ""
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_apply
                                                                    expression (ctyp.ml[]..[])
                                                                      Pexp_ident "Ast_basic.N.list_of_star" (ctyp.ml[]..[])
                                                                    [
                                                                      <label> ""
expression (ctyp.ml[]..[])
  Pexp_ident "tys" (ctyp.ml[]..[])
                                                                      <label> ""
expression (ctyp.ml[]..[])
  Pexp_construct "[]" (ctyp.ml[]..[])
  None
                                                                    ]
                                                              ]
                                                          <label> ""
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_ident "acc" (ctyp.ml[]..[])
                                                        ]
                                                    <case>
                                                      pattern (ctyp.ml[]..[])
                                                        Ppat_variant "Uid"
                                                        Some
                                                          pattern (ctyp.ml[]..[])
                                                            Ppat_var "cons" (ctyp.ml[]..[])
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_apply
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_ident "compose" (ctyp.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_apply
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "f" (ctyp.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_ident "cons" (ctyp.ml[]..[])
                                                                <label> ""
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_construct "[]" (ctyp.ml[]..[])
                                                                    None
                                                              ]
                                                          <label> ""
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_ident "acc" (ctyp.ml[]..[])
                                                        ]
                                                    <case>
                                                      pattern (ctyp.ml[]..[])
                                                        Ppat_var "t" (ctyp.ml[]..[])
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_apply
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_ident "failwithf" (ctyp.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_constant Const_string("reduce_data_ctors: %s",None)
                                                          <label> ""
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_apply
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "ObjsN.dump_or_ctyp" (ctyp.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_ident "t" (ctyp.ml[]..[])
                                                              ]
                                                        ]
                                                  ]
                                            ]
                                      ]
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "init" (ctyp.ml[]..[])
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "branches" (ctyp.ml[]..[])
                                ]
                        ]
                ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "view_sum" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "t" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "or_ctyp" (ctyp.ml[]..[])
                  []
              expression (ctyp.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "bs" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "Ast_basic.N.list_of_bar" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "t" (ctyp.ml[]..[])
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_construct "[]" (ctyp.ml[]..[])
                            None
                      ]
                ]
                expression (ctyp.ml[]..[])
                  Pexp_apply
                  expression (ctyp.ml[]..[])
                    Pexp_ident "List.map" (ctyp.ml[]..[])
                  [
                    <label> ""
                      expression (ctyp.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (ctyp.ml[]..[])
                              Ppat_variant "Uid"
                              Some
                                pattern (ctyp.ml[]..[])
                                  Ppat_var "cons" (ctyp.ml[]..[])
                            expression (ctyp.ml[]..[])
                              Pexp_variant "branch"
                              Some
                                expression (ctyp.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "cons" (ctyp.ml[]..[])
                                    expression (ctyp.ml[]..[])
                                      Pexp_construct "[]" (ctyp.ml[]..[])
                                      None
                                  ]
                          <case>
                            pattern (ctyp.ml[]..[])
                              Ppat_variant "Of"
                              Some
                                pattern (ctyp.ml[]..[])
                                  Ppat_tuple
                                  [
                                    pattern (ctyp.ml[]..[])
                                      Ppat_variant "Uid"
                                      Some
                                        pattern (ctyp.ml[]..[])
                                          Ppat_var "cons" (ctyp.ml[]..[])
                                    pattern (ctyp.ml[]..[])
                                      Ppat_var "t" (ctyp.ml[]..[])
                                  ]
                            expression (ctyp.ml[]..[])
                              Pexp_variant "branch"
                              Some
                                expression (ctyp.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "cons" (ctyp.ml[]..[])
                                    expression (ctyp.ml[]..[])
                                      Pexp_apply
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "Ast_basic.N.list_of_star" (ctyp.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "t" (ctyp.ml[]..[])
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_construct "[]" (ctyp.ml[]..[])
                                            None
                                      ]
                                  ]
                          <case>
                            pattern (ctyp.ml[]..[])
                              Ppat_any
                            expression (ctyp.ml[]..[])
                              Pexp_assert
                              expression (ctyp.ml[]..[])
                                Pexp_construct "false" (ctyp.ml[]..[])
                                None
                        ]
                    <label> ""
                      expression (ctyp.ml[]..[])
                        Pexp_ident "bs" (ctyp.ml[]..[])
                  ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "view_variant" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_constraint
                pattern (ctyp.ml[]..[])
                  Ppat_var "t" (ctyp.ml[]..[])
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "row_field" (ctyp.ml[]..[])
                  []
              expression (ctyp.ml[]..[]) 
                Pexp_constraint
                expression (ctyp.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (ctyp.ml[]..[])
                        Ppat_var "lst" (ctyp.ml[]..[])
                      expression (ctyp.ml[]..[])
                        Pexp_apply
                        expression (ctyp.ml[]..[])
                          Pexp_ident "Ast_basic.N.list_of_bar" (ctyp.ml[]..[])
                        [
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_ident "t" (ctyp.ml[]..[])
                          <label> ""
                            expression (ctyp.ml[]..[])
                              Pexp_construct "[]" (ctyp.ml[]..[])
                              None
                        ]
                  ]
                  expression (ctyp.ml[]..[])
                    Pexp_apply
                    expression (ctyp.ml[]..[])
                      Pexp_ident "List.map" (ctyp.ml[]..[])
                    [
                      <label> ""
                        expression (ctyp.ml[]..[])
                          Pexp_function
                          [
                            <case>
                              pattern (ctyp.ml[]..[])
                                Ppat_variant "TyVrnOf"
                                Some
                                  pattern (ctyp.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (ctyp.ml[]..[])
                                        Ppat_variant "C"
                                        Some
                                          pattern (ctyp.ml[]..[])
                                            Ppat_var "cons" (ctyp.ml[]..[])
                                      pattern (ctyp.ml[]..[])
                                        Ppat_variant "Par"
                                        Some
                                          pattern (ctyp.ml[]..[])
                                            Ppat_var "t" (ctyp.ml[]..[])
                                    ]
                              expression (ctyp.ml[]..[])
                                Pexp_variant "variant"
                                Some
                                  expression (ctyp.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "cons" (ctyp.ml[]..[])
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "Ast_basic.N.list_of_star" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "t" (ctyp.ml[]..[])
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_construct "[]" (ctyp.ml[]..[])
                                              None
                                        ]
                                    ]
                            <case>
                              pattern (ctyp.ml[]..[])
                                Ppat_variant "TyVrnOf"
                                Some
                                  pattern (ctyp.ml[]..[])
                                    Ppat_tuple
                                    [
                                      pattern (ctyp.ml[]..[])
                                        Ppat_variant "C"
                                        Some
                                          pattern (ctyp.ml[]..[])
                                            Ppat_var "cons" (ctyp.ml[]..[])
                                      pattern (ctyp.ml[]..[])
                                        Ppat_var "t" (ctyp.ml[]..[])
                                    ]
                              expression (ctyp.ml[]..[])
                                Pexp_variant "variant"
                                Some
                                  expression (ctyp.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "cons" (ctyp.ml[]..[])
                                      expression (ctyp.ml[]..[])
                                        Pexp_construct "::" (ctyp.ml[]..[]) 
                                        Some
                                          expression (ctyp.ml[]..[]) 
                                            Pexp_tuple
                                            [
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "t" (ctyp.ml[]..[])
                                              expression (ctyp.ml[]..[]) 
                                                Pexp_construct "[]" (ctyp.ml[]..[]) 
                                                None
                                            ]
                                    ]
                            <case>
                              pattern (ctyp.ml[]..[])
                                Ppat_variant "TyVrn"
                                Some
                                  pattern (ctyp.ml[]..[])
                                    Ppat_variant "C"
                                    Some
                                      pattern (ctyp.ml[]..[])
                                        Ppat_var "cons" (ctyp.ml[]..[])
                              expression (ctyp.ml[]..[])
                                Pexp_variant "variant"
                                Some
                                  expression (ctyp.ml[]..[])
                                    Pexp_tuple
                                    [
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "cons" (ctyp.ml[]..[])
                                      expression (ctyp.ml[]..[])
                                        Pexp_construct "[]" (ctyp.ml[]..[])
                                        None
                                    ]
                            <case>
                              pattern (ctyp.ml[]..[])
                                Ppat_variant "Ctyp"
                                Some
                                  pattern (ctyp.ml[]..[])
                                    Ppat_alias "i" (ctyp.ml[]..[])
                                    pattern (ctyp.ml[]..[])
                                      Ppat_type
                                      "ident'" (ctyp.ml[]..[])
                              expression (ctyp.ml[]..[])
                                Pexp_variant "abbrev"
                                Some
                                  expression (ctyp.ml[]..[])
                                    Pexp_ident "i" (ctyp.ml[]..[])
                            <case>
                              pattern (ctyp.ml[]..[])
                                Ppat_var "u" (ctyp.ml[]..[])
                              expression (ctyp.ml[]..[])
                                Pexp_apply
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "failwithf" (ctyp.ml[]..[])
                                [
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_constant Const_string("%s %s",None)
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_constant Const_string("view_variant",None)
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_apply
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "ObjsN.dump_row_field" (ctyp.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "u" (ctyp.ml[]..[])
                                      ]
                                ]
                          ]
                      <label> ""
                        expression (ctyp.ml[]..[])
                          Pexp_ident "lst" (ctyp.ml[]..[])
                    ]
                core_type (ctyp.ml[]..[])
                  Ptyp_constr "list" (ctyp.ml[]..[])
                  [
                    core_type (ctyp.ml[]..[])
                      Ptyp_constr "vbranch" (ctyp.ml[]..[])
                      []
                  ]
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "conversion_table" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_constraint
          expression (ctyp.ml[]..[])
            Pexp_apply
            expression (ctyp.ml[]..[])
              Pexp_ident "Hashtbl.create" (ctyp.ml[]..[])
            [
              <label> ""
                expression (ctyp.ml[]..[])
                  Pexp_constant Const_int 50
            ]
          core_type (ctyp.ml[]..[])
            Ptyp_constr "Hashtbl.t" (ctyp.ml[]..[])
            [
              core_type (ctyp.ml[]..[])
                Ptyp_constr "string" (ctyp.ml[]..[])
                []
              core_type (ctyp.ml[]..[])
                Ptyp_constr "string" (ctyp.ml[]..[])
                []
            ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "transform" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_constraint
          expression (ctyp.ml[]..[])
            Pexp_open Fresh ""IdN" (ctyp.ml[]..[])"
            expression (ctyp.ml[]..[])
              Pexp_function
              [
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_variant "Pre"
                    Some
                      pattern (ctyp.ml[]..[])
                        Ppat_var "pre" (ctyp.ml[]..[])
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_var "x" (ctyp.ml[]..[])
                        expression (ctyp.ml[]..[]) 
                          Pexp_constraint
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "ident_map" (ctyp.ml[]..[])
                            [
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ctyp.ml[]..[])
                                        Ppat_var "x" (ctyp.ml[]..[])
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "^" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "pre" (ctyp.ml[]..[])
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "x" (ctyp.ml[]..[])
                                        ]
                                  ]
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "x" (ctyp.ml[]..[])
                            ]
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "exp" (ctyp.ml[]..[])
                            []
                    ]
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_variant "Post"
                    Some
                      pattern (ctyp.ml[]..[])
                        Ppat_var "post" (ctyp.ml[]..[])
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_var "x" (ctyp.ml[]..[])
                        expression (ctyp.ml[]..[]) 
                          Pexp_constraint
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "ident_map" (ctyp.ml[]..[])
                            [
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (ctyp.ml[]..[])
                                        Ppat_var "x" (ctyp.ml[]..[])
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "^" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "x" (ctyp.ml[]..[])
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "post" (ctyp.ml[]..[])
                                        ]
                                  ]
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "x" (ctyp.ml[]..[])
                            ]
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "exp" (ctyp.ml[]..[])
                            []
                    ]
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_variant "Fun"
                    Some
                      pattern (ctyp.ml[]..[])
                        Ppat_var "f" (ctyp.ml[]..[])
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_var "x" (ctyp.ml[]..[])
                        expression (ctyp.ml[]..[])
                          Pexp_apply
                          expression (ctyp.ml[]..[])
                            Pexp_ident "ident_map" (ctyp.ml[]..[])
                          [
                            <label> ""
                              expression (ctyp.ml[]..[])
                                Pexp_ident "f" (ctyp.ml[]..[])
                            <label> ""
                              expression (ctyp.ml[]..[])
                                Pexp_ident "x" (ctyp.ml[]..[])
                          ]
                    ]
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_variant "Last"
                    Some
                      pattern (ctyp.ml[]..[])
                        Ppat_var "f" (ctyp.ml[]..[])
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_var "x" (ctyp.ml[]..[])
                        expression (ctyp.ml[]..[]) 
                          Pexp_coerce
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "ident_map_of_ident" (ctyp.ml[]..[])
                            [
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "f" (ctyp.ml[]..[])
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "x" (ctyp.ml[]..[])
                            ]
                          Some
                            core_type (ctyp.ml[]..[])
                              Ptyp_constr "vid" (ctyp.ml[]..[])
                              []
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "exp" (ctyp.ml[]..[])
                            []
                    ]
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_variant "Id"
                    Some
                      pattern (ctyp.ml[]..[])
                        Ppat_var "f" (ctyp.ml[]..[])
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_var "x" (ctyp.ml[]..[])
                        expression (ctyp.ml[]..[]) 
                          Pexp_coerce
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "f" (ctyp.ml[]..[])
                            [
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "x" (ctyp.ml[]..[])
                            ]
                          Some
                            core_type (ctyp.ml[]..[])
                              Ptyp_constr "vid" (ctyp.ml[]..[])
                              []
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "exp" (ctyp.ml[]..[])
                            []
                    ]
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_variant "Idents"
                    Some
                      pattern (ctyp.ml[]..[])
                        Ppat_var "f" (ctyp.ml[]..[])
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_var "x" (ctyp.ml[]..[])
                        expression (ctyp.ml[]..[]) 
                          Pexp_coerce
                          expression (ctyp.ml[]..[])
                            Pexp_apply
                            expression (ctyp.ml[]..[])
                              Pexp_ident "f" (ctyp.ml[]..[])
                            [
                              <label> ""
                                expression (ctyp.ml[]..[])
                                  Pexp_apply
                                  expression (ctyp.ml[]..[])
                                    Pexp_ident "Ast_basic.N.list_of_dot" (ctyp.ml[]..[])
                                  [
                                    <label> ""
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "x" (ctyp.ml[]..[])
                                    <label> ""
                                      expression (ctyp.ml[]..[])
                                        Pexp_construct "[]" (ctyp.ml[]..[])
                                        None
                                  ]
                            ]
                          Some
                            core_type (ctyp.ml[]..[])
                              Ptyp_constr "vid" (ctyp.ml[]..[])
                              []
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "exp" (ctyp.ml[]..[])
                            []
                    ]
                <case>
                  pattern (ctyp.ml[]..[])
                    Ppat_variant "Obj"
                    Some
                      pattern (ctyp.ml[]..[])
                        Ppat_var "f" (ctyp.ml[]..[])
                  expression (ctyp.ml[]..[])
                    Pexp_function
                    [
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_variant "Lid"
                          Some
                            pattern (ctyp.ml[]..[])
                              Ppat_var "x" (ctyp.ml[]..[])
                        expression (ctyp.ml[]..[]) 
                          Pexp_coerce
                          expression (ctyp.ml[]..[])
                            Pexp_variant "Send"
                            Some
                              expression (ctyp.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (ctyp.ml[]..[])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (ctyp.ml[]..[])
                                        Pexp_constant Const_string("self",None)
                                  expression (ctyp.ml[]..[])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "f" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "x" (ctyp.ml[]..[])
                                        ]
                                ]
                          None
                          core_type (ctyp.ml[]..[])
                            Ptyp_constr "Astfn.exp" (ctyp.ml[]..[])
                            []
                      <case>
                        pattern (ctyp.ml[]..[])
                          Ppat_var "t" (ctyp.ml[]..[])
                        expression (ctyp.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (ctyp.ml[]..[])
                                Ppat_var "dest" (ctyp.ml[]..[])
                              expression (ctyp.ml[]..[])
                                Pexp_apply
                                expression (ctyp.ml[]..[])
                                  Pexp_ident "map_to_string" (ctyp.ml[]..[])
                                [
                                  <label> ""
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "t" (ctyp.ml[]..[])
                                ]
                          ]
                          expression (ctyp.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (ctyp.ml[]..[])
                                  Ppat_var "src" (ctyp.ml[]..[])
                                expression (ctyp.ml[]..[])
                                  Pexp_apply
                                  expression (ctyp.ml[]..[])
                                    Pexp_ident "ObjsN.dump_vid" (ctyp.ml[]..[])
                                  [
                                    <label> ""
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "t" (ctyp.ml[]..[])
                                  ]
                            ]
                            expression (ctyp.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (ctyp.ml[]..[])
                                    Ppat_construct "()" (ctyp.ml[]..[])
                                    None
                                  expression (ctyp.ml[]..[])
                                    Pexp_ifthenelse
                                    expression (ctyp.ml[]..[])
                                      Pexp_apply
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "@@" (ctyp.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "not" (ctyp.ml[]..[])
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_apply
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "Hashtbl.mem" (ctyp.ml[]..[])
                                            [
                                              <label> ""
                                                expression (ctyp.ml[]..[])
                                                  Pexp_ident "conversion_table" (ctyp.ml[]..[])
                                              <label> ""
                                                expression (ctyp.ml[]..[])
                                                  Pexp_ident "src" (ctyp.ml[]..[])
                                            ]
                                      ]
                                    expression (ctyp.ml[]..[])
                                      Pexp_sequence
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "Hashtbl.add" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "conversion_table" (ctyp.ml[]..[])
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "src" (ctyp.ml[]..[])
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "dest" (ctyp.ml[]..[])
                                        ]
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "Format.eprintf" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_constant Const_string("Warning:  %s ==>  %s ==> unknown\n",None)
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "src" (ctyp.ml[]..[])
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "dest" (ctyp.ml[]..[])
                                        ]
                                    None
                              ]
                              expression (ctyp.ml[]..[]) 
                                Pexp_coerce
                                expression (ctyp.ml[]..[])
                                  Pexp_variant "Send"
                                  Some
                                    expression (ctyp.ml[]..[])
                                      Pexp_tuple
                                      [
                                        expression (ctyp.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (ctyp.ml[]..[])
                                              Pexp_constant Const_string("self",None)
                                        expression (ctyp.ml[]..[])
                                          Pexp_variant "Lid"
                                          Some
                                            expression (ctyp.ml[]..[])
                                              Pexp_apply
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "f" (ctyp.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_ident "dest" (ctyp.ml[]..[])
                                              ]
                                      ]
                                None
                                core_type (ctyp.ml[]..[])
                                  Ptyp_constr "Astfn.exp" (ctyp.ml[]..[])
                                  []
                    ]
              ]
          core_type (ctyp.ml[]..[])
            Ptyp_arrow
            ""
            core_type (ctyp.ml[]..[])
              Ptyp_constr "full_id_transform" (ctyp.ml[]..[])
              []
            core_type (ctyp.ml[]..[])
              Ptyp_arrow
              ""
              core_type (ctyp.ml[]..[])
                Ptyp_constr "vid" (ctyp.ml[]..[])
                []
              core_type (ctyp.ml[]..[])
                Ptyp_constr "exp" (ctyp.ml[]..[])
                []
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "basic_transform" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_variant "Pre"
                Some
                  pattern (ctyp.ml[]..[])
                    Ppat_var "pre" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "x" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "^" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "pre" (ctyp.ml[]..[])
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "x" (ctyp.ml[]..[])
                      ]
                ]
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_variant "Post"
                Some
                  pattern (ctyp.ml[]..[])
                    Ppat_var "post" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "x" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "^" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "x" (ctyp.ml[]..[])
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "post" (ctyp.ml[]..[])
                      ]
                ]
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_variant "Fun"
                Some
                  pattern (ctyp.ml[]..[])
                    Ppat_var "f" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_ident "f" (ctyp.ml[]..[])
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "right_transform" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_alias "x" (ctyp.ml[]..[])
                pattern (ctyp.ml[]..[])
                  Ppat_type
                  "basic_id_transform" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "f" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_apply
                      expression (ctyp.ml[]..[])
                        Pexp_ident "basic_transform" (ctyp.ml[]..[])
                      [
                        <label> ""
                          expression (ctyp.ml[]..[])
                            Pexp_ident "x" (ctyp.ml[]..[])
                      ]
                ]
                expression (ctyp.ml[]..[])
                  Pexp_function
                  [
                    <case>
                      pattern (ctyp.ml[]..[])
                        Ppat_var "x" (ctyp.ml[]..[])
                      expression (ctyp.ml[]..[]) 
                        Pexp_coerce
                        expression (ctyp.ml[]..[])
                          Pexp_variant "Lid"
                          Some
                            expression (ctyp.ml[]..[])
                              Pexp_apply
                              expression (ctyp.ml[]..[])
                                Pexp_ident "f" (ctyp.ml[]..[])
                              [
                                <label> ""
                                  expression (ctyp.ml[]..[])
                                    Pexp_ident "x" (ctyp.ml[]..[])
                              ]
                        None
                        core_type (ctyp.ml[]..[])
                          Ptyp_constr "Astfn.exp" (ctyp.ml[]..[])
                          []
                  ]
            <case>
              pattern (ctyp.ml[]..[])
                Ppat_variant "Exp"
                Some
                  pattern (ctyp.ml[]..[])
                    Ppat_var "f" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_ident "f" (ctyp.ml[]..[])
          ]
    ]
  structure_item (ctyp.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (ctyp.ml[]..[])
          Ppat_var "gen_tuple_abbrev" (ctyp.ml[]..[])
        expression (ctyp.ml[]..[]) 
          Pexp_fun "arity"
          None
          pattern (ctyp.ml[]..[])
            Ppat_var "arity" (ctyp.ml[]..[])
          expression (ctyp.ml[]..[]) 
            Pexp_fun "annot"
            None
            pattern (ctyp.ml[]..[])
              Ppat_var "annot" (ctyp.ml[]..[])
            expression (ctyp.ml[]..[]) 
              Pexp_fun "destination"
              None
              pattern (ctyp.ml[]..[])
                Ppat_var "destination" (ctyp.ml[]..[])
              expression (ctyp.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (ctyp.ml[]..[])
                      Ppat_var "name" (ctyp.ml[]..[])
                    expression (ctyp.ml[]..[])
                      Pexp_function
                      [
                        <case>
                          pattern (ctyp.ml[]..[])
                            Ppat_var "e" (ctyp.ml[]..[])
                          expression (ctyp.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (ctyp.ml[]..[])
                                  Ppat_var "args" (ctyp.ml[]..[])
                                expression (ctyp.ml[]..[]) 
                                  Pexp_constraint
                                  expression (ctyp.ml[]..[])
                                    Pexp_apply
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "@@" (ctyp.ml[]..[])
                                    [
                                      <label> ""
                                        expression (ctyp.ml[]..[])
                                          Pexp_apply
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "Listf.init" (ctyp.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "arity" (ctyp.ml[]..[])
                                          ]
                                      <label> ""
                                        expression (ctyp.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ctyp.ml[]..[])
                                                Ppat_var "i" (ctyp.ml[]..[])
                                              expression (ctyp.ml[]..[]) 
                                                Pexp_coerce
                                                expression (ctyp.ml[]..[])
                                                  Pexp_variant "Alias"
                                                  Some
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_variant "ClassPath"
                                                          Some
                                                            expression (ctyp.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "name" (ctyp.ml[]..[])
                                                              None
                                                              core_type (ctyp.ml[]..[])
                                                                Ptyp_constr "Astfn.ident" (ctyp.ml[]..[])
                                                                []
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_variant "Lid"
                                                          Some
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_apply
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "x" (ctyp.ml[]..[])
                                                              [
                                                                <label> "off"
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_ident "i" (ctyp.ml[]..[])
                                                                <label> ""
                                                                  expression (ctyp.ml[]..[])
                                                                    Pexp_constant Const_int 0
                                                              ]
                                                      ]
                                                None
                                                core_type (ctyp.ml[]..[])
                                                  Ptyp_constr "Astfn.pat" (ctyp.ml[]..[])
                                                  []
                                          ]
                                    ]
                                  core_type (ctyp.ml[]..[])
                                    Ptyp_constr "list" (ctyp.ml[]..[])
                                    [
                                      core_type (ctyp.ml[]..[])
                                        Ptyp_constr "pat" (ctyp.ml[]..[])
                                        []
                                    ]
                            ]
                            expression (ctyp.ml[]..[])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (ctyp.ml[]..[])
                                    Ppat_var "exps" (ctyp.ml[]..[])
                                  expression (ctyp.ml[]..[])
                                    Pexp_apply
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "@@" (ctyp.ml[]..[])
                                    [
                                      <label> ""
                                        expression (ctyp.ml[]..[])
                                          Pexp_apply
                                          expression (ctyp.ml[]..[])
                                            Pexp_ident "Listf.init" (ctyp.ml[]..[])
                                          [
                                            <label> ""
                                              expression (ctyp.ml[]..[])
                                                Pexp_ident "arity" (ctyp.ml[]..[])
                                          ]
                                      <label> ""
                                        expression (ctyp.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (ctyp.ml[]..[])
                                                Ppat_var "i" (ctyp.ml[]..[])
                                              expression (ctyp.ml[]..[]) 
                                                Pexp_coerce
                                                expression (ctyp.ml[]..[]) 
                                                  Pexp_coerce
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_apply
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "xid" (ctyp.ml[]..[])
                                                    [
                                                      <label> "off"
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_ident "i" (ctyp.ml[]..[])
                                                      <label> ""
                                                        expression (ctyp.ml[]..[])
                                                          Pexp_constant Const_int 0
                                                    ]
                                                  None
                                                  core_type (ctyp.ml[]..[])
                                                    Ptyp_constr "Astfn.vid" (ctyp.ml[]..[])
                                                    []
                                                None
                                                core_type (ctyp.ml[]..[])
                                                  Ptyp_constr "Astfn.exp" (ctyp.ml[]..[])
                                                  []
                                          ]
                                    ]
                              ]
                              expression (ctyp.ml[]..[])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (ctyp.ml[]..[])
                                      Ppat_var "e" (ctyp.ml[]..[])
                                    expression (ctyp.ml[]..[])
                                      Pexp_apply
                                      expression (ctyp.ml[]..[])
                                        Pexp_ident "appl_of_list" (ctyp.ml[]..[])
                                      [
                                        <label> ""
                                          expression (ctyp.ml[]..[])
                                            Pexp_construct "::" (ctyp.ml[]..[])
                                            Some
                                              expression (ctyp.ml[]..[]) 
                                                Pexp_tuple
                                                [
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_ident "e" (ctyp.ml[]..[])
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_ident "exps" (ctyp.ml[]..[])
                                                ]
                                      ]
                                ]
                                expression (ctyp.ml[]..[])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (ctyp.ml[]..[])
                                        Ppat_var "pat" (ctyp.ml[]..[])
                                      expression (ctyp.ml[]..[])
                                        Pexp_apply
                                        expression (ctyp.ml[]..[])
                                          Pexp_ident "|>" (ctyp.ml[]..[])
                                        [
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "args" (ctyp.ml[]..[])
                                          <label> ""
                                            expression (ctyp.ml[]..[])
                                              Pexp_ident "tuple_com" (ctyp.ml[]..[])
                                        ]
                                  ]
                                  expression (ctyp.ml[]..[])
                                    Pexp_match
                                    expression (ctyp.ml[]..[])
                                      Pexp_ident "destination" (ctyp.ml[]..[])
                                    [
                                      <case>
                                        pattern (ctyp.ml[]..[])
                                          Ppat_construct "Obj" (ctyp.ml[]..[])
                                          Some
                                            pattern (ctyp.ml[]..[])
                                              Ppat_construct "Map" (ctyp.ml[]..[])
                                              None
                                        expression (ctyp.ml[]..[]) 
                                          Pexp_coerce
                                          expression (ctyp.ml[]..[])
                                            Pexp_variant "Case"
                                            Some
                                              expression (ctyp.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (ctyp.ml[]..[]) 
                                                    Pexp_coerce
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "pat" (ctyp.ml[]..[])
                                                    None
                                                    core_type (ctyp.ml[]..[])
                                                      Ptyp_constr "Astfn.pat" (ctyp.ml[]..[])
                                                      []
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_variant "Coercion"
                                                    Some
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (ctyp.ml[]..[]) 
                                                            Pexp_coerce
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_ident "e" (ctyp.ml[]..[])
                                                            None
                                                            core_type (ctyp.ml[]..[])
                                                              Ptyp_constr "Astfn.exp" (ctyp.ml[]..[])
                                                              []
                                                          expression (ctyp.ml[]..[]) 
                                                            Pexp_coerce
                                                            expression (ctyp.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (ctyp.ml[]..[])
                                                                Pexp_ident "name" (ctyp.ml[]..[])
                                                              None
                                                              core_type (ctyp.ml[]..[])
                                                                Ptyp_constr "ctyp" (ctyp.ml[]..[])
                                                                []
                                                            None
                                                            core_type (ctyp.ml[]..[])
                                                              Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                              []
                                                          expression (ctyp.ml[]..[]) 
                                                            Pexp_coerce
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_ident "annot" (ctyp.ml[]..[])
                                                            None
                                                            core_type (ctyp.ml[]..[])
                                                              Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                              []
                                                        ]
                                                ]
                                          None
                                          core_type (ctyp.ml[]..[])
                                            Ptyp_constr "Astfn.case" (ctyp.ml[]..[])
                                            []
                                      <case>
                                        pattern (ctyp.ml[]..[])
                                          Ppat_any
                                        expression (ctyp.ml[]..[]) 
                                          Pexp_coerce
                                          expression (ctyp.ml[]..[])
                                            Pexp_variant "Case"
                                            Some
                                              expression (ctyp.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (ctyp.ml[]..[]) 
                                                    Pexp_coerce
                                                    expression (ctyp.ml[]..[])
                                                      Pexp_ident "pat" (ctyp.ml[]..[])
                                                    None
                                                    core_type (ctyp.ml[]..[])
                                                      Ptyp_constr "Astfn.pat" (ctyp.ml[]..[])
                                                      []
                                                  expression (ctyp.ml[]..[])
                                                    Pexp_variant "Subtype"
                                                    Some
                                                      expression (ctyp.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (ctyp.ml[]..[]) 
                                                            Pexp_coerce
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_ident "e" (ctyp.ml[]..[])
                                                            None
                                                            core_type (ctyp.ml[]..[])
                                                              Ptyp_constr "Astfn.exp" (ctyp.ml[]..[])
                                                              []
                                                          expression (ctyp.ml[]..[]) 
                                                            Pexp_coerce
                                                            expression (ctyp.ml[]..[])
                                                              Pexp_ident "annot" (ctyp.ml[]..[])
                                                            None
                                                            core_type (ctyp.ml[]..[])
                                                              Ptyp_constr "Astfn.ctyp" (ctyp.ml[]..[])
                                                              []
                                                        ]
                                                ]
                                          None
                                          core_type (ctyp.ml[]..[])
                                            Ptyp_constr "Astfn.case" (ctyp.ml[]..[])
                                            []
                                    ]
                      ]
                ]
    ]
]
