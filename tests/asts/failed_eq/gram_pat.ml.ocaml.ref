[
  structure_item (gram_pat.ml[1,0+0]..[1,0+44])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[1,0+4]..[1,0+19])
          Ppat_var "pp_print_string" (gram_pat.ml[1,0+4]..[1,0+19])
        expression (gram_pat.ml[1,0+22]..[1,0+44])
          Pexp_ident "StdFan.pp_print_string" (gram_pat.ml[1,0+22]..[1,0+44])
    ]
  structure_item (gram_pat.ml[2,45+0]..[2,45+38])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[2,45+4]..[2,45+17])
          Ppat_var "pp_print_vid'" (gram_pat.ml[2,45+4]..[2,45+17])
        expression (gram_pat.ml[2,45+20]..[2,45+38])
          Pexp_ident "Objs.pp_print_vid'" (gram_pat.ml[2,45+20]..[2,45+38])
    ]
  structure_item (gram_pat.ml[3,84+0]..[3,84+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[3,84+4]..[3,84+16])
          Ppat_var "pp_print_vid" (gram_pat.ml[3,84+4]..[3,84+16])
        expression (gram_pat.ml[3,84+19]..[3,84+36])
          Pexp_ident "Objs.pp_print_vid" (gram_pat.ml[3,84+19]..[3,84+36])
    ]
  structure_item (gram_pat.ml[4,121+0]..[4,121+44])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[4,121+4]..[4,121+20])
          Ppat_var "pp_print_alident" (gram_pat.ml[4,121+4]..[4,121+20])
        expression (gram_pat.ml[4,121+23]..[4,121+44])
          Pexp_ident "Objs.pp_print_alident" (gram_pat.ml[4,121+23]..[4,121+44])
    ]
  structure_item (gram_pat.ml[5,166+0]..[5,166+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[5,166+4]..[5,166+16])
          Ppat_var "pp_print_ant" (gram_pat.ml[5,166+4]..[5,166+16])
        expression (gram_pat.ml[5,166+19]..[5,166+36])
          Pexp_ident "Objs.pp_print_ant" (gram_pat.ml[5,166+19]..[5,166+36])
    ]
  structure_item (gram_pat.ml[6,203+0]..[6,203+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[6,203+4]..[6,203+11])
          Ppat_var "fprintf" (gram_pat.ml[6,203+4]..[6,203+11])
        expression (gram_pat.ml[6,203+14]..[6,203+28])
          Pexp_ident "Format.fprintf" (gram_pat.ml[6,203+14]..[6,203+28])
    ]
  structure_item (gram_pat.ml[7,232+0]..[7,232+9])
    Pstr_open Fresh "Astf" (gram_pat.ml[7,232+5]..[7,232+9])
  structure_item (gram_pat.ml[8,242+0]..[8,242+59])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[8,242+4]..[8,242+16])
          Ppat_var "pp_print_loc" (gram_pat.ml[8,242+4]..[8,242+16])
        expression (gram_pat.ml[8,242+19]..[8,242+59])
          Pexp_function
          [
            <case>
              pattern (gram_pat.ml[8,242+30]..[8,242+32])
                Ppat_var "_f" (gram_pat.ml[8,242+30]..[8,242+32])
              expression (gram_pat.ml[8,242+36]..[8,242+59])
                Pexp_function
                [
                  <case>
                    pattern (gram_pat.ml[8,242+48]..[8,242+52])
                      Ppat_var "_loc" (gram_pat.ml[8,242+48]..[8,242+52])
                    expression (gram_pat.ml[8,242+56]..[8,242+58])
                      Pexp_construct "()" (gram_pat.ml[8,242+56]..[8,242+58])
                      None
                ]
          ]
    ]
  structure_item (gram_pat.ml[9,302+0]..[14,462+5])
    Pstr_class
    [
      class_declaration (gram_pat.ml[9,302+0]..[14,462+5])
        pci_virt = Concrete
        pci_params =
          []
        pci_name = "mapbase" (gram_pat.ml[9,302+6]..[9,302+13])
        pci_expr =
          class_expr (gram_pat.ml[10,318+2]..[14,462+5])
            Pcl_structure
            class_structure
              pattern (gram_pat.ml[10,318+8]..[10,318+8]) ghost
                Ppat_any
              [
                class_field (gram_pat.ml[11,327+4]..[11,327+42])
                  Pcf_method Public
                    "loc" (gram_pat.ml[11,327+11]..[11,327+14])
                    Concrete Fresh
                    expression (gram_pat.ml[11,327+11]..[11,327+42]) ghost
                      Pexp_poly
                      expression (gram_pat.ml[11,327+17]..[11,327+42])
                        Pexp_function
                        [
                          <case>
                            pattern (gram_pat.ml[11,327+28]..[11,327+37])
                              Ppat_constraint
                              pattern (gram_pat.ml[11,327+29]..[11,327+30])
                                Ppat_var "x" (gram_pat.ml[11,327+29]..[11,327+30])
                              core_type (gram_pat.ml[11,327+33]..[11,327+36])
                                Ptyp_constr "loc" (gram_pat.ml[11,327+33]..[11,327+36])
                                []
                            expression (gram_pat.ml[11,327+41]..[11,327+42])
                              Pexp_ident "x" (gram_pat.ml[11,327+41]..[11,327+42])
                        ]
                      None
                class_field (gram_pat.ml[12,370+4]..[12,370+48])
                  Pcf_method Public
                    "string" (gram_pat.ml[12,370+11]..[12,370+17])
                    Concrete Fresh
                    expression (gram_pat.ml[12,370+11]..[12,370+48]) ghost
                      Pexp_poly
                      expression (gram_pat.ml[12,370+20]..[12,370+48])
                        Pexp_function
                        [
                          <case>
                            pattern (gram_pat.ml[12,370+31]..[12,370+43])
                              Ppat_constraint
                              pattern (gram_pat.ml[12,370+32]..[12,370+33])
                                Ppat_var "x" (gram_pat.ml[12,370+32]..[12,370+33])
                              core_type (gram_pat.ml[12,370+36]..[12,370+42])
                                Ptyp_constr "string" (gram_pat.ml[12,370+36]..[12,370+42])
                                []
                            expression (gram_pat.ml[12,370+47]..[12,370+48])
                              Pexp_ident "x" (gram_pat.ml[12,370+47]..[12,370+48])
                        ]
                      None
                class_field (gram_pat.ml[13,419+4]..[13,419+42])
                  Pcf_method Public
                    "ant" (gram_pat.ml[13,419+11]..[13,419+14])
                    Concrete Fresh
                    expression (gram_pat.ml[13,419+11]..[13,419+42]) ghost
                      Pexp_poly
                      expression (gram_pat.ml[13,419+17]..[13,419+42])
                        Pexp_function
                        [
                          <case>
                            pattern (gram_pat.ml[13,419+28]..[13,419+37])
                              Ppat_constraint
                              pattern (gram_pat.ml[13,419+29]..[13,419+30])
                                Ppat_var "x" (gram_pat.ml[13,419+29]..[13,419+30])
                              core_type (gram_pat.ml[13,419+33]..[13,419+36])
                                Ptyp_constr "ant" (gram_pat.ml[13,419+33]..[13,419+36])
                                []
                            expression (gram_pat.ml[13,419+41]..[13,419+42])
                              Pexp_ident "x" (gram_pat.ml[13,419+41]..[13,419+42])
                        ]
                      None
              ]
    ]
  structure_item (gram_pat.ml[15,468+0]..[19,652+42])
    Pstr_type
    [
      type_declaration "lident" (gram_pat.ml[15,468+5]..[15,468+11]) (gram_pat.ml[15,468+0]..[15,468+39])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (gram_pat.ml[15,468+14]..[15,468+39])
              Ptyp_variant closed=Closed
              [
                Rtag "Lid" false
                  [
                    core_type (gram_pat.ml[15,468+25]..[15,468+36])
                      Ptyp_tuple
                      [
                        core_type (gram_pat.ml[15,468+25]..[15,468+28])
                          Ptyp_constr "loc" (gram_pat.ml[15,468+25]..[15,468+28])
                          []
                        core_type (gram_pat.ml[15,468+30]..[15,468+36])
                          Ptyp_constr "string" (gram_pat.ml[15,468+30]..[15,468+36])
                          []
                      ]
                  ]
              ]
              None
      type_declaration "t" (gram_pat.ml[16,508+4]..[16,508+5]) (gram_pat.ml[16,508+0]..[19,652+42])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (gram_pat.ml[17,516+2]..[19,652+42])
              Ptyp_variant closed=Closed
              [
                Rtag "Vrn" false
                  [
                    core_type (gram_pat.ml[17,516+13]..[17,516+24])
                      Ptyp_tuple
                      [
                        core_type (gram_pat.ml[17,516+13]..[17,516+16])
                          Ptyp_constr "loc" (gram_pat.ml[17,516+13]..[17,516+16])
                          []
                        core_type (gram_pat.ml[17,516+18]..[17,516+24])
                          Ptyp_constr "string" (gram_pat.ml[17,516+18]..[17,516+24])
                          []
                      ]
                  ]
                Rtag "App" false
                  [
                    core_type (gram_pat.ml[17,516+38]..[17,516+47])
                      Ptyp_tuple
                      [
                        core_type (gram_pat.ml[17,516+38]..[17,516+41])
                          Ptyp_constr "loc" (gram_pat.ml[17,516+38]..[17,516+41])
                          []
                        core_type (gram_pat.ml[17,516+43]..[17,516+44])
                          Ptyp_constr "t" (gram_pat.ml[17,516+43]..[17,516+44])
                          []
                        core_type (gram_pat.ml[17,516+46]..[17,516+47])
                          Ptyp_constr "t" (gram_pat.ml[17,516+46]..[17,516+47])
                          []
                      ]
                  ]
                Rtag "Lid" false
                  [
                    core_type (gram_pat.ml[17,516+61]..[17,516+72])
                      Ptyp_tuple
                      [
                        core_type (gram_pat.ml[17,516+61]..[17,516+64])
                          Ptyp_constr "loc" (gram_pat.ml[17,516+61]..[17,516+64])
                          []
                        core_type (gram_pat.ml[17,516+66]..[17,516+72])
                          Ptyp_constr "string" (gram_pat.ml[17,516+66]..[17,516+72])
                          []
                      ]
                  ]
                Rinherit
                  core_type (gram_pat.ml[18,591+4]..[18,591+7])
                    Ptyp_constr "ant" (gram_pat.ml[18,591+4]..[18,591+7])
                    []
                Rtag "Com" false
                  [
                    core_type (gram_pat.ml[18,591+19]..[18,591+28])
                      Ptyp_tuple
                      [
                        core_type (gram_pat.ml[18,591+19]..[18,591+22])
                          Ptyp_constr "loc" (gram_pat.ml[18,591+19]..[18,591+22])
                          []
                        core_type (gram_pat.ml[18,591+24]..[18,591+25])
                          Ptyp_constr "t" (gram_pat.ml[18,591+24]..[18,591+25])
                          []
                        core_type (gram_pat.ml[18,591+27]..[18,591+28])
                          Ptyp_constr "t" (gram_pat.ml[18,591+27]..[18,591+28])
                          []
                      ]
                  ]
                Rtag "Alias" false
                  [
                    core_type (gram_pat.ml[18,591+44]..[18,591+58])
                      Ptyp_tuple
                      [
                        core_type (gram_pat.ml[18,591+44]..[18,591+47])
                          Ptyp_constr "loc" (gram_pat.ml[18,591+44]..[18,591+47])
                          []
                        core_type (gram_pat.ml[18,591+49]..[18,591+50])
                          Ptyp_constr "t" (gram_pat.ml[18,591+49]..[18,591+50])
                          []
                        core_type (gram_pat.ml[18,591+52]..[18,591+58])
                          Ptyp_constr "lident" (gram_pat.ml[18,591+52]..[18,591+58])
                          []
                      ]
                  ]
                Rtag "Str" false
                  [
                    core_type (gram_pat.ml[19,652+13]..[19,652+24])
                      Ptyp_tuple
                      [
                        core_type (gram_pat.ml[19,652+13]..[19,652+16])
                          Ptyp_constr "loc" (gram_pat.ml[19,652+13]..[19,652+16])
                          []
                        core_type (gram_pat.ml[19,652+18]..[19,652+24])
                          Ptyp_constr "string" (gram_pat.ml[19,652+18]..[19,652+24])
                          []
                      ]
                  ]
                Rtag "Any" false
                  [
                    core_type (gram_pat.ml[19,652+37]..[19,652+40])
                      Ptyp_constr "loc" (gram_pat.ml[19,652+37]..[19,652+40])
                      []
                  ]
              ]
              None
    ]
  structure_item (gram_pat.ml[20,695+0]..[53,1895+5])
    Pstr_class
    [
      class_declaration (gram_pat.ml[20,695+0]..[53,1895+5])
        pci_virt = Concrete
        pci_params =
          []
        pci_name = "map" (gram_pat.ml[20,695+6]..[20,695+9])
        pci_expr =
          class_expr (gram_pat.ml[21,707+2]..[53,1895+5])
            Pcl_structure
            class_structure
              pattern (gram_pat.ml[21,707+9]..[21,707+28])
                Ppat_constraint
                pattern (gram_pat.ml[21,707+10]..[21,707+14])
                  Ppat_var "self" (gram_pat.ml[21,707+10]..[21,707+14])
                core_type (gram_pat.ml[21,707+17]..[21,707+27])
                  Ptyp_var self_type
              [
                class_field (gram_pat.ml[22,736+4]..[22,736+20])
                  Pcf_inherit Fresh
                    class_expr (gram_pat.ml[22,736+13]..[22,736+20])
                      Pcl_constr "mapbase" (gram_pat.ml[22,736+13]..[22,736+20])
                      []
                    None
                class_field (gram_pat.ml[23,757+4]..[27,872+54])
                  Pcf_method Public
                    "lident" (gram_pat.ml[23,757+11]..[23,757+17])
                    Concrete Fresh
                    expression (gram_pat.ml[23,757+11]..[27,872+54]) ghost
                      Pexp_poly
                      expression (gram_pat.ml[24,795+6]..[27,872+54])
                        Pexp_function
                        [
                          <case>
                            pattern (gram_pat.ml[25,810+8]..[25,810+22])
                              Ppat_variant "Lid"
                              Some
                                pattern (gram_pat.ml[25,810+13]..[25,810+22])
                                  Ppat_tuple
                                  [
                                    pattern (gram_pat.ml[25,810+14]..[25,810+17])
                                      Ppat_var "_a0" (gram_pat.ml[25,810+14]..[25,810+17])
                                    pattern (gram_pat.ml[25,810+18]..[25,810+21])
                                      Ppat_var "_a1" (gram_pat.ml[25,810+18]..[25,810+21])
                                  ]
                            expression (gram_pat.ml[26,836+10]..[27,872+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (gram_pat.ml[26,836+14]..[26,836+17])
                                    Ppat_var "_a0" (gram_pat.ml[26,836+14]..[26,836+17])
                                  expression (gram_pat.ml[26,836+20]..[26,836+32])
                                    Pexp_apply
                                    expression (gram_pat.ml[26,836+20]..[26,836+28])
                                      Pexp_send "loc"
                                      expression (gram_pat.ml[26,836+20]..[26,836+24])
                                        Pexp_ident "self" (gram_pat.ml[26,836+20]..[26,836+24])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[26,836+29]..[26,836+32])
                                          Pexp_ident "_a0" (gram_pat.ml[26,836+29]..[26,836+32])
                                    ]
                              ]
                              expression (gram_pat.ml[27,872+10]..[27,872+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (gram_pat.ml[27,872+14]..[27,872+17])
                                      Ppat_var "_a1" (gram_pat.ml[27,872+14]..[27,872+17])
                                    expression (gram_pat.ml[27,872+20]..[27,872+35])
                                      Pexp_apply
                                      expression (gram_pat.ml[27,872+20]..[27,872+31])
                                        Pexp_send "string"
                                        expression (gram_pat.ml[27,872+20]..[27,872+24])
                                          Pexp_ident "self" (gram_pat.ml[27,872+20]..[27,872+24])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[27,872+32]..[27,872+35])
                                            Pexp_ident "_a1" (gram_pat.ml[27,872+32]..[27,872+35])
                                      ]
                                ]
                                expression (gram_pat.ml[27,872+39]..[27,872+54])
                                  Pexp_variant "Lid"
                                  Some
                                    expression (gram_pat.ml[27,872+44]..[27,872+54])
                                      Pexp_tuple
                                      [
                                        expression (gram_pat.ml[27,872+45]..[27,872+48])
                                          Pexp_ident "_a0" (gram_pat.ml[27,872+45]..[27,872+48])
                                        expression (gram_pat.ml[27,872+50]..[27,872+53])
                                          Pexp_ident "_a1" (gram_pat.ml[27,872+50]..[27,872+53])
                                      ]
                        ]
                      Some
                        core_type (gram_pat.ml[23,757+20]..[23,757+36])
                          Ptyp_arrow
                          ""
                          core_type (gram_pat.ml[23,757+20]..[23,757+26])
                            Ptyp_constr "lident" (gram_pat.ml[23,757+20]..[23,757+26])
                            []
                          core_type (gram_pat.ml[23,757+30]..[23,757+36])
                            Ptyp_constr "lident" (gram_pat.ml[23,757+30]..[23,757+36])
                            []
                class_field (gram_pat.ml[28,927+4]..[52,1840+54])
                  Pcf_method Public
                    "t" (gram_pat.ml[28,927+11]..[28,927+12])
                    Concrete Fresh
                    expression (gram_pat.ml[28,927+11]..[52,1840+54]) ghost
                      Pexp_poly
                      expression (gram_pat.ml[29,950+6]..[52,1840+54])
                        Pexp_function
                        [
                          <case>
                            pattern (gram_pat.ml[30,965+8]..[30,965+22])
                              Ppat_variant "Vrn"
                              Some
                                pattern (gram_pat.ml[30,965+13]..[30,965+22])
                                  Ppat_tuple
                                  [
                                    pattern (gram_pat.ml[30,965+14]..[30,965+17])
                                      Ppat_var "_a0" (gram_pat.ml[30,965+14]..[30,965+17])
                                    pattern (gram_pat.ml[30,965+18]..[30,965+21])
                                      Ppat_var "_a1" (gram_pat.ml[30,965+18]..[30,965+21])
                                  ]
                            expression (gram_pat.ml[31,991+10]..[32,1027+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (gram_pat.ml[31,991+14]..[31,991+17])
                                    Ppat_var "_a0" (gram_pat.ml[31,991+14]..[31,991+17])
                                  expression (gram_pat.ml[31,991+20]..[31,991+32])
                                    Pexp_apply
                                    expression (gram_pat.ml[31,991+20]..[31,991+28])
                                      Pexp_send "loc"
                                      expression (gram_pat.ml[31,991+20]..[31,991+24])
                                        Pexp_ident "self" (gram_pat.ml[31,991+20]..[31,991+24])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[31,991+29]..[31,991+32])
                                          Pexp_ident "_a0" (gram_pat.ml[31,991+29]..[31,991+32])
                                    ]
                              ]
                              expression (gram_pat.ml[32,1027+10]..[32,1027+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (gram_pat.ml[32,1027+14]..[32,1027+17])
                                      Ppat_var "_a1" (gram_pat.ml[32,1027+14]..[32,1027+17])
                                    expression (gram_pat.ml[32,1027+20]..[32,1027+35])
                                      Pexp_apply
                                      expression (gram_pat.ml[32,1027+20]..[32,1027+31])
                                        Pexp_send "string"
                                        expression (gram_pat.ml[32,1027+20]..[32,1027+24])
                                          Pexp_ident "self" (gram_pat.ml[32,1027+20]..[32,1027+24])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[32,1027+32]..[32,1027+35])
                                            Pexp_ident "_a1" (gram_pat.ml[32,1027+32]..[32,1027+35])
                                      ]
                                ]
                                expression (gram_pat.ml[32,1027+39]..[32,1027+54])
                                  Pexp_variant "Vrn"
                                  Some
                                    expression (gram_pat.ml[32,1027+44]..[32,1027+54])
                                      Pexp_tuple
                                      [
                                        expression (gram_pat.ml[32,1027+45]..[32,1027+48])
                                          Pexp_ident "_a0" (gram_pat.ml[32,1027+45]..[32,1027+48])
                                        expression (gram_pat.ml[32,1027+50]..[32,1027+53])
                                          Pexp_ident "_a1" (gram_pat.ml[32,1027+50]..[32,1027+53])
                                      ]
                          <case>
                            pattern (gram_pat.ml[33,1082+8]..[33,1082+26])
                              Ppat_variant "App"
                              Some
                                pattern (gram_pat.ml[33,1082+13]..[33,1082+26])
                                  Ppat_tuple
                                  [
                                    pattern (gram_pat.ml[33,1082+14]..[33,1082+17])
                                      Ppat_var "_a0" (gram_pat.ml[33,1082+14]..[33,1082+17])
                                    pattern (gram_pat.ml[33,1082+18]..[33,1082+21])
                                      Ppat_var "_a1" (gram_pat.ml[33,1082+18]..[33,1082+21])
                                    pattern (gram_pat.ml[33,1082+22]..[33,1082+25])
                                      Ppat_var "_a2" (gram_pat.ml[33,1082+22]..[33,1082+25])
                                  ]
                            expression (gram_pat.ml[34,1112+10]..[36,1182+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (gram_pat.ml[34,1112+14]..[34,1112+17])
                                    Ppat_var "_a0" (gram_pat.ml[34,1112+14]..[34,1112+17])
                                  expression (gram_pat.ml[34,1112+20]..[34,1112+32])
                                    Pexp_apply
                                    expression (gram_pat.ml[34,1112+20]..[34,1112+28])
                                      Pexp_send "loc"
                                      expression (gram_pat.ml[34,1112+20]..[34,1112+24])
                                        Pexp_ident "self" (gram_pat.ml[34,1112+20]..[34,1112+24])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[34,1112+29]..[34,1112+32])
                                          Pexp_ident "_a0" (gram_pat.ml[34,1112+29]..[34,1112+32])
                                    ]
                              ]
                              expression (gram_pat.ml[35,1148+10]..[36,1182+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (gram_pat.ml[35,1148+14]..[35,1148+17])
                                      Ppat_var "_a1" (gram_pat.ml[35,1148+14]..[35,1148+17])
                                    expression (gram_pat.ml[35,1148+20]..[35,1148+30])
                                      Pexp_apply
                                      expression (gram_pat.ml[35,1148+20]..[35,1148+26])
                                        Pexp_send "t"
                                        expression (gram_pat.ml[35,1148+20]..[35,1148+24])
                                          Pexp_ident "self" (gram_pat.ml[35,1148+20]..[35,1148+24])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[35,1148+27]..[35,1148+30])
                                            Pexp_ident "_a1" (gram_pat.ml[35,1148+27]..[35,1148+30])
                                      ]
                                ]
                                expression (gram_pat.ml[36,1182+10]..[36,1182+54])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (gram_pat.ml[36,1182+14]..[36,1182+17])
                                        Ppat_var "_a2" (gram_pat.ml[36,1182+14]..[36,1182+17])
                                      expression (gram_pat.ml[36,1182+20]..[36,1182+30])
                                        Pexp_apply
                                        expression (gram_pat.ml[36,1182+20]..[36,1182+26])
                                          Pexp_send "t"
                                          expression (gram_pat.ml[36,1182+20]..[36,1182+24])
                                            Pexp_ident "self" (gram_pat.ml[36,1182+20]..[36,1182+24])
                                        [
                                          <label> ""
                                            expression (gram_pat.ml[36,1182+27]..[36,1182+30])
                                              Pexp_ident "_a2" (gram_pat.ml[36,1182+27]..[36,1182+30])
                                        ]
                                  ]
                                  expression (gram_pat.ml[36,1182+34]..[36,1182+54])
                                    Pexp_variant "App"
                                    Some
                                      expression (gram_pat.ml[36,1182+39]..[36,1182+54])
                                        Pexp_tuple
                                        [
                                          expression (gram_pat.ml[36,1182+40]..[36,1182+43])
                                            Pexp_ident "_a0" (gram_pat.ml[36,1182+40]..[36,1182+43])
                                          expression (gram_pat.ml[36,1182+45]..[36,1182+48])
                                            Pexp_ident "_a1" (gram_pat.ml[36,1182+45]..[36,1182+48])
                                          expression (gram_pat.ml[36,1182+50]..[36,1182+53])
                                            Pexp_ident "_a2" (gram_pat.ml[36,1182+50]..[36,1182+53])
                                        ]
                          <case>
                            pattern (gram_pat.ml[37,1237+8]..[37,1237+22])
                              Ppat_variant "Lid"
                              Some
                                pattern (gram_pat.ml[37,1237+13]..[37,1237+22])
                                  Ppat_tuple
                                  [
                                    pattern (gram_pat.ml[37,1237+14]..[37,1237+17])
                                      Ppat_var "_a0" (gram_pat.ml[37,1237+14]..[37,1237+17])
                                    pattern (gram_pat.ml[37,1237+18]..[37,1237+21])
                                      Ppat_var "_a1" (gram_pat.ml[37,1237+18]..[37,1237+21])
                                  ]
                            expression (gram_pat.ml[38,1263+10]..[39,1299+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (gram_pat.ml[38,1263+14]..[38,1263+17])
                                    Ppat_var "_a0" (gram_pat.ml[38,1263+14]..[38,1263+17])
                                  expression (gram_pat.ml[38,1263+20]..[38,1263+32])
                                    Pexp_apply
                                    expression (gram_pat.ml[38,1263+20]..[38,1263+28])
                                      Pexp_send "loc"
                                      expression (gram_pat.ml[38,1263+20]..[38,1263+24])
                                        Pexp_ident "self" (gram_pat.ml[38,1263+20]..[38,1263+24])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[38,1263+29]..[38,1263+32])
                                          Pexp_ident "_a0" (gram_pat.ml[38,1263+29]..[38,1263+32])
                                    ]
                              ]
                              expression (gram_pat.ml[39,1299+10]..[39,1299+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (gram_pat.ml[39,1299+14]..[39,1299+17])
                                      Ppat_var "_a1" (gram_pat.ml[39,1299+14]..[39,1299+17])
                                    expression (gram_pat.ml[39,1299+20]..[39,1299+35])
                                      Pexp_apply
                                      expression (gram_pat.ml[39,1299+20]..[39,1299+31])
                                        Pexp_send "string"
                                        expression (gram_pat.ml[39,1299+20]..[39,1299+24])
                                          Pexp_ident "self" (gram_pat.ml[39,1299+20]..[39,1299+24])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[39,1299+32]..[39,1299+35])
                                            Pexp_ident "_a1" (gram_pat.ml[39,1299+32]..[39,1299+35])
                                      ]
                                ]
                                expression (gram_pat.ml[39,1299+39]..[39,1299+54])
                                  Pexp_variant "Lid"
                                  Some
                                    expression (gram_pat.ml[39,1299+44]..[39,1299+54])
                                      Pexp_tuple
                                      [
                                        expression (gram_pat.ml[39,1299+45]..[39,1299+48])
                                          Pexp_ident "_a0" (gram_pat.ml[39,1299+45]..[39,1299+48])
                                        expression (gram_pat.ml[39,1299+50]..[39,1299+53])
                                          Pexp_ident "_a1" (gram_pat.ml[39,1299+50]..[39,1299+53])
                                      ]
                          <case>
                            pattern (gram_pat.ml[40,1354+8]..[40,1354+19])
                              Ppat_alias "_a0" (gram_pat.ml[40,1354+16]..[40,1354+19])
                              pattern (gram_pat.ml[40,1354+8]..[40,1354+12])
                                Ppat_type
                                "ant" (gram_pat.ml[40,1354+9]..[40,1354+12])
                            expression (gram_pat.ml[40,1354+23]..[40,1354+49]) ghost
                              Pexp_coerce
                              expression (gram_pat.ml[40,1354+24]..[40,1354+36])
                                Pexp_apply
                                expression (gram_pat.ml[40,1354+24]..[40,1354+32])
                                  Pexp_send "ant"
                                  expression (gram_pat.ml[40,1354+24]..[40,1354+28])
                                    Pexp_ident "self" (gram_pat.ml[40,1354+24]..[40,1354+28])
                                [
                                  <label> ""
                                    expression (gram_pat.ml[40,1354+33]..[40,1354+36])
                                      Pexp_ident "_a0" (gram_pat.ml[40,1354+33]..[40,1354+36])
                                ]
                              Some
                                core_type (gram_pat.ml[40,1354+39]..[40,1354+42])
                                  Ptyp_constr "ant" (gram_pat.ml[40,1354+39]..[40,1354+42])
                                  []
                              core_type (gram_pat.ml[40,1354+47]..[40,1354+48])
                                Ptyp_constr "t" (gram_pat.ml[40,1354+47]..[40,1354+48])
                                []
                          <case>
                            pattern (gram_pat.ml[41,1404+8]..[41,1404+26])
                              Ppat_variant "Com"
                              Some
                                pattern (gram_pat.ml[41,1404+13]..[41,1404+26])
                                  Ppat_tuple
                                  [
                                    pattern (gram_pat.ml[41,1404+14]..[41,1404+17])
                                      Ppat_var "_a0" (gram_pat.ml[41,1404+14]..[41,1404+17])
                                    pattern (gram_pat.ml[41,1404+18]..[41,1404+21])
                                      Ppat_var "_a1" (gram_pat.ml[41,1404+18]..[41,1404+21])
                                    pattern (gram_pat.ml[41,1404+22]..[41,1404+25])
                                      Ppat_var "_a2" (gram_pat.ml[41,1404+22]..[41,1404+25])
                                  ]
                            expression (gram_pat.ml[42,1434+10]..[44,1504+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (gram_pat.ml[42,1434+14]..[42,1434+17])
                                    Ppat_var "_a0" (gram_pat.ml[42,1434+14]..[42,1434+17])
                                  expression (gram_pat.ml[42,1434+20]..[42,1434+32])
                                    Pexp_apply
                                    expression (gram_pat.ml[42,1434+20]..[42,1434+28])
                                      Pexp_send "loc"
                                      expression (gram_pat.ml[42,1434+20]..[42,1434+24])
                                        Pexp_ident "self" (gram_pat.ml[42,1434+20]..[42,1434+24])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[42,1434+29]..[42,1434+32])
                                          Pexp_ident "_a0" (gram_pat.ml[42,1434+29]..[42,1434+32])
                                    ]
                              ]
                              expression (gram_pat.ml[43,1470+10]..[44,1504+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (gram_pat.ml[43,1470+14]..[43,1470+17])
                                      Ppat_var "_a1" (gram_pat.ml[43,1470+14]..[43,1470+17])
                                    expression (gram_pat.ml[43,1470+20]..[43,1470+30])
                                      Pexp_apply
                                      expression (gram_pat.ml[43,1470+20]..[43,1470+26])
                                        Pexp_send "t"
                                        expression (gram_pat.ml[43,1470+20]..[43,1470+24])
                                          Pexp_ident "self" (gram_pat.ml[43,1470+20]..[43,1470+24])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[43,1470+27]..[43,1470+30])
                                            Pexp_ident "_a1" (gram_pat.ml[43,1470+27]..[43,1470+30])
                                      ]
                                ]
                                expression (gram_pat.ml[44,1504+10]..[44,1504+54])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (gram_pat.ml[44,1504+14]..[44,1504+17])
                                        Ppat_var "_a2" (gram_pat.ml[44,1504+14]..[44,1504+17])
                                      expression (gram_pat.ml[44,1504+20]..[44,1504+30])
                                        Pexp_apply
                                        expression (gram_pat.ml[44,1504+20]..[44,1504+26])
                                          Pexp_send "t"
                                          expression (gram_pat.ml[44,1504+20]..[44,1504+24])
                                            Pexp_ident "self" (gram_pat.ml[44,1504+20]..[44,1504+24])
                                        [
                                          <label> ""
                                            expression (gram_pat.ml[44,1504+27]..[44,1504+30])
                                              Pexp_ident "_a2" (gram_pat.ml[44,1504+27]..[44,1504+30])
                                        ]
                                  ]
                                  expression (gram_pat.ml[44,1504+34]..[44,1504+54])
                                    Pexp_variant "Com"
                                    Some
                                      expression (gram_pat.ml[44,1504+39]..[44,1504+54])
                                        Pexp_tuple
                                        [
                                          expression (gram_pat.ml[44,1504+40]..[44,1504+43])
                                            Pexp_ident "_a0" (gram_pat.ml[44,1504+40]..[44,1504+43])
                                          expression (gram_pat.ml[44,1504+45]..[44,1504+48])
                                            Pexp_ident "_a1" (gram_pat.ml[44,1504+45]..[44,1504+48])
                                          expression (gram_pat.ml[44,1504+50]..[44,1504+53])
                                            Pexp_ident "_a2" (gram_pat.ml[44,1504+50]..[44,1504+53])
                                        ]
                          <case>
                            pattern (gram_pat.ml[45,1559+8]..[45,1559+28])
                              Ppat_variant "Alias"
                              Some
                                pattern (gram_pat.ml[45,1559+15]..[45,1559+28])
                                  Ppat_tuple
                                  [
                                    pattern (gram_pat.ml[45,1559+16]..[45,1559+19])
                                      Ppat_var "_a0" (gram_pat.ml[45,1559+16]..[45,1559+19])
                                    pattern (gram_pat.ml[45,1559+20]..[45,1559+23])
                                      Ppat_var "_a1" (gram_pat.ml[45,1559+20]..[45,1559+23])
                                    pattern (gram_pat.ml[45,1559+24]..[45,1559+27])
                                      Ppat_var "_a2" (gram_pat.ml[45,1559+24]..[45,1559+27])
                                  ]
                            expression (gram_pat.ml[46,1591+10]..[48,1661+61])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (gram_pat.ml[46,1591+14]..[46,1591+17])
                                    Ppat_var "_a0" (gram_pat.ml[46,1591+14]..[46,1591+17])
                                  expression (gram_pat.ml[46,1591+20]..[46,1591+32])
                                    Pexp_apply
                                    expression (gram_pat.ml[46,1591+20]..[46,1591+28])
                                      Pexp_send "loc"
                                      expression (gram_pat.ml[46,1591+20]..[46,1591+24])
                                        Pexp_ident "self" (gram_pat.ml[46,1591+20]..[46,1591+24])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[46,1591+29]..[46,1591+32])
                                          Pexp_ident "_a0" (gram_pat.ml[46,1591+29]..[46,1591+32])
                                    ]
                              ]
                              expression (gram_pat.ml[47,1627+10]..[48,1661+61])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (gram_pat.ml[47,1627+14]..[47,1627+17])
                                      Ppat_var "_a1" (gram_pat.ml[47,1627+14]..[47,1627+17])
                                    expression (gram_pat.ml[47,1627+20]..[47,1627+30])
                                      Pexp_apply
                                      expression (gram_pat.ml[47,1627+20]..[47,1627+26])
                                        Pexp_send "t"
                                        expression (gram_pat.ml[47,1627+20]..[47,1627+24])
                                          Pexp_ident "self" (gram_pat.ml[47,1627+20]..[47,1627+24])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[47,1627+27]..[47,1627+30])
                                            Pexp_ident "_a1" (gram_pat.ml[47,1627+27]..[47,1627+30])
                                      ]
                                ]
                                expression (gram_pat.ml[48,1661+10]..[48,1661+61])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (gram_pat.ml[48,1661+14]..[48,1661+17])
                                        Ppat_var "_a2" (gram_pat.ml[48,1661+14]..[48,1661+17])
                                      expression (gram_pat.ml[48,1661+20]..[48,1661+35])
                                        Pexp_apply
                                        expression (gram_pat.ml[48,1661+20]..[48,1661+31])
                                          Pexp_send "lident"
                                          expression (gram_pat.ml[48,1661+20]..[48,1661+24])
                                            Pexp_ident "self" (gram_pat.ml[48,1661+20]..[48,1661+24])
                                        [
                                          <label> ""
                                            expression (gram_pat.ml[48,1661+32]..[48,1661+35])
                                              Pexp_ident "_a2" (gram_pat.ml[48,1661+32]..[48,1661+35])
                                        ]
                                  ]
                                  expression (gram_pat.ml[48,1661+39]..[48,1661+61])
                                    Pexp_variant "Alias"
                                    Some
                                      expression (gram_pat.ml[48,1661+46]..[48,1661+61])
                                        Pexp_tuple
                                        [
                                          expression (gram_pat.ml[48,1661+47]..[48,1661+50])
                                            Pexp_ident "_a0" (gram_pat.ml[48,1661+47]..[48,1661+50])
                                          expression (gram_pat.ml[48,1661+52]..[48,1661+55])
                                            Pexp_ident "_a1" (gram_pat.ml[48,1661+52]..[48,1661+55])
                                          expression (gram_pat.ml[48,1661+57]..[48,1661+60])
                                            Pexp_ident "_a2" (gram_pat.ml[48,1661+57]..[48,1661+60])
                                        ]
                          <case>
                            pattern (gram_pat.ml[49,1723+8]..[49,1723+22])
                              Ppat_variant "Str"
                              Some
                                pattern (gram_pat.ml[49,1723+13]..[49,1723+22])
                                  Ppat_tuple
                                  [
                                    pattern (gram_pat.ml[49,1723+14]..[49,1723+17])
                                      Ppat_var "_a0" (gram_pat.ml[49,1723+14]..[49,1723+17])
                                    pattern (gram_pat.ml[49,1723+18]..[49,1723+21])
                                      Ppat_var "_a1" (gram_pat.ml[49,1723+18]..[49,1723+21])
                                  ]
                            expression (gram_pat.ml[50,1749+10]..[51,1785+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (gram_pat.ml[50,1749+14]..[50,1749+17])
                                    Ppat_var "_a0" (gram_pat.ml[50,1749+14]..[50,1749+17])
                                  expression (gram_pat.ml[50,1749+20]..[50,1749+32])
                                    Pexp_apply
                                    expression (gram_pat.ml[50,1749+20]..[50,1749+28])
                                      Pexp_send "loc"
                                      expression (gram_pat.ml[50,1749+20]..[50,1749+24])
                                        Pexp_ident "self" (gram_pat.ml[50,1749+20]..[50,1749+24])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[50,1749+29]..[50,1749+32])
                                          Pexp_ident "_a0" (gram_pat.ml[50,1749+29]..[50,1749+32])
                                    ]
                              ]
                              expression (gram_pat.ml[51,1785+10]..[51,1785+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (gram_pat.ml[51,1785+14]..[51,1785+17])
                                      Ppat_var "_a1" (gram_pat.ml[51,1785+14]..[51,1785+17])
                                    expression (gram_pat.ml[51,1785+20]..[51,1785+35])
                                      Pexp_apply
                                      expression (gram_pat.ml[51,1785+20]..[51,1785+31])
                                        Pexp_send "string"
                                        expression (gram_pat.ml[51,1785+20]..[51,1785+24])
                                          Pexp_ident "self" (gram_pat.ml[51,1785+20]..[51,1785+24])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[51,1785+32]..[51,1785+35])
                                            Pexp_ident "_a1" (gram_pat.ml[51,1785+32]..[51,1785+35])
                                      ]
                                ]
                                expression (gram_pat.ml[51,1785+39]..[51,1785+54])
                                  Pexp_variant "Str"
                                  Some
                                    expression (gram_pat.ml[51,1785+44]..[51,1785+54])
                                      Pexp_tuple
                                      [
                                        expression (gram_pat.ml[51,1785+45]..[51,1785+48])
                                          Pexp_ident "_a0" (gram_pat.ml[51,1785+45]..[51,1785+48])
                                        expression (gram_pat.ml[51,1785+50]..[51,1785+53])
                                          Pexp_ident "_a1" (gram_pat.ml[51,1785+50]..[51,1785+53])
                                      ]
                          <case>
                            pattern (gram_pat.ml[52,1840+8]..[52,1840+16])
                              Ppat_variant "Any"
                              Some
                                pattern (gram_pat.ml[52,1840+13]..[52,1840+16])
                                  Ppat_var "_a0" (gram_pat.ml[52,1840+13]..[52,1840+16])
                            expression (gram_pat.ml[52,1840+20]..[52,1840+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (gram_pat.ml[52,1840+24]..[52,1840+27])
                                    Ppat_var "_a0" (gram_pat.ml[52,1840+24]..[52,1840+27])
                                  expression (gram_pat.ml[52,1840+30]..[52,1840+42])
                                    Pexp_apply
                                    expression (gram_pat.ml[52,1840+30]..[52,1840+38])
                                      Pexp_send "loc"
                                      expression (gram_pat.ml[52,1840+30]..[52,1840+34])
                                        Pexp_ident "self" (gram_pat.ml[52,1840+30]..[52,1840+34])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[52,1840+39]..[52,1840+42])
                                          Pexp_ident "_a0" (gram_pat.ml[52,1840+39]..[52,1840+42])
                                    ]
                              ]
                              expression (gram_pat.ml[52,1840+46]..[52,1840+54])
                                Pexp_variant "Any"
                                Some
                                  expression (gram_pat.ml[52,1840+51]..[52,1840+54])
                                    Pexp_ident "_a0" (gram_pat.ml[52,1840+51]..[52,1840+54])
                        ]
                      Some
                        core_type (gram_pat.ml[28,927+15]..[28,927+21])
                          Ptyp_arrow
                          ""
                          core_type (gram_pat.ml[28,927+15]..[28,927+16])
                            Ptyp_constr "t" (gram_pat.ml[28,927+15]..[28,927+16])
                            []
                          core_type (gram_pat.ml[28,927+20]..[28,927+21])
                            Ptyp_constr "t" (gram_pat.ml[28,927+20]..[28,927+21])
                            []
              ]
    ]
  structure_item (gram_pat.ml[54,1901+0]..[84,3123+77])
    Pstr_value Rec
    [
      <def>
        pattern (gram_pat.ml[54,1901+8]..[54,1901+23])
          Ppat_var "pp_print_lident" (gram_pat.ml[54,1901+8]..[54,1901+23])
        expression (gram_pat.ml[54,1901+23]..[60,2099+33]) ghost
          Pexp_constraint
          expression (gram_pat.ml[55,1963+2]..[60,2099+33])
            Pexp_function
            [
              <case>
                pattern (gram_pat.ml[56,1974+4]..[56,1974+7])
                  Ppat_var "fmt" (gram_pat.ml[56,1974+4]..[56,1974+7])
                expression (gram_pat.ml[57,1985+6]..[60,2099+33])
                  Pexp_function
                  [
                    <case>
                      pattern (gram_pat.ml[58,2001+9]..[58,2001+23])
                        Ppat_variant "Lid"
                        Some
                          pattern (gram_pat.ml[58,2001+14]..[58,2001+23])
                            Ppat_tuple
                            [
                              pattern (gram_pat.ml[58,2001+15]..[58,2001+18])
                                Ppat_var "_a0" (gram_pat.ml[58,2001+15]..[58,2001+18])
                              pattern (gram_pat.ml[58,2001+19]..[58,2001+22])
                                Ppat_var "_a1" (gram_pat.ml[58,2001+19]..[58,2001+22])
                            ]
                      expression (gram_pat.ml[59,2028+11]..[60,2099+32])
                        Pexp_apply
                        expression (gram_pat.ml[59,2028+11]..[59,2028+25])
                          Pexp_ident "Format.fprintf" (gram_pat.ml[59,2028+11]..[59,2028+25])
                        [
                          <label> ""
                            expression (gram_pat.ml[59,2028+26]..[59,2028+29])
                              Pexp_ident "fmt" (gram_pat.ml[59,2028+26]..[59,2028+29])
                          <label> ""
                            expression (gram_pat.ml[59,2028+30]..[59,2028+53])
                              Pexp_constant Const_string("@[<1>(`Lid@ %a@ %a)@]",None)
                          <label> ""
                            expression (gram_pat.ml[59,2028+54]..[59,2028+66])
                              Pexp_ident "pp_print_loc" (gram_pat.ml[59,2028+54]..[59,2028+66])
                          <label> ""
                            expression (gram_pat.ml[59,2028+67]..[59,2028+70])
                              Pexp_ident "_a0" (gram_pat.ml[59,2028+67]..[59,2028+70])
                          <label> ""
                            expression (gram_pat.ml[60,2099+13]..[60,2099+28])
                              Pexp_ident "pp_print_string" (gram_pat.ml[60,2099+13]..[60,2099+28])
                          <label> ""
                            expression (gram_pat.ml[60,2099+29]..[60,2099+32])
                              Pexp_ident "_a1" (gram_pat.ml[60,2099+29]..[60,2099+32])
                        ]
                  ]
            ]
          core_type (gram_pat.ml[54,1901+25]..[54,1901+59])
            Ptyp_arrow
            ""
            core_type (gram_pat.ml[54,1901+25]..[54,1901+41])
              Ptyp_constr "Format.formatter" (gram_pat.ml[54,1901+25]..[54,1901+41])
              []
            core_type (gram_pat.ml[54,1901+45]..[54,1901+59])
              Ptyp_arrow
              ""
              core_type (gram_pat.ml[54,1901+45]..[54,1901+51])
                Ptyp_constr "lident" (gram_pat.ml[54,1901+45]..[54,1901+51])
                []
              core_type (gram_pat.ml[54,1901+55]..[54,1901+59])
                Ptyp_constr "unit" (gram_pat.ml[54,1901+55]..[54,1901+59])
                []
      <def>
        pattern (gram_pat.ml[61,2133+4]..[61,2133+14])
          Ppat_var "pp_print_t" (gram_pat.ml[61,2133+4]..[61,2133+14])
        expression (gram_pat.ml[61,2133+14]..[84,3123+77]) ghost
          Pexp_constraint
          expression (gram_pat.ml[62,2181+2]..[84,3123+77])
            Pexp_function
            [
              <case>
                pattern (gram_pat.ml[63,2192+4]..[63,2192+7])
                  Ppat_var "fmt" (gram_pat.ml[63,2192+4]..[63,2192+7])
                expression (gram_pat.ml[64,2203+6]..[84,3123+77])
                  Pexp_function
                  [
                    <case>
                      pattern (gram_pat.ml[65,2219+9]..[65,2219+23])
                        Ppat_variant "Vrn"
                        Some
                          pattern (gram_pat.ml[65,2219+14]..[65,2219+23])
                            Ppat_tuple
                            [
                              pattern (gram_pat.ml[65,2219+15]..[65,2219+18])
                                Ppat_var "_a0" (gram_pat.ml[65,2219+15]..[65,2219+18])
                              pattern (gram_pat.ml[65,2219+19]..[65,2219+22])
                                Ppat_var "_a1" (gram_pat.ml[65,2219+19]..[65,2219+22])
                            ]
                      expression (gram_pat.ml[66,2246+11]..[67,2317+32])
                        Pexp_apply
                        expression (gram_pat.ml[66,2246+11]..[66,2246+25])
                          Pexp_ident "Format.fprintf" (gram_pat.ml[66,2246+11]..[66,2246+25])
                        [
                          <label> ""
                            expression (gram_pat.ml[66,2246+26]..[66,2246+29])
                              Pexp_ident "fmt" (gram_pat.ml[66,2246+26]..[66,2246+29])
                          <label> ""
                            expression (gram_pat.ml[66,2246+30]..[66,2246+53])
                              Pexp_constant Const_string("@[<1>(`Vrn@ %a@ %a)@]",None)
                          <label> ""
                            expression (gram_pat.ml[66,2246+54]..[66,2246+66])
                              Pexp_ident "pp_print_loc" (gram_pat.ml[66,2246+54]..[66,2246+66])
                          <label> ""
                            expression (gram_pat.ml[66,2246+67]..[66,2246+70])
                              Pexp_ident "_a0" (gram_pat.ml[66,2246+67]..[66,2246+70])
                          <label> ""
                            expression (gram_pat.ml[67,2317+13]..[67,2317+28])
                              Pexp_ident "pp_print_string" (gram_pat.ml[67,2317+13]..[67,2317+28])
                          <label> ""
                            expression (gram_pat.ml[67,2317+29]..[67,2317+32])
                              Pexp_ident "_a1" (gram_pat.ml[67,2317+29]..[67,2317+32])
                        ]
                    <case>
                      pattern (gram_pat.ml[68,2350+9]..[68,2350+27])
                        Ppat_variant "App"
                        Some
                          pattern (gram_pat.ml[68,2350+14]..[68,2350+27])
                            Ppat_tuple
                            [
                              pattern (gram_pat.ml[68,2350+15]..[68,2350+18])
                                Ppat_var "_a0" (gram_pat.ml[68,2350+15]..[68,2350+18])
                              pattern (gram_pat.ml[68,2350+19]..[68,2350+22])
                                Ppat_var "_a1" (gram_pat.ml[68,2350+19]..[68,2350+22])
                              pattern (gram_pat.ml[68,2350+23]..[68,2350+26])
                                Ppat_var "_a2" (gram_pat.ml[68,2350+23]..[68,2350+26])
                            ]
                      expression (gram_pat.ml[69,2381+11]..[70,2456+42])
                        Pexp_apply
                        expression (gram_pat.ml[69,2381+11]..[69,2381+25])
                          Pexp_ident "Format.fprintf" (gram_pat.ml[69,2381+11]..[69,2381+25])
                        [
                          <label> ""
                            expression (gram_pat.ml[69,2381+26]..[69,2381+29])
                              Pexp_ident "fmt" (gram_pat.ml[69,2381+26]..[69,2381+29])
                          <label> ""
                            expression (gram_pat.ml[69,2381+30]..[69,2381+57])
                              Pexp_constant Const_string("@[<1>(`App@ %a@ %a@ %a)@]",None)
                          <label> ""
                            expression (gram_pat.ml[69,2381+58]..[69,2381+70])
                              Pexp_ident "pp_print_loc" (gram_pat.ml[69,2381+58]..[69,2381+70])
                          <label> ""
                            expression (gram_pat.ml[69,2381+71]..[69,2381+74])
                              Pexp_ident "_a0" (gram_pat.ml[69,2381+71]..[69,2381+74])
                          <label> ""
                            expression (gram_pat.ml[70,2456+13]..[70,2456+23])
                              Pexp_ident "pp_print_t" (gram_pat.ml[70,2456+13]..[70,2456+23])
                          <label> ""
                            expression (gram_pat.ml[70,2456+24]..[70,2456+27])
                              Pexp_ident "_a1" (gram_pat.ml[70,2456+24]..[70,2456+27])
                          <label> ""
                            expression (gram_pat.ml[70,2456+28]..[70,2456+38])
                              Pexp_ident "pp_print_t" (gram_pat.ml[70,2456+28]..[70,2456+38])
                          <label> ""
                            expression (gram_pat.ml[70,2456+39]..[70,2456+42])
                              Pexp_ident "_a2" (gram_pat.ml[70,2456+39]..[70,2456+42])
                        ]
                    <case>
                      pattern (gram_pat.ml[71,2499+9]..[71,2499+23])
                        Ppat_variant "Lid"
                        Some
                          pattern (gram_pat.ml[71,2499+14]..[71,2499+23])
                            Ppat_tuple
                            [
                              pattern (gram_pat.ml[71,2499+15]..[71,2499+18])
                                Ppat_var "_a0" (gram_pat.ml[71,2499+15]..[71,2499+18])
                              pattern (gram_pat.ml[71,2499+19]..[71,2499+22])
                                Ppat_var "_a1" (gram_pat.ml[71,2499+19]..[71,2499+22])
                            ]
                      expression (gram_pat.ml[72,2526+11]..[73,2597+32])
                        Pexp_apply
                        expression (gram_pat.ml[72,2526+11]..[72,2526+25])
                          Pexp_ident "Format.fprintf" (gram_pat.ml[72,2526+11]..[72,2526+25])
                        [
                          <label> ""
                            expression (gram_pat.ml[72,2526+26]..[72,2526+29])
                              Pexp_ident "fmt" (gram_pat.ml[72,2526+26]..[72,2526+29])
                          <label> ""
                            expression (gram_pat.ml[72,2526+30]..[72,2526+53])
                              Pexp_constant Const_string("@[<1>(`Lid@ %a@ %a)@]",None)
                          <label> ""
                            expression (gram_pat.ml[72,2526+54]..[72,2526+66])
                              Pexp_ident "pp_print_loc" (gram_pat.ml[72,2526+54]..[72,2526+66])
                          <label> ""
                            expression (gram_pat.ml[72,2526+67]..[72,2526+70])
                              Pexp_ident "_a0" (gram_pat.ml[72,2526+67]..[72,2526+70])
                          <label> ""
                            expression (gram_pat.ml[73,2597+13]..[73,2597+28])
                              Pexp_ident "pp_print_string" (gram_pat.ml[73,2597+13]..[73,2597+28])
                          <label> ""
                            expression (gram_pat.ml[73,2597+29]..[73,2597+32])
                              Pexp_ident "_a1" (gram_pat.ml[73,2597+29]..[73,2597+32])
                        ]
                    <case>
                      pattern (gram_pat.ml[74,2630+9]..[74,2630+20])
                        Ppat_alias "_a0" (gram_pat.ml[74,2630+17]..[74,2630+20])
                        pattern (gram_pat.ml[74,2630+9]..[74,2630+13])
                          Ppat_type
                          "ant" (gram_pat.ml[74,2630+10]..[74,2630+13])
                      expression (gram_pat.ml[74,2630+24]..[74,2630+54]) ghost
                        Pexp_coerce
                        expression (gram_pat.ml[74,2630+25]..[74,2630+45])
                          Pexp_apply
                          expression (gram_pat.ml[74,2630+25]..[74,2630+37])
                            Pexp_ident "pp_print_ant" (gram_pat.ml[74,2630+25]..[74,2630+37])
                          [
                            <label> ""
                              expression (gram_pat.ml[74,2630+38]..[74,2630+41])
                                Pexp_ident "fmt" (gram_pat.ml[74,2630+38]..[74,2630+41])
                            <label> ""
                              expression (gram_pat.ml[74,2630+42]..[74,2630+45])
                                Pexp_ident "_a0" (gram_pat.ml[74,2630+42]..[74,2630+45])
                          ]
                        None
                        core_type (gram_pat.ml[74,2630+49]..[74,2630+53])
                          Ptyp_constr "unit" (gram_pat.ml[74,2630+49]..[74,2630+53])
                          []
                    <case>
                      pattern (gram_pat.ml[75,2685+9]..[75,2685+27])
                        Ppat_variant "Com"
                        Some
                          pattern (gram_pat.ml[75,2685+14]..[75,2685+27])
                            Ppat_tuple
                            [
                              pattern (gram_pat.ml[75,2685+15]..[75,2685+18])
                                Ppat_var "_a0" (gram_pat.ml[75,2685+15]..[75,2685+18])
                              pattern (gram_pat.ml[75,2685+19]..[75,2685+22])
                                Ppat_var "_a1" (gram_pat.ml[75,2685+19]..[75,2685+22])
                              pattern (gram_pat.ml[75,2685+23]..[75,2685+26])
                                Ppat_var "_a2" (gram_pat.ml[75,2685+23]..[75,2685+26])
                            ]
                      expression (gram_pat.ml[76,2716+11]..[77,2791+42])
                        Pexp_apply
                        expression (gram_pat.ml[76,2716+11]..[76,2716+25])
                          Pexp_ident "Format.fprintf" (gram_pat.ml[76,2716+11]..[76,2716+25])
                        [
                          <label> ""
                            expression (gram_pat.ml[76,2716+26]..[76,2716+29])
                              Pexp_ident "fmt" (gram_pat.ml[76,2716+26]..[76,2716+29])
                          <label> ""
                            expression (gram_pat.ml[76,2716+30]..[76,2716+57])
                              Pexp_constant Const_string("@[<1>(`Com@ %a@ %a@ %a)@]",None)
                          <label> ""
                            expression (gram_pat.ml[76,2716+58]..[76,2716+70])
                              Pexp_ident "pp_print_loc" (gram_pat.ml[76,2716+58]..[76,2716+70])
                          <label> ""
                            expression (gram_pat.ml[76,2716+71]..[76,2716+74])
                              Pexp_ident "_a0" (gram_pat.ml[76,2716+71]..[76,2716+74])
                          <label> ""
                            expression (gram_pat.ml[77,2791+13]..[77,2791+23])
                              Pexp_ident "pp_print_t" (gram_pat.ml[77,2791+13]..[77,2791+23])
                          <label> ""
                            expression (gram_pat.ml[77,2791+24]..[77,2791+27])
                              Pexp_ident "_a1" (gram_pat.ml[77,2791+24]..[77,2791+27])
                          <label> ""
                            expression (gram_pat.ml[77,2791+28]..[77,2791+38])
                              Pexp_ident "pp_print_t" (gram_pat.ml[77,2791+28]..[77,2791+38])
                          <label> ""
                            expression (gram_pat.ml[77,2791+39]..[77,2791+42])
                              Pexp_ident "_a2" (gram_pat.ml[77,2791+39]..[77,2791+42])
                        ]
                    <case>
                      pattern (gram_pat.ml[78,2834+9]..[78,2834+29])
                        Ppat_variant "Alias"
                        Some
                          pattern (gram_pat.ml[78,2834+16]..[78,2834+29])
                            Ppat_tuple
                            [
                              pattern (gram_pat.ml[78,2834+17]..[78,2834+20])
                                Ppat_var "_a0" (gram_pat.ml[78,2834+17]..[78,2834+20])
                              pattern (gram_pat.ml[78,2834+21]..[78,2834+24])
                                Ppat_var "_a1" (gram_pat.ml[78,2834+21]..[78,2834+24])
                              pattern (gram_pat.ml[78,2834+25]..[78,2834+28])
                                Ppat_var "_a2" (gram_pat.ml[78,2834+25]..[78,2834+28])
                            ]
                      expression (gram_pat.ml[79,2867+11]..[80,2944+47])
                        Pexp_apply
                        expression (gram_pat.ml[79,2867+11]..[79,2867+25])
                          Pexp_ident "Format.fprintf" (gram_pat.ml[79,2867+11]..[79,2867+25])
                        [
                          <label> ""
                            expression (gram_pat.ml[79,2867+26]..[79,2867+29])
                              Pexp_ident "fmt" (gram_pat.ml[79,2867+26]..[79,2867+29])
                          <label> ""
                            expression (gram_pat.ml[79,2867+30]..[79,2867+59])
                              Pexp_constant Const_string("@[<1>(`Alias@ %a@ %a@ %a)@]",None)
                          <label> ""
                            expression (gram_pat.ml[79,2867+60]..[79,2867+72])
                              Pexp_ident "pp_print_loc" (gram_pat.ml[79,2867+60]..[79,2867+72])
                          <label> ""
                            expression (gram_pat.ml[79,2867+73]..[79,2867+76])
                              Pexp_ident "_a0" (gram_pat.ml[79,2867+73]..[79,2867+76])
                          <label> ""
                            expression (gram_pat.ml[80,2944+13]..[80,2944+23])
                              Pexp_ident "pp_print_t" (gram_pat.ml[80,2944+13]..[80,2944+23])
                          <label> ""
                            expression (gram_pat.ml[80,2944+24]..[80,2944+27])
                              Pexp_ident "_a1" (gram_pat.ml[80,2944+24]..[80,2944+27])
                          <label> ""
                            expression (gram_pat.ml[80,2944+28]..[80,2944+43])
                              Pexp_ident "pp_print_lident" (gram_pat.ml[80,2944+28]..[80,2944+43])
                          <label> ""
                            expression (gram_pat.ml[80,2944+44]..[80,2944+47])
                              Pexp_ident "_a2" (gram_pat.ml[80,2944+44]..[80,2944+47])
                        ]
                    <case>
                      pattern (gram_pat.ml[81,2992+9]..[81,2992+23])
                        Ppat_variant "Str"
                        Some
                          pattern (gram_pat.ml[81,2992+14]..[81,2992+23])
                            Ppat_tuple
                            [
                              pattern (gram_pat.ml[81,2992+15]..[81,2992+18])
                                Ppat_var "_a0" (gram_pat.ml[81,2992+15]..[81,2992+18])
                              pattern (gram_pat.ml[81,2992+19]..[81,2992+22])
                                Ppat_var "_a1" (gram_pat.ml[81,2992+19]..[81,2992+22])
                            ]
                      expression (gram_pat.ml[82,3019+11]..[83,3090+32])
                        Pexp_apply
                        expression (gram_pat.ml[82,3019+11]..[82,3019+25])
                          Pexp_ident "Format.fprintf" (gram_pat.ml[82,3019+11]..[82,3019+25])
                        [
                          <label> ""
                            expression (gram_pat.ml[82,3019+26]..[82,3019+29])
                              Pexp_ident "fmt" (gram_pat.ml[82,3019+26]..[82,3019+29])
                          <label> ""
                            expression (gram_pat.ml[82,3019+30]..[82,3019+53])
                              Pexp_constant Const_string("@[<1>(`Str@ %a@ %a)@]",None)
                          <label> ""
                            expression (gram_pat.ml[82,3019+54]..[82,3019+66])
                              Pexp_ident "pp_print_loc" (gram_pat.ml[82,3019+54]..[82,3019+66])
                          <label> ""
                            expression (gram_pat.ml[82,3019+67]..[82,3019+70])
                              Pexp_ident "_a0" (gram_pat.ml[82,3019+67]..[82,3019+70])
                          <label> ""
                            expression (gram_pat.ml[83,3090+13]..[83,3090+28])
                              Pexp_ident "pp_print_string" (gram_pat.ml[83,3090+13]..[83,3090+28])
                          <label> ""
                            expression (gram_pat.ml[83,3090+29]..[83,3090+32])
                              Pexp_ident "_a1" (gram_pat.ml[83,3090+29]..[83,3090+32])
                        ]
                    <case>
                      pattern (gram_pat.ml[84,3123+9]..[84,3123+17])
                        Ppat_variant "Any"
                        Some
                          pattern (gram_pat.ml[84,3123+14]..[84,3123+17])
                            Ppat_var "_a0" (gram_pat.ml[84,3123+14]..[84,3123+17])
                      expression (gram_pat.ml[84,3123+21]..[84,3123+76])
                        Pexp_apply
                        expression (gram_pat.ml[84,3123+21]..[84,3123+35])
                          Pexp_ident "Format.fprintf" (gram_pat.ml[84,3123+21]..[84,3123+35])
                        [
                          <label> ""
                            expression (gram_pat.ml[84,3123+36]..[84,3123+39])
                              Pexp_ident "fmt" (gram_pat.ml[84,3123+36]..[84,3123+39])
                          <label> ""
                            expression (gram_pat.ml[84,3123+40]..[84,3123+59])
                              Pexp_constant Const_string("@[<1>(`Any@ %a)@]",None)
                          <label> ""
                            expression (gram_pat.ml[84,3123+60]..[84,3123+72])
                              Pexp_ident "pp_print_loc" (gram_pat.ml[84,3123+60]..[84,3123+72])
                          <label> ""
                            expression (gram_pat.ml[84,3123+73]..[84,3123+76])
                              Pexp_ident "_a0" (gram_pat.ml[84,3123+73]..[84,3123+76])
                        ]
                  ]
            ]
          core_type (gram_pat.ml[61,2133+16]..[61,2133+45])
            Ptyp_arrow
            ""
            core_type (gram_pat.ml[61,2133+16]..[61,2133+32])
              Ptyp_constr "Format.formatter" (gram_pat.ml[61,2133+16]..[61,2133+32])
              []
            core_type (gram_pat.ml[61,2133+36]..[61,2133+45])
              Ptyp_arrow
              ""
              core_type (gram_pat.ml[61,2133+36]..[61,2133+37])
                Ptyp_constr "t" (gram_pat.ml[61,2133+36]..[61,2133+37])
                []
              core_type (gram_pat.ml[61,2133+41]..[61,2133+45])
                Ptyp_constr "unit" (gram_pat.ml[61,2133+41]..[61,2133+45])
                []
    ]
  structure_item (gram_pat.ml[85,3201+0]..[93,3387+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[85,3201+4]..[85,3201+14])
          Ppat_var "wildcarder" (gram_pat.ml[85,3201+4]..[85,3201+14])
        expression (gram_pat.ml[86,3218+2]..[93,3387+5])
          Pexp_object
          class_structure
            pattern (gram_pat.ml[86,3218+9]..[86,3218+15])
              Ppat_var "self" (gram_pat.ml[86,3218+10]..[86,3218+14])
            [
              class_field (gram_pat.ml[87,3234+4]..[87,3234+25])
                Pcf_inherit Fresh
                  class_expr (gram_pat.ml[87,3234+13]..[87,3234+16])
                    Pcl_constr "map" (gram_pat.ml[87,3234+13]..[87,3234+16])
                    []
                  Some
                    "super"
              class_field (gram_pat.ml[88,3260+4]..[92,3364+22])
                Pcf_method Public
                  "t" (gram_pat.ml[88,3260+12]..[88,3260+13])
                  Concrete Override
                  expression (gram_pat.ml[88,3260+10]..[92,3364+22]) ghost
                    Pexp_poly
                    expression (gram_pat.ml[89,3276+6]..[92,3364+22])
                      Pexp_function
                      [
                        <case>
                          pattern (gram_pat.ml[90,3291+8]..[90,3291+21])
                            Ppat_variant "Lid"
                            Some
                              pattern (gram_pat.ml[90,3291+13]..[90,3291+21])
                                Ppat_tuple
                                [
                                  pattern (gram_pat.ml[90,3291+14]..[90,3291+18])
                                    Ppat_var "_loc" (gram_pat.ml[90,3291+14]..[90,3291+18])
                                  pattern (gram_pat.ml[90,3291+19]..[90,3291+20])
                                    Ppat_any
                                ]
                          expression (gram_pat.ml[90,3291+25]..[90,3291+34])
                            Pexp_variant "Any"
                            Some
                              expression (gram_pat.ml[90,3291+30]..[90,3291+34])
                                Pexp_ident "_loc" (gram_pat.ml[90,3291+30]..[90,3291+34])
                        <case>
                          pattern (gram_pat.ml[91,3326+8]..[91,3326+25])
                            Ppat_variant "Alias"
                            Some
                              pattern (gram_pat.ml[91,3326+15]..[91,3326+25])
                                Ppat_tuple
                                [
                                  pattern (gram_pat.ml[91,3326+16]..[91,3326+20])
                                    Ppat_var "_loc" (gram_pat.ml[91,3326+16]..[91,3326+20])
                                  pattern (gram_pat.ml[91,3326+21]..[91,3326+22])
                                    Ppat_var "p" (gram_pat.ml[91,3326+21]..[91,3326+22])
                                  pattern (gram_pat.ml[91,3326+23]..[91,3326+24])
                                    Ppat_any
                                ]
                          expression (gram_pat.ml[91,3326+29]..[91,3326+37])
                            Pexp_apply
                            expression (gram_pat.ml[91,3326+29]..[91,3326+35])
                              Pexp_send "t"
                              expression (gram_pat.ml[91,3326+29]..[91,3326+33])
                                Pexp_ident "self" (gram_pat.ml[91,3326+29]..[91,3326+33])
                            [
                              <label> ""
                                expression (gram_pat.ml[91,3326+36]..[91,3326+37])
                                  Pexp_ident "p" (gram_pat.ml[91,3326+36]..[91,3326+37])
                            ]
                        <case>
                          pattern (gram_pat.ml[92,3364+8]..[92,3364+9])
                            Ppat_var "p" (gram_pat.ml[92,3364+8]..[92,3364+9])
                          expression (gram_pat.ml[92,3364+13]..[92,3364+22])
                            Pexp_apply
                            expression (gram_pat.ml[92,3364+13]..[92,3364+20])
                              Pexp_send "t"
                              expression (gram_pat.ml[92,3364+13]..[92,3364+18])
                                Pexp_ident "super" (gram_pat.ml[92,3364+13]..[92,3364+18])
                            [
                              <label> ""
                                expression (gram_pat.ml[92,3364+21]..[92,3364+22])
                                  Pexp_ident "p" (gram_pat.ml[92,3364+21]..[92,3364+22])
                            ]
                      ]
                    None
            ]
    ]
  structure_item (gram_pat.ml[94,3393+0]..[94,3393+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[94,3393+4]..[94,3393+5])
          Ppat_var "p" (gram_pat.ml[94,3393+4]..[94,3393+5])
        expression (gram_pat.ml[94,3393+8]..[94,3393+15])
          Pexp_ident "fprintf" (gram_pat.ml[94,3393+8]..[94,3393+15])
    ]
  structure_item (gram_pat.ml[95,3409+0]..[119,4329+45])
    Pstr_value Rec
    [
      <def>
        pattern (gram_pat.ml[95,3409+8]..[95,3409+15])
          Ppat_var "unparse" (gram_pat.ml[95,3409+8]..[95,3409+15])
        expression (gram_pat.ml[96,3427+2]..[119,4329+45])
          Pexp_function
          [
            <case>
              pattern (gram_pat.ml[97,3438+4]..[97,3438+5])
                Ppat_var "f" (gram_pat.ml[97,3438+4]..[97,3438+5])
              expression (gram_pat.ml[98,3447+6]..[119,4329+45])
                Pexp_function
                [
                  <case>
                    pattern (gram_pat.ml[99,3463+9]..[99,3463+16])
                      Ppat_constraint
                      pattern (gram_pat.ml[99,3463+10]..[99,3463+11])
                        Ppat_var "x" (gram_pat.ml[99,3463+10]..[99,3463+11])
                      core_type (gram_pat.ml[99,3463+14]..[99,3463+15])
                        Ptyp_constr "t" (gram_pat.ml[99,3463+14]..[99,3463+15])
                        []
                    expression (gram_pat.ml[100,3483+11]..[119,4329+44])
                      Pexp_match
                      expression (gram_pat.ml[100,3483+18]..[100,3483+19])
                        Pexp_ident "x" (gram_pat.ml[100,3483+18]..[100,3483+19])
                      [
                        <case>
                          pattern (gram_pat.ml[101,3508+14]..[101,3508+24])
                            Ppat_variant "Vrn"
                            Some
                              pattern (gram_pat.ml[101,3508+19]..[101,3508+24])
                                Ppat_tuple
                                [
                                  pattern (gram_pat.ml[101,3508+20]..[101,3508+21])
                                    Ppat_any
                                  pattern (gram_pat.ml[101,3508+22]..[101,3508+23])
                                    Ppat_var "s" (gram_pat.ml[101,3508+22]..[101,3508+23])
                                ]
                          expression (gram_pat.ml[101,3508+28]..[101,3508+39])
                            Pexp_apply
                            expression (gram_pat.ml[101,3508+28]..[101,3508+29])
                              Pexp_ident "p" (gram_pat.ml[101,3508+28]..[101,3508+29])
                            [
                              <label> ""
                                expression (gram_pat.ml[101,3508+30]..[101,3508+31])
                                  Pexp_ident "f" (gram_pat.ml[101,3508+30]..[101,3508+31])
                              <label> ""
                                expression (gram_pat.ml[101,3508+32]..[101,3508+37])
                                  Pexp_constant Const_string("`%s",None)
                              <label> ""
                                expression (gram_pat.ml[101,3508+38]..[101,3508+39])
                                  Pexp_ident "s" (gram_pat.ml[101,3508+38]..[101,3508+39])
                            ]
                        <case>
                          pattern (gram_pat.ml[102,3548+14]..[102,3548+20])
                            Ppat_variant "App"
                            Some
                              pattern (gram_pat.ml[102,3548+19]..[102,3548+20])
                                Ppat_any
                          expression (gram_pat.ml[103,3572+16]..[113,4066+45])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (gram_pat.ml[103,3572+20]..[103,3572+21])
                                  Ppat_var "l" (gram_pat.ml[103,3572+20]..[103,3572+21])
                                expression (gram_pat.ml[103,3572+24]..[103,3572+50])
                                  Pexp_apply
                                  expression (gram_pat.ml[103,3572+24]..[103,3572+45])
                                    Pexp_ident "Ast_basic.list_of_app" (gram_pat.ml[103,3572+24]..[103,3572+45])
                                  [
                                    <label> ""
                                      expression (gram_pat.ml[103,3572+46]..[103,3572+47])
                                        Pexp_ident "x" (gram_pat.ml[103,3572+46]..[103,3572+47])
                                    <label> ""
                                      expression (gram_pat.ml[103,3572+48]..[103,3572+50])
                                        Pexp_construct "[]" (gram_pat.ml[103,3572+48]..[103,3572+50])
                                        None
                                  ]
                            ]
                            expression (gram_pat.ml[104,3626+16]..[113,4066+45])
                              Pexp_match
                              expression (gram_pat.ml[104,3626+23]..[104,3626+24])
                                Pexp_ident "l" (gram_pat.ml[104,3626+23]..[104,3626+24])
                              [
                                <case>
                                  pattern (gram_pat.ml[105,3656+19]..[105,3656+36])
                                    Ppat_construct "::" (gram_pat.ml[105,3656+32]..[105,3656+34])
                                    Some
                                      pattern (gram_pat.ml[105,3656+19]..[105,3656+36]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (gram_pat.ml[105,3656+19]..[105,3656+32])
                                            Ppat_alias "x" (gram_pat.ml[105,3656+30]..[105,3656+31])
                                            pattern (gram_pat.ml[105,3656+20]..[105,3656+26])
                                              Ppat_variant "Vrn"
                                              Some
                                                pattern (gram_pat.ml[105,3656+25]..[105,3656+26])
                                                  Ppat_any
                                          pattern (gram_pat.ml[105,3656+34]..[105,3656+36])
                                            Ppat_construct "[]" (gram_pat.ml[105,3656+34]..[105,3656+36])
                                            None
                                        ]
                                  expression (gram_pat.ml[105,3656+40]..[105,3656+51])
                                    Pexp_apply
                                    expression (gram_pat.ml[105,3656+40]..[105,3656+47])
                                      Pexp_ident "unparse" (gram_pat.ml[105,3656+40]..[105,3656+47])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[105,3656+48]..[105,3656+49])
                                          Pexp_ident "f" (gram_pat.ml[105,3656+48]..[105,3656+49])
                                      <label> ""
                                        expression (gram_pat.ml[105,3656+50]..[105,3656+51])
                                          Pexp_ident "x" (gram_pat.ml[105,3656+50]..[105,3656+51])
                                    ]
                                <case>
                                  pattern (gram_pat.ml[106,3708+19]..[106,3708+39])
                                    Ppat_construct "::" (gram_pat.ml[106,3708+32]..[106,3708+34])
                                    Some
                                      pattern (gram_pat.ml[106,3708+19]..[106,3708+39]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (gram_pat.ml[106,3708+19]..[106,3708+32])
                                            Ppat_alias "x" (gram_pat.ml[106,3708+30]..[106,3708+31])
                                            pattern (gram_pat.ml[106,3708+20]..[106,3708+26])
                                              Ppat_variant "Vrn"
                                              Some
                                                pattern (gram_pat.ml[106,3708+25]..[106,3708+26])
                                                  Ppat_any
                                          pattern (gram_pat.ml[106,3708+34]..[106,3708+39])
                                            Ppat_construct "::" (gram_pat.ml[106,3708+35]..[106,3708+37])
                                            Some
                                              pattern (gram_pat.ml[106,3708+34]..[106,3708+39]) ghost
                                                Ppat_tuple
                                                [
                                                  pattern (gram_pat.ml[106,3708+34]..[106,3708+35])
                                                    Ppat_var "v" (gram_pat.ml[106,3708+34]..[106,3708+35])
                                                  pattern (gram_pat.ml[106,3708+37]..[106,3708+39])
                                                    Ppat_construct "[]" (gram_pat.ml[106,3708+37]..[106,3708+39])
                                                    None
                                                ]
                                        ]
                                  expression (gram_pat.ml[106,3708+43]..[106,3708+74])
                                    Pexp_apply
                                    expression (gram_pat.ml[106,3708+43]..[106,3708+44])
                                      Pexp_ident "p" (gram_pat.ml[106,3708+43]..[106,3708+44])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[106,3708+45]..[106,3708+46])
                                          Pexp_ident "f" (gram_pat.ml[106,3708+45]..[106,3708+46])
                                      <label> ""
                                        expression (gram_pat.ml[106,3708+47]..[106,3708+54])
                                          Pexp_constant Const_string("%a %a",None)
                                      <label> ""
                                        expression (gram_pat.ml[106,3708+55]..[106,3708+62])
                                          Pexp_ident "unparse" (gram_pat.ml[106,3708+55]..[106,3708+62])
                                      <label> ""
                                        expression (gram_pat.ml[106,3708+63]..[106,3708+64])
                                          Pexp_ident "x" (gram_pat.ml[106,3708+63]..[106,3708+64])
                                      <label> ""
                                        expression (gram_pat.ml[106,3708+65]..[106,3708+72])
                                          Pexp_ident "unparse" (gram_pat.ml[106,3708+65]..[106,3708+72])
                                      <label> ""
                                        expression (gram_pat.ml[106,3708+73]..[106,3708+74])
                                          Pexp_ident "v" (gram_pat.ml[106,3708+73]..[106,3708+74])
                                    ]
                                <case>
                                  pattern (gram_pat.ml[107,3783+19]..[107,3783+38])
                                    Ppat_construct "::" (gram_pat.ml[107,3783+32]..[107,3783+34])
                                    Some
                                      pattern (gram_pat.ml[107,3783+19]..[107,3783+38]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (gram_pat.ml[107,3783+19]..[107,3783+32])
                                            Ppat_alias "x" (gram_pat.ml[107,3783+30]..[107,3783+31])
                                            pattern (gram_pat.ml[107,3783+20]..[107,3783+26])
                                              Ppat_variant "Vrn"
                                              Some
                                                pattern (gram_pat.ml[107,3783+25]..[107,3783+26])
                                                  Ppat_any
                                          pattern (gram_pat.ml[107,3783+34]..[107,3783+38])
                                            Ppat_var "rest" (gram_pat.ml[107,3783+34]..[107,3783+38])
                                        ]
                                  expression (gram_pat.ml[108,3825+21]..[109,3870+62])
                                    Pexp_apply
                                    expression (gram_pat.ml[108,3825+21]..[108,3825+22])
                                      Pexp_ident "p" (gram_pat.ml[108,3825+21]..[108,3825+22])
                                    [
                                      <label> ""
                                        expression (gram_pat.ml[108,3825+23]..[108,3825+24])
                                          Pexp_ident "f" (gram_pat.ml[108,3825+23]..[108,3825+24])
                                      <label> ""
                                        expression (gram_pat.ml[108,3825+25]..[108,3825+34])
                                          Pexp_constant Const_string("%a (%a)",None)
                                      <label> ""
                                        expression (gram_pat.ml[108,3825+35]..[108,3825+42])
                                          Pexp_ident "unparse" (gram_pat.ml[108,3825+35]..[108,3825+42])
                                      <label> ""
                                        expression (gram_pat.ml[108,3825+43]..[108,3825+44])
                                          Pexp_ident "x" (gram_pat.ml[108,3825+43]..[108,3825+44])
                                      <label> ""
                                        expression (gram_pat.ml[109,3870+23]..[109,3870+57])
                                          Pexp_apply
                                          expression (gram_pat.ml[109,3870+24]..[109,3870+39])
                                            Pexp_ident "Formatf.pp_list" (gram_pat.ml[109,3870+24]..[109,3870+39])
                                          [
                                            <label> ""
                                              expression (gram_pat.ml[109,3870+40]..[109,3870+47])
                                                Pexp_ident "unparse" (gram_pat.ml[109,3870+40]..[109,3870+47])
                                            <label> "sep"
                                              expression (gram_pat.ml[109,3870+53]..[109,3870+56])
                                                Pexp_constant Const_string(",",None)
                                          ]
                                      <label> ""
                                        expression (gram_pat.ml[109,3870+58]..[109,3870+62])
                                          Pexp_ident "rest" (gram_pat.ml[109,3870+58]..[109,3870+62])
                                    ]
                                <case>
                                  pattern (gram_pat.ml[110,3933+19]..[110,3933+20])
                                    Ppat_any
                                  expression (gram_pat.ml[111,3957+21]..[113,4066+44])
                                    Pexp_sequence
                                    expression (gram_pat.ml[111,3957+22]..[112,4028+36])
                                      Pexp_apply
                                      expression (gram_pat.ml[111,3957+22]..[111,3957+23])
                                        Pexp_ident "p" (gram_pat.ml[111,3957+22]..[111,3957+23])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[111,3957+24]..[111,3957+44])
                                            Pexp_ident "Format.err_formatter" (gram_pat.ml[111,3957+24]..[111,3957+44])
                                        <label> ""
                                          expression (gram_pat.ml[111,3957+45]..[111,3957+70])
                                            Pexp_constant Const_string("impossible pattern %a@.",None)
                                        <label> ""
                                          expression (gram_pat.ml[112,4028+24]..[112,4028+34])
                                            Pexp_ident "pp_print_t" (gram_pat.ml[112,4028+24]..[112,4028+34])
                                        <label> ""
                                          expression (gram_pat.ml[112,4028+35]..[112,4028+36])
                                            Pexp_ident "x" (gram_pat.ml[112,4028+35]..[112,4028+36])
                                      ]
                                    expression (gram_pat.ml[113,4066+22]..[113,4066+43])
                                      Pexp_apply
                                      expression (gram_pat.ml[113,4066+22]..[113,4066+33])
                                        Pexp_ident "invalid_arg" (gram_pat.ml[113,4066+22]..[113,4066+33])
                                      [
                                        <label> ""
                                          expression (gram_pat.ml[113,4066+34]..[113,4066+43])
                                            Pexp_constant Const_string("unparse",None)
                                      ]
                              ]
                        <case>
                          pattern (gram_pat.ml[114,4112+14]..[114,4112+26])
                            Ppat_variant "Com"
                            Some
                              pattern (gram_pat.ml[114,4112+19]..[114,4112+26])
                                Ppat_tuple
                                [
                                  pattern (gram_pat.ml[114,4112+20]..[114,4112+21])
                                    Ppat_any
                                  pattern (gram_pat.ml[114,4112+22]..[114,4112+23])
                                    Ppat_var "a" (gram_pat.ml[114,4112+22]..[114,4112+23])
                                  pattern (gram_pat.ml[114,4112+24]..[114,4112+25])
                                    Ppat_var "b" (gram_pat.ml[114,4112+24]..[114,4112+25])
                                ]
                          expression (gram_pat.ml[114,4112+30]..[114,4112+62])
                            Pexp_apply
                            expression (gram_pat.ml[114,4112+30]..[114,4112+31])
                              Pexp_ident "p" (gram_pat.ml[114,4112+30]..[114,4112+31])
                            [
                              <label> ""
                                expression (gram_pat.ml[114,4112+32]..[114,4112+33])
                                  Pexp_ident "f" (gram_pat.ml[114,4112+32]..[114,4112+33])
                              <label> ""
                                expression (gram_pat.ml[114,4112+34]..[114,4112+42])
                                  Pexp_constant Const_string("%a, %a",None)
                              <label> ""
                                expression (gram_pat.ml[114,4112+43]..[114,4112+50])
                                  Pexp_ident "unparse" (gram_pat.ml[114,4112+43]..[114,4112+50])
                              <label> ""
                                expression (gram_pat.ml[114,4112+51]..[114,4112+52])
                                  Pexp_ident "a" (gram_pat.ml[114,4112+51]..[114,4112+52])
                              <label> ""
                                expression (gram_pat.ml[114,4112+53]..[114,4112+60])
                                  Pexp_ident "unparse" (gram_pat.ml[114,4112+53]..[114,4112+60])
                              <label> ""
                                expression (gram_pat.ml[114,4112+61]..[114,4112+62])
                                  Pexp_ident "b" (gram_pat.ml[114,4112+61]..[114,4112+62])
                            ]
                        <case>
                          pattern (gram_pat.ml[115,4175+14]..[115,4175+28])
                            Ppat_variant "Alias"
                            Some
                              pattern (gram_pat.ml[115,4175+21]..[115,4175+28])
                                Ppat_tuple
                                [
                                  pattern (gram_pat.ml[115,4175+22]..[115,4175+23])
                                    Ppat_any
                                  pattern (gram_pat.ml[115,4175+24]..[115,4175+25])
                                    Ppat_var "p" (gram_pat.ml[115,4175+24]..[115,4175+25])
                                  pattern (gram_pat.ml[115,4175+26]..[115,4175+27])
                                    Ppat_any
                                ]
                          expression (gram_pat.ml[115,4175+32]..[115,4175+43])
                            Pexp_apply
                            expression (gram_pat.ml[115,4175+32]..[115,4175+39])
                              Pexp_ident "unparse" (gram_pat.ml[115,4175+32]..[115,4175+39])
                            [
                              <label> ""
                                expression (gram_pat.ml[115,4175+40]..[115,4175+41])
                                  Pexp_ident "f" (gram_pat.ml[115,4175+40]..[115,4175+41])
                              <label> ""
                                expression (gram_pat.ml[115,4175+42]..[115,4175+43])
                                  Pexp_ident "p" (gram_pat.ml[115,4175+42]..[115,4175+43])
                            ]
                        <case>
                          pattern (gram_pat.ml[116,4219+14]..[116,4219+24])
                            Ppat_variant "Str"
                            Some
                              pattern (gram_pat.ml[116,4219+19]..[116,4219+24])
                                Ppat_tuple
                                [
                                  pattern (gram_pat.ml[116,4219+20]..[116,4219+21])
                                    Ppat_any
                                  pattern (gram_pat.ml[116,4219+22]..[116,4219+23])
                                    Ppat_var "s" (gram_pat.ml[116,4219+22]..[116,4219+23])
                                ]
                          expression (gram_pat.ml[116,4219+28]..[116,4219+38])
                            Pexp_apply
                            expression (gram_pat.ml[116,4219+28]..[116,4219+29])
                              Pexp_ident "p" (gram_pat.ml[116,4219+28]..[116,4219+29])
                            [
                              <label> ""
                                expression (gram_pat.ml[116,4219+30]..[116,4219+31])
                                  Pexp_ident "f" (gram_pat.ml[116,4219+30]..[116,4219+31])
                              <label> ""
                                expression (gram_pat.ml[116,4219+32]..[116,4219+36])
                                  Pexp_constant Const_string("%S",None)
                              <label> ""
                                expression (gram_pat.ml[116,4219+37]..[116,4219+38])
                                  Pexp_ident "s" (gram_pat.ml[116,4219+37]..[116,4219+38])
                            ]
                        <case>
                          pattern (gram_pat.ml[117,4258+14]..[117,4258+20])
                            Ppat_variant "Any"
                            Some
                              pattern (gram_pat.ml[117,4258+19]..[117,4258+20])
                                Ppat_any
                          expression (gram_pat.ml[117,4258+24]..[117,4258+31])
                            Pexp_apply
                            expression (gram_pat.ml[117,4258+24]..[117,4258+25])
                              Pexp_ident "p" (gram_pat.ml[117,4258+24]..[117,4258+25])
                            [
                              <label> ""
                                expression (gram_pat.ml[117,4258+26]..[117,4258+27])
                                  Pexp_ident "f" (gram_pat.ml[117,4258+26]..[117,4258+27])
                              <label> ""
                                expression (gram_pat.ml[117,4258+28]..[117,4258+31])
                                  Pexp_constant Const_string("_",None)
                            ]
                        <case>
                          pattern (gram_pat.ml[118,4290+14]..[118,4290+24])
                            Ppat_variant "Lid"
                            Some
                              pattern (gram_pat.ml[118,4290+19]..[118,4290+24])
                                Ppat_tuple
                                [
                                  pattern (gram_pat.ml[118,4290+20]..[118,4290+21])
                                    Ppat_any
                                  pattern (gram_pat.ml[118,4290+22]..[118,4290+23])
                                    Ppat_var "s" (gram_pat.ml[118,4290+22]..[118,4290+23])
                                ]
                          expression (gram_pat.ml[118,4290+28]..[118,4290+38])
                            Pexp_apply
                            expression (gram_pat.ml[118,4290+28]..[118,4290+29])
                              Pexp_ident "p" (gram_pat.ml[118,4290+28]..[118,4290+29])
                            [
                              <label> ""
                                expression (gram_pat.ml[118,4290+30]..[118,4290+31])
                                  Pexp_ident "f" (gram_pat.ml[118,4290+30]..[118,4290+31])
                              <label> ""
                                expression (gram_pat.ml[118,4290+32]..[118,4290+36])
                                  Pexp_constant Const_string("%s",None)
                              <label> ""
                                expression (gram_pat.ml[118,4290+37]..[118,4290+38])
                                  Pexp_ident "s" (gram_pat.ml[118,4290+37]..[118,4290+38])
                            ]
                        <case>
                          pattern (gram_pat.ml[119,4329+14]..[119,4329+24])
                            Ppat_variant "Ant"
                            Some
                              pattern (gram_pat.ml[119,4329+19]..[119,4329+24])
                                Ppat_tuple
                                [
                                  pattern (gram_pat.ml[119,4329+20]..[119,4329+21])
                                    Ppat_any
                                  pattern (gram_pat.ml[119,4329+22]..[119,4329+23])
                                    Ppat_var "x" (gram_pat.ml[119,4329+22]..[119,4329+23])
                                ]
                          expression (gram_pat.ml[119,4329+28]..[119,4329+43])
                            Pexp_apply
                            expression (gram_pat.ml[119,4329+28]..[119,4329+29])
                              Pexp_ident "p" (gram_pat.ml[119,4329+28]..[119,4329+29])
                            [
                              <label> ""
                                expression (gram_pat.ml[119,4329+30]..[119,4329+31])
                                  Pexp_ident "f" (gram_pat.ml[119,4329+30]..[119,4329+31])
                              <label> ""
                                expression (gram_pat.ml[119,4329+32]..[119,4329+37])
                                  Pexp_constant Const_string("$%s",None)
                              <label> ""
                                expression (gram_pat.ml[119,4329+38]..[119,4329+43])
                                  Pexp_field
                                  expression (gram_pat.ml[119,4329+38]..[119,4329+39])
                                    Pexp_ident "x" (gram_pat.ml[119,4329+38]..[119,4329+39])
                                  "txt" (gram_pat.ml[119,4329+40]..[119,4329+43])
                            ]
                      ]
                ]
          ]
    ]
  structure_item (gram_pat.ml[120,4375+0]..[120,4375+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (gram_pat.ml[120,4375+4]..[120,4375+13])
          Ppat_var "to_string" (gram_pat.ml[120,4375+4]..[120,4375+13])
        expression (gram_pat.ml[120,4375+16]..[120,4375+41])
          Pexp_apply
          expression (gram_pat.ml[120,4375+16]..[120,4375+33])
            Pexp_ident "Formatf.to_string" (gram_pat.ml[120,4375+16]..[120,4375+33])
          [
            <label> ""
              expression (gram_pat.ml[120,4375+34]..[120,4375+41])
                Pexp_ident "unparse" (gram_pat.ml[120,4375+34]..[120,4375+41])
          ]
    ]
]
