[
  structure_item (fEval.ml[1,0+0]..[1,0+58])
    Pstr_value Nonrec
    [
      <def>
        pattern (fEval.ml[1,0+4]..[1,0+7])
          Ppat_var "s2s" (fEval.ml[1,0+4]..[1,0+7])
        expression (fEval.ml[1,0+8]..[1,0+58]) ghost
          Pexp_fun ""
          None
          pattern (fEval.ml[1,0+8]..[1,0+9])
            Ppat_var "s" (fEval.ml[1,0+8]..[1,0+9])
          expression (fEval.ml[1,0+12]..[1,0+58]) ghost
            Pexp_constraint
            expression (fEval.ml[1,0+13]..[1,0+28])
              Pexp_apply
              expression (fEval.ml[1,0+13]..[1,0+26])
                Pexp_ident "Ast2pt.phrase" (fEval.ml[1,0+13]..[1,0+26])
              [
                <label> ""
                  expression (fEval.ml[1,0+27]..[1,0+28])
                    Pexp_ident "s" (fEval.ml[1,0+27]..[1,0+28])
              ]
            core_type (fEval.ml[1,0+31]..[1,0+56])
              Ptyp_constr "Parsetree.toplevel_phrase" (fEval.ml[1,0+31]..[1,0+56])
              []
    ]
  structure_item (fEval.ml[2,59+0]..[4,140+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (fEval.ml[2,59+4]..[2,59+12])
          Ppat_var "eval_ast" (fEval.ml[2,59+4]..[2,59+12])
        expression (fEval.ml[2,59+13]..[4,140+49]) ghost
          Pexp_fun ""
          None
          pattern (fEval.ml[2,59+13]..[2,59+16])
            Ppat_var "fmt" (fEval.ml[2,59+13]..[2,59+16])
          expression (fEval.ml[2,59+17]..[4,140+49]) ghost
            Pexp_fun ""
            None
            pattern (fEval.ml[2,59+17]..[2,59+20])
              Ppat_var "ast" (fEval.ml[2,59+17]..[2,59+20])
            expression (fEval.ml[3,82+2]..[4,140+49])
              Pexp_try
              expression (fEval.ml[3,82+6]..[3,82+57])
                Pexp_apply
                expression (fEval.ml[3,82+6]..[3,82+12])
                  Pexp_ident "ignore" (fEval.ml[3,82+6]..[3,82+12])
                [
                  <label> ""
                    expression (fEval.ml[3,82+13]..[3,82+57])
                      Pexp_apply
                      expression (fEval.ml[3,82+14]..[3,82+36])
                        Pexp_ident "Toploop.execute_phrase" (fEval.ml[3,82+14]..[3,82+36])
                      [
                        <label> ""
                          expression (fEval.ml[3,82+37]..[3,82+42])
                            Pexp_construct "false" (fEval.ml[3,82+37]..[3,82+42])
                            None
                        <label> ""
                          expression (fEval.ml[3,82+43]..[3,82+46])
                            Pexp_ident "fmt" (fEval.ml[3,82+43]..[3,82+46])
                        <label> ""
                          expression (fEval.ml[3,82+47]..[3,82+56])
                            Pexp_apply
                            expression (fEval.ml[3,82+48]..[3,82+51])
                              Pexp_ident "s2s" (fEval.ml[3,82+48]..[3,82+51])
                            [
                              <label> ""
                                expression (fEval.ml[3,82+52]..[3,82+55])
                                  Pexp_ident "ast" (fEval.ml[3,82+52]..[3,82+55])
                            ]
                      ]
                ]
              [
                <case>
                  pattern (fEval.ml[4,140+9]..[4,140+10])
                    Ppat_var "x" (fEval.ml[4,140+9]..[4,140+10])
                  expression (fEval.ml[4,140+14]..[4,140+49])
                    Pexp_sequence
                    expression (fEval.ml[4,140+15]..[4,140+40])
                      Pexp_apply
                      expression (fEval.ml[4,140+15]..[4,140+34])
                        Pexp_ident "Errors.report_error" (fEval.ml[4,140+15]..[4,140+34])
                      [
                        <label> ""
                          expression (fEval.ml[4,140+35]..[4,140+38])
                            Pexp_ident "fmt" (fEval.ml[4,140+35]..[4,140+38])
                        <label> ""
                          expression (fEval.ml[4,140+39]..[4,140+40])
                            Pexp_ident "x" (fEval.ml[4,140+39]..[4,140+40])
                      ]
                    expression (fEval.ml[4,140+42]..[4,140+48])
                      Pexp_apply
                      expression (fEval.ml[4,140+42]..[4,140+46])
                        Pexp_ident "exit" (fEval.ml[4,140+42]..[4,140+46])
                      [
                        <label> ""
                          expression (fEval.ml[4,140+47]..[4,140+48])
                            Pexp_constant Const_int 2
                      ]
              ]
    ]
]
