[
  structure_item (compile_lex.ml[]..[])
    Pstr_open Fresh "Astf" (compile_lex.ml[]..[])
  structure_item (compile_lex.ml[]..[])
    Pstr_open Fresh "Ast_gen" (compile_lex.ml[]..[])
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_ident "Locf." (compile_lex.ml[]..[])
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "output_memory_actions" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_constraint
                pattern (compile_lex.ml[]..[])
                  Ppat_var "mvs" (compile_lex.ml[]..[])
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "list" (compile_lex.ml[]..[])
                  [
                    core_type (compile_lex.ml[]..[])
                      Ptyp_constr "Lexgen.memory_action" (compile_lex.ml[]..[])
                      []
                  ]
              expression (compile_lex.ml[]..[]) 
                Pexp_constraint
                expression (compile_lex.ml[]..[])
                  Pexp_apply
                  expression (compile_lex.ml[]..[])
                    Pexp_ident "List.map" (compile_lex.ml[]..[])
                  [
                    <label> ""
                      expression (compile_lex.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (compile_lex.ml[]..[])
                              Ppat_constraint
                              pattern (compile_lex.ml[]..[])
                                Ppat_var "x" (compile_lex.ml[]..[])
                              core_type (compile_lex.ml[]..[])
                                Ptyp_constr "Lexgen.memory_action" (compile_lex.ml[]..[])
                                []
                            expression (compile_lex.ml[]..[])
                              Pexp_match
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "x" (compile_lex.ml[]..[])
                              [
                                <case>
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_construct "Copy" (compile_lex.ml[]..[])
                                    Some
                                      pattern (compile_lex.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_var "tgt" (compile_lex.ml[]..[])
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_var "src" (compile_lex.ml[]..[])
                                        ]
                                  expression (compile_lex.ml[]..[]) 
                                    Pexp_coerce
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Assign"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "ArrayDot"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Field"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lexbuf",None)
                                                                  ]
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lex_mem",None)
                                                                  ]
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Int"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "tgt" (compile_lex.ml[]..[])
                                                              ]
                                                          ]
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "ArrayDot"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Field"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lexbuf",None)
                                                                  ]
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lex_mem",None)
                                                                  ]
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Int"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "src" (compile_lex.ml[]..[])
                                                              ]
                                                          ]
                                                  ]
                                          ]
                                    None
                                    core_type (compile_lex.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                      []
                                <case>
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_construct "Set" (compile_lex.ml[]..[])
                                    Some
                                      pattern (compile_lex.ml[]..[])
                                        Ppat_var "tgt" (compile_lex.ml[]..[])
                                  expression (compile_lex.ml[]..[]) 
                                    Pexp_coerce
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Assign"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "ArrayDot"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Field"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lexbuf",None)
                                                                  ]
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lex_mem",None)
                                                                  ]
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Int"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_apply
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                                                              [
                                                                <label> ""
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "tgt" (compile_lex.ml[]..[])
                                                              ]
                                                          ]
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Field"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("lexbuf",None)
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("lex_curr_pos",None)
                                                          ]
                                                  ]
                                          ]
                                    None
                                    core_type (compile_lex.ml[]..[])
                                      Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                      []
                              ]
                        ]
                    <label> ""
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "mvs" (compile_lex.ml[]..[])
                  ]
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "list" (compile_lex.ml[]..[])
                  [
                    core_type (compile_lex.ml[]..[])
                      Ptyp_constr "exp" (compile_lex.ml[]..[])
                      []
                  ]
          ]
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "lex_state" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_var "i" (compile_lex.ml[]..[])
              expression (compile_lex.ml[]..[])
                Pexp_apply
                expression (compile_lex.ml[]..[])
                  Pexp_ident "^" (compile_lex.ml[]..[])
                [
                  <label> ""
                    expression (compile_lex.ml[]..[])
                      Pexp_constant Const_string("__ocaml_lex_state",None)
                  <label> ""
                    expression (compile_lex.ml[]..[])
                      Pexp_apply
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                      [
                        <label> ""
                          expression (compile_lex.ml[]..[])
                            Pexp_ident "i" (compile_lex.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "output_moves" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_constraint
                pattern (compile_lex.ml[]..[])
                  Ppat_var "moves" (compile_lex.ml[]..[])
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "array" (compile_lex.ml[]..[])
                  [
                    core_type (compile_lex.ml[]..[])
                      Ptyp_tuple
                      [
                        core_type (compile_lex.ml[]..[])
                          Ptyp_constr "Lexgen.automata_move" (compile_lex.ml[]..[])
                          []
                        core_type (compile_lex.ml[]..[])
                          Ptyp_constr "list" (compile_lex.ml[]..[])
                          [
                            core_type (compile_lex.ml[]..[])
                              Ptyp_constr "Lexgen.memory_action" (compile_lex.ml[]..[])
                              []
                          ]
                      ]
                  ]
              expression (compile_lex.ml[]..[]) 
                Pexp_constraint
                expression (compile_lex.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (compile_lex.ml[]..[])
                        Ppat_var "output_action" (compile_lex.ml[]..[])
                      expression (compile_lex.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (compile_lex.ml[]..[])
                              Ppat_constraint
                              pattern (compile_lex.ml[]..[])
                                Ppat_var "mems" (compile_lex.ml[]..[])
                              core_type (compile_lex.ml[]..[])
                                Ptyp_constr "list" (compile_lex.ml[]..[])
                                [
                                  core_type (compile_lex.ml[]..[])
                                    Ptyp_constr "Lexgen.memory_action" (compile_lex.ml[]..[])
                                    []
                                ]
                            expression (compile_lex.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_constraint
                                    pattern (compile_lex.ml[]..[])
                                      Ppat_var "r" (compile_lex.ml[]..[])
                                    core_type (compile_lex.ml[]..[])
                                      Ptyp_constr "Lexgen.automata_move" (compile_lex.ml[]..[])
                                      []
                                  expression (compile_lex.ml[]..[]) 
                                    Pexp_constraint
                                    expression (compile_lex.ml[]..[])
                                      Pexp_apply
                                      expression (compile_lex.ml[]..[])
                                        Pexp_ident "@" (compile_lex.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_lex.ml[]..[])
                                            Pexp_apply
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "output_memory_actions" (compile_lex.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "mems" (compile_lex.ml[]..[])
                                            ]
                                        <label> ""
                                          expression (compile_lex.ml[]..[])
                                            Pexp_match
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "r" (compile_lex.ml[]..[])
                                            [
                                              <case>
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_construct "Backtrack" (compile_lex.ml[]..[])
                                                  None
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_construct "::" (compile_lex.ml[]..[]) 
                                                  Some
                                                    expression (compile_lex.ml[]..[]) 
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_coerce
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_variant "Assign"
                                                            Some
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "Field"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_tuple
[
  expression (compile_lex.ml[]..[])
    Pexp_ident "_loc" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lexbuf",None)
        ]
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lex_curr_pos",None)
        ]
]
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "Field"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_tuple
[
  expression (compile_lex.ml[]..[])
    Pexp_ident "_loc" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lexbuf",None)
        ]
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lex_last_pos",None)
        ]
]
                                                                ]
                                                          None
                                                          core_type (compile_lex.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                            []
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_construct "::" (compile_lex.ml[]..[]) 
                                                          Some
                                                            expression (compile_lex.ml[]..[]) 
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[]) 
                                                                  Pexp_coerce
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "Field"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_tuple
[
  expression (compile_lex.ml[]..[])
    Pexp_ident "_loc" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lexbuf",None)
        ]
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lex_last_action",None)
        ]
]
                                                                  None
                                                                  core_type (compile_lex.ml[]..[])
                                                                    Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                                    []
                                                                expression (compile_lex.ml[]..[]) 
                                                                  Pexp_construct "[]" (compile_lex.ml[]..[]) 
                                                                  None
                                                              ]
                                                      ]
                                              <case>
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_construct "Goto" (compile_lex.ml[]..[])
                                                  Some
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "n" (compile_lex.ml[]..[])
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_construct "::" (compile_lex.ml[]..[]) 
                                                  Some
                                                    expression (compile_lex.ml[]..[]) 
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_coerce
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "Lid"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_tuple
[
  expression (compile_lex.ml[]..[])
    Pexp_ident "_loc" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[])
    Pexp_apply
    expression (compile_lex.ml[]..[])
      Pexp_ident "lex_state" (compile_lex.ml[]..[])
    [
      <label> ""
        expression (compile_lex.ml[]..[])
          Pexp_ident "n" (compile_lex.ml[]..[])
    ]
]
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "Unit"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                ]
                                                          None
                                                          core_type (compile_lex.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                            []
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_construct "[]" (compile_lex.ml[]..[]) 
                                                          None
                                                      ]
                                            ]
                                      ]
                                    core_type (compile_lex.ml[]..[])
                                      Ptyp_constr "list" (compile_lex.ml[]..[])
                                      [
                                        core_type (compile_lex.ml[]..[])
                                          Ptyp_constr "exp" (compile_lex.ml[]..[])
                                          []
                                      ]
                              ]
                        ]
                  ]
                  expression (compile_lex.ml[]..[])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (compile_lex.ml[]..[])
                          Ppat_var "output_clause" (compile_lex.ml[]..[])
                        expression (compile_lex.ml[]..[]) 
                          Pexp_fun "?pats"
                          None
                          pattern (compile_lex.ml[]..[])
                            Ppat_var "pats" (compile_lex.ml[]..[])
                          expression (compile_lex.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (compile_lex.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_var "mems" (compile_lex.ml[]..[])
                                  core_type (compile_lex.ml[]..[])
                                    Ptyp_constr "list" (compile_lex.ml[]..[])
                                    [
                                      core_type (compile_lex.ml[]..[])
                                        Ptyp_constr "Lexgen.memory_action" (compile_lex.ml[]..[])
                                        []
                                    ]
                                expression (compile_lex.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (compile_lex.ml[]..[])
                                        Ppat_constraint
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_var "r" (compile_lex.ml[]..[])
                                        core_type (compile_lex.ml[]..[])
                                          Ptyp_constr "Lexgen.automata_move" (compile_lex.ml[]..[])
                                          []
                                      expression (compile_lex.ml[]..[])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (compile_lex.ml[]..[])
                                              Ppat_var "pat" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_match
                                              expression (compile_lex.ml[]..[])
                                                Pexp_ident "pats" (compile_lex.ml[]..[])
                                              [
                                                <case>
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_construct "Some" (compile_lex.ml[]..[])
                                                    Some
                                                      pattern (compile_lex.ml[]..[])
                                                        Ppat_var "pats" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "bar_of_list" (compile_lex.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "List.map" (compile_lex.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_function
                                                                [
                                                                  <case>
                                                                    pattern (compile_lex.ml[]..[])
                                                                      Ppat_var "x" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[]) 
                                                                      Pexp_coerce
                                                                      expression (compile_lex.ml[]..[])
Pexp_variant "Int"
Some
  expression (compile_lex.ml[]..[])
    Pexp_tuple
    [
      expression (compile_lex.ml[]..[])
        Pexp_ident "_loc" (compile_lex.ml[]..[])
      expression (compile_lex.ml[]..[])
        Pexp_apply
        expression (compile_lex.ml[]..[])
          Pexp_ident "string_of_int" (compile_lex.ml[]..[])
        [
          <label> ""
            expression (compile_lex.ml[]..[])
              Pexp_ident "x" (compile_lex.ml[]..[])
        ]
    ]
                                                                      None
                                                                      core_type (compile_lex.ml[]..[])
Ptyp_constr "Astf.pat" (compile_lex.ml[]..[])
[]
                                                                ]
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "pats" (compile_lex.ml[]..[])
                                                          ]
                                                    ]
                                                <case>
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_construct "None" (compile_lex.ml[]..[])
                                                    None
                                                  expression (compile_lex.ml[]..[]) 
                                                    Pexp_coerce
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Any"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    None
                                                    core_type (compile_lex.ml[]..[])
                                                      Ptyp_constr "Astf.pat" (compile_lex.ml[]..[])
                                                      []
                                              ]
                                        ]
                                        expression (compile_lex.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (compile_lex.ml[]..[])
                                                Ppat_var "action" (compile_lex.ml[]..[])
                                              expression (compile_lex.ml[]..[])
                                                Pexp_apply
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "seq_sem" (compile_lex.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "output_action" (compile_lex.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "mems" (compile_lex.ml[]..[])
                                                        <label> ""
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "r" (compile_lex.ml[]..[])
                                                      ]
                                                ]
                                          ]
                                          expression (compile_lex.ml[]..[]) 
                                            Pexp_coerce
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Case"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "pat" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "action" (compile_lex.ml[]..[])
                                                      None
                                                      core_type (compile_lex.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                        []
                                                  ]
                                            None
                                            core_type (compile_lex.ml[]..[])
                                              Ptyp_constr "Astf.case" (compile_lex.ml[]..[])
                                              []
                                  ]
                            ]
                    ]
                    expression (compile_lex.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (compile_lex.ml[]..[])
                            Ppat_constraint
                            pattern (compile_lex.ml[]..[])
                              Ppat_var "t" (compile_lex.ml[]..[])
                            core_type (compile_lex.ml[]..[])
                              Ptyp_constr "Hashtbl.t" (compile_lex.ml[]..[])
                              [
                                core_type (compile_lex.ml[]..[])
                                  Ptyp_constr "Lexgen.automata_move" (compile_lex.ml[]..[])
                                  []
                                core_type (compile_lex.ml[]..[])
                                  Ptyp_tuple
                                  [
                                    core_type (compile_lex.ml[]..[])
                                      Ptyp_constr "list" (compile_lex.ml[]..[])
                                      [
                                        core_type (compile_lex.ml[]..[])
                                          Ptyp_constr "Lexgen.memory_action" (compile_lex.ml[]..[])
                                          []
                                      ]
                                    core_type (compile_lex.ml[]..[])
                                      Ptyp_constr "list" (compile_lex.ml[]..[])
                                      [
                                        core_type (compile_lex.ml[]..[])
                                          Ptyp_constr "int" (compile_lex.ml[]..[])
                                          []
                                      ]
                                  ]
                              ]
                          expression (compile_lex.ml[]..[])
                            Pexp_apply
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "Hashtbl.create" (compile_lex.ml[]..[])
                            [
                              <label> ""
                                expression (compile_lex.ml[]..[])
                                  Pexp_constant Const_int 17
                            ]
                      ]
                      expression (compile_lex.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (compile_lex.ml[]..[])
                              Ppat_var "add_move" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_function
                              [
                                <case>
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_var "i" (compile_lex.ml[]..[])
                                  expression (compile_lex.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_tuple
                                          [
                                            pattern (compile_lex.ml[]..[])
                                              Ppat_var "m" (compile_lex.ml[]..[])
                                            pattern (compile_lex.ml[]..[])
                                              Ppat_var "mems" (compile_lex.ml[]..[])
                                          ]
                                        expression (compile_lex.ml[]..[])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (compile_lex.ml[]..[])
                                                Ppat_tuple
                                                [
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_var "mems" (compile_lex.ml[]..[])
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_var "r" (compile_lex.ml[]..[])
                                                ]
                                              expression (compile_lex.ml[]..[])
                                                Pexp_try
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "Hashtbl.find" (compile_lex.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "t" (compile_lex.ml[]..[])
                                                    <label> ""
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "m" (compile_lex.ml[]..[])
                                                  ]
                                                [
                                                  <case>
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_construct "Not_found" (compile_lex.ml[]..[])
                                                      None
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "mems" (compile_lex.ml[]..[])
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_construct "[]" (compile_lex.ml[]..[])
                                                          None
                                                      ]
                                                ]
                                          ]
                                          expression (compile_lex.ml[]..[])
                                            Pexp_apply
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "Hashtbl.replace" (compile_lex.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "t" (compile_lex.ml[]..[])
                                              <label> ""
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "m" (compile_lex.ml[]..[])
                                              <label> ""
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "mems" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_construct "::" (compile_lex.ml[]..[])
                                                      Some
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "i" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "r" (compile_lex.ml[]..[])
                                                          ]
                                                  ]
                                            ]
                                    ]
                              ]
                        ]
                        expression (compile_lex.ml[]..[])
                          Pexp_sequence
                          expression (compile_lex.ml[]..[])
                            Pexp_for Up
                            pattern (compile_lex.ml[]..[])
                              Ppat_var "i" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_int 0
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_int 256
                            expression (compile_lex.ml[]..[])
                              Pexp_apply
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "add_move" (compile_lex.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_lex.ml[]..[])
                                    Pexp_ident "i" (compile_lex.ml[]..[])
                                <label> ""
                                  expression (compile_lex.ml[]..[])
                                    Pexp_apply
                                    expression (compile_lex.ml[]..[]) 
                                      Pexp_ident "Array.get" (compile_lex.ml[]..[]) 
                                    [
                                      <label> ""
                                        expression (compile_lex.ml[]..[])
                                          Pexp_ident "moves" (compile_lex.ml[]..[])
                                      <label> ""
                                        expression (compile_lex.ml[]..[])
                                          Pexp_ident "i" (compile_lex.ml[]..[])
                                    ]
                              ]
                          expression (compile_lex.ml[]..[])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (compile_lex.ml[]..[])
                                  Ppat_var "most_frequent" (compile_lex.ml[]..[])
                                expression (compile_lex.ml[]..[])
                                  Pexp_apply
                                  expression (compile_lex.ml[]..[])
                                    Pexp_ident "ref" (compile_lex.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_lex.ml[]..[])
                                        Pexp_construct "Lexgen.Backtrack" (compile_lex.ml[]..[])
                                        None
                                  ]
                              <def>
                                pattern (compile_lex.ml[]..[])
                                  Ppat_var "most_mems" (compile_lex.ml[]..[])
                                expression (compile_lex.ml[]..[])
                                  Pexp_apply
                                  expression (compile_lex.ml[]..[])
                                    Pexp_ident "ref" (compile_lex.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_lex.ml[]..[])
                                        Pexp_construct "[]" (compile_lex.ml[]..[])
                                        None
                                  ]
                              <def>
                                pattern (compile_lex.ml[]..[])
                                  Ppat_var "size" (compile_lex.ml[]..[])
                                expression (compile_lex.ml[]..[])
                                  Pexp_apply
                                  expression (compile_lex.ml[]..[])
                                    Pexp_ident "ref" (compile_lex.ml[]..[])
                                  [
                                    <label> ""
                                      expression (compile_lex.ml[]..[])
                                        Pexp_constant Const_int 0
                                  ]
                            ]
                            expression (compile_lex.ml[]..[])
                              Pexp_sequence
                              expression (compile_lex.ml[]..[])
                                Pexp_apply
                                expression (compile_lex.ml[]..[])
                                  Pexp_ident "Hashtbl.iter" (compile_lex.ml[]..[])
                                [
                                  <label> ""
                                    expression (compile_lex.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_var "m" (compile_lex.ml[]..[])
                                          expression (compile_lex.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "mems" (compile_lex.ml[]..[])
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "pats" (compile_lex.ml[]..[])
                                                  ]
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (compile_lex.ml[]..[])
                                                        Ppat_var "size_m" (compile_lex.ml[]..[])
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "List.length" (compile_lex.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "pats" (compile_lex.ml[]..[])
                                                        ]
                                                  ]
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ifthenelse
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident ">" (compile_lex.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "size_m" (compile_lex.ml[]..[])
                                                        <label> ""
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "!" (compile_lex.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "size" (compile_lex.ml[]..[])
                                                            ]
                                                      ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_sequence
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident ":=" (compile_lex.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "most_frequent" (compile_lex.ml[]..[])
                                                          <label> ""
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "m" (compile_lex.ml[]..[])
                                                        ]
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_sequence
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident ":=" (compile_lex.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "most_mems" (compile_lex.ml[]..[])
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "mems" (compile_lex.ml[]..[])
                                                          ]
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident ":=" (compile_lex.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "size" (compile_lex.ml[]..[])
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "size_m" (compile_lex.ml[]..[])
                                                          ]
                                                    None
                                            ]
                                      ]
                                  <label> ""
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "t" (compile_lex.ml[]..[])
                                ]
                              expression (compile_lex.ml[]..[])
                                Pexp_apply
                                expression (compile_lex.ml[]..[])
                                  Pexp_ident "@" (compile_lex.ml[]..[])
                                [
                                  <label> ""
                                    expression (compile_lex.ml[]..[])
                                      Pexp_apply
                                      expression (compile_lex.ml[]..[])
                                        Pexp_ident "Hashtbl.fold" (compile_lex.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_lex.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_var "m" (compile_lex.ml[]..[])
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (compile_lex.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (compile_lex.ml[]..[])
                                                            Ppat_var "mems" (compile_lex.ml[]..[])
                                                          pattern (compile_lex.ml[]..[])
                                                            Ppat_var "pats" (compile_lex.ml[]..[])
                                                        ]
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_function
                                                        [
                                                          <case>
                                                            pattern (compile_lex.ml[]..[])
                                                              Ppat_var "acc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ifthenelse
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_apply
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "<>" (compile_lex.ml[]..[])
                                                                [
                                                                  <label> ""
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "m" (compile_lex.ml[]..[])
                                                                  <label> ""
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_apply
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "!" (compile_lex.ml[]..[])
                                                                      [
<label> ""
  expression (compile_lex.ml[]..[])
    Pexp_ident "most_frequent" (compile_lex.ml[]..[])
                                                                      ]
                                                                ]
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_construct "::" (compile_lex.ml[]..[])
                                                                Some
                                                                  expression (compile_lex.ml[]..[]) 
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[])
Pexp_apply
expression (compile_lex.ml[]..[])
  Pexp_ident "output_clause" (compile_lex.ml[]..[])
[
  <label> "pats"
    expression (compile_lex.ml[]..[])
      Pexp_apply
      expression (compile_lex.ml[]..[])
        Pexp_ident "List.rev" (compile_lex.ml[]..[])
      [
        <label> ""
          expression (compile_lex.ml[]..[])
            Pexp_ident "pats" (compile_lex.ml[]..[])
      ]
  <label> ""
    expression (compile_lex.ml[]..[])
      Pexp_ident "mems" (compile_lex.ml[]..[])
  <label> ""
    expression (compile_lex.ml[]..[])
      Pexp_ident "m" (compile_lex.ml[]..[])
]
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "acc" (compile_lex.ml[]..[])
                                                                    ]
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "acc" (compile_lex.ml[]..[])
                                                        ]
                                                  ]
                                            ]
                                        <label> ""
                                          expression (compile_lex.ml[]..[])
                                            Pexp_ident "t" (compile_lex.ml[]..[])
                                        <label> ""
                                          expression (compile_lex.ml[]..[])
                                            Pexp_construct "[]" (compile_lex.ml[]..[])
                                            None
                                      ]
                                  <label> ""
                                    expression (compile_lex.ml[]..[])
                                      Pexp_construct "::" (compile_lex.ml[]..[]) 
                                      Some
                                        expression (compile_lex.ml[]..[]) 
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_apply
                                              expression (compile_lex.ml[]..[])
                                                Pexp_ident "output_clause" (compile_lex.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "!" (compile_lex.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "most_mems" (compile_lex.ml[]..[])
                                                    ]
                                                <label> ""
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "!" (compile_lex.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "most_frequent" (compile_lex.ml[]..[])
                                                    ]
                                              ]
                                            expression (compile_lex.ml[]..[]) 
                                              Pexp_construct "[]" (compile_lex.ml[]..[]) 
                                              None
                                          ]
                                ]
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "list" (compile_lex.ml[]..[])
                  [
                    core_type (compile_lex.ml[]..[])
                      Ptyp_constr "case" (compile_lex.ml[]..[])
                      []
                  ]
          ]
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "output_trans" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_constraint
                pattern (compile_lex.ml[]..[])
                  Ppat_var "i" (compile_lex.ml[]..[])
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "int" (compile_lex.ml[]..[])
                  []
              expression (compile_lex.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_lex.ml[]..[])
                      Ppat_constraint
                      pattern (compile_lex.ml[]..[])
                        Ppat_var "trans" (compile_lex.ml[]..[])
                      core_type (compile_lex.ml[]..[])
                        Ptyp_constr "Lexgen.automata" (compile_lex.ml[]..[])
                        []
                    expression (compile_lex.ml[]..[])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (compile_lex.ml[]..[])
                            Ppat_var "output_tag_actions" (compile_lex.ml[]..[])
                          expression (compile_lex.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (compile_lex.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_var "mvs" (compile_lex.ml[]..[])
                                  core_type (compile_lex.ml[]..[])
                                    Ptyp_constr "list" (compile_lex.ml[]..[])
                                    [
                                      core_type (compile_lex.ml[]..[])
                                        Ptyp_constr "Lexgen.tag_action" (compile_lex.ml[]..[])
                                        []
                                    ]
                                expression (compile_lex.ml[]..[]) 
                                  Pexp_constraint
                                  expression (compile_lex.ml[]..[])
                                    Pexp_apply
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "List.map" (compile_lex.ml[]..[])
                                    [
                                      <label> ""
                                        expression (compile_lex.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (compile_lex.ml[]..[])
                                                Ppat_construct "Lexgen.SetTag" (compile_lex.ml[]..[])
                                                Some
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_tuple
                                                    [
                                                      pattern (compile_lex.ml[]..[])
                                                        Ppat_var "t" (compile_lex.ml[]..[])
                                                      pattern (compile_lex.ml[]..[])
                                                        Ppat_var "m" (compile_lex.ml[]..[])
                                                    ]
                                              expression (compile_lex.ml[]..[]) 
                                                Pexp_coerce
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_variant "Assign"
                                                  Some
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_variant "ArrayDot"
                                                          Some
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Field"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_constant Const_string("lexbuf",None)
      ]
expression (compile_lex.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_constant Const_string("lex_mem",None)
      ]
                                                                      ]
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Int"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_apply
  expression (compile_lex.ml[]..[])
    Pexp_ident "string_of_int" (compile_lex.ml[]..[])
  [
    <label> ""
      expression (compile_lex.ml[]..[])
        Pexp_ident "t" (compile_lex.ml[]..[])
  ]
                                                                      ]
                                                              ]
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_variant "ArrayDot"
                                                          Some
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Field"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_constant Const_string("lexbuf",None)
      ]
expression (compile_lex.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_constant Const_string("lex_mem",None)
      ]
                                                                      ]
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Int"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_apply
  expression (compile_lex.ml[]..[])
    Pexp_ident "string_of_int" (compile_lex.ml[]..[])
  [
    <label> ""
      expression (compile_lex.ml[]..[])
        Pexp_ident "m" (compile_lex.ml[]..[])
  ]
                                                                      ]
                                                              ]
                                                      ]
                                                None
                                                core_type (compile_lex.ml[]..[])
                                                  Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                  []
                                            <case>
                                              pattern (compile_lex.ml[]..[])
                                                Ppat_construct "EraseTag" (compile_lex.ml[]..[])
                                                Some
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_var "t" (compile_lex.ml[]..[])
                                              expression (compile_lex.ml[]..[]) 
                                                Pexp_coerce
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_variant "Assign"
                                                  Some
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_variant "ArrayDot"
                                                          Some
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Field"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_constant Const_string("lexbuf",None)
      ]
expression (compile_lex.ml[]..[])
  Pexp_variant "Lid"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_constant Const_string("lex_mem",None)
      ]
                                                                      ]
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Int"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_apply
  expression (compile_lex.ml[]..[])
    Pexp_ident "string_of_int" (compile_lex.ml[]..[])
  [
    <label> ""
      expression (compile_lex.ml[]..[])
        Pexp_ident "t" (compile_lex.ml[]..[])
  ]
                                                                      ]
                                                              ]
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_variant "Int"
                                                          Some
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_constant Const_string("-1",None)
                                                              ]
                                                      ]
                                                None
                                                core_type (compile_lex.ml[]..[])
                                                  Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                  []
                                          ]
                                      <label> ""
                                        expression (compile_lex.ml[]..[])
                                          Pexp_ident "mvs" (compile_lex.ml[]..[])
                                    ]
                                  core_type (compile_lex.ml[]..[])
                                    Ptyp_constr "list" (compile_lex.ml[]..[])
                                    [
                                      core_type (compile_lex.ml[]..[])
                                        Ptyp_constr "exp" (compile_lex.ml[]..[])
                                        []
                                    ]
                            ]
                      ]
                      expression (compile_lex.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (compile_lex.ml[]..[])
                              Ppat_var "e" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_match
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "trans" (compile_lex.ml[]..[])
                              [
                                <case>
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_construct "Perform" (compile_lex.ml[]..[])
                                    Some
                                      pattern (compile_lex.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_var "n" (compile_lex.ml[]..[])
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_var "mvs" (compile_lex.ml[]..[])
                                        ]
                                  expression (compile_lex.ml[]..[])
                                    Pexp_apply
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "seq_sem" (compile_lex.ml[]..[])
                                    [
                                      <label> ""
                                        expression (compile_lex.ml[]..[])
                                          Pexp_apply
                                          expression (compile_lex.ml[]..[])
                                            Pexp_ident "@" (compile_lex.ml[]..[])
                                          [
                                            <label> ""
                                              expression (compile_lex.ml[]..[])
                                                Pexp_apply
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "output_tag_actions" (compile_lex.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "mvs" (compile_lex.ml[]..[])
                                                ]
                                            <label> ""
                                              expression (compile_lex.ml[]..[])
                                                Pexp_construct "::" (compile_lex.ml[]..[]) 
                                                Some
                                                  expression (compile_lex.ml[]..[]) 
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_lex.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_variant "Int"
                                                          Some
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_apply
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                                                                  [
                                                                    <label> ""
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "n" (compile_lex.ml[]..[])
                                                                  ]
                                                              ]
                                                        None
                                                        core_type (compile_lex.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                          []
                                                      expression (compile_lex.ml[]..[]) 
                                                        Pexp_construct "[]" (compile_lex.ml[]..[]) 
                                                        None
                                                    ]
                                          ]
                                    ]
                                <case>
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_construct "Shift" (compile_lex.ml[]..[])
                                    Some
                                      pattern (compile_lex.ml[]..[])
                                        Ppat_tuple
                                        [
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_var "trans" (compile_lex.ml[]..[])
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_var "move" (compile_lex.ml[]..[])
                                        ]
                                  expression (compile_lex.ml[]..[])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_var "moves" (compile_lex.ml[]..[])
                                        expression (compile_lex.ml[]..[])
                                          Pexp_apply
                                          expression (compile_lex.ml[]..[])
                                            Pexp_ident "bar_of_list" (compile_lex.ml[]..[])
                                          [
                                            <label> ""
                                              expression (compile_lex.ml[]..[])
                                                Pexp_apply
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "output_moves" (compile_lex.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "move" (compile_lex.ml[]..[])
                                                ]
                                          ]
                                    ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_apply
                                      expression (compile_lex.ml[]..[])
                                        Pexp_ident "seq_sem" (compile_lex.ml[]..[])
                                      [
                                        <label> ""
                                          expression (compile_lex.ml[]..[])
                                            Pexp_match
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "trans" (compile_lex.ml[]..[])
                                            [
                                              <case>
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_construct "Remember" (compile_lex.ml[]..[])
                                                  Some
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_tuple
                                                      [
                                                        pattern (compile_lex.ml[]..[])
                                                          Ppat_var "n" (compile_lex.ml[]..[])
                                                        pattern (compile_lex.ml[]..[])
                                                          Ppat_var "mvs" (compile_lex.ml[]..[])
                                                      ]
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "@" (compile_lex.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "output_tag_actions" (compile_lex.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "mvs" (compile_lex.ml[]..[])
                                                        ]
                                                    <label> ""
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_construct "::" (compile_lex.ml[]..[]) 
                                                        Some
                                                          expression (compile_lex.ml[]..[]) 
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_lex.ml[]..[]) 
                                                                Pexp_coerce
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Assign"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_variant "Field"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_variant "Lid"
          Some
            expression (compile_lex.ml[]..[])
              Pexp_tuple
              [
                expression (compile_lex.ml[]..[])
                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                expression (compile_lex.ml[]..[])
                  Pexp_constant Const_string("lexbuf",None)
              ]
        expression (compile_lex.ml[]..[])
          Pexp_variant "Lid"
          Some
            expression (compile_lex.ml[]..[])
              Pexp_tuple
              [
                expression (compile_lex.ml[]..[])
                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                expression (compile_lex.ml[]..[])
                  Pexp_constant Const_string("lex_last_pos",None)
              ]
      ]
expression (compile_lex.ml[]..[])
  Pexp_variant "Field"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_variant "Lid"
          Some
            expression (compile_lex.ml[]..[])
              Pexp_tuple
              [
                expression (compile_lex.ml[]..[])
                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                expression (compile_lex.ml[]..[])
                  Pexp_constant Const_string("lexbuf",None)
              ]
        expression (compile_lex.ml[]..[])
          Pexp_variant "Lid"
          Some
            expression (compile_lex.ml[]..[])
              Pexp_tuple
              [
                expression (compile_lex.ml[]..[])
                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                expression (compile_lex.ml[]..[])
                  Pexp_constant Const_string("lex_curr_pos",None)
              ]
      ]
                                                                      ]
                                                                None
                                                                core_type (compile_lex.ml[]..[])
                                                                  Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                                  []
                                                              expression (compile_lex.ml[]..[]) 
                                                                Pexp_construct "::" (compile_lex.ml[]..[]) 
                                                                Some
                                                                  expression (compile_lex.ml[]..[]) 
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[]) 
Pexp_coerce
expression (compile_lex.ml[]..[])
  Pexp_variant "Assign"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_variant "Field"
          Some
            expression (compile_lex.ml[]..[])
              Pexp_tuple
              [
                expression (compile_lex.ml[]..[])
                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                expression (compile_lex.ml[]..[])
                  Pexp_variant "Lid"
                  Some
                    expression (compile_lex.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_lex.ml[]..[])
                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                        expression (compile_lex.ml[]..[])
                          Pexp_constant Const_string("lexbuf",None)
                      ]
                expression (compile_lex.ml[]..[])
                  Pexp_variant "Lid"
                  Some
                    expression (compile_lex.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_lex.ml[]..[])
                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                        expression (compile_lex.ml[]..[])
                          Pexp_constant Const_string("lex_last_action",None)
                      ]
              ]
        expression (compile_lex.ml[]..[])
          Pexp_variant "Int"
          Some
            expression (compile_lex.ml[]..[])
              Pexp_tuple
              [
                expression (compile_lex.ml[]..[])
                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                expression (compile_lex.ml[]..[])
                  Pexp_apply
                  expression (compile_lex.ml[]..[])
                    Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                  [
                    <label> ""
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "n" (compile_lex.ml[]..[])
                  ]
              ]
      ]
None
core_type (compile_lex.ml[]..[])
  Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
  []
                                                                      expression (compile_lex.ml[]..[]) 
Pexp_construct "::" (compile_lex.ml[]..[]) 
Some
  expression (compile_lex.ml[]..[]) 
    Pexp_tuple
    [
      expression (compile_lex.ml[]..[]) 
        Pexp_coerce
        expression (compile_lex.ml[]..[])
          Pexp_variant "Match"
          Some
            expression (compile_lex.ml[]..[])
              Pexp_tuple
              [
                expression (compile_lex.ml[]..[])
                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                expression (compile_lex.ml[]..[])
                  Pexp_variant "App"
                  Some
                    expression (compile_lex.ml[]..[])
                      Pexp_tuple
                      [
                        expression (compile_lex.ml[]..[])
                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                        expression (compile_lex.ml[]..[])
                          Pexp_variant "Lid"
                          Some
                            expression (compile_lex.ml[]..[])
                              Pexp_tuple
                              [
                                expression (compile_lex.ml[]..[])
                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                expression (compile_lex.ml[]..[])
                                  Pexp_constant Const_string("__ocaml_lex_next_char",None)
                              ]
                        expression (compile_lex.ml[]..[])
                          Pexp_variant "Unit"
                          Some
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                      ]
                expression (compile_lex.ml[]..[])
                  Pexp_ident "moves" (compile_lex.ml[]..[])
              ]
        None
        core_type (compile_lex.ml[]..[])
          Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
          []
      expression (compile_lex.ml[]..[]) 
        Pexp_construct "[]" (compile_lex.ml[]..[]) 
        None
    ]
                                                                    ]
                                                            ]
                                                  ]
                                              <case>
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_construct "No_remember" (compile_lex.ml[]..[])
                                                  None
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_construct "::" (compile_lex.ml[]..[]) 
                                                  Some
                                                    expression (compile_lex.ml[]..[]) 
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_coerce
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_variant "Match"
                                                            Some
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "App"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_tuple
[
  expression (compile_lex.ml[]..[])
    Pexp_ident "_loc" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("__ocaml_lex_next_char",None)
        ]
  expression (compile_lex.ml[]..[])
    Pexp_variant "Unit"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_ident "_loc" (compile_lex.ml[]..[])
]
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "moves" (compile_lex.ml[]..[])
                                                                ]
                                                          None
                                                          core_type (compile_lex.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                            []
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_construct "[]" (compile_lex.ml[]..[]) 
                                                          None
                                                      ]
                                            ]
                                      ]
                              ]
                        ]
                        expression (compile_lex.ml[]..[]) 
                          Pexp_coerce
                          expression (compile_lex.ml[]..[])
                            Pexp_variant "Bind"
                            Some
                              expression (compile_lex.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_lex.ml[]..[])
                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                  expression (compile_lex.ml[]..[])
                                    Pexp_variant "Lid"
                                    Some
                                      expression (compile_lex.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_lex.ml[]..[])
                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                          expression (compile_lex.ml[]..[])
                                            Pexp_apply
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "lex_state" (compile_lex.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "i" (compile_lex.ml[]..[])
                                            ]
                                        ]
                                  expression (compile_lex.ml[]..[])
                                    Pexp_variant "Fun"
                                    Some
                                      expression (compile_lex.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_lex.ml[]..[])
                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                          expression (compile_lex.ml[]..[])
                                            Pexp_variant "Case"
                                            Some
                                              expression (compile_lex.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_variant "Unit"
                                                    Some
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[]) 
                                                    Pexp_coerce
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "e" (compile_lex.ml[]..[])
                                                    None
                                                    core_type (compile_lex.ml[]..[])
                                                      Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                      []
                                                ]
                                        ]
                                ]
                          None
                          core_type (compile_lex.ml[]..[])
                            Ptyp_constr "Astf.bind" (compile_lex.ml[]..[])
                            []
                ]
          ]
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "output_args" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_constraint
                pattern (compile_lex.ml[]..[])
                  Ppat_var "args" (compile_lex.ml[]..[])
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "list" (compile_lex.ml[]..[])
                  [
                    core_type (compile_lex.ml[]..[])
                      Ptyp_constr "string" (compile_lex.ml[]..[])
                      []
                  ]
              expression (compile_lex.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_lex.ml[]..[])
                      Ppat_var "e" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_apply
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "List.fold_right" (compile_lex.ml[]..[])
                      [
                        <label> ""
                          expression (compile_lex.ml[]..[])
                            Pexp_function
                            [
                              <case>
                                pattern (compile_lex.ml[]..[])
                                  Ppat_var "a" (compile_lex.ml[]..[])
                                expression (compile_lex.ml[]..[])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (compile_lex.ml[]..[])
                                        Ppat_var "b" (compile_lex.ml[]..[])
                                      expression (compile_lex.ml[]..[]) 
                                        Pexp_coerce
                                        expression (compile_lex.ml[]..[])
                                          Pexp_variant "Fun"
                                          Some
                                            expression (compile_lex.ml[]..[])
                                              Pexp_tuple
                                              [
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_variant "Case"
                                                  Some
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_variant "Lid"
                                                          Some
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "a" (compile_lex.ml[]..[])
                                                              ]
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_coerce
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "b" (compile_lex.ml[]..[])
                                                          None
                                                          core_type (compile_lex.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                            []
                                                      ]
                                              ]
                                        None
                                        core_type (compile_lex.ml[]..[])
                                          Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                          []
                                  ]
                            ]
                        <label> ""
                          expression (compile_lex.ml[]..[])
                            Pexp_ident "args" (compile_lex.ml[]..[])
                        <label> ""
                          expression (compile_lex.ml[]..[])
                            Pexp_ident "e" (compile_lex.ml[]..[])
                      ]
                ]
          ]
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "output_automata" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_constraint
                pattern (compile_lex.ml[]..[])
                  Ppat_var "transitions" (compile_lex.ml[]..[])
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "array" (compile_lex.ml[]..[])
                  [
                    core_type (compile_lex.ml[]..[])
                      Ptyp_constr "Lexgen.automata" (compile_lex.ml[]..[])
                      []
                  ]
              expression (compile_lex.ml[]..[]) 
                Pexp_constraint
                expression (compile_lex.ml[]..[])
                  Pexp_apply
                  expression (compile_lex.ml[]..[])
                    Pexp_ident "|>" (compile_lex.ml[]..[])
                  [
                    <label> ""
                      expression (compile_lex.ml[]..[])
                        Pexp_apply
                        expression (compile_lex.ml[]..[])
                          Pexp_ident "|>" (compile_lex.ml[]..[])
                        [
                          <label> ""
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "transitions" (compile_lex.ml[]..[])
                          <label> ""
                            expression (compile_lex.ml[]..[])
                              Pexp_apply
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "Array.mapi" (compile_lex.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_lex.ml[]..[])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_var "i" (compile_lex.ml[]..[])
                                        expression (compile_lex.ml[]..[])
                                          Pexp_function
                                          [
                                            <case>
                                              pattern (compile_lex.ml[]..[])
                                                Ppat_var "auto" (compile_lex.ml[]..[])
                                              expression (compile_lex.ml[]..[])
                                                Pexp_apply
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "output_trans" (compile_lex.ml[]..[])
                                                [
                                                  <label> ""
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "i" (compile_lex.ml[]..[])
                                                  <label> ""
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "auto" (compile_lex.ml[]..[])
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                    <label> ""
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "Array.to_list" (compile_lex.ml[]..[])
                  ]
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "list" (compile_lex.ml[]..[])
                  [
                    core_type (compile_lex.ml[]..[])
                      Ptyp_constr "bind" (compile_lex.ml[]..[])
                      []
                  ]
          ]
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "offset" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_var "e" (compile_lex.ml[]..[])
              expression (compile_lex.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_lex.ml[]..[])
                      Ppat_var "i" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_ifthenelse
                      expression (compile_lex.ml[]..[])
                        Pexp_apply
                        expression (compile_lex.ml[]..[])
                          Pexp_ident "=" (compile_lex.ml[]..[])
                        [
                          <label> ""
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "i" (compile_lex.ml[]..[])
                          <label> ""
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_int 0
                        ]
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "e" (compile_lex.ml[]..[])
                      Some
                        expression (compile_lex.ml[]..[]) 
                          Pexp_coerce
                          expression (compile_lex.ml[]..[])
                            Pexp_variant "App"
                            Some
                              expression (compile_lex.ml[]..[])
                                Pexp_tuple
                                [
                                  expression (compile_lex.ml[]..[])
                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                  expression (compile_lex.ml[]..[])
                                    Pexp_variant "App"
                                    Some
                                      expression (compile_lex.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_lex.ml[]..[])
                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                          expression (compile_lex.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (compile_lex.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_constant Const_string("+",None)
                                                ]
                                          expression (compile_lex.ml[]..[]) 
                                            Pexp_coerce
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "e" (compile_lex.ml[]..[])
                                            None
                                            core_type (compile_lex.ml[]..[])
                                              Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                              []
                                        ]
                                  expression (compile_lex.ml[]..[])
                                    Pexp_variant "Int"
                                    Some
                                      expression (compile_lex.ml[]..[])
                                        Pexp_tuple
                                        [
                                          expression (compile_lex.ml[]..[])
                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                          expression (compile_lex.ml[]..[])
                                            Pexp_apply
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "i" (compile_lex.ml[]..[])
                                            ]
                                        ]
                                ]
                          None
                          core_type (compile_lex.ml[]..[])
                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                            []
                ]
          ]
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "output_env" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_constraint
                pattern (compile_lex.ml[]..[])
                  Ppat_var "env" (compile_lex.ml[]..[])
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "Automata_def.t_env" (compile_lex.ml[]..[])
                  []
              expression (compile_lex.ml[]..[]) 
                Pexp_constraint
                expression (compile_lex.ml[]..[])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (compile_lex.ml[]..[])
                        Ppat_var "output_tag_access" (compile_lex.ml[]..[])
                      expression (compile_lex.ml[]..[])
                        Pexp_function
                        [
                          <case>
                            pattern (compile_lex.ml[]..[])
                              Ppat_tuple
                              [
                                pattern (compile_lex.ml[]..[])
                                  Ppat_constraint
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_var "x" (compile_lex.ml[]..[])
                                  core_type (compile_lex.ml[]..[])
                                    Ptyp_constr "Automata_def.tag_base" (compile_lex.ml[]..[])
                                    []
                                pattern (compile_lex.ml[]..[])
                                  Ppat_var "d" (compile_lex.ml[]..[])
                              ]
                            expression (compile_lex.ml[]..[])
                              Pexp_apply
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "offset" (compile_lex.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_lex.ml[]..[])
                                    Pexp_match
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "x" (compile_lex.ml[]..[])
                                    [
                                      <case>
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_construct "Mem" (compile_lex.ml[]..[])
                                          Some
                                            pattern (compile_lex.ml[]..[])
                                              Ppat_var "i" (compile_lex.ml[]..[])
                                        expression (compile_lex.ml[]..[]) 
                                          Pexp_coerce
                                          expression (compile_lex.ml[]..[])
                                            Pexp_variant "ArrayDot"
                                            Some
                                              expression (compile_lex.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_variant "Field"
                                                    Some
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_variant "Lid"
                                                            Some
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_constant Const_string("lexbuf",None)
                                                                ]
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_variant "Lid"
                                                            Some
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_constant Const_string("lex_mem",None)
                                                                ]
                                                        ]
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_variant "Int"
                                                    Some
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_apply
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                                                            [
                                                              <label> ""
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "i" (compile_lex.ml[]..[])
                                                            ]
                                                        ]
                                                ]
                                          None
                                          core_type (compile_lex.ml[]..[])
                                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                            []
                                      <case>
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_construct "Start" (compile_lex.ml[]..[])
                                          None
                                        expression (compile_lex.ml[]..[]) 
                                          Pexp_coerce
                                          expression (compile_lex.ml[]..[])
                                            Pexp_variant "Field"
                                            Some
                                              expression (compile_lex.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_variant "Lid"
                                                    Some
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_constant Const_string("lexbuf",None)
                                                        ]
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_variant "Lid"
                                                    Some
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_constant Const_string("lex_start_pos",None)
                                                        ]
                                                ]
                                          None
                                          core_type (compile_lex.ml[]..[])
                                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                            []
                                      <case>
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_construct "End" (compile_lex.ml[]..[])
                                          None
                                        expression (compile_lex.ml[]..[]) 
                                          Pexp_coerce
                                          expression (compile_lex.ml[]..[])
                                            Pexp_variant "Field"
                                            Some
                                              expression (compile_lex.ml[]..[])
                                                Pexp_tuple
                                                [
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_variant "Lid"
                                                    Some
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_constant Const_string("lexbuf",None)
                                                        ]
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_variant "Lid"
                                                    Some
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_constant Const_string("lex_curr_pos",None)
                                                        ]
                                                ]
                                          None
                                          core_type (compile_lex.ml[]..[])
                                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                            []
                                    ]
                                <label> ""
                                  expression (compile_lex.ml[]..[])
                                    Pexp_ident "d" (compile_lex.ml[]..[])
                              ]
                        ]
                  ]
                  expression (compile_lex.ml[]..[])
                    Pexp_apply
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "|>" (compile_lex.ml[]..[])
                    [
                      <label> ""
                        expression (compile_lex.ml[]..[])
                          Pexp_apply
                          expression (compile_lex.ml[]..[])
                            Pexp_ident "|>" (compile_lex.ml[]..[])
                          [
                            <label> ""
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "env" (compile_lex.ml[]..[])
                            <label> ""
                              expression (compile_lex.ml[]..[])
                                Pexp_apply
                                expression (compile_lex.ml[]..[])
                                  Pexp_ident "List.sort" (compile_lex.ml[]..[])
                                [
                                  <label> ""
                                    expression (compile_lex.ml[]..[])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_var "x" (compile_lex.ml[]..[])
                                          expression (compile_lex.ml[]..[])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_var "y" (compile_lex.ml[]..[])
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_match
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "x" (compile_lex.ml[]..[])
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "y" (compile_lex.ml[]..[])
                                                    ]
                                                  [
                                                    <case>
                                                      pattern (compile_lex.ml[]..[])
                                                        Ppat_tuple
                                                        [
                                                          pattern (compile_lex.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (compile_lex.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (compile_lex.ml[]..[])
                                                                    Ppat_var "p1" (compile_lex.ml[]..[])
                                                                  pattern (compile_lex.ml[]..[])
                                                                    Ppat_any
                                                                ]
                                                              pattern (compile_lex.ml[]..[])
                                                                Ppat_any
                                                            ]
                                                          pattern (compile_lex.ml[]..[])
                                                            Ppat_tuple
                                                            [
                                                              pattern (compile_lex.ml[]..[])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (compile_lex.ml[]..[])
                                                                    Ppat_var "p2" (compile_lex.ml[]..[])
                                                                  pattern (compile_lex.ml[]..[])
                                                                    Ppat_any
                                                                ]
                                                              pattern (compile_lex.ml[]..[])
                                                                Ppat_any
                                                            ]
                                                        ]
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ifthenelse
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "Locf.strictly_before" (compile_lex.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "p1" (compile_lex.ml[]..[])
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "p2" (compile_lex.ml[]..[])
                                                          ]
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_constant Const_int -1
                                                        Some
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_constant Const_int 1
                                                  ]
                                            ]
                                      ]
                                ]
                          ]
                      <label> ""
                        expression (compile_lex.ml[]..[])
                          Pexp_apply
                          expression (compile_lex.ml[]..[])
                            Pexp_ident "List.map" (compile_lex.ml[]..[])
                          [
                            <label> ""
                              expression (compile_lex.ml[]..[])
                                Pexp_function
                                [
                                  <case>
                                    pattern (compile_lex.ml[]..[])
                                      Ppat_tuple
                                      [
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_alias "id" (compile_lex.ml[]..[])
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_tuple
                                            [
                                              pattern (compile_lex.ml[]..[])
                                                Ppat_var "loc" (compile_lex.ml[]..[])
                                              pattern (compile_lex.ml[]..[])
                                                Ppat_any
                                            ]
                                        pattern (compile_lex.ml[]..[])
                                          Ppat_var "v" (compile_lex.ml[]..[])
                                      ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (compile_lex.ml[]..[])
                                            Ppat_constraint
                                            pattern (compile_lex.ml[]..[])
                                              Ppat_var "id" (compile_lex.ml[]..[])
                                            core_type (compile_lex.ml[]..[])
                                              Ptyp_constr "pat" (compile_lex.ml[]..[])
                                              []
                                          expression (compile_lex.ml[]..[])
                                            Pexp_variant "Lid"
                                            Some
                                              expression (compile_lex.ml[]..[])
                                                Pexp_ident "id" (compile_lex.ml[]..[])
                                      ]
                                      expression (compile_lex.ml[]..[])
                                        Pexp_match
                                        expression (compile_lex.ml[]..[]) 
                                          Pexp_constraint
                                          expression (compile_lex.ml[]..[])
                                            Pexp_ident "v" (compile_lex.ml[]..[])
                                          core_type (compile_lex.ml[]..[])
                                            Ptyp_constr "Automata_def.ident_info" (compile_lex.ml[]..[])
                                            []
                                        [
                                          <case>
                                            pattern (compile_lex.ml[]..[])
                                              Ppat_construct "Ident_string" (compile_lex.ml[]..[])
                                              Some
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "o" (compile_lex.ml[]..[])
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "nstart" (compile_lex.ml[]..[])
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "nend" (compile_lex.ml[]..[])
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_var "sub" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ifthenelse
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "o" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_variant "Dot"
                                                        Some
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_variant "Uid"
                                                                Some
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                      expression (compile_lex.ml[]..[])
Pexp_constant Const_string("Lexing",None)
                                                                    ]
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                      expression (compile_lex.ml[]..[])
Pexp_constant Const_string("sub_lexeme_opt",None)
                                                                    ]
                                                            ]
                                                      None
                                                      core_type (compile_lex.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                        []
                                                    Some
                                                      expression (compile_lex.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_variant "Dot"
                                                          Some
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Uid"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_constant Const_string("Lexing",None)
                                                                      ]
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_constant Const_string("sub_lexeme",None)
                                                                      ]
                                                              ]
                                                        None
                                                        core_type (compile_lex.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                          []
                                              ]
                                              expression (compile_lex.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "nstart" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "output_tag_access" (compile_lex.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "nstart" (compile_lex.ml[]..[])
                                                      ]
                                                ]
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (compile_lex.ml[]..[])
                                                        Ppat_var "nend" (compile_lex.ml[]..[])
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_apply
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "output_tag_access" (compile_lex.ml[]..[])
                                                        [
                                                          <label> ""
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "nend" (compile_lex.ml[]..[])
                                                        ]
                                                  ]
                                                  expression (compile_lex.ml[]..[]) 
                                                    Pexp_coerce
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Bind"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[]) 
                                                              Pexp_coerce
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "id" (compile_lex.ml[]..[])
                                                              None
                                                              core_type (compile_lex.ml[]..[])
                                                                Ptyp_constr "Astf.pat" (compile_lex.ml[]..[])
                                                                []
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "App"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "App"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_variant "App"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[]) 
              Pexp_coerce
              expression (compile_lex.ml[]..[])
                Pexp_ident "sub" (compile_lex.ml[]..[])
              None
              core_type (compile_lex.ml[]..[])
                Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                []
            expression (compile_lex.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_constant Const_string("lexbuf",None)
                  ]
          ]
    expression (compile_lex.ml[]..[]) 
      Pexp_coerce
      expression (compile_lex.ml[]..[])
        Pexp_ident "nstart" (compile_lex.ml[]..[])
      None
      core_type (compile_lex.ml[]..[])
        Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
        []
  ]
                                                                    expression (compile_lex.ml[]..[]) 
                                                                      Pexp_coerce
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "nend" (compile_lex.ml[]..[])
                                                                      None
                                                                      core_type (compile_lex.ml[]..[])
Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
[]
                                                                  ]
                                                          ]
                                                    None
                                                    core_type (compile_lex.ml[]..[])
                                                      Ptyp_constr "Astf.bind" (compile_lex.ml[]..[])
                                                      []
                                          <case>
                                            pattern (compile_lex.ml[]..[])
                                              Ppat_construct "Ident_char" (compile_lex.ml[]..[])
                                              Some
                                                pattern (compile_lex.ml[]..[])
                                                  Ppat_tuple
                                                  [
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "o" (compile_lex.ml[]..[])
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "nstart" (compile_lex.ml[]..[])
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_var "sub" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ifthenelse
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "o" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_variant "Dot"
                                                        Some
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_variant "Uid"
                                                                Some
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                      expression (compile_lex.ml[]..[])
Pexp_constant Const_string("Lexing",None)
                                                                    ]
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                      expression (compile_lex.ml[]..[])
Pexp_constant Const_string("sub_lexeme_char_opt",None)
                                                                    ]
                                                            ]
                                                      None
                                                      core_type (compile_lex.ml[]..[])
                                                        Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                        []
                                                    Some
                                                      expression (compile_lex.ml[]..[]) 
                                                        Pexp_coerce
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_variant "Dot"
                                                          Some
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_tuple
                                                              [
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Uid"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_constant Const_string("Lexing",None)
                                                                      ]
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_variant "Lid"
                                                                  Some
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_tuple
                                                                      [
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
expression (compile_lex.ml[]..[])
  Pexp_constant Const_string("sub_lexeme_char",None)
                                                                      ]
                                                              ]
                                                        None
                                                        core_type (compile_lex.ml[]..[])
                                                          Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                          []
                                              ]
                                              expression (compile_lex.ml[]..[])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (compile_lex.ml[]..[])
                                                      Ppat_var "nstart" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_apply
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "output_tag_access" (compile_lex.ml[]..[])
                                                      [
                                                        <label> ""
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "nstart" (compile_lex.ml[]..[])
                                                      ]
                                                ]
                                                expression (compile_lex.ml[]..[]) 
                                                  Pexp_coerce
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_variant "Bind"
                                                    Some
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_tuple
                                                        [
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "loc" (compile_lex.ml[]..[])
                                                          expression (compile_lex.ml[]..[]) 
                                                            Pexp_coerce
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "id" (compile_lex.ml[]..[])
                                                            None
                                                            core_type (compile_lex.ml[]..[])
                                                              Ptyp_constr "Astf.pat" (compile_lex.ml[]..[])
                                                              []
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_variant "App"
                                                            Some
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "loc" (compile_lex.ml[]..[])
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "App"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_tuple
[
  expression (compile_lex.ml[]..[])
    Pexp_ident "loc" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[]) 
    Pexp_coerce
    expression (compile_lex.ml[]..[])
      Pexp_ident "sub" (compile_lex.ml[]..[])
    None
    core_type (compile_lex.ml[]..[])
      Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
      []
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lexbuf",None)
        ]
]
                                                                  expression (compile_lex.ml[]..[]) 
                                                                    Pexp_coerce
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "nstart" (compile_lex.ml[]..[])
                                                                    None
                                                                    core_type (compile_lex.ml[]..[])
                                                                      Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                                      []
                                                                ]
                                                        ]
                                                  None
                                                  core_type (compile_lex.ml[]..[])
                                                    Ptyp_constr "Astf.bind" (compile_lex.ml[]..[])
                                                    []
                                        ]
                                ]
                          ]
                    ]
                core_type (compile_lex.ml[]..[])
                  Ptyp_constr "list" (compile_lex.ml[]..[])
                  [
                    core_type (compile_lex.ml[]..[])
                      Ptyp_constr "bind" (compile_lex.ml[]..[])
                      []
                  ]
          ]
    ]
  structure_item (compile_lex.ml[]..[])
    Pstr_value Nonrec
    [
      <def>
        pattern (compile_lex.ml[]..[])
          Ppat_var "output_entry" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_function
          [
            <case>
              pattern (compile_lex.ml[]..[])
                Ppat_var "_loc" (compile_lex.ml[]..[])
              expression (compile_lex.ml[]..[])
                Pexp_function
                [
                  <case>
                    pattern (compile_lex.ml[]..[])
                      Ppat_tuple
                      [
                        pattern (compile_lex.ml[]..[])
                          Ppat_record Closed
                          [
                            "Lexgen.auto_mem_size" (compile_lex.ml[]..[])
                              pattern (compile_lex.ml[]..[])
                                Ppat_var "auto_mem_size" (compile_lex.ml[]..[])
                            "auto_initial_state" (compile_lex.ml[]..[])
                              pattern (compile_lex.ml[]..[])
                                Ppat_tuple
                                [
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_var "init_num" (compile_lex.ml[]..[])
                                  pattern (compile_lex.ml[]..[])
                                    Ppat_var "init_moves" (compile_lex.ml[]..[])
                                ]
                            "auto_actions" (compile_lex.ml[]..[])
                              pattern (compile_lex.ml[]..[])
                                Ppat_var "auto_actions" (compile_lex.ml[]..[])
                          ]
                        pattern (compile_lex.ml[]..[])
                          Ppat_constraint
                          pattern (compile_lex.ml[]..[])
                            Ppat_var "transitions" (compile_lex.ml[]..[])
                          core_type (compile_lex.ml[]..[])
                            Ptyp_constr "array" (compile_lex.ml[]..[])
                            [
                              core_type (compile_lex.ml[]..[])
                                Ptyp_constr "Lexgen.automata" (compile_lex.ml[]..[])
                                []
                            ]
                      ]
                    expression (compile_lex.ml[]..[]) 
                      Pexp_constraint
                      expression (compile_lex.ml[]..[])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (compile_lex.ml[]..[])
                              Ppat_var "binds" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_apply
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "and_of_list" (compile_lex.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_lex.ml[]..[])
                                    Pexp_construct "::" (compile_lex.ml[]..[])
                                    Some
                                      expression (compile_lex.ml[]..[]) 
                                        Pexp_tuple
                                        [
                                          expression (compile_lex.ml[]..[]) 
                                            Pexp_coerce
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Bind"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("__ocaml_lex_next_char",None)
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Fun"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Case"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "Unit"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "IfThenElse"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_variant "App"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_variant "App"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_string(">=",None)
                          ]
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Field"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_constant Const_string("lexbuf",None)
                                  ]
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_constant Const_string("lex_curr_pos",None)
                                  ]
                          ]
                  ]
            expression (compile_lex.ml[]..[])
              Pexp_variant "Field"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_string("lexbuf",None)
                          ]
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_string("lex_buffer_len",None)
                          ]
                  ]
          ]
    expression (compile_lex.ml[]..[])
      Pexp_variant "Seq"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_variant "IfThenElse"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Field"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_constant Const_string("lexbuf",None)
                                  ]
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_constant Const_string("lex_eof_reached",None)
                                  ]
                          ]
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Int"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_string("256",None)
                          ]
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Seq"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Sem"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Field"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("lexbuf",None)
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("refill_buff",None)
                                                          ]
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Lid"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_constant Const_string("lexbuf",None)
                                                  ]
                                          ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Lid"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_constant Const_string("__ocaml_lex_next_char",None)
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Unit"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                                          ]
                                  ]
                          ]
                  ]
          ]
    expression (compile_lex.ml[]..[])
      Pexp_variant "Seq"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_variant "LetIn"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Negative"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Bind"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Lid"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_constant Const_string("i",None)
                                  ]
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Field"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_constant Const_string("lexbuf",None)
                                          ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_constant Const_string("lex_curr_pos",None)
                                          ]
                                  ]
                          ]
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Seq"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Sem"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Assign"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Field"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("lexbuf",None)
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("lex_curr_pos",None)
                                                          ]
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "App"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "App"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("+",None)
                                                                  ]
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("i",None)
                                                                  ]
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Int"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("1",None)
                                                          ]
                                                  ]
                                          ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "App"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Dot"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Uid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("Char",None)
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("code",None)
                                                          ]
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "StringDot"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Field"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lexbuf",None)
                                                                  ]
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lex_buffer",None)
                                                                  ]
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("i",None)
                                                          ]
                                                  ]
                                          ]
                                  ]
                          ]
                  ]
          ]
  ]
                                                                  ]
                                                          ]
                                                  ]
                                            None
                                            core_type (compile_lex.ml[]..[])
                                              Ptyp_constr "Astf.bind" (compile_lex.ml[]..[])
                                              []
                                          expression (compile_lex.ml[]..[])
                                            Pexp_apply
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "output_automata" (compile_lex.ml[]..[])
                                            [
                                              <label> ""
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_ident "transitions" (compile_lex.ml[]..[])
                                            ]
                                        ]
                              ]
                        ]
                        expression (compile_lex.ml[]..[])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (compile_lex.ml[]..[])
                                Ppat_var "actions" (compile_lex.ml[]..[])
                              expression (compile_lex.ml[]..[])
                                Pexp_apply
                                expression (compile_lex.ml[]..[])
                                  Pexp_ident "seq_sem" (compile_lex.ml[]..[])
                                [
                                  <label> ""
                                    expression (compile_lex.ml[]..[])
                                      Pexp_construct "::" (compile_lex.ml[]..[])
                                      Some
                                        expression (compile_lex.ml[]..[]) 
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[]) 
                                              Pexp_coerce
                                              expression (compile_lex.ml[]..[])
                                                Pexp_variant "LetIn"
                                                Some
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_tuple
                                                    [
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_variant "Negative"
                                                        Some
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_variant "Bind"
                                                        Some
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_variant "Lid"
                                                                Some
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                      expression (compile_lex.ml[]..[])
Pexp_constant Const_string("pos",None)
                                                                    ]
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_variant "Field"
                                                                Some
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                      expression (compile_lex.ml[]..[])
Pexp_variant "Lid"
Some
  expression (compile_lex.ml[]..[])
    Pexp_tuple
    [
      expression (compile_lex.ml[]..[])
        Pexp_ident "_loc" (compile_lex.ml[]..[])
      expression (compile_lex.ml[]..[])
        Pexp_constant Const_string("lexbuf",None)
    ]
                                                                      expression (compile_lex.ml[]..[])
Pexp_variant "Lid"
Some
  expression (compile_lex.ml[]..[])
    Pexp_tuple
    [
      expression (compile_lex.ml[]..[])
        Pexp_ident "_loc" (compile_lex.ml[]..[])
      expression (compile_lex.ml[]..[])
        Pexp_constant Const_string("lex_curr_pos",None)
    ]
                                                                    ]
                                                            ]
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_variant "Seq"
                                                        Some
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_tuple
                                                            [
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_variant "Sem"
                                                                Some
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                      expression (compile_lex.ml[]..[])
Pexp_variant "Assign"
Some
  expression (compile_lex.ml[]..[])
    Pexp_tuple
    [
      expression (compile_lex.ml[]..[])
        Pexp_ident "_loc" (compile_lex.ml[]..[])
      expression (compile_lex.ml[]..[])
        Pexp_variant "Field"
        Some
          expression (compile_lex.ml[]..[])
            Pexp_tuple
            [
              expression (compile_lex.ml[]..[])
                Pexp_ident "_loc" (compile_lex.ml[]..[])
              expression (compile_lex.ml[]..[])
                Pexp_variant "Lid"
                Some
                  expression (compile_lex.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "_loc" (compile_lex.ml[]..[])
                      expression (compile_lex.ml[]..[])
                        Pexp_constant Const_string("lexbuf",None)
                    ]
              expression (compile_lex.ml[]..[])
                Pexp_variant "Lid"
                Some
                  expression (compile_lex.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "_loc" (compile_lex.ml[]..[])
                      expression (compile_lex.ml[]..[])
                        Pexp_constant Const_string("lex_start_pos",None)
                    ]
            ]
      expression (compile_lex.ml[]..[])
        Pexp_variant "Lid"
        Some
          expression (compile_lex.ml[]..[])
            Pexp_tuple
            [
              expression (compile_lex.ml[]..[])
                Pexp_ident "_loc" (compile_lex.ml[]..[])
              expression (compile_lex.ml[]..[])
                Pexp_constant Const_string("pos",None)
            ]
    ]
                                                                      expression (compile_lex.ml[]..[])
Pexp_variant "Sem"
Some
  expression (compile_lex.ml[]..[])
    Pexp_tuple
    [
      expression (compile_lex.ml[]..[])
        Pexp_ident "_loc" (compile_lex.ml[]..[])
      expression (compile_lex.ml[]..[])
        Pexp_variant "Assign"
        Some
          expression (compile_lex.ml[]..[])
            Pexp_tuple
            [
              expression (compile_lex.ml[]..[])
                Pexp_ident "_loc" (compile_lex.ml[]..[])
              expression (compile_lex.ml[]..[])
                Pexp_variant "Field"
                Some
                  expression (compile_lex.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "_loc" (compile_lex.ml[]..[])
                      expression (compile_lex.ml[]..[])
                        Pexp_variant "Lid"
                        Some
                          expression (compile_lex.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "_loc" (compile_lex.ml[]..[])
                              expression (compile_lex.ml[]..[])
                                Pexp_constant Const_string("lexbuf",None)
                            ]
                      expression (compile_lex.ml[]..[])
                        Pexp_variant "Lid"
                        Some
                          expression (compile_lex.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "_loc" (compile_lex.ml[]..[])
                              expression (compile_lex.ml[]..[])
                                Pexp_constant Const_string("lex_last_pos",None)
                            ]
                    ]
              expression (compile_lex.ml[]..[])
                Pexp_variant "Lid"
                Some
                  expression (compile_lex.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "_loc" (compile_lex.ml[]..[])
                      expression (compile_lex.ml[]..[])
                        Pexp_constant Const_string("pos",None)
                    ]
            ]
      expression (compile_lex.ml[]..[])
        Pexp_variant "Assign"
        Some
          expression (compile_lex.ml[]..[])
            Pexp_tuple
            [
              expression (compile_lex.ml[]..[])
                Pexp_ident "_loc" (compile_lex.ml[]..[])
              expression (compile_lex.ml[]..[])
                Pexp_variant "Field"
                Some
                  expression (compile_lex.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "_loc" (compile_lex.ml[]..[])
                      expression (compile_lex.ml[]..[])
                        Pexp_variant "Lid"
                        Some
                          expression (compile_lex.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "_loc" (compile_lex.ml[]..[])
                              expression (compile_lex.ml[]..[])
                                Pexp_constant Const_string("lexbuf",None)
                            ]
                      expression (compile_lex.ml[]..[])
                        Pexp_variant "Lid"
                        Some
                          expression (compile_lex.ml[]..[])
                            Pexp_tuple
                            [
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "_loc" (compile_lex.ml[]..[])
                              expression (compile_lex.ml[]..[])
                                Pexp_constant Const_string("lex_last_action",None)
                            ]
                    ]
              expression (compile_lex.ml[]..[])
                Pexp_variant "Int"
                Some
                  expression (compile_lex.ml[]..[])
                    Pexp_tuple
                    [
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "_loc" (compile_lex.ml[]..[])
                      expression (compile_lex.ml[]..[])
                        Pexp_constant Const_string("-1",None)
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                              None
                                              core_type (compile_lex.ml[]..[])
                                                Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                []
                                            expression (compile_lex.ml[]..[])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (compile_lex.ml[]..[])
                                                    Ppat_var "init" (compile_lex.ml[]..[])
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "output_memory_actions" (compile_lex.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "init_moves" (compile_lex.ml[]..[])
                                                    ]
                                              ]
                                              expression (compile_lex.ml[]..[])
                                                Pexp_ifthenelse
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_apply
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident ">" (compile_lex.ml[]..[])
                                                  [
                                                    <label> ""
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "auto_mem_size" (compile_lex.ml[]..[])
                                                    <label> ""
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_constant Const_int 0
                                                  ]
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_construct "::" (compile_lex.ml[]..[])
                                                  Some
                                                    expression (compile_lex.ml[]..[]) 
                                                      Pexp_tuple
                                                      [
                                                        expression (compile_lex.ml[]..[]) 
                                                          Pexp_coerce
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_variant "Assign"
                                                            Some
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_tuple
                                                                [
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "Field"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_tuple
[
  expression (compile_lex.ml[]..[])
    Pexp_ident "_loc" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lexbuf",None)
        ]
  expression (compile_lex.ml[]..[])
    Pexp_variant "Lid"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("lex_mem",None)
        ]
]
                                                                  expression (compile_lex.ml[]..[])
                                                                    Pexp_variant "App"
                                                                    Some
                                                                      expression (compile_lex.ml[]..[])
Pexp_tuple
[
  expression (compile_lex.ml[]..[])
    Pexp_ident "_loc" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[])
    Pexp_variant "App"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_variant "Dot"
            Some
              expression (compile_lex.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_lex.ml[]..[])
                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                  expression (compile_lex.ml[]..[])
                    Pexp_variant "Uid"
                    Some
                      expression (compile_lex.ml[]..[])
                        Pexp_tuple
                        [
                          expression (compile_lex.ml[]..[])
                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                          expression (compile_lex.ml[]..[])
                            Pexp_constant Const_string("Array",None)
                        ]
                  expression (compile_lex.ml[]..[])
                    Pexp_variant "Lid"
                    Some
                      expression (compile_lex.ml[]..[])
                        Pexp_tuple
                        [
                          expression (compile_lex.ml[]..[])
                            Pexp_ident "_loc" (compile_lex.ml[]..[])
                          expression (compile_lex.ml[]..[])
                            Pexp_constant Const_string("create",None)
                        ]
                ]
          expression (compile_lex.ml[]..[])
            Pexp_variant "Int"
            Some
              expression (compile_lex.ml[]..[])
                Pexp_tuple
                [
                  expression (compile_lex.ml[]..[])
                    Pexp_ident "_loc" (compile_lex.ml[]..[])
                  expression (compile_lex.ml[]..[])
                    Pexp_apply
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                    [
                      <label> ""
                        expression (compile_lex.ml[]..[])
                          Pexp_ident "auto_mem_size" (compile_lex.ml[]..[])
                    ]
                ]
        ]
  expression (compile_lex.ml[]..[])
    Pexp_variant "Int"
    Some
      expression (compile_lex.ml[]..[])
        Pexp_tuple
        [
          expression (compile_lex.ml[]..[])
            Pexp_ident "_loc" (compile_lex.ml[]..[])
          expression (compile_lex.ml[]..[])
            Pexp_constant Const_string("-1",None)
        ]
]
                                                                ]
                                                          None
                                                          core_type (compile_lex.ml[]..[])
                                                            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                                                            []
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "init" (compile_lex.ml[]..[])
                                                      ]
                                                Some
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "init" (compile_lex.ml[]..[])
                                          ]
                                ]
                          ]
                          expression (compile_lex.ml[]..[]) 
                            Pexp_coerce
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Fun"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Case"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Constraint"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("lexbuf",None)
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Dot"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Uid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("Lexing",None)
                                                                  ]
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("lexbuf",None)
                                                                  ]
                                                          ]
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "LetIn"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Positive"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[]) 
                                                      Pexp_coerce
                                                      expression (compile_lex.ml[]..[])
                                                        Pexp_ident "binds" (compile_lex.ml[]..[])
                                                      None
                                                      core_type (compile_lex.ml[]..[])
                                                        Ptyp_constr "Astf.bind" (compile_lex.ml[]..[])
                                                        []
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Seq"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Sem"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[]) 
                                                                      Pexp_coerce
                                                                      expression (compile_lex.ml[]..[])
Pexp_ident "actions" (compile_lex.ml[]..[])
                                                                      None
                                                                      core_type (compile_lex.ml[]..[])
Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
[]
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "LetIn"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_variant "Negative"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_variant "Bind"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_constant Const_string("__ocaml_lex_result",None)
                  ]
            expression (compile_lex.ml[]..[])
              Pexp_variant "App"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_apply
                              expression (compile_lex.ml[]..[])
                                Pexp_ident "lex_state" (compile_lex.ml[]..[])
                              [
                                <label> ""
                                  expression (compile_lex.ml[]..[])
                                    Pexp_ident "init_num" (compile_lex.ml[]..[])
                              ]
                          ]
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Unit"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                  ]
          ]
    expression (compile_lex.ml[]..[])
      Pexp_variant "Seq"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_variant "Sem"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Assign"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Field"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_constant Const_string("lexbuf",None)
                                          ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_constant Const_string("lex_start_p",None)
                                          ]
                                  ]
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Field"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_constant Const_string("lexbuf",None)
                                          ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_constant Const_string("lex_curr_p",None)
                                          ]
                                  ]
                          ]
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Sem"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Assign"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Field"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Lid"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_constant Const_string("lexbuf",None)
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Lid"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_constant Const_string("lex_curr_p",None)
                                                  ]
                                          ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "RecordWith"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "RecBind"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("pos_cnum",None)
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "App"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "App"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_constant Const_string("+",None)
  ]
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "Field"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_constant Const_string("lexbuf",None)
          ]
    expression (compile_lex.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_constant Const_string("lex_abs_pos",None)
          ]
  ]
                                                                  ]
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Field"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_constant Const_string("lexbuf",None)
  ]
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "Lid"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_constant Const_string("lex_curr_pos",None)
  ]
                                                                  ]
                                                          ]
                                                  ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Field"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("lexbuf",None)
                                                          ]
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Lid"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_constant Const_string("lex_curr_p",None)
                                                          ]
                                                  ]
                                          ]
                                  ]
                            expression (compile_lex.ml[]..[])
                              Pexp_variant "Match"
                              Some
                                expression (compile_lex.ml[]..[])
                                  Pexp_tuple
                                  [
                                    expression (compile_lex.ml[]..[])
                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Lid"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_constant Const_string("__ocaml_lex_result",None)
                                          ]
                                    expression (compile_lex.ml[]..[])
                                      Pexp_variant "Bar"
                                      Some
                                        expression (compile_lex.ml[]..[])
                                          Pexp_tuple
                                          [
                                            expression (compile_lex.ml[]..[])
                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                            expression (compile_lex.ml[]..[])
                                              Pexp_apply
                                              expression (compile_lex.ml[]..[])
                                                Pexp_ident "|>" (compile_lex.ml[]..[])
                                              [
                                                <label> ""
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_apply
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "|>" (compile_lex.ml[]..[])
                                                    [
                                                      <label> ""
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "auto_actions" (compile_lex.ml[]..[])
                                                      <label> ""
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_apply
                                                          expression (compile_lex.ml[]..[])
                                                            Pexp_ident "List.map" (compile_lex.ml[]..[])
                                                          [
                                                            <label> ""
                                                              expression (compile_lex.ml[]..[])
                                                                Pexp_function
                                                                [
                                                                  <case>
                                                                    pattern (compile_lex.ml[]..[])
                                                                      Ppat_tuple
                                                                      [
pattern (compile_lex.ml[]..[])
  Ppat_var "num" (compile_lex.ml[]..[])
pattern (compile_lex.ml[]..[])
  Ppat_var "env" (compile_lex.ml[]..[])
pattern (compile_lex.ml[]..[])
  Ppat_var "act" (compile_lex.ml[]..[])
                                                                      ]
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_let Nonrec
                                                                      [
<def>
  pattern (compile_lex.ml[]..[])
    Ppat_var "e" (compile_lex.ml[]..[])
  expression (compile_lex.ml[]..[])
    Pexp_apply
    expression (compile_lex.ml[]..[])
      Pexp_ident "Ast_gen.binds" (compile_lex.ml[]..[])
    [
      <label> ""
        expression (compile_lex.ml[]..[])
          Pexp_apply
          expression (compile_lex.ml[]..[])
            Pexp_ident "output_env" (compile_lex.ml[]..[])
          [
            <label> ""
              expression (compile_lex.ml[]..[])
                Pexp_ident "env" (compile_lex.ml[]..[])
          ]
      <label> ""
        expression (compile_lex.ml[]..[])
          Pexp_ident "act" (compile_lex.ml[]..[])
    ]
                                                                      ]
                                                                      expression (compile_lex.ml[]..[]) 
Pexp_coerce
expression (compile_lex.ml[]..[])
  Pexp_variant "Case"
  Some
    expression (compile_lex.ml[]..[])
      Pexp_tuple
      [
        expression (compile_lex.ml[]..[])
          Pexp_ident "_loc" (compile_lex.ml[]..[])
        expression (compile_lex.ml[]..[])
          Pexp_variant "Int"
          Some
            expression (compile_lex.ml[]..[])
              Pexp_tuple
              [
                expression (compile_lex.ml[]..[])
                  Pexp_ident "_loc" (compile_lex.ml[]..[])
                expression (compile_lex.ml[]..[])
                  Pexp_apply
                  expression (compile_lex.ml[]..[])
                    Pexp_ident "string_of_int" (compile_lex.ml[]..[])
                  [
                    <label> ""
                      expression (compile_lex.ml[]..[])
                        Pexp_ident "num" (compile_lex.ml[]..[])
                  ]
              ]
        expression (compile_lex.ml[]..[]) 
          Pexp_coerce
          expression (compile_lex.ml[]..[])
            Pexp_ident "e" (compile_lex.ml[]..[])
          None
          core_type (compile_lex.ml[]..[])
            Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
            []
      ]
None
core_type (compile_lex.ml[]..[])
  Ptyp_constr "Astf.case" (compile_lex.ml[]..[])
  []
                                                                ]
                                                          ]
                                                    ]
                                                <label> ""
                                                  expression (compile_lex.ml[]..[])
                                                    Pexp_ident "bar_of_list" (compile_lex.ml[]..[])
                                              ]
                                            expression (compile_lex.ml[]..[])
                                              Pexp_variant "Case"
                                              Some
                                                expression (compile_lex.ml[]..[])
                                                  Pexp_tuple
                                                  [
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "Any"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                    expression (compile_lex.ml[]..[])
                                                      Pexp_variant "App"
                                                      Some
                                                        expression (compile_lex.ml[]..[])
                                                          Pexp_tuple
                                                          [
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "Lid"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_constant Const_string("failwith",None)
                                                                  ]
                                                            expression (compile_lex.ml[]..[])
                                                              Pexp_variant "App"
                                                              Some
                                                                expression (compile_lex.ml[]..[])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "App"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_constant Const_string("^",None)
          ]
    expression (compile_lex.ml[]..[])
      Pexp_variant "Lid"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_constant Const_string("__MODULE__",None)
          ]
  ]
                                                                    expression (compile_lex.ml[]..[])
                                                                      Pexp_variant "App"
                                                                      Some
expression (compile_lex.ml[]..[])
  Pexp_tuple
  [
    expression (compile_lex.ml[]..[])
      Pexp_ident "_loc" (compile_lex.ml[]..[])
    expression (compile_lex.ml[]..[])
      Pexp_variant "App"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_variant "Lid"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_constant Const_string("^",None)
                  ]
            expression (compile_lex.ml[]..[])
              Pexp_variant "Str"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_constant Const_string(".",None)
                  ]
          ]
    expression (compile_lex.ml[]..[])
      Pexp_variant "App"
      Some
        expression (compile_lex.ml[]..[])
          Pexp_tuple
          [
            expression (compile_lex.ml[]..[])
              Pexp_ident "_loc" (compile_lex.ml[]..[])
            expression (compile_lex.ml[]..[])
              Pexp_variant "App"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_string("^",None)
                          ]
                    expression (compile_lex.ml[]..[])
                      Pexp_variant "Lid"
                      Some
                        expression (compile_lex.ml[]..[])
                          Pexp_tuple
                          [
                            expression (compile_lex.ml[]..[])
                              Pexp_ident "_loc" (compile_lex.ml[]..[])
                            expression (compile_lex.ml[]..[])
                              Pexp_constant Const_string("__BIND__",None)
                          ]
                  ]
            expression (compile_lex.ml[]..[])
              Pexp_variant "Str"
              Some
                expression (compile_lex.ml[]..[])
                  Pexp_tuple
                  [
                    expression (compile_lex.ml[]..[])
                      Pexp_ident "_loc" (compile_lex.ml[]..[])
                    expression (compile_lex.ml[]..[])
                      Pexp_constant Const_string(" lexing: empty token",None)
                  ]
          ]
  ]
                                                                  ]
                                                          ]
                                                  ]
                                          ]
                                  ]
                          ]
                  ]
          ]
  ]
                                                                  ]
                                                          ]
                                                  ]
                                          ]
                                  ]
                            None
                            core_type (compile_lex.ml[]..[])
                              Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                              []
                      core_type (compile_lex.ml[]..[])
                        Ptyp_constr "Astf.exp" (compile_lex.ml[]..[])
                        []
                ]
          ]
    ]
]
