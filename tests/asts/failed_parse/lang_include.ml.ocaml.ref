[
  structure_item (lang_include.ml[1,0+0]..[127,4999+79])
    Pstr_value Rec
    [
      <def>
        pattern (lang_include.ml[1,0+8]..[1,0+13])
          Ppat_var "token" (lang_include.ml[1,0+8]..[1,0+13])
        expression (lang_include.ml[1,0+13]..[127,4999+79]) ghost
          Pexp_constraint
          expression (lang_include.ml[2,43+2]..[127,4999+79])
            Pexp_function
            [
              <case>
                pattern (lang_include.ml[3,54+4]..[3,54+28])
                  Ppat_constraint
                  pattern (lang_include.ml[3,54+5]..[3,54+11])
                    Ppat_var "lexbuf" (lang_include.ml[3,54+5]..[3,54+11])
                  core_type (lang_include.ml[3,54+14]..[3,54+27])
                    Ptyp_constr "Lexing.lexbuf" (lang_include.ml[3,54+14]..[3,54+27])
                    []
                expression (lang_include.ml[4,86+6]..[127,4999+79])
                  Pexp_let Rec
                  [
                    <def>
                      pattern (lang_include.ml[4,86+14]..[4,86+35])
                        Ppat_var "__ocaml_lex_next_char" (lang_include.ml[4,86+14]..[4,86+35])
                      expression (lang_include.ml[5,124+8]..[15,482+51])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[6,141+10]..[6,141+12])
                              Ppat_construct "()" (lang_include.ml[6,141+10]..[6,141+12])
                              None
                            expression (lang_include.ml[7,157+12]..[15,482+51])
                              Pexp_ifthenelse
                              expression (lang_include.ml[7,157+15]..[7,157+59])
                                Pexp_apply
                                expression (lang_include.ml[7,157+35]..[7,157+37])
                                  Pexp_ident ">=" (lang_include.ml[7,157+35]..[7,157+37])
                                [
                                  <label> ""
                                    expression (lang_include.ml[7,157+15]..[7,157+34])
                                      Pexp_field
                                      expression (lang_include.ml[7,157+15]..[7,157+21])
                                        Pexp_ident "lexbuf" (lang_include.ml[7,157+15]..[7,157+21])
                                      "lex_curr_pos" (lang_include.ml[7,157+22]..[7,157+34])
                                  <label> ""
                                    expression (lang_include.ml[7,157+38]..[7,157+59])
                                      Pexp_field
                                      expression (lang_include.ml[7,157+38]..[7,157+44])
                                        Pexp_ident "lexbuf" (lang_include.ml[7,157+38]..[7,157+44])
                                      "lex_buffer_len" (lang_include.ml[7,157+45]..[7,157+59])
                                ]
                              expression (lang_include.ml[9,234+14]..[11,299+74])
                                Pexp_ifthenelse
                                expression (lang_include.ml[9,234+18]..[9,234+40])
                                  Pexp_field
                                  expression (lang_include.ml[9,234+18]..[9,234+24])
                                    Pexp_ident "lexbuf" (lang_include.ml[9,234+18]..[9,234+24])
                                  "lex_eof_reached" (lang_include.ml[9,234+25]..[9,234+40])
                                expression (lang_include.ml[10,275+20]..[10,275+23])
                                  Pexp_constant Const_int 256
                                Some
                                  expression (lang_include.ml[11,299+20]..[11,299+73])
                                    Pexp_sequence
                                    expression (lang_include.ml[11,299+21]..[11,299+46])
                                      Pexp_apply
                                      expression (lang_include.ml[11,299+21]..[11,299+39])
                                        Pexp_field
                                        expression (lang_include.ml[11,299+21]..[11,299+27])
                                          Pexp_ident "lexbuf" (lang_include.ml[11,299+21]..[11,299+27])
                                        "refill_buff" (lang_include.ml[11,299+28]..[11,299+39])
                                      [
                                        <label> ""
                                          expression (lang_include.ml[11,299+40]..[11,299+46])
                                            Pexp_ident "lexbuf" (lang_include.ml[11,299+40]..[11,299+46])
                                      ]
                                    expression (lang_include.ml[11,299+48]..[11,299+72])
                                      Pexp_apply
                                      expression (lang_include.ml[11,299+48]..[11,299+69])
                                        Pexp_ident "__ocaml_lex_next_char" (lang_include.ml[11,299+48]..[11,299+69])
                                      [
                                        <label> ""
                                          expression (lang_include.ml[11,299+70]..[11,299+72])
                                            Pexp_construct "()" (lang_include.ml[11,299+70]..[11,299+72])
                                            None
                                      ]
                              Some
                                expression (lang_include.ml[13,391+14]..[15,482+51])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lang_include.ml[13,391+19]..[13,391+20])
                                        Ppat_var "i" (lang_include.ml[13,391+19]..[13,391+20])
                                      expression (lang_include.ml[13,391+23]..[13,391+42])
                                        Pexp_field
                                        expression (lang_include.ml[13,391+23]..[13,391+29])
                                          Pexp_ident "lexbuf" (lang_include.ml[13,391+23]..[13,391+29])
                                        "lex_curr_pos" (lang_include.ml[13,391+30]..[13,391+42])
                                  ]
                                  expression (lang_include.ml[14,437+15]..[15,482+50])
                                    Pexp_sequence
                                    expression (lang_include.ml[14,437+15]..[14,437+43])
                                      Pexp_setfield
                                      expression (lang_include.ml[14,437+15]..[14,437+21])
                                        Pexp_ident "lexbuf" (lang_include.ml[14,437+15]..[14,437+21])
                                      "lex_curr_pos" (lang_include.ml[14,437+22]..[14,437+34])
                                      expression (lang_include.ml[14,437+38]..[14,437+43])
                                        Pexp_apply
                                        expression (lang_include.ml[14,437+40]..[14,437+41])
                                          Pexp_ident "+" (lang_include.ml[14,437+40]..[14,437+41])
                                        [
                                          <label> ""
                                            expression (lang_include.ml[14,437+38]..[14,437+39])
                                              Pexp_ident "i" (lang_include.ml[14,437+38]..[14,437+39])
                                          <label> ""
                                            expression (lang_include.ml[14,437+42]..[14,437+43])
                                              Pexp_constant Const_int 1
                                        ]
                                    expression (lang_include.ml[15,482+15]..[15,482+50])
                                      Pexp_apply
                                      expression (lang_include.ml[15,482+15]..[15,482+24])
                                        Pexp_ident "Char.code" (lang_include.ml[15,482+15]..[15,482+24])
                                      [
                                        <label> ""
                                          expression (lang_include.ml[15,482+25]..[15,482+50])
                                            Pexp_apply
                                            expression (lang_include.ml[15,482+26]..[15,482+49]) ghost
                                              Pexp_ident "String.get" (lang_include.ml[15,482+26]..[15,482+49]) ghost
                                            [
                                              <label> ""
                                                expression (lang_include.ml[15,482+26]..[15,482+45])
                                                  Pexp_field
                                                  expression (lang_include.ml[15,482+27]..[15,482+33])
                                                    Pexp_ident "lexbuf" (lang_include.ml[15,482+27]..[15,482+33])
                                                  "lex_buffer" (lang_include.ml[15,482+34]..[15,482+44])
                                              <label> ""
                                                expression (lang_include.ml[15,482+47]..[15,482+48])
                                                  Pexp_ident "i" (lang_include.ml[15,482+47]..[15,482+48])
                                            ]
                                      ]
                        ]
                    <def>
                      pattern (lang_include.ml[16,534+10]..[16,534+28])
                        Ppat_var "__ocaml_lex_state0" (lang_include.ml[16,534+10]..[16,534+28])
                      expression (lang_include.ml[17,565+8]..[26,911+42])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[18,582+10]..[18,582+12])
                              Ppat_construct "()" (lang_include.ml[18,582+10]..[18,582+12])
                              None
                            expression (lang_include.ml[19,598+12]..[26,911+42])
                              Pexp_match
                              expression (lang_include.ml[19,598+19]..[19,598+43])
                                Pexp_apply
                                expression (lang_include.ml[19,598+19]..[19,598+40])
                                  Pexp_ident "__ocaml_lex_next_char" (lang_include.ml[19,598+19]..[19,598+40])
                                [
                                  <label> ""
                                    expression (lang_include.ml[19,598+41]..[19,598+43])
                                      Pexp_construct "()" (lang_include.ml[19,598+41]..[19,598+43])
                                      None
                                ]
                              [
                                <case>
                                  pattern (lang_include.ml[20,647+15]..[20,647+17])
                                    Ppat_constant Const_int 10
                                  expression (lang_include.ml[20,647+21]..[20,647+42])
                                    Pexp_apply
                                    expression (lang_include.ml[20,647+21]..[20,647+39])
                                      Pexp_ident "__ocaml_lex_state6" (lang_include.ml[20,647+21]..[20,647+39])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[20,647+40]..[20,647+42])
                                          Pexp_construct "()" (lang_include.ml[20,647+40]..[20,647+42])
                                          None
                                    ]
                                <case>
                                  pattern (lang_include.ml[21,690+15]..[21,690+17])
                                    Ppat_constant Const_int 34
                                  expression (lang_include.ml[21,690+21]..[21,690+42])
                                    Pexp_apply
                                    expression (lang_include.ml[21,690+21]..[21,690+39])
                                      Pexp_ident "__ocaml_lex_state3" (lang_include.ml[21,690+21]..[21,690+39])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[21,690+40]..[21,690+42])
                                          Pexp_construct "()" (lang_include.ml[21,690+40]..[21,690+42])
                                          None
                                    ]
                                <case>
                                  pattern (lang_include.ml[22,733+15]..[22,733+17])
                                    Ppat_constant Const_int 40
                                  expression (lang_include.ml[22,733+21]..[22,733+42])
                                    Pexp_apply
                                    expression (lang_include.ml[22,733+21]..[22,733+39])
                                      Pexp_ident "__ocaml_lex_state4" (lang_include.ml[22,733+21]..[22,733+39])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[22,733+40]..[22,733+42])
                                          Pexp_construct "()" (lang_include.ml[22,733+40]..[22,733+42])
                                          None
                                    ]
                                <case>
                                  pattern (lang_include.ml[23,776+15]..[23,776+17])
                                    Ppat_constant Const_int 13
                                  expression (lang_include.ml[23,776+21]..[23,776+42])
                                    Pexp_apply
                                    expression (lang_include.ml[23,776+21]..[23,776+39])
                                      Pexp_ident "__ocaml_lex_state5" (lang_include.ml[23,776+21]..[23,776+39])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[23,776+40]..[23,776+42])
                                          Pexp_construct "()" (lang_include.ml[23,776+40]..[23,776+42])
                                          None
                                    ]
                                <case>
                                  pattern (lang_include.ml[24,819+15]..[24,819+22])
                                    Ppat_or
                                    pattern (lang_include.ml[24,819+15]..[24,819+19])
                                      Ppat_or
                                      pattern (lang_include.ml[24,819+15]..[24,819+16])
                                        Ppat_constant Const_int 9
                                      pattern (lang_include.ml[24,819+17]..[24,819+19])
                                        Ppat_constant Const_int 12
                                    pattern (lang_include.ml[24,819+20]..[24,819+22])
                                      Ppat_constant Const_int 32
                                  expression (lang_include.ml[24,819+26]..[24,819+47])
                                    Pexp_apply
                                    expression (lang_include.ml[24,819+26]..[24,819+44])
                                      Pexp_ident "__ocaml_lex_state7" (lang_include.ml[24,819+26]..[24,819+44])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[24,819+45]..[24,819+47])
                                          Pexp_construct "()" (lang_include.ml[24,819+45]..[24,819+47])
                                          None
                                    ]
                                <case>
                                  pattern (lang_include.ml[25,867+15]..[25,867+18])
                                    Ppat_constant Const_int 256
                                  expression (lang_include.ml[25,867+22]..[25,867+43])
                                    Pexp_apply
                                    expression (lang_include.ml[25,867+22]..[25,867+40])
                                      Pexp_ident "__ocaml_lex_state2" (lang_include.ml[25,867+22]..[25,867+40])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[25,867+41]..[25,867+43])
                                          Pexp_construct "()" (lang_include.ml[25,867+41]..[25,867+43])
                                          None
                                    ]
                                <case>
                                  pattern (lang_include.ml[26,911+15]..[26,911+16])
                                    Ppat_any
                                  expression (lang_include.ml[26,911+20]..[26,911+41])
                                    Pexp_apply
                                    expression (lang_include.ml[26,911+20]..[26,911+38])
                                      Pexp_ident "__ocaml_lex_state1" (lang_include.ml[26,911+20]..[26,911+38])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[26,911+39]..[26,911+41])
                                          Pexp_construct "()" (lang_include.ml[26,911+39]..[26,911+41])
                                          None
                                    ]
                              ]
                        ]
                    <def>
                      pattern (lang_include.ml[27,954+10]..[27,954+28])
                        Ppat_var "__ocaml_lex_state1" (lang_include.ml[27,954+10]..[27,954+28])
                      expression (lang_include.ml[27,954+31]..[27,954+49])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[27,954+42]..[27,954+44])
                              Ppat_construct "()" (lang_include.ml[27,954+42]..[27,954+44])
                              None
                            expression (lang_include.ml[27,954+48]..[27,954+49])
                              Pexp_constant Const_int 5
                        ]
                    <def>
                      pattern (lang_include.ml[28,1004+10]..[28,1004+28])
                        Ppat_var "__ocaml_lex_state2" (lang_include.ml[28,1004+10]..[28,1004+28])
                      expression (lang_include.ml[28,1004+31]..[28,1004+49])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[28,1004+42]..[28,1004+44])
                              Ppat_construct "()" (lang_include.ml[28,1004+42]..[28,1004+44])
                              None
                            expression (lang_include.ml[28,1004+48]..[28,1004+49])
                              Pexp_constant Const_int 4
                        ]
                    <def>
                      pattern (lang_include.ml[29,1054+10]..[29,1054+28])
                        Ppat_var "__ocaml_lex_state3" (lang_include.ml[29,1054+10]..[29,1054+28])
                      expression (lang_include.ml[29,1054+31]..[29,1054+49])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[29,1054+42]..[29,1054+44])
                              Ppat_construct "()" (lang_include.ml[29,1054+42]..[29,1054+44])
                              None
                            expression (lang_include.ml[29,1054+48]..[29,1054+49])
                              Pexp_constant Const_int 3
                        ]
                    <def>
                      pattern (lang_include.ml[30,1104+10]..[30,1104+28])
                        Ppat_var "__ocaml_lex_state4" (lang_include.ml[30,1104+10]..[30,1104+28])
                      expression (lang_include.ml[31,1135+8]..[41,1529+44])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[32,1152+10]..[32,1152+12])
                              Ppat_construct "()" (lang_include.ml[32,1152+10]..[32,1152+12])
                              None
                            expression (lang_include.ml[33,1168+12]..[41,1529+44])
                              Pexp_sequence
                              expression (lang_include.ml[33,1168+13]..[33,1168+55])
                                Pexp_setfield
                                expression (lang_include.ml[33,1168+13]..[33,1168+19])
                                  Pexp_ident "lexbuf" (lang_include.ml[33,1168+13]..[33,1168+19])
                                "lex_last_pos" (lang_include.ml[33,1168+20]..[33,1168+32])
                                expression (lang_include.ml[33,1168+36]..[33,1168+55])
                                  Pexp_field
                                  expression (lang_include.ml[33,1168+36]..[33,1168+42])
                                    Pexp_ident "lexbuf" (lang_include.ml[33,1168+36]..[33,1168+42])
                                  "lex_curr_pos" (lang_include.ml[33,1168+43]..[33,1168+55])
                              expression (lang_include.ml[34,1225+13]..[41,1529+43])
                                Pexp_sequence
                                expression (lang_include.ml[34,1225+13]..[34,1225+40])
                                  Pexp_setfield
                                  expression (lang_include.ml[34,1225+13]..[34,1225+19])
                                    Pexp_ident "lexbuf" (lang_include.ml[34,1225+13]..[34,1225+19])
                                  "lex_last_action" (lang_include.ml[34,1225+20]..[34,1225+35])
                                  expression (lang_include.ml[34,1225+39]..[34,1225+40])
                                    Pexp_constant Const_int 5
                                expression (lang_include.ml[35,1267+13]..[41,1529+43])
                                  Pexp_match
                                  expression (lang_include.ml[35,1267+20]..[35,1267+44])
                                    Pexp_apply
                                    expression (lang_include.ml[35,1267+20]..[35,1267+41])
                                      Pexp_ident "__ocaml_lex_next_char" (lang_include.ml[35,1267+20]..[35,1267+41])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[35,1267+42]..[35,1267+44])
                                          Pexp_construct "()" (lang_include.ml[35,1267+42]..[35,1267+44])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lang_include.ml[36,1317+16]..[36,1317+18])
                                        Ppat_constant Const_int 42
                                      expression (lang_include.ml[37,1339+18]..[38,1403+41])
                                        Pexp_sequence
                                        expression (lang_include.ml[37,1339+19]..[37,1339+62])
                                          Pexp_apply
                                          expression (lang_include.ml[37,1339+19]..[37,1339+62]) ghost
                                            Pexp_ident "Array.set" (lang_include.ml[37,1339+19]..[37,1339+62]) ghost
                                          [
                                            <label> ""
                                              expression (lang_include.ml[37,1339+19]..[37,1339+35])
                                                Pexp_field
                                                expression (lang_include.ml[37,1339+20]..[37,1339+26])
                                                  Pexp_ident "lexbuf" (lang_include.ml[37,1339+20]..[37,1339+26])
                                                "lex_mem" (lang_include.ml[37,1339+27]..[37,1339+34])
                                            <label> ""
                                              expression (lang_include.ml[37,1339+37]..[37,1339+38])
                                                Pexp_constant Const_int 1
                                            <label> ""
                                              expression (lang_include.ml[37,1339+43]..[37,1339+62])
                                                Pexp_field
                                                expression (lang_include.ml[37,1339+43]..[37,1339+49])
                                                  Pexp_ident "lexbuf" (lang_include.ml[37,1339+43]..[37,1339+49])
                                                "lex_curr_pos" (lang_include.ml[37,1339+50]..[37,1339+62])
                                          ]
                                        expression (lang_include.ml[38,1403+19]..[38,1403+40])
                                          Pexp_apply
                                          expression (lang_include.ml[38,1403+19]..[38,1403+37])
                                            Pexp_ident "__ocaml_lex_state8" (lang_include.ml[38,1403+19]..[38,1403+37])
                                          [
                                            <label> ""
                                              expression (lang_include.ml[38,1403+38]..[38,1403+40])
                                                Pexp_construct "()" (lang_include.ml[38,1403+38]..[38,1403+40])
                                                None
                                          ]
                                    <case>
                                      pattern (lang_include.ml[39,1445+16]..[39,1445+17])
                                        Ppat_any
                                      expression (lang_include.ml[40,1466+18]..[41,1529+42])
                                        Pexp_sequence
                                        expression (lang_include.ml[40,1466+19]..[40,1466+61])
                                          Pexp_setfield
                                          expression (lang_include.ml[40,1466+19]..[40,1466+25])
                                            Pexp_ident "lexbuf" (lang_include.ml[40,1466+19]..[40,1466+25])
                                          "lex_curr_pos" (lang_include.ml[40,1466+26]..[40,1466+38])
                                          expression (lang_include.ml[40,1466+42]..[40,1466+61])
                                            Pexp_field
                                            expression (lang_include.ml[40,1466+42]..[40,1466+48])
                                              Pexp_ident "lexbuf" (lang_include.ml[40,1466+42]..[40,1466+48])
                                            "lex_last_pos" (lang_include.ml[40,1466+49]..[40,1466+61])
                                        expression (lang_include.ml[41,1529+19]..[41,1529+41])
                                          Pexp_field
                                          expression (lang_include.ml[41,1529+19]..[41,1529+25])
                                            Pexp_ident "lexbuf" (lang_include.ml[41,1529+19]..[41,1529+25])
                                          "lex_last_action" (lang_include.ml[41,1529+26]..[41,1529+41])
                                  ]
                        ]
                    <def>
                      pattern (lang_include.ml[42,1574+10]..[42,1574+28])
                        Ppat_var "__ocaml_lex_state5" (lang_include.ml[42,1574+10]..[42,1574+28])
                      expression (lang_include.ml[43,1605+8]..[51,1915+44])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[44,1622+10]..[44,1622+12])
                              Ppat_construct "()" (lang_include.ml[44,1622+10]..[44,1622+12])
                              None
                            expression (lang_include.ml[45,1638+12]..[51,1915+44])
                              Pexp_sequence
                              expression (lang_include.ml[45,1638+13]..[45,1638+55])
                                Pexp_setfield
                                expression (lang_include.ml[45,1638+13]..[45,1638+19])
                                  Pexp_ident "lexbuf" (lang_include.ml[45,1638+13]..[45,1638+19])
                                "lex_last_pos" (lang_include.ml[45,1638+20]..[45,1638+32])
                                expression (lang_include.ml[45,1638+36]..[45,1638+55])
                                  Pexp_field
                                  expression (lang_include.ml[45,1638+36]..[45,1638+42])
                                    Pexp_ident "lexbuf" (lang_include.ml[45,1638+36]..[45,1638+42])
                                  "lex_curr_pos" (lang_include.ml[45,1638+43]..[45,1638+55])
                              expression (lang_include.ml[46,1695+13]..[51,1915+43])
                                Pexp_sequence
                                expression (lang_include.ml[46,1695+13]..[46,1695+40])
                                  Pexp_setfield
                                  expression (lang_include.ml[46,1695+13]..[46,1695+19])
                                    Pexp_ident "lexbuf" (lang_include.ml[46,1695+13]..[46,1695+19])
                                  "lex_last_action" (lang_include.ml[46,1695+20]..[46,1695+35])
                                  expression (lang_include.ml[46,1695+39]..[46,1695+40])
                                    Pexp_constant Const_int 1
                                expression (lang_include.ml[47,1737+13]..[51,1915+43])
                                  Pexp_match
                                  expression (lang_include.ml[47,1737+20]..[47,1737+44])
                                    Pexp_apply
                                    expression (lang_include.ml[47,1737+20]..[47,1737+41])
                                      Pexp_ident "__ocaml_lex_next_char" (lang_include.ml[47,1737+20]..[47,1737+41])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[47,1737+42]..[47,1737+44])
                                          Pexp_construct "()" (lang_include.ml[47,1737+42]..[47,1737+44])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lang_include.ml[48,1787+16]..[48,1787+18])
                                        Ppat_constant Const_int 10
                                      expression (lang_include.ml[48,1787+22]..[48,1787+43])
                                        Pexp_apply
                                        expression (lang_include.ml[48,1787+22]..[48,1787+40])
                                          Pexp_ident "__ocaml_lex_state6" (lang_include.ml[48,1787+22]..[48,1787+40])
                                        [
                                          <label> ""
                                            expression (lang_include.ml[48,1787+41]..[48,1787+43])
                                              Pexp_construct "()" (lang_include.ml[48,1787+41]..[48,1787+43])
                                              None
                                        ]
                                    <case>
                                      pattern (lang_include.ml[49,1831+16]..[49,1831+17])
                                        Ppat_any
                                      expression (lang_include.ml[50,1852+18]..[51,1915+42])
                                        Pexp_sequence
                                        expression (lang_include.ml[50,1852+19]..[50,1852+61])
                                          Pexp_setfield
                                          expression (lang_include.ml[50,1852+19]..[50,1852+25])
                                            Pexp_ident "lexbuf" (lang_include.ml[50,1852+19]..[50,1852+25])
                                          "lex_curr_pos" (lang_include.ml[50,1852+26]..[50,1852+38])
                                          expression (lang_include.ml[50,1852+42]..[50,1852+61])
                                            Pexp_field
                                            expression (lang_include.ml[50,1852+42]..[50,1852+48])
                                              Pexp_ident "lexbuf" (lang_include.ml[50,1852+42]..[50,1852+48])
                                            "lex_last_pos" (lang_include.ml[50,1852+49]..[50,1852+61])
                                        expression (lang_include.ml[51,1915+19]..[51,1915+41])
                                          Pexp_field
                                          expression (lang_include.ml[51,1915+19]..[51,1915+25])
                                            Pexp_ident "lexbuf" (lang_include.ml[51,1915+19]..[51,1915+25])
                                          "lex_last_action" (lang_include.ml[51,1915+26]..[51,1915+41])
                                  ]
                        ]
                    <def>
                      pattern (lang_include.ml[52,1960+10]..[52,1960+28])
                        Ppat_var "__ocaml_lex_state6" (lang_include.ml[52,1960+10]..[52,1960+28])
                      expression (lang_include.ml[52,1960+31]..[52,1960+49])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[52,1960+42]..[52,1960+44])
                              Ppat_construct "()" (lang_include.ml[52,1960+42]..[52,1960+44])
                              None
                            expression (lang_include.ml[52,1960+48]..[52,1960+49])
                              Pexp_constant Const_int 1
                        ]
                    <def>
                      pattern (lang_include.ml[53,2010+10]..[53,2010+28])
                        Ppat_var "__ocaml_lex_state7" (lang_include.ml[53,2010+10]..[53,2010+28])
                      expression (lang_include.ml[54,2041+8]..[62,2356+44])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[55,2058+10]..[55,2058+12])
                              Ppat_construct "()" (lang_include.ml[55,2058+10]..[55,2058+12])
                              None
                            expression (lang_include.ml[56,2074+12]..[62,2356+44])
                              Pexp_sequence
                              expression (lang_include.ml[56,2074+13]..[56,2074+55])
                                Pexp_setfield
                                expression (lang_include.ml[56,2074+13]..[56,2074+19])
                                  Pexp_ident "lexbuf" (lang_include.ml[56,2074+13]..[56,2074+19])
                                "lex_last_pos" (lang_include.ml[56,2074+20]..[56,2074+32])
                                expression (lang_include.ml[56,2074+36]..[56,2074+55])
                                  Pexp_field
                                  expression (lang_include.ml[56,2074+36]..[56,2074+42])
                                    Pexp_ident "lexbuf" (lang_include.ml[56,2074+36]..[56,2074+42])
                                  "lex_curr_pos" (lang_include.ml[56,2074+43]..[56,2074+55])
                              expression (lang_include.ml[57,2131+13]..[62,2356+43])
                                Pexp_sequence
                                expression (lang_include.ml[57,2131+13]..[57,2131+40])
                                  Pexp_setfield
                                  expression (lang_include.ml[57,2131+13]..[57,2131+19])
                                    Pexp_ident "lexbuf" (lang_include.ml[57,2131+13]..[57,2131+19])
                                  "lex_last_action" (lang_include.ml[57,2131+20]..[57,2131+35])
                                  expression (lang_include.ml[57,2131+39]..[57,2131+40])
                                    Pexp_constant Const_int 0
                                expression (lang_include.ml[58,2173+13]..[62,2356+43])
                                  Pexp_match
                                  expression (lang_include.ml[58,2173+20]..[58,2173+44])
                                    Pexp_apply
                                    expression (lang_include.ml[58,2173+20]..[58,2173+41])
                                      Pexp_ident "__ocaml_lex_next_char" (lang_include.ml[58,2173+20]..[58,2173+41])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[58,2173+42]..[58,2173+44])
                                          Pexp_construct "()" (lang_include.ml[58,2173+42]..[58,2173+44])
                                          None
                                    ]
                                  [
                                    <case>
                                      pattern (lang_include.ml[59,2223+16]..[59,2223+23])
                                        Ppat_or
                                        pattern (lang_include.ml[59,2223+16]..[59,2223+20])
                                          Ppat_or
                                          pattern (lang_include.ml[59,2223+16]..[59,2223+17])
                                            Ppat_constant Const_int 9
                                          pattern (lang_include.ml[59,2223+18]..[59,2223+20])
                                            Ppat_constant Const_int 12
                                        pattern (lang_include.ml[59,2223+21]..[59,2223+23])
                                          Ppat_constant Const_int 32
                                      expression (lang_include.ml[59,2223+27]..[59,2223+48])
                                        Pexp_apply
                                        expression (lang_include.ml[59,2223+27]..[59,2223+45])
                                          Pexp_ident "__ocaml_lex_state7" (lang_include.ml[59,2223+27]..[59,2223+45])
                                        [
                                          <label> ""
                                            expression (lang_include.ml[59,2223+46]..[59,2223+48])
                                              Pexp_construct "()" (lang_include.ml[59,2223+46]..[59,2223+48])
                                              None
                                        ]
                                    <case>
                                      pattern (lang_include.ml[60,2272+16]..[60,2272+17])
                                        Ppat_any
                                      expression (lang_include.ml[61,2293+18]..[62,2356+42])
                                        Pexp_sequence
                                        expression (lang_include.ml[61,2293+19]..[61,2293+61])
                                          Pexp_setfield
                                          expression (lang_include.ml[61,2293+19]..[61,2293+25])
                                            Pexp_ident "lexbuf" (lang_include.ml[61,2293+19]..[61,2293+25])
                                          "lex_curr_pos" (lang_include.ml[61,2293+26]..[61,2293+38])
                                          expression (lang_include.ml[61,2293+42]..[61,2293+61])
                                            Pexp_field
                                            expression (lang_include.ml[61,2293+42]..[61,2293+48])
                                              Pexp_ident "lexbuf" (lang_include.ml[61,2293+42]..[61,2293+48])
                                            "lex_last_pos" (lang_include.ml[61,2293+49]..[61,2293+61])
                                        expression (lang_include.ml[62,2356+19]..[62,2356+41])
                                          Pexp_field
                                          expression (lang_include.ml[62,2356+19]..[62,2356+25])
                                            Pexp_ident "lexbuf" (lang_include.ml[62,2356+19]..[62,2356+25])
                                          "lex_last_action" (lang_include.ml[62,2356+26]..[62,2356+41])
                                  ]
                        ]
                    <def>
                      pattern (lang_include.ml[63,2401+10]..[63,2401+28])
                        Ppat_var "__ocaml_lex_state8" (lang_include.ml[63,2401+10]..[63,2401+28])
                      expression (lang_include.ml[64,2432+8]..[73,2785+44])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[65,2449+10]..[65,2449+12])
                              Ppat_construct "()" (lang_include.ml[65,2449+10]..[65,2449+12])
                              None
                            expression (lang_include.ml[66,2465+12]..[73,2785+44])
                              Pexp_sequence
                              expression (lang_include.ml[66,2465+13]..[66,2465+41])
                                Pexp_apply
                                expression (lang_include.ml[66,2465+13]..[66,2465+41]) ghost
                                  Pexp_ident "Array.set" (lang_include.ml[66,2465+13]..[66,2465+41]) ghost
                                [
                                  <label> ""
                                    expression (lang_include.ml[66,2465+13]..[66,2465+29])
                                      Pexp_field
                                      expression (lang_include.ml[66,2465+14]..[66,2465+20])
                                        Pexp_ident "lexbuf" (lang_include.ml[66,2465+14]..[66,2465+20])
                                      "lex_mem" (lang_include.ml[66,2465+21]..[66,2465+28])
                                  <label> ""
                                    expression (lang_include.ml[66,2465+31]..[66,2465+32])
                                      Pexp_constant Const_int 0
                                  <label> ""
                                    expression (lang_include.ml[66,2465+37]..[66,2465+41])
                                      Pexp_constant Const_int -1
                                ]
                              expression (lang_include.ml[67,2508+13]..[73,2785+43])
                                Pexp_sequence
                                expression (lang_include.ml[67,2508+13]..[67,2508+55])
                                  Pexp_setfield
                                  expression (lang_include.ml[67,2508+13]..[67,2508+19])
                                    Pexp_ident "lexbuf" (lang_include.ml[67,2508+13]..[67,2508+19])
                                  "lex_last_pos" (lang_include.ml[67,2508+20]..[67,2508+32])
                                  expression (lang_include.ml[67,2508+36]..[67,2508+55])
                                    Pexp_field
                                    expression (lang_include.ml[67,2508+36]..[67,2508+42])
                                      Pexp_ident "lexbuf" (lang_include.ml[67,2508+36]..[67,2508+42])
                                    "lex_curr_pos" (lang_include.ml[67,2508+43]..[67,2508+55])
                                expression (lang_include.ml[68,2565+13]..[73,2785+43])
                                  Pexp_sequence
                                  expression (lang_include.ml[68,2565+13]..[68,2565+40])
                                    Pexp_setfield
                                    expression (lang_include.ml[68,2565+13]..[68,2565+19])
                                      Pexp_ident "lexbuf" (lang_include.ml[68,2565+13]..[68,2565+19])
                                    "lex_last_action" (lang_include.ml[68,2565+20]..[68,2565+35])
                                    expression (lang_include.ml[68,2565+39]..[68,2565+40])
                                      Pexp_constant Const_int 2
                                  expression (lang_include.ml[69,2607+13]..[73,2785+43])
                                    Pexp_match
                                    expression (lang_include.ml[69,2607+20]..[69,2607+44])
                                      Pexp_apply
                                      expression (lang_include.ml[69,2607+20]..[69,2607+41])
                                        Pexp_ident "__ocaml_lex_next_char" (lang_include.ml[69,2607+20]..[69,2607+41])
                                      [
                                        <label> ""
                                          expression (lang_include.ml[69,2607+42]..[69,2607+44])
                                            Pexp_construct "()" (lang_include.ml[69,2607+42]..[69,2607+44])
                                            None
                                      ]
                                    [
                                      <case>
                                        pattern (lang_include.ml[70,2657+16]..[70,2657+18])
                                          Ppat_constant Const_int 41
                                        expression (lang_include.ml[70,2657+22]..[70,2657+43])
                                          Pexp_apply
                                          expression (lang_include.ml[70,2657+22]..[70,2657+40])
                                            Pexp_ident "__ocaml_lex_state9" (lang_include.ml[70,2657+22]..[70,2657+40])
                                          [
                                            <label> ""
                                              expression (lang_include.ml[70,2657+41]..[70,2657+43])
                                                Pexp_construct "()" (lang_include.ml[70,2657+41]..[70,2657+43])
                                                None
                                          ]
                                      <case>
                                        pattern (lang_include.ml[71,2701+16]..[71,2701+17])
                                          Ppat_any
                                        expression (lang_include.ml[72,2722+18]..[73,2785+42])
                                          Pexp_sequence
                                          expression (lang_include.ml[72,2722+19]..[72,2722+61])
                                            Pexp_setfield
                                            expression (lang_include.ml[72,2722+19]..[72,2722+25])
                                              Pexp_ident "lexbuf" (lang_include.ml[72,2722+19]..[72,2722+25])
                                            "lex_curr_pos" (lang_include.ml[72,2722+26]..[72,2722+38])
                                            expression (lang_include.ml[72,2722+42]..[72,2722+61])
                                              Pexp_field
                                              expression (lang_include.ml[72,2722+42]..[72,2722+48])
                                                Pexp_ident "lexbuf" (lang_include.ml[72,2722+42]..[72,2722+48])
                                              "lex_last_pos" (lang_include.ml[72,2722+49]..[72,2722+61])
                                          expression (lang_include.ml[73,2785+19]..[73,2785+41])
                                            Pexp_field
                                            expression (lang_include.ml[73,2785+19]..[73,2785+25])
                                              Pexp_ident "lexbuf" (lang_include.ml[73,2785+19]..[73,2785+25])
                                            "lex_last_action" (lang_include.ml[73,2785+26]..[73,2785+41])
                                    ]
                        ]
                    <def>
                      pattern (lang_include.ml[74,2830+10]..[74,2830+28])
                        Ppat_var "__ocaml_lex_state9" (lang_include.ml[74,2830+10]..[74,2830+28])
                      expression (lang_include.ml[75,2861+8]..[75,2861+74])
                        Pexp_function
                        [
                          <case>
                            pattern (lang_include.ml[75,2861+19]..[75,2861+21])
                              Ppat_construct "()" (lang_include.ml[75,2861+19]..[75,2861+21])
                              None
                            expression (lang_include.ml[75,2861+25]..[75,2861+74])
                              Pexp_sequence
                              expression (lang_include.ml[75,2861+26]..[75,2861+70])
                                Pexp_apply
                                expression (lang_include.ml[75,2861+26]..[75,2861+70]) ghost
                                  Pexp_ident "Array.set" (lang_include.ml[75,2861+26]..[75,2861+70]) ghost
                                [
                                  <label> ""
                                    expression (lang_include.ml[75,2861+26]..[75,2861+42])
                                      Pexp_field
                                      expression (lang_include.ml[75,2861+27]..[75,2861+33])
                                        Pexp_ident "lexbuf" (lang_include.ml[75,2861+27]..[75,2861+33])
                                      "lex_mem" (lang_include.ml[75,2861+34]..[75,2861+41])
                                  <label> ""
                                    expression (lang_include.ml[75,2861+44]..[75,2861+45])
                                      Pexp_constant Const_int 0
                                  <label> ""
                                    expression (lang_include.ml[75,2861+50]..[75,2861+70])
                                      Pexp_apply
                                      expression (lang_include.ml[75,2861+50]..[75,2861+70]) ghost
                                        Pexp_ident "Array.get" (lang_include.ml[75,2861+50]..[75,2861+70]) ghost
                                      [
                                        <label> ""
                                          expression (lang_include.ml[75,2861+50]..[75,2861+66])
                                            Pexp_field
                                            expression (lang_include.ml[75,2861+51]..[75,2861+57])
                                              Pexp_ident "lexbuf" (lang_include.ml[75,2861+51]..[75,2861+57])
                                            "lex_mem" (lang_include.ml[75,2861+58]..[75,2861+65])
                                        <label> ""
                                          expression (lang_include.ml[75,2861+68]..[75,2861+69])
                                            Pexp_constant Const_int 1
                                      ]
                                ]
                              expression (lang_include.ml[75,2861+72]..[75,2861+73])
                                Pexp_constant Const_int 2
                        ]
                  ]
                  expression (lang_include.ml[76,2939+6]..[127,4999+79])
                    Pexp_sequence
                    expression (lang_include.ml[76,2939+7]..[80,3098+46])
                      Pexp_sequence
                      expression (lang_include.ml[76,2939+8]..[79,3056+40])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lang_include.ml[76,2939+13]..[76,2939+16])
                              Ppat_var "pos" (lang_include.ml[76,2939+13]..[76,2939+16])
                            expression (lang_include.ml[76,2939+19]..[76,2939+38])
                              Pexp_field
                              expression (lang_include.ml[76,2939+19]..[76,2939+25])
                                Pexp_ident "lexbuf" (lang_include.ml[76,2939+19]..[76,2939+25])
                              "lex_curr_pos" (lang_include.ml[76,2939+26]..[76,2939+38])
                        ]
                        expression (lang_include.ml[77,2981+9]..[79,3056+39])
                          Pexp_sequence
                          expression (lang_include.ml[77,2981+9]..[77,2981+36])
                            Pexp_setfield
                            expression (lang_include.ml[77,2981+9]..[77,2981+15])
                              Pexp_ident "lexbuf" (lang_include.ml[77,2981+9]..[77,2981+15])
                            "lex_start_pos" (lang_include.ml[77,2981+16]..[77,2981+29])
                            expression (lang_include.ml[77,2981+33]..[77,2981+36])
                              Pexp_ident "pos" (lang_include.ml[77,2981+33]..[77,2981+36])
                          expression (lang_include.ml[78,3019+9]..[79,3056+39])
                            Pexp_sequence
                            expression (lang_include.ml[78,3019+9]..[78,3019+35])
                              Pexp_setfield
                              expression (lang_include.ml[78,3019+9]..[78,3019+15])
                                Pexp_ident "lexbuf" (lang_include.ml[78,3019+9]..[78,3019+15])
                              "lex_last_pos" (lang_include.ml[78,3019+16]..[78,3019+28])
                              expression (lang_include.ml[78,3019+32]..[78,3019+35])
                                Pexp_ident "pos" (lang_include.ml[78,3019+32]..[78,3019+35])
                            expression (lang_include.ml[79,3056+9]..[79,3056+39])
                              Pexp_setfield
                              expression (lang_include.ml[79,3056+9]..[79,3056+15])
                                Pexp_ident "lexbuf" (lang_include.ml[79,3056+9]..[79,3056+15])
                              "lex_last_action" (lang_include.ml[79,3056+16]..[79,3056+31])
                              expression (lang_include.ml[79,3056+35]..[79,3056+39])
                                Pexp_constant Const_int -1
                      expression (lang_include.ml[80,3098+8]..[80,3098+45])
                        Pexp_setfield
                        expression (lang_include.ml[80,3098+8]..[80,3098+14])
                          Pexp_ident "lexbuf" (lang_include.ml[80,3098+8]..[80,3098+14])
                        "lex_mem" (lang_include.ml[80,3098+15]..[80,3098+22])
                        expression (lang_include.ml[80,3098+26]..[80,3098+45])
                          Pexp_apply
                          expression (lang_include.ml[80,3098+26]..[80,3098+38])
                            Pexp_ident "Array.create" (lang_include.ml[80,3098+26]..[80,3098+38])
                          [
                            <label> ""
                              expression (lang_include.ml[80,3098+39]..[80,3098+40])
                                Pexp_constant Const_int 2
                            <label> ""
                              expression (lang_include.ml[80,3098+41]..[80,3098+45])
                                Pexp_constant Const_int -1
                          ]
                    expression (lang_include.ml[81,3146+7]..[127,4999+78])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lang_include.ml[81,3146+12]..[81,3146+30])
                            Ppat_var "__ocaml_lex_result" (lang_include.ml[81,3146+12]..[81,3146+30])
                          expression (lang_include.ml[81,3146+33]..[81,3146+54])
                            Pexp_apply
                            expression (lang_include.ml[81,3146+33]..[81,3146+51])
                              Pexp_ident "__ocaml_lex_state0" (lang_include.ml[81,3146+33]..[81,3146+51])
                            [
                              <label> ""
                                expression (lang_include.ml[81,3146+52]..[81,3146+54])
                                  Pexp_construct "()" (lang_include.ml[81,3146+52]..[81,3146+54])
                                  None
                            ]
                      ]
                      expression (lang_include.ml[82,3204+8]..[127,4999+77])
                        Pexp_sequence
                        expression (lang_include.ml[82,3204+8]..[82,3204+47])
                          Pexp_setfield
                          expression (lang_include.ml[82,3204+8]..[82,3204+14])
                            Pexp_ident "lexbuf" (lang_include.ml[82,3204+8]..[82,3204+14])
                          "lex_start_p" (lang_include.ml[82,3204+15]..[82,3204+26])
                          expression (lang_include.ml[82,3204+30]..[82,3204+47])
                            Pexp_field
                            expression (lang_include.ml[82,3204+30]..[82,3204+36])
                              Pexp_ident "lexbuf" (lang_include.ml[82,3204+30]..[82,3204+36])
                            "lex_curr_p" (lang_include.ml[82,3204+37]..[82,3204+47])
                        expression (lang_include.ml[83,3253+8]..[127,4999+77])
                          Pexp_sequence
                          expression (lang_include.ml[83,3253+8]..[87,3397+11])
                            Pexp_setfield
                            expression (lang_include.ml[83,3253+8]..[83,3253+14])
                              Pexp_ident "lexbuf" (lang_include.ml[83,3253+8]..[83,3253+14])
                            "lex_curr_p" (lang_include.ml[83,3253+15]..[83,3253+25])
                            expression (lang_include.ml[84,3282+10]..[87,3397+11])
                              Pexp_record
                              [
                                "pos_cnum" (lang_include.ml[86,3331+12]..[86,3331+20])
                                  expression (lang_include.ml[86,3331+23]..[86,3331+65])
                                    Pexp_apply
                                    expression (lang_include.ml[86,3331+43]..[86,3331+44])
                                      Pexp_ident "+" (lang_include.ml[86,3331+43]..[86,3331+44])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[86,3331+24]..[86,3331+42])
                                          Pexp_field
                                          expression (lang_include.ml[86,3331+24]..[86,3331+30])
                                            Pexp_ident "lexbuf" (lang_include.ml[86,3331+24]..[86,3331+30])
                                          "lex_abs_pos" (lang_include.ml[86,3331+31]..[86,3331+42])
                                      <label> ""
                                        expression (lang_include.ml[86,3331+45]..[86,3331+64])
                                          Pexp_field
                                          expression (lang_include.ml[86,3331+45]..[86,3331+51])
                                            Pexp_ident "lexbuf" (lang_include.ml[86,3331+45]..[86,3331+51])
                                          "lex_curr_pos" (lang_include.ml[86,3331+52]..[86,3331+64])
                                    ]
                              ]
                              Some
                                expression (lang_include.ml[85,3294+12]..[85,3294+31])
                                  Pexp_field
                                  expression (lang_include.ml[85,3294+13]..[85,3294+19])
                                    Pexp_ident "lexbuf" (lang_include.ml[85,3294+13]..[85,3294+19])
                                  "lex_curr_p" (lang_include.ml[85,3294+20]..[85,3294+30])
                          expression (lang_include.ml[88,3410+8]..[127,4999+77])
                            Pexp_match
                            expression (lang_include.ml[88,3410+15]..[88,3410+33])
                              Pexp_ident "__ocaml_lex_result" (lang_include.ml[88,3410+15]..[88,3410+33])
                            [
                              <case>
                                pattern (lang_include.ml[89,3449+11]..[89,3449+12])
                                  Ppat_constant Const_int 0
                                expression (lang_include.ml[89,3449+16]..[89,3449+34])
                                  Pexp_sequence
                                  expression (lang_include.ml[89,3449+17]..[89,3449+19])
                                    Pexp_construct "()" (lang_include.ml[89,3449+17]..[89,3449+19])
                                    None
                                  expression (lang_include.ml[89,3449+21]..[89,3449+33])
                                    Pexp_apply
                                    expression (lang_include.ml[89,3449+21]..[89,3449+26])
                                      Pexp_ident "token" (lang_include.ml[89,3449+21]..[89,3449+26])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[89,3449+27]..[89,3449+33])
                                          Pexp_ident "lexbuf" (lang_include.ml[89,3449+27]..[89,3449+33])
                                    ]
                              <case>
                                pattern (lang_include.ml[90,3484+11]..[90,3484+12])
                                  Ppat_constant Const_int 1
                                expression (lang_include.ml[90,3484+16]..[90,3484+61])
                                  Pexp_sequence
                                  expression (lang_include.ml[90,3484+17]..[90,3484+46])
                                    Pexp_apply
                                    expression (lang_include.ml[90,3484+17]..[90,3484+39])
                                      Pexp_ident "Lexing_util.update_loc" (lang_include.ml[90,3484+17]..[90,3484+39])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[90,3484+40]..[90,3484+46])
                                          Pexp_ident "lexbuf" (lang_include.ml[90,3484+40]..[90,3484+46])
                                    ]
                                  expression (lang_include.ml[90,3484+48]..[90,3484+60])
                                    Pexp_apply
                                    expression (lang_include.ml[90,3484+48]..[90,3484+53])
                                      Pexp_ident "token" (lang_include.ml[90,3484+48]..[90,3484+53])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[90,3484+54]..[90,3484+60])
                                          Pexp_ident "lexbuf" (lang_include.ml[90,3484+54]..[90,3484+60])
                                    ]
                              <case>
                                pattern (lang_include.ml[91,3546+11]..[91,3546+12])
                                  Ppat_constant Const_int 2
                                expression (lang_include.ml[92,3562+13]..[101,4013+27])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lang_include.ml[92,3562+17]..[92,3562+18])
                                        Ppat_var "x" (lang_include.ml[92,3562+17]..[92,3562+18])
                                      expression (lang_include.ml[92,3562+21]..[92,3562+77])
                                        Pexp_apply
                                        expression (lang_include.ml[92,3562+21]..[92,3562+47])
                                          Pexp_ident "Lexing.sub_lexeme_char_opt" (lang_include.ml[92,3562+21]..[92,3562+47])
                                        [
                                          <label> ""
                                            expression (lang_include.ml[92,3562+48]..[92,3562+54])
                                              Pexp_ident "lexbuf" (lang_include.ml[92,3562+48]..[92,3562+54])
                                          <label> ""
                                            expression (lang_include.ml[92,3562+55]..[92,3562+77])
                                              Pexp_apply
                                              expression (lang_include.ml[92,3562+56]..[92,3562+76]) ghost
                                                Pexp_ident "Array.get" (lang_include.ml[92,3562+56]..[92,3562+76]) ghost
                                              [
                                                <label> ""
                                                  expression (lang_include.ml[92,3562+56]..[92,3562+72])
                                                    Pexp_field
                                                    expression (lang_include.ml[92,3562+57]..[92,3562+63])
                                                      Pexp_ident "lexbuf" (lang_include.ml[92,3562+57]..[92,3562+63])
                                                    "lex_mem" (lang_include.ml[92,3562+64]..[92,3562+71])
                                                <label> ""
                                                  expression (lang_include.ml[92,3562+74]..[92,3562+75])
                                                    Pexp_constant Const_int 0
                                              ]
                                        ]
                                  ]
                                  expression (lang_include.ml[93,3643+13]..[101,4013+27])
                                    Pexp_sequence
                                    expression (lang_include.ml[93,3643+14]..[100,3959+52])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lang_include.ml[93,3643+19]..[93,3643+20])
                                            Ppat_var "c" (lang_include.ml[93,3643+19]..[93,3643+20])
                                          expression (lang_include.ml[93,3643+23]..[93,3643+45])
                                            Pexp_apply
                                            expression (lang_include.ml[93,3643+23]..[93,3643+42])
                                              Pexp_ident "Lexing_util.new_cxt" (lang_include.ml[93,3643+23]..[93,3643+42])
                                            [
                                              <label> ""
                                                expression (lang_include.ml[93,3643+43]..[93,3643+45])
                                                  Pexp_construct "()" (lang_include.ml[93,3643+43]..[93,3643+45])
                                                  None
                                            ]
                                      ]
                                      expression (lang_include.ml[94,3692+15]..[100,3959+51])
                                        Pexp_sequence
                                        expression (lang_include.ml[94,3692+15]..[97,3788+51])
                                          Pexp_ifthenelse
                                          expression (lang_include.ml[94,3692+18]..[94,3692+27])
                                            Pexp_apply
                                            expression (lang_include.ml[94,3692+20]..[94,3692+22])
                                              Pexp_ident "<>" (lang_include.ml[94,3692+20]..[94,3692+22])
                                            [
                                              <label> ""
                                                expression (lang_include.ml[94,3692+18]..[94,3692+19])
                                                  Pexp_ident "x" (lang_include.ml[94,3692+18]..[94,3692+19])
                                              <label> ""
                                                expression (lang_include.ml[94,3692+23]..[94,3692+27])
                                                  Pexp_construct "None" (lang_include.ml[94,3692+23]..[94,3692+27])
                                                  None
                                            ]
                                          expression (lang_include.ml[96,3740+17]..[97,3788+51])
                                            Pexp_apply
                                            expression (lang_include.ml[96,3740+17]..[96,3740+33])
                                              Pexp_ident "Lexing_util.warn" (lang_include.ml[96,3740+17]..[96,3740+33])
                                            [
                                              <label> ""
                                                expression (lang_include.ml[96,3740+34]..[96,3740+47])
                                                  Pexp_construct "Comment_start" (lang_include.ml[96,3740+34]..[96,3740+47])
                                                  None
                                              <label> ""
                                                expression (lang_include.ml[97,3788+19]..[97,3788+51])
                                                  Pexp_apply
                                                  expression (lang_include.ml[97,3788+20]..[97,3788+43])
                                                    Pexp_ident "Lexing_util.from_lexbuf" (lang_include.ml[97,3788+20]..[97,3788+43])
                                                  [
                                                    <label> ""
                                                      expression (lang_include.ml[97,3788+44]..[97,3788+50])
                                                        Pexp_ident "lexbuf" (lang_include.ml[97,3788+44]..[97,3788+50])
                                                  ]
                                            ]
                                          None
                                        expression (lang_include.ml[98,3841+15]..[100,3959+51])
                                          Pexp_sequence
                                          expression (lang_include.ml[98,3841+15]..[98,3841+41])
                                            Pexp_apply
                                            expression (lang_include.ml[98,3841+15]..[98,3841+32])
                                              Pexp_ident "Lexing_util.store" (lang_include.ml[98,3841+15]..[98,3841+32])
                                            [
                                              <label> ""
                                                expression (lang_include.ml[98,3841+33]..[98,3841+34])
                                                  Pexp_ident "c" (lang_include.ml[98,3841+33]..[98,3841+34])
                                              <label> ""
                                                expression (lang_include.ml[98,3841+35]..[98,3841+41])
                                                  Pexp_ident "lexbuf" (lang_include.ml[98,3841+35]..[98,3841+41])
                                            ]
                                          expression (lang_include.ml[99,3884+15]..[100,3959+51])
                                            Pexp_sequence
                                            expression (lang_include.ml[99,3884+15]..[99,3884+73])
                                              Pexp_apply
                                              expression (lang_include.ml[99,3884+15]..[99,3884+40])
                                                Pexp_ident "Lexing_util.push_loc_cont" (lang_include.ml[99,3884+15]..[99,3884+40])
                                              [
                                                <label> ""
                                                  expression (lang_include.ml[99,3884+41]..[99,3884+42])
                                                    Pexp_ident "c" (lang_include.ml[99,3884+41]..[99,3884+42])
                                                <label> ""
                                                  expression (lang_include.ml[99,3884+43]..[99,3884+49])
                                                    Pexp_ident "lexbuf" (lang_include.ml[99,3884+43]..[99,3884+49])
                                                <label> ""
                                                  expression (lang_include.ml[99,3884+50]..[99,3884+73])
                                                    Pexp_ident "Lexing_util.lex_comment" (lang_include.ml[99,3884+50]..[99,3884+73])
                                              ]
                                            expression (lang_include.ml[100,3959+15]..[100,3959+51])
                                              Pexp_apply
                                              expression (lang_include.ml[100,3959+15]..[100,3959+21])
                                                Pexp_ident "ignore" (lang_include.ml[100,3959+15]..[100,3959+21])
                                              [
                                                <label> ""
                                                  expression (lang_include.ml[100,3959+22]..[100,3959+51])
                                                    Pexp_apply
                                                    expression (lang_include.ml[100,3959+23]..[100,3959+48])
                                                      Pexp_ident "Lexing_util.buff_contents" (lang_include.ml[100,3959+23]..[100,3959+48])
                                                    [
                                                      <label> ""
                                                        expression (lang_include.ml[100,3959+49]..[100,3959+50])
                                                          Pexp_ident "c" (lang_include.ml[100,3959+49]..[100,3959+50])
                                                    ]
                                              ]
                                    expression (lang_include.ml[101,4013+14]..[101,4013+26])
                                      Pexp_apply
                                      expression (lang_include.ml[101,4013+14]..[101,4013+19])
                                        Pexp_ident "token" (lang_include.ml[101,4013+14]..[101,4013+19])
                                      [
                                        <label> ""
                                          expression (lang_include.ml[101,4013+20]..[101,4013+26])
                                            Pexp_ident "lexbuf" (lang_include.ml[101,4013+20]..[101,4013+26])
                                      ]
                              <case>
                                pattern (lang_include.ml[102,4041+11]..[102,4041+12])
                                  Ppat_constant Const_int 3
                                expression (lang_include.ml[103,4057+13]..[110,4381+18])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lang_include.ml[103,4057+17]..[103,4057+18])
                                        Ppat_var "c" (lang_include.ml[103,4057+17]..[103,4057+18])
                                      expression (lang_include.ml[103,4057+21]..[103,4057+43])
                                        Pexp_apply
                                        expression (lang_include.ml[103,4057+21]..[103,4057+40])
                                          Pexp_ident "Lexing_util.new_cxt" (lang_include.ml[103,4057+21]..[103,4057+40])
                                        [
                                          <label> ""
                                            expression (lang_include.ml[103,4057+41]..[103,4057+43])
                                              Pexp_construct "()" (lang_include.ml[103,4057+41]..[103,4057+43])
                                              None
                                        ]
                                  ]
                                  expression (lang_include.ml[104,4104+13]..[110,4381+18])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lang_include.ml[104,4104+17]..[104,4104+20])
                                          Ppat_var "old" (lang_include.ml[104,4104+17]..[104,4104+20])
                                        expression (lang_include.ml[104,4104+23]..[104,4104+41])
                                          Pexp_field
                                          expression (lang_include.ml[104,4104+23]..[104,4104+29])
                                            Pexp_ident "lexbuf" (lang_include.ml[104,4104+23]..[104,4104+29])
                                          "lex_start_p" (lang_include.ml[104,4104+30]..[104,4104+41])
                                    ]
                                    expression (lang_include.ml[105,4149+13]..[110,4381+18])
                                      Pexp_sequence
                                      expression (lang_include.ml[105,4149+14]..[105,4149+71])
                                        Pexp_apply
                                        expression (lang_include.ml[105,4149+14]..[105,4149+39])
                                          Pexp_ident "Lexing_util.push_loc_cont" (lang_include.ml[105,4149+14]..[105,4149+39])
                                        [
                                          <label> ""
                                            expression (lang_include.ml[105,4149+40]..[105,4149+41])
                                              Pexp_ident "c" (lang_include.ml[105,4149+40]..[105,4149+41])
                                          <label> ""
                                            expression (lang_include.ml[105,4149+42]..[105,4149+48])
                                              Pexp_ident "lexbuf" (lang_include.ml[105,4149+42]..[105,4149+48])
                                          <label> ""
                                            expression (lang_include.ml[105,4149+49]..[105,4149+71])
                                              Pexp_ident "Lexing_util.lex_string" (lang_include.ml[105,4149+49]..[105,4149+71])
                                        ]
                                      expression (lang_include.ml[106,4222+14]..[110,4381+17])
                                        Pexp_variant "Str"
                                        Some
                                          expression (lang_include.ml[107,4241+16]..[110,4381+17])
                                            Pexp_record
                                            [
                                              "loc" (lang_include.ml[108,4259+18]..[108,4259+21])
                                                expression (lang_include.ml[108,4259+24]..[108,4259+66])
                                                  Pexp_apply
                                                  expression (lang_include.ml[108,4259+25]..[108,4259+43])
                                                    Pexp_ident "Location_util.--" (lang_include.ml[108,4259+25]..[108,4259+43])
                                                  [
                                                    <label> ""
                                                      expression (lang_include.ml[108,4259+44]..[108,4259+47])
                                                        Pexp_ident "old" (lang_include.ml[108,4259+44]..[108,4259+47])
                                                    <label> ""
                                                      expression (lang_include.ml[108,4259+48]..[108,4259+65])
                                                        Pexp_field
                                                        expression (lang_include.ml[108,4259+48]..[108,4259+54])
                                                          Pexp_ident "lexbuf" (lang_include.ml[108,4259+48]..[108,4259+54])
                                                        "lex_curr_p" (lang_include.ml[108,4259+55]..[108,4259+65])
                                                  ]
                                              "txt" (lang_include.ml[109,4327+18]..[109,4327+21])
                                                expression (lang_include.ml[109,4327+24]..[109,4327+53])
                                                  Pexp_apply
                                                  expression (lang_include.ml[109,4327+25]..[109,4327+50])
                                                    Pexp_ident "Lexing_util.buff_contents" (lang_include.ml[109,4327+25]..[109,4327+50])
                                                  [
                                                    <label> ""
                                                      expression (lang_include.ml[109,4327+51]..[109,4327+52])
                                                        Pexp_ident "c" (lang_include.ml[109,4327+51]..[109,4327+52])
                                                  ]
                                            ]
                                            None
                              <case>
                                pattern (lang_include.ml[111,4400+11]..[111,4400+12])
                                  Ppat_constant Const_int 4
                                expression (lang_include.ml[112,4416+13]..[120,4713+52])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lang_include.ml[112,4416+17]..[112,4416+20])
                                        Ppat_var "pos" (lang_include.ml[112,4416+17]..[112,4416+20])
                                      expression (lang_include.ml[112,4416+23]..[112,4416+40])
                                        Pexp_field
                                        expression (lang_include.ml[112,4416+23]..[112,4416+29])
                                          Pexp_ident "lexbuf" (lang_include.ml[112,4416+23]..[112,4416+29])
                                        "lex_curr_p" (lang_include.ml[112,4416+30]..[112,4416+40])
                                  ]
                                  expression (lang_include.ml[113,4460+13]..[120,4713+52])
                                    Pexp_sequence
                                    expression (lang_include.ml[113,4460+14]..[118,4635+17])
                                      Pexp_setfield
                                      expression (lang_include.ml[113,4460+14]..[113,4460+20])
                                        Pexp_ident "lexbuf" (lang_include.ml[113,4460+14]..[113,4460+20])
                                      "lex_curr_p" (lang_include.ml[113,4460+21]..[113,4460+31])
                                      expression (lang_include.ml[114,4495+16]..[118,4635+17])
                                        Pexp_record
                                        [
                                          "pos_bol" (lang_include.ml[116,4540+18]..[116,4540+25])
                                            expression (lang_include.ml[116,4540+28]..[116,4540+45])
                                              Pexp_apply
                                              expression (lang_include.ml[116,4540+41]..[116,4540+42])
                                                Pexp_ident "+" (lang_include.ml[116,4540+41]..[116,4540+42])
                                              [
                                                <label> ""
                                                  expression (lang_include.ml[116,4540+29]..[116,4540+40])
                                                    Pexp_field
                                                    expression (lang_include.ml[116,4540+29]..[116,4540+32])
                                                      Pexp_ident "pos" (lang_include.ml[116,4540+29]..[116,4540+32])
                                                    "pos_bol" (lang_include.ml[116,4540+33]..[116,4540+40])
                                                <label> ""
                                                  expression (lang_include.ml[116,4540+43]..[116,4540+44])
                                                    Pexp_constant Const_int 1
                                              ]
                                          "pos_cnum" (lang_include.ml[117,4587+18]..[117,4587+26])
                                            expression (lang_include.ml[117,4587+29]..[117,4587+47])
                                              Pexp_apply
                                              expression (lang_include.ml[117,4587+43]..[117,4587+44])
                                                Pexp_ident "+" (lang_include.ml[117,4587+43]..[117,4587+44])
                                              [
                                                <label> ""
                                                  expression (lang_include.ml[117,4587+30]..[117,4587+42])
                                                    Pexp_field
                                                    expression (lang_include.ml[117,4587+30]..[117,4587+33])
                                                      Pexp_ident "pos" (lang_include.ml[117,4587+30]..[117,4587+33])
                                                    "pos_cnum" (lang_include.ml[117,4587+34]..[117,4587+42])
                                                <label> ""
                                                  expression (lang_include.ml[117,4587+45]..[117,4587+46])
                                                    Pexp_constant Const_int 1
                                              ]
                                        ]
                                        Some
                                          expression (lang_include.ml[115,4513+18]..[115,4513+21])
                                            Pexp_ident "pos" (lang_include.ml[115,4513+18]..[115,4513+21])
                                    expression (lang_include.ml[119,4654+14]..[120,4713+51])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lang_include.ml[119,4654+19]..[119,4654+22])
                                            Ppat_var "loc" (lang_include.ml[119,4654+19]..[119,4654+22])
                                          expression (lang_include.ml[119,4654+25]..[119,4654+55])
                                            Pexp_apply
                                            expression (lang_include.ml[119,4654+25]..[119,4654+48])
                                              Pexp_ident "Lexing_util.from_lexbuf" (lang_include.ml[119,4654+25]..[119,4654+48])
                                            [
                                              <label> ""
                                                expression (lang_include.ml[119,4654+49]..[119,4654+55])
                                                  Pexp_ident "lexbuf" (lang_include.ml[119,4654+49]..[119,4654+55])
                                            ]
                                      ]
                                      expression (lang_include.ml[120,4713+15]..[120,4713+50]) ghost
                                        Pexp_constraint
                                        expression (lang_include.ml[120,4713+16]..[120,4713+38])
                                          Pexp_variant "EOI"
                                          Some
                                            expression (lang_include.ml[120,4713+21]..[120,4713+38])
                                              Pexp_record
                                              [
                                                "loc" (lang_include.ml[120,4713+23]..[120,4713+26])
                                                  expression (lang_include.ml[120,4713+23]..[120,4713+26])
                                                    Pexp_ident "loc" (lang_include.ml[120,4713+23]..[120,4713+26])
                                                "txt" (lang_include.ml[120,4713+28]..[120,4713+31])
                                                  expression (lang_include.ml[120,4713+34]..[120,4713+36])
                                                    Pexp_constant Const_string("",None)
                                              ]
                                              None
                                        core_type (lang_include.ml[120,4713+41]..[120,4713+49])
                                          Ptyp_constr "Tokenf.t" (lang_include.ml[120,4713+41]..[120,4713+49])
                                          []
                              <case>
                                pattern (lang_include.ml[121,4766+11]..[121,4766+12])
                                  Ppat_constant Const_int 5
                                expression (lang_include.ml[122,4782+13]..[124,4913+47])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lang_include.ml[122,4782+17]..[122,4782+18])
                                        Ppat_var "c" (lang_include.ml[122,4782+17]..[122,4782+18])
                                      expression (lang_include.ml[122,4782+21]..[122,4782+71])
                                        Pexp_apply
                                        expression (lang_include.ml[122,4782+21]..[122,4782+43])
                                          Pexp_ident "Lexing.sub_lexeme_char" (lang_include.ml[122,4782+21]..[122,4782+43])
                                        [
                                          <label> ""
                                            expression (lang_include.ml[122,4782+44]..[122,4782+50])
                                              Pexp_ident "lexbuf" (lang_include.ml[122,4782+44]..[122,4782+50])
                                          <label> ""
                                            expression (lang_include.ml[122,4782+51]..[122,4782+71])
                                              Pexp_field
                                              expression (lang_include.ml[122,4782+51]..[122,4782+57])
                                                Pexp_ident "lexbuf" (lang_include.ml[122,4782+51]..[122,4782+57])
                                              "lex_start_pos" (lang_include.ml[122,4782+58]..[122,4782+71])
                                        ]
                                  ]
                                  expression (lang_include.ml[123,4857+13]..[124,4913+47])
                                    Pexp_apply
                                    expression (lang_include.ml[123,4857+53]..[123,4857+55])
                                      Pexp_ident "@@" (lang_include.ml[123,4857+53]..[123,4857+55])
                                    [
                                      <label> ""
                                        expression (lang_include.ml[123,4857+13]..[123,4857+52])
                                          Pexp_apply
                                          expression (lang_include.ml[123,4857+14]..[123,4857+29])
                                            Pexp_ident "Lexing_util.err" (lang_include.ml[123,4857+14]..[123,4857+29])
                                          [
                                            <label> ""
                                              expression (lang_include.ml[123,4857+30]..[123,4857+51])
                                                Pexp_construct "Illegal_character" (lang_include.ml[123,4857+31]..[123,4857+48])
                                                Some
                                                  expression (lang_include.ml[123,4857+49]..[123,4857+50])
                                                    Pexp_ident "c" (lang_include.ml[123,4857+49]..[123,4857+50])
                                          ]
                                      <label> ""
                                        expression (lang_include.ml[124,4913+15]..[124,4913+47])
                                          Pexp_apply
                                          expression (lang_include.ml[124,4913+16]..[124,4913+39])
                                            Pexp_ident "Lexing_util.from_lexbuf" (lang_include.ml[124,4913+16]..[124,4913+39])
                                          [
                                            <label> ""
                                              expression (lang_include.ml[124,4913+40]..[124,4913+46])
                                                Pexp_ident "lexbuf" (lang_include.ml[124,4913+40]..[124,4913+46])
                                          ]
                                    ]
                              <case>
                                pattern (lang_include.ml[125,4961+11]..[125,4961+12])
                                  Ppat_any
                                expression (lang_include.ml[126,4977+13]..[127,4999+76])
                                  Pexp_apply
                                  expression (lang_include.ml[126,4977+13]..[126,4977+21])
                                    Pexp_ident "failwith" (lang_include.ml[126,4977+13]..[126,4977+21])
                                  [
                                    <label> ""
                                      expression (lang_include.ml[127,4999+15]..[127,4999+76])
                                        Pexp_apply
                                        expression (lang_include.ml[127,4999+31]..[127,4999+32])
                                          Pexp_ident "^" (lang_include.ml[127,4999+31]..[127,4999+32])
                                        [
                                          <label> ""
                                            expression (lang_include.ml[127,4999+16]..[127,4999+30])
                                              Pexp_constant Const_string("Lang_include",None)
                                          <label> ""
                                            expression (lang_include.ml[127,4999+33]..[127,4999+75])
                                              Pexp_apply
                                              expression (lang_include.ml[127,4999+38]..[127,4999+39])
                                                Pexp_ident "^" (lang_include.ml[127,4999+38]..[127,4999+39])
                                              [
                                                <label> ""
                                                  expression (lang_include.ml[127,4999+34]..[127,4999+37])
                                                    Pexp_constant Const_string(".",None)
                                                <label> ""
                                                  expression (lang_include.ml[127,4999+40]..[127,4999+74])
                                                    Pexp_apply
                                                    expression (lang_include.ml[127,4999+49]..[127,4999+50])
                                                      Pexp_ident "^" (lang_include.ml[127,4999+49]..[127,4999+50])
                                                    [
                                                      <label> ""
                                                        expression (lang_include.ml[127,4999+41]..[127,4999+48])
                                                          Pexp_constant Const_string("token",None)
                                                      <label> ""
                                                        expression (lang_include.ml[127,4999+51]..[127,4999+73])
                                                          Pexp_constant Const_string(" lexing: empty token",None)
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
            ]
          core_type (lang_include.ml[1,0+15]..[1,0+40])
            Ptyp_arrow
            ""
            core_type (lang_include.ml[1,0+15]..[1,0+28])
              Ptyp_constr "Lexing.lexbuf" (lang_include.ml[1,0+15]..[1,0+28])
              []
            core_type (lang_include.ml[1,0+32]..[1,0+40])
              Ptyp_constr "Tokenf.t" (lang_include.ml[1,0+32]..[1,0+40])
              []
    ]
  structure_item (lang_include.ml[128,5079+0]..[128,5079+45])
    Pstr_value Nonrec
    [
      <def>
        pattern (lang_include.ml[128,5079+4]..[128,5079+9])
          Ppat_var "lexer" (lang_include.ml[128,5079+4]..[128,5079+9])
        expression (lang_include.ml[128,5079+12]..[128,5079+45])
          Pexp_apply
          expression (lang_include.ml[128,5079+12]..[128,5079+39])
            Pexp_ident "Lexing_util.adapt_to_stream" (lang_include.ml[128,5079+12]..[128,5079+39])
          [
            <label> ""
              expression (lang_include.ml[128,5079+40]..[128,5079+45])
                Pexp_ident "token" (lang_include.ml[128,5079+40]..[128,5079+45])
          ]
    ]
  structure_item (lang_include.ml[129,5125+0]..[129,5125+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (lang_include.ml[129,5125+4]..[129,5125+16])
          Ppat_var "include_quot" (lang_include.ml[129,5125+4]..[129,5125+16])
        expression (lang_include.ml[129,5125+19]..[129,5125+42])
          Pexp_apply
          expression (lang_include.ml[129,5125+19]..[129,5125+27])
            Pexp_ident "Gramf.mk" (lang_include.ml[129,5125+19]..[129,5125+27])
          [
            <label> ""
              expression (lang_include.ml[129,5125+28]..[129,5125+42])
                Pexp_constant Const_string("include_quot",None)
          ]
    ]
  structure_item (lang_include.ml[130,5168+0]..[172,7238+41])
    Pstr_eval
    expression (lang_include.ml[131,5176+2]..[172,7238+41])
      Pexp_apply
      expression (lang_include.ml[131,5176+2]..[131,5176+21])
        Pexp_ident "Gramf.extend_single" (lang_include.ml[131,5176+2]..[131,5176+21])
      [
        <label> ""
          expression (lang_include.ml[132,5198+4]..[172,7238+41]) ghost
            Pexp_constraint
            expression (lang_include.ml[132,5198+5]..[172,7238+6])
              Pexp_record
              [
                "entry" (lang_include.ml[133,5205+7]..[133,5205+12])
                  expression (lang_include.ml[133,5205+15]..[133,5205+53]) ghost
                    Pexp_constraint
                    expression (lang_include.ml[133,5205+16]..[133,5205+28])
                      Pexp_ident "include_quot" (lang_include.ml[133,5205+16]..[133,5205+28])
                    core_type (lang_include.ml[133,5205+31]..[133,5205+52])
                      Ptyp_constr "Gramf.t" (lang_include.ml[133,5205+45]..[133,5205+52])
                      [
                        core_type (lang_include.ml[133,5205+31]..[133,5205+44])
                          Ptyp_var include_quot
                      ]
                "olevel" (lang_include.ml[134,5260+7]..[134,5260+13])
                  expression (lang_include.ml[135,5276+9]..[171,7210+27]) ghost
                    Pexp_constraint
                    expression (lang_include.ml[135,5276+10]..[171,7210+11])
                      Pexp_record
                      [
                        "label" (lang_include.ml[136,5288+12]..[136,5288+17])
                          expression (lang_include.ml[136,5288+20]..[136,5288+24])
                            Pexp_construct "None" (lang_include.ml[136,5288+20]..[136,5288+24])
                            None
                        "lassoc" (lang_include.ml[137,5314+12]..[137,5314+18])
                          expression (lang_include.ml[137,5314+21]..[137,5314+25])
                            Pexp_construct "true" (lang_include.ml[137,5314+21]..[137,5314+25])
                            None
                        "productions" (lang_include.ml[138,5341+12]..[138,5341+23])
                          expression (lang_include.ml[139,5367+14]..[170,7192+17])
                            Pexp_construct "::" (lang_include.ml[139,5367+15]..[170,7192+17]) ghost
                            Some
                              expression (lang_include.ml[139,5367+15]..[170,7192+17]) ghost
                                Pexp_tuple
                                [
                                  expression (lang_include.ml[139,5367+15]..[170,7192+16])
                                    Pexp_record
                                    [
                                      "symbols" (lang_include.ml[140,5384+17]..[140,5384+24])
                                        expression (lang_include.ml[141,5411+19]..[143,5515+43])
                                          Pexp_construct "::" (lang_include.ml[141,5411+20]..[143,5515+43]) ghost
                                          Some
                                            expression (lang_include.ml[141,5411+20]..[143,5515+43]) ghost
                                              Pexp_tuple
                                              [
                                                expression (lang_include.ml[141,5411+20]..[143,5515+42])
                                                  Pexp_construct "Token" (lang_include.ml[141,5411+20]..[141,5411+25])
                                                  Some
                                                    expression (lang_include.ml[142,5437+22]..[143,5515+42]) ghost
                                                      Pexp_constraint
                                                      expression (lang_include.ml[142,5437+23]..[143,5515+24])
                                                        Pexp_record
                                                        [
                                                          "descr" (lang_include.ml[142,5437+25]..[142,5437+30])
                                                            expression (lang_include.ml[142,5437+33]..[142,5437+77])
                                                              Pexp_record
                                                              [
                                                                "tag" (lang_include.ml[142,5437+35]..[142,5437+38])
                                                                  expression (lang_include.ml[142,5437+41]..[142,5437+45])
                                                                    Pexp_variant "Str"
                                                                    None
                                                                "word" (lang_include.ml[142,5437+47]..[142,5437+51])
                                                                  expression (lang_include.ml[142,5437+54]..[142,5437+57])
                                                                    Pexp_construct "Any" (lang_include.ml[142,5437+54]..[142,5437+57])
                                                                    None
                                                                "tag_name" (lang_include.ml[142,5437+59]..[142,5437+67])
                                                                  expression (lang_include.ml[142,5437+70]..[142,5437+75])
                                                                    Pexp_constant Const_string("Str",None)
                                                              ]
                                                              None
                                                        ]
                                                        None
                                                      core_type (lang_include.ml[143,5515+27]..[143,5515+41])
                                                        Ptyp_constr "Tokenf.pattern" (lang_include.ml[143,5515+27]..[143,5515+41])
                                                        []
                                                expression (lang_include.ml[143,5515+42]..[143,5515+43]) ghost
                                                  Pexp_construct "[]" (lang_include.ml[143,5515+42]..[143,5515+43]) ghost
                                                  None
                                              ]
                                      "annot" (lang_include.ml[144,5560+17]..[144,5560+22])
                                        expression (lang_include.ml[145,5585+19]..[145,5585+348])
                                          Pexp_constant Const_string("let (keep,cf) = let open State in (keep, current_filters) in\nlet keep__001_ = !keep\nand cf__002_ = !cf in\ntry\n  let res__003_ = State.reset (); Gramlib.parse_include_file Syntaxf.strus s in\n  let _ = keep := keep__001_; cf := cf__002_ in res__003_\nwith | e__004_ -> ((keep := keep__001_; cf := cf__002_); raise e__004_)\n",None)
                                      "fn" (lang_include.ml[146,5935+17]..[146,5935+19])
                                        expression (lang_include.ml[147,5957+19]..[169,7130+61])
                                          Pexp_apply
                                          expression (lang_include.ml[147,5957+20]..[147,5957+35])
                                            Pexp_ident "Gramf.mk_action" (lang_include.ml[147,5957+20]..[147,5957+35])
                                          [
                                            <label> ""
                                              expression (lang_include.ml[148,5993+22]..[169,7130+60]) ghost
                                                Pexp_constraint
                                                expression (lang_include.ml[148,5993+23]..[168,7054+72])
                                                  Pexp_function
                                                  [
                                                    <case>
                                                      pattern (lang_include.ml[149,6025+25]..[149,6025+47])
                                                        Ppat_constraint
                                                        pattern (lang_include.ml[149,6025+26]..[149,6025+33])
                                                          Ppat_var "__fan_0" (lang_include.ml[149,6025+26]..[149,6025+33])
                                                        core_type (lang_include.ml[149,6025+36]..[149,6025+46])
                                                          Ptyp_constr "Tokenf.txt" (lang_include.ml[149,6025+36]..[149,6025+46])
                                                          []
                                                      expression (lang_include.ml[150,6076+27]..[168,7054+72])
                                                        Pexp_function
                                                        [
                                                          <case>
                                                            pattern (lang_include.ml[151,6113+30]..[151,6113+45])
                                                              Ppat_constraint
                                                              pattern (lang_include.ml[151,6113+31]..[151,6113+35])
                                                                Ppat_var "_loc" (lang_include.ml[151,6113+31]..[151,6113+35])
                                                              core_type (lang_include.ml[151,6113+38]..[151,6113+44])
                                                                Ptyp_constr "Locf.t" (lang_include.ml[151,6113+38]..[151,6113+44])
                                                                []
                                                            expression (lang_include.ml[152,6162+32]..[168,7054+71])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (lang_include.ml[152,6162+36]..[152,6162+37])
                                                                    Ppat_var "s" (lang_include.ml[152,6162+36]..[152,6162+37])
                                                                  expression (lang_include.ml[152,6162+40]..[152,6162+51])
                                                                    Pexp_field
                                                                    expression (lang_include.ml[152,6162+40]..[152,6162+47])
                                                                      Pexp_ident "__fan_0" (lang_include.ml[152,6162+40]..[152,6162+47])
                                                                    "txt" (lang_include.ml[152,6162+48]..[152,6162+51])
                                                              ]
                                                              expression (lang_include.ml[153,6217+32]..[168,7054+71]) ghost
                                                                Pexp_constraint
                                                                expression (lang_include.ml[153,6217+33]..[168,7054+54])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (lang_include.ml[153,6217+37]..[153,6217+46])
Ppat_tuple
[
  pattern (lang_include.ml[153,6217+38]..[153,6217+42])
    Ppat_var "keep" (lang_include.ml[153,6217+38]..[153,6217+42])
  pattern (lang_include.ml[153,6217+43]..[153,6217+45])
    Ppat_var "cf" (lang_include.ml[153,6217+43]..[153,6217+45])
]
                                                                      expression (lang_include.ml[154,6266+35]..[154,6266+76])
Pexp_open Fresh ""State" (lang_include.ml[154,6266+44]..[154,6266+49])"
expression (lang_include.ml[154,6266+53]..[154,6266+76])
  Pexp_tuple
  [
    expression (lang_include.ml[154,6266+54]..[154,6266+58])
      Pexp_ident "keep" (lang_include.ml[154,6266+54]..[154,6266+58])
    expression (lang_include.ml[154,6266+60]..[154,6266+75])
      Pexp_ident "current_filters" (lang_include.ml[154,6266+60]..[154,6266+75])
  ]
                                                                  ]
                                                                  expression (lang_include.ml[155,6346+33]..[168,7054+54])
                                                                    Pexp_let Nonrec
                                                                    [
                                                                      <def>
pattern (lang_include.ml[155,6346+37]..[155,6346+47])
  Ppat_var "keep__001_" (lang_include.ml[155,6346+37]..[155,6346+47])
expression (lang_include.ml[155,6346+50]..[155,6346+55])
  Pexp_apply
  expression (lang_include.ml[155,6346+50]..[155,6346+51])
    Pexp_ident "!" (lang_include.ml[155,6346+50]..[155,6346+51])
  [
    <label> ""
      expression (lang_include.ml[155,6346+51]..[155,6346+55])
        Pexp_ident "keep" (lang_include.ml[155,6346+51]..[155,6346+55])
  ]
                                                                      <def>
pattern (lang_include.ml[156,6402+37]..[156,6402+45])
  Ppat_var "cf__002_" (lang_include.ml[156,6402+37]..[156,6402+45])
expression (lang_include.ml[156,6402+48]..[156,6402+51])
  Pexp_apply
  expression (lang_include.ml[156,6402+48]..[156,6402+49])
    Pexp_ident "!" (lang_include.ml[156,6402+48]..[156,6402+49])
  [
    <label> ""
      expression (lang_include.ml[156,6402+49]..[156,6402+51])
        Pexp_ident "cf" (lang_include.ml[156,6402+49]..[156,6402+51])
  ]
                                                                    ]
                                                                    expression (lang_include.ml[157,6457+33]..[168,7054+54])
                                                                      Pexp_try
                                                                      expression (lang_include.ml[158,6495+36]..[164,6845+45])
Pexp_let Nonrec
[
  <def>
    pattern (lang_include.ml[158,6495+40]..[158,6495+49])
      Ppat_var "res__003_" (lang_include.ml[158,6495+40]..[158,6495+49])
    expression (lang_include.ml[159,6547+38]..[161,6666+55])
      Pexp_sequence
      expression (lang_include.ml[159,6547+38]..[159,6547+52])
        Pexp_apply
        expression (lang_include.ml[159,6547+38]..[159,6547+49])
          Pexp_ident "State.reset" (lang_include.ml[159,6547+38]..[159,6547+49])
        [
          <label> ""
            expression (lang_include.ml[159,6547+50]..[159,6547+52])
              Pexp_construct "()" (lang_include.ml[159,6547+50]..[159,6547+52])
              None
        ]
      expression (lang_include.ml[160,6601+38]..[161,6666+55])
        Pexp_apply
        expression (lang_include.ml[160,6601+38]..[160,6601+64])
          Pexp_ident "Gramlib.parse_include_file" (lang_include.ml[160,6601+38]..[160,6601+64])
        [
          <label> ""
            expression (lang_include.ml[161,6666+40]..[161,6666+53])
              Pexp_ident "Syntaxf.strus" (lang_include.ml[161,6666+40]..[161,6666+53])
          <label> ""
            expression (lang_include.ml[161,6666+54]..[161,6666+55])
              Pexp_ident "s" (lang_include.ml[161,6666+54]..[161,6666+55])
        ]
]
expression (lang_include.ml[162,6725+36]..[164,6845+45])
  Pexp_let Nonrec
  [
    <def>
      pattern (lang_include.ml[162,6725+40]..[162,6725+41])
        Ppat_any
      expression (lang_include.ml[163,6769+38]..[163,6769+72])
        Pexp_sequence
        expression (lang_include.ml[163,6769+38]..[163,6769+56])
          Pexp_apply
          expression (lang_include.ml[163,6769+43]..[163,6769+45])
            Pexp_ident ":=" (lang_include.ml[163,6769+43]..[163,6769+45])
          [
            <label> ""
              expression (lang_include.ml[163,6769+38]..[163,6769+42])
                Pexp_ident "keep" (lang_include.ml[163,6769+38]..[163,6769+42])
            <label> ""
              expression (lang_include.ml[163,6769+46]..[163,6769+56])
                Pexp_ident "keep__001_" (lang_include.ml[163,6769+46]..[163,6769+56])
          ]
        expression (lang_include.ml[163,6769+58]..[163,6769+72])
          Pexp_apply
          expression (lang_include.ml[163,6769+61]..[163,6769+63])
            Pexp_ident ":=" (lang_include.ml[163,6769+61]..[163,6769+63])
          [
            <label> ""
              expression (lang_include.ml[163,6769+58]..[163,6769+60])
                Pexp_ident "cf" (lang_include.ml[163,6769+58]..[163,6769+60])
            <label> ""
              expression (lang_include.ml[163,6769+64]..[163,6769+72])
                Pexp_ident "cf__002_" (lang_include.ml[163,6769+64]..[163,6769+72])
          ]
  ]
  expression (lang_include.ml[164,6845+36]..[164,6845+45])
    Pexp_ident "res__003_" (lang_include.ml[164,6845+36]..[164,6845+45])
                                                                      [
<case>
  pattern (lang_include.ml[166,6930+36]..[166,6930+43])
    Ppat_var "e__004_" (lang_include.ml[166,6930+36]..[166,6930+43])
  expression (lang_include.ml[167,6977+38]..[168,7054+53])
    Pexp_sequence
    expression (lang_include.ml[167,6977+39]..[167,6977+75])
      Pexp_sequence
      expression (lang_include.ml[167,6977+40]..[167,6977+58])
        Pexp_apply
        expression (lang_include.ml[167,6977+45]..[167,6977+47])
          Pexp_ident ":=" (lang_include.ml[167,6977+45]..[167,6977+47])
        [
          <label> ""
            expression (lang_include.ml[167,6977+40]..[167,6977+44])
              Pexp_ident "keep" (lang_include.ml[167,6977+40]..[167,6977+44])
          <label> ""
            expression (lang_include.ml[167,6977+48]..[167,6977+58])
              Pexp_ident "keep__001_" (lang_include.ml[167,6977+48]..[167,6977+58])
        ]
      expression (lang_include.ml[167,6977+60]..[167,6977+74])
        Pexp_apply
        expression (lang_include.ml[167,6977+63]..[167,6977+65])
          Pexp_ident ":=" (lang_include.ml[167,6977+63]..[167,6977+65])
        [
          <label> ""
            expression (lang_include.ml[167,6977+60]..[167,6977+62])
              Pexp_ident "cf" (lang_include.ml[167,6977+60]..[167,6977+62])
          <label> ""
            expression (lang_include.ml[167,6977+66]..[167,6977+74])
              Pexp_ident "cf__002_" (lang_include.ml[167,6977+66]..[167,6977+74])
        ]
    expression (lang_include.ml[168,7054+39]..[168,7054+52])
      Pexp_apply
      expression (lang_include.ml[168,7054+39]..[168,7054+44])
        Pexp_ident "raise" (lang_include.ml[168,7054+39]..[168,7054+44])
      [
        <label> ""
          expression (lang_include.ml[168,7054+45]..[168,7054+52])
            Pexp_ident "e__004_" (lang_include.ml[168,7054+45]..[168,7054+52])
      ]
                                                                      ]
                                                                core_type (lang_include.ml[168,7054+57]..[168,7054+70])
                                                                  Ptyp_var include_quot
                                                        ]
                                                  ]
                                                core_type (lang_include.ml[169,7130+22]..[169,7130+59])
                                                  Ptyp_arrow
                                                  ""
                                                  core_type (lang_include.ml[169,7130+22]..[169,7130+32])
                                                    Ptyp_constr "Tokenf.txt" (lang_include.ml[169,7130+22]..[169,7130+32])
                                                    []
                                                  core_type (lang_include.ml[169,7130+36]..[169,7130+59])
                                                    Ptyp_arrow
                                                    ""
                                                    core_type (lang_include.ml[169,7130+36]..[169,7130+42])
                                                      Ptyp_constr "Locf.t" (lang_include.ml[169,7130+36]..[169,7130+42])
                                                      []
                                                    core_type (lang_include.ml[169,7130+46]..[169,7130+59])
                                                      Ptyp_var include_quot
                                          ]
                                    ]
                                    None
                                  expression (lang_include.ml[170,7192+16]..[170,7192+17]) ghost
                                    Pexp_construct "[]" (lang_include.ml[170,7192+16]..[170,7192+17]) ghost
                                    None
                                ]
                      ]
                      None
                    core_type (lang_include.ml[171,7210+14]..[171,7210+26])
                      Ptyp_constr "Gramf.olevel" (lang_include.ml[171,7210+14]..[171,7210+26])
                      []
              ]
              None
            core_type (lang_include.ml[172,7238+9]..[172,7238+40])
              Ptyp_constr "Gramf.single_extend_statement" (lang_include.ml[172,7238+11]..[172,7238+40])
              [
                core_type (lang_include.ml[172,7238+9]..[172,7238+10])
                  Ptyp_any
              ]
      ]
  structure_item (lang_include.ml[173,7280+0]..[175,7357+33])
    Pstr_eval
    expression (lang_include.ml[174,7288+2]..[175,7357+33])
      Pexp_apply
      expression (lang_include.ml[174,7288+2]..[174,7288+23])
        Pexp_ident "Ast_quotation.of_stru" (lang_include.ml[174,7288+2]..[174,7288+23])
      [
        <label> "name"
          expression (lang_include.ml[174,7288+30]..[174,7288+68])
            Pexp_record
            [
              "domain" (lang_include.ml[174,7288+32]..[174,7288+38])
                expression (lang_include.ml[174,7288+41]..[174,7288+48])
                  Pexp_ident "Ns.lang" (lang_include.ml[174,7288+41]..[174,7288+48])
              "name" (lang_include.ml[174,7288+50]..[174,7288+54])
                expression (lang_include.ml[174,7288+57]..[174,7288+66])
                  Pexp_constant Const_string("include",None)
            ]
            None
        <label> "entry"
          expression (lang_include.ml[175,7357+11]..[175,7357+23])
            Pexp_ident "include_quot" (lang_include.ml[175,7357+11]..[175,7357+23])
        <label> "lexer"
          expression (lang_include.ml[175,7357+25]..[175,7357+30])
            Pexp_ident "lexer" (lang_include.ml[175,7357+25]..[175,7357+30])
        <label> ""
          expression (lang_include.ml[175,7357+31]..[175,7357+33])
            Pexp_construct "()" (lang_include.ml[175,7357+31]..[175,7357+33])
            None
      ]
]
