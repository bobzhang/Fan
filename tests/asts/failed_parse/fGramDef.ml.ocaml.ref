[
  structure_item (fGramDef.ml[1,0+0]..[1,0+9])
    Pstr_open Fresh "Astf" (fGramDef.ml[1,0+5]..[1,0+9])
  structure_item (fGramDef.ml[2,10+0]..[2,10+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[2,10+4]..[2,10+16])
          Ppat_var "pp_print_loc" (fGramDef.ml[2,10+4]..[2,10+16])
        expression (fGramDef.ml[2,10+17]..[2,10+29]) ghost
          Pexp_fun ""
          None
          pattern (fGramDef.ml[2,10+17]..[2,10+19])
            Ppat_var "_f" (fGramDef.ml[2,10+17]..[2,10+19])
          expression (fGramDef.ml[2,10+20]..[2,10+29]) ghost
            Pexp_fun ""
            None
            pattern (fGramDef.ml[2,10+20]..[2,10+24])
              Ppat_var "_loc" (fGramDef.ml[2,10+20]..[2,10+24])
            expression (fGramDef.ml[2,10+27]..[2,10+29])
              Pexp_construct "()" (fGramDef.ml[2,10+27]..[2,10+29])
              None
    ]
  structure_item (fGramDef.ml[3,40+0]..[3,40+44])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[3,40+4]..[3,40+19])
          Ppat_var "pp_print_string" (fGramDef.ml[3,40+4]..[3,40+19])
        expression (fGramDef.ml[3,40+22]..[3,40+44])
          Pexp_ident "StdFan.pp_print_string" (fGramDef.ml[3,40+22]..[3,40+44])
    ]
  structure_item (fGramDef.ml[4,85+0]..[4,85+38])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[4,85+4]..[4,85+17])
          Ppat_var "pp_print_vid'" (fGramDef.ml[4,85+4]..[4,85+17])
        expression (fGramDef.ml[4,85+20]..[4,85+38])
          Pexp_ident "Objs.pp_print_vid'" (fGramDef.ml[4,85+20]..[4,85+38])
    ]
  structure_item (fGramDef.ml[5,124+0]..[5,124+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[5,124+4]..[5,124+16])
          Ppat_var "pp_print_vid" (fGramDef.ml[5,124+4]..[5,124+16])
        expression (fGramDef.ml[5,124+19]..[5,124+36])
          Pexp_ident "Objs.pp_print_vid" (fGramDef.ml[5,124+19]..[5,124+36])
    ]
  structure_item (fGramDef.ml[6,161+0]..[6,161+44])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[6,161+4]..[6,161+20])
          Ppat_var "pp_print_alident" (fGramDef.ml[6,161+4]..[6,161+20])
        expression (fGramDef.ml[6,161+23]..[6,161+44])
          Pexp_ident "Objs.pp_print_alident" (fGramDef.ml[6,161+23]..[6,161+44])
    ]
  structure_item (fGramDef.ml[7,206+0]..[7,206+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[7,206+4]..[7,206+16])
          Ppat_var "pp_print_ant" (fGramDef.ml[7,206+4]..[7,206+16])
        expression (fGramDef.ml[7,206+19]..[7,206+36])
          Pexp_ident "Objs.pp_print_ant" (fGramDef.ml[7,206+19]..[7,206+36])
    ]
  structure_item (fGramDef.ml[8,243+0]..[13,362+5])
    Pstr_class
    [
      class_declaration (fGramDef.ml[8,243+0]..[13,362+5])
        pci_virt = Concrete
        pci_params =
          []
        pci_name = "mapbase" (fGramDef.ml[8,243+6]..[8,243+13])
        pci_expr =
          class_expr (fGramDef.ml[9,259+2]..[13,362+5])
            Pcl_structure
            class_structure
              pattern (fGramDef.ml[9,259+8]..[9,259+8]) ghost
                Ppat_any
              [
                class_field (fGramDef.ml[10,269+4]..[10,269+28])
                  Pcf_method Public
                    "loc" (fGramDef.ml[10,269+11]..[10,269+14])
                    Concrete Fresh
                    expression (fGramDef.ml[10,269+11]..[10,269+28]) ghost
                      Pexp_poly
                      expression (fGramDef.ml[10,269+15]..[10,269+28]) ghost
                        Pexp_fun ""
                        None
                        pattern (fGramDef.ml[10,269+15]..[10,269+24])
                          Ppat_constraint
                          pattern (fGramDef.ml[10,269+16]..[10,269+17])
                            Ppat_var "x" (fGramDef.ml[10,269+16]..[10,269+17])
                          core_type (fGramDef.ml[10,269+20]..[10,269+23])
                            Ptyp_constr "loc" (fGramDef.ml[10,269+20]..[10,269+23])
                            []
                        expression (fGramDef.ml[10,269+27]..[10,269+28])
                          Pexp_ident "x" (fGramDef.ml[10,269+27]..[10,269+28])
                      None
                class_field (fGramDef.ml[11,298+4]..[11,298+34])
                  Pcf_method Public
                    "string" (fGramDef.ml[11,298+11]..[11,298+17])
                    Concrete Fresh
                    expression (fGramDef.ml[11,298+11]..[11,298+34]) ghost
                      Pexp_poly
                      expression (fGramDef.ml[11,298+18]..[11,298+34]) ghost
                        Pexp_fun ""
                        None
                        pattern (fGramDef.ml[11,298+18]..[11,298+30])
                          Ppat_constraint
                          pattern (fGramDef.ml[11,298+19]..[11,298+20])
                            Ppat_var "x" (fGramDef.ml[11,298+19]..[11,298+20])
                          core_type (fGramDef.ml[11,298+23]..[11,298+29])
                            Ptyp_constr "string" (fGramDef.ml[11,298+23]..[11,298+29])
                            []
                        expression (fGramDef.ml[11,298+33]..[11,298+34])
                          Pexp_ident "x" (fGramDef.ml[11,298+33]..[11,298+34])
                      None
                class_field (fGramDef.ml[12,333+4]..[12,333+28])
                  Pcf_method Public
                    "ant" (fGramDef.ml[12,333+11]..[12,333+14])
                    Concrete Fresh
                    expression (fGramDef.ml[12,333+11]..[12,333+28]) ghost
                      Pexp_poly
                      expression (fGramDef.ml[12,333+15]..[12,333+28]) ghost
                        Pexp_fun ""
                        None
                        pattern (fGramDef.ml[12,333+15]..[12,333+24])
                          Ppat_constraint
                          pattern (fGramDef.ml[12,333+16]..[12,333+17])
                            Ppat_var "x" (fGramDef.ml[12,333+16]..[12,333+17])
                          core_type (fGramDef.ml[12,333+20]..[12,333+23])
                            Ptyp_constr "ant" (fGramDef.ml[12,333+20]..[12,333+23])
                            []
                        expression (fGramDef.ml[12,333+27]..[12,333+28])
                          Pexp_ident "x" (fGramDef.ml[12,333+27]..[12,333+28])
                      None
              ]
    ]
  structure_item (fGramDef.ml[14,368+0]..[20,669+16])
    Pstr_type
    [
      type_declaration "lident" (fGramDef.ml[14,368+5]..[14,368+11]) (fGramDef.ml[14,368+0]..[14,368+38])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (fGramDef.ml[14,368+14]..[14,368+38])
              Ptyp_variant closed=Closed
              [
                Rtag "Lid" false
                  [
                    core_type (fGramDef.ml[14,368+25]..[14,368+36])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[14,368+25]..[14,368+28])
                          Ptyp_constr "loc" (fGramDef.ml[14,368+25]..[14,368+28])
                          []
                        core_type (fGramDef.ml[14,368+30]..[14,368+36])
                          Ptyp_constr "string" (fGramDef.ml[14,368+30]..[14,368+36])
                          []
                      ]
                  ]
              ]
              None
      type_declaration "simple_pat" (fGramDef.ml[15,408+4]..[15,408+14]) (fGramDef.ml[15,408+0]..[20,669+16])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (fGramDef.ml[16,425+2]..[20,669+16])
              Ptyp_variant closed=Closed
              [
                Rtag "Vrn" false
                  [
                    core_type (fGramDef.ml[16,425+13]..[16,425+24])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[16,425+13]..[16,425+16])
                          Ptyp_constr "loc" (fGramDef.ml[16,425+13]..[16,425+16])
                          []
                        core_type (fGramDef.ml[16,425+18]..[16,425+24])
                          Ptyp_constr "string" (fGramDef.ml[16,425+18]..[16,425+24])
                          []
                      ]
                  ]
                Rtag "App" false
                  [
                    core_type (fGramDef.ml[16,425+37]..[16,425+64])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[16,425+37]..[16,425+40])
                          Ptyp_constr "loc" (fGramDef.ml[16,425+37]..[16,425+40])
                          []
                        core_type (fGramDef.ml[16,425+42]..[16,425+52])
                          Ptyp_constr "simple_pat" (fGramDef.ml[16,425+42]..[16,425+52])
                          []
                        core_type (fGramDef.ml[16,425+54]..[16,425+64])
                          Ptyp_constr "simple_pat" (fGramDef.ml[16,425+54]..[16,425+64])
                          []
                      ]
                  ]
                Rtag "Lid" false
                  [
                    core_type (fGramDef.ml[17,491+13]..[17,491+24])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[17,491+13]..[17,491+16])
                          Ptyp_constr "loc" (fGramDef.ml[17,491+13]..[17,491+16])
                          []
                        core_type (fGramDef.ml[17,491+18]..[17,491+24])
                          Ptyp_constr "string" (fGramDef.ml[17,491+18]..[17,491+24])
                          []
                      ]
                  ]
                Rinherit
                  core_type (fGramDef.ml[17,491+28]..[17,491+31])
                    Ptyp_constr "ant" (fGramDef.ml[17,491+28]..[17,491+31])
                    []
                Rtag "Com" false
                  [
                    core_type (fGramDef.ml[17,491+43]..[17,491+70])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[17,491+43]..[17,491+46])
                          Ptyp_constr "loc" (fGramDef.ml[17,491+43]..[17,491+46])
                          []
                        core_type (fGramDef.ml[17,491+48]..[17,491+58])
                          Ptyp_constr "simple_pat" (fGramDef.ml[17,491+48]..[17,491+58])
                          []
                        core_type (fGramDef.ml[17,491+60]..[17,491+70])
                          Ptyp_constr "simple_pat" (fGramDef.ml[17,491+60]..[17,491+70])
                          []
                      ]
                  ]
                Rtag "Alias" false
                  [
                    core_type (fGramDef.ml[18,563+15]..[18,563+38])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[18,563+15]..[18,563+18])
                          Ptyp_constr "loc" (fGramDef.ml[18,563+15]..[18,563+18])
                          []
                        core_type (fGramDef.ml[18,563+20]..[18,563+30])
                          Ptyp_constr "simple_pat" (fGramDef.ml[18,563+20]..[18,563+30])
                          []
                        core_type (fGramDef.ml[18,563+32]..[18,563+38])
                          Ptyp_constr "lident" (fGramDef.ml[18,563+32]..[18,563+38])
                          []
                      ]
                  ]
                Rtag "Bar" false
                  [
                    core_type (fGramDef.ml[19,603+13]..[19,603+40])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[19,603+13]..[19,603+16])
                          Ptyp_constr "loc" (fGramDef.ml[19,603+13]..[19,603+16])
                          []
                        core_type (fGramDef.ml[19,603+18]..[19,603+28])
                          Ptyp_constr "simple_pat" (fGramDef.ml[19,603+18]..[19,603+28])
                          []
                        core_type (fGramDef.ml[19,603+30]..[19,603+40])
                          Ptyp_constr "simple_pat" (fGramDef.ml[19,603+30]..[19,603+40])
                          []
                      ]
                  ]
                Rtag "Str" false
                  [
                    core_type (fGramDef.ml[19,603+53]..[19,603+64])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[19,603+53]..[19,603+56])
                          Ptyp_constr "loc" (fGramDef.ml[19,603+53]..[19,603+56])
                          []
                        core_type (fGramDef.ml[19,603+58]..[19,603+64])
                          Ptyp_constr "string" (fGramDef.ml[19,603+58]..[19,603+64])
                          []
                      ]
                  ]
                Rtag "Any" false
                  [
                    core_type (fGramDef.ml[20,669+12]..[20,669+15])
                      Ptyp_constr "loc" (fGramDef.ml[20,669+12]..[20,669+15])
                      []
                  ]
              ]
              None
    ]
  structure_item (fGramDef.ml[21,687+0]..[57,2126+5])
    Pstr_class
    [
      class_declaration (fGramDef.ml[21,687+0]..[57,2126+5])
        pci_virt = Concrete
        pci_params =
          []
        pci_name = "map" (fGramDef.ml[21,687+6]..[21,687+9])
        pci_expr =
          class_expr (fGramDef.ml[22,699+2]..[57,2126+5])
            Pcl_structure
            class_structure
              pattern (fGramDef.ml[22,699+9]..[22,699+28])
                Ppat_constraint
                pattern (fGramDef.ml[22,699+10]..[22,699+14])
                  Ppat_var "self" (fGramDef.ml[22,699+10]..[22,699+14])
                core_type (fGramDef.ml[22,699+17]..[22,699+27])
                  Ptyp_var self_type
              [
                class_field (fGramDef.ml[23,728+4]..[23,728+20])
                  Pcf_inherit Fresh
                    class_expr (fGramDef.ml[23,728+13]..[23,728+20])
                      Pcl_constr "mapbase" (fGramDef.ml[23,728+13]..[23,728+20])
                      []
                    None
                class_field (fGramDef.ml[24,749+4]..[27,852+52])
                  Pcf_method Public
                    "lident" (fGramDef.ml[24,749+11]..[24,749+17])
                    Concrete Fresh
                    expression (fGramDef.ml[24,749+11]..[27,852+52]) ghost
                      Pexp_poly
                      expression (fGramDef.ml[25,787+6]..[27,852+52])
                        Pexp_fun ""
                        None
                        pattern (fGramDef.ml[25,787+10]..[25,787+26])
                          Ppat_variant "Lid"
                          Some
                            pattern (fGramDef.ml[25,787+16]..[25,787+25])
                              Ppat_tuple
                              [
                                pattern (fGramDef.ml[25,787+17]..[25,787+20])
                                  Ppat_var "_a0" (fGramDef.ml[25,787+17]..[25,787+20])
                                pattern (fGramDef.ml[25,787+21]..[25,787+24])
                                  Ppat_var "_a1" (fGramDef.ml[25,787+21]..[25,787+24])
                              ]
                        expression (fGramDef.ml[26,818+8]..[27,852+52])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (fGramDef.ml[26,818+12]..[26,818+15])
                                Ppat_var "_a0" (fGramDef.ml[26,818+12]..[26,818+15])
                              expression (fGramDef.ml[26,818+18]..[26,818+30])
                                Pexp_apply
                                expression (fGramDef.ml[26,818+18]..[26,818+26])
                                  Pexp_send "loc"
                                  expression (fGramDef.ml[26,818+18]..[26,818+22])
                                    Pexp_ident "self" (fGramDef.ml[26,818+18]..[26,818+22])
                                [
                                  <label> ""
                                    expression (fGramDef.ml[26,818+27]..[26,818+30])
                                      Pexp_ident "_a0" (fGramDef.ml[26,818+27]..[26,818+30])
                                ]
                          ]
                          expression (fGramDef.ml[27,852+8]..[27,852+52])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (fGramDef.ml[27,852+12]..[27,852+15])
                                  Ppat_var "_a1" (fGramDef.ml[27,852+12]..[27,852+15])
                                expression (fGramDef.ml[27,852+18]..[27,852+33])
                                  Pexp_apply
                                  expression (fGramDef.ml[27,852+18]..[27,852+29])
                                    Pexp_send "string"
                                    expression (fGramDef.ml[27,852+18]..[27,852+22])
                                      Pexp_ident "self" (fGramDef.ml[27,852+18]..[27,852+22])
                                  [
                                    <label> ""
                                      expression (fGramDef.ml[27,852+30]..[27,852+33])
                                        Pexp_ident "_a1" (fGramDef.ml[27,852+30]..[27,852+33])
                                  ]
                            ]
                            expression (fGramDef.ml[27,852+37]..[27,852+52])
                              Pexp_variant "Lid"
                              Some
                                expression (fGramDef.ml[27,852+42]..[27,852+52])
                                  Pexp_tuple
                                  [
                                    expression (fGramDef.ml[27,852+43]..[27,852+46])
                                      Pexp_ident "_a0" (fGramDef.ml[27,852+43]..[27,852+46])
                                    expression (fGramDef.ml[27,852+48]..[27,852+51])
                                      Pexp_ident "_a1" (fGramDef.ml[27,852+48]..[27,852+51])
                                  ]
                      Some
                        core_type (fGramDef.ml[24,749+20]..[24,749+36])
                          Ptyp_arrow
                          ""
                          core_type (fGramDef.ml[24,749+20]..[24,749+26])
                            Ptyp_constr "lident" (fGramDef.ml[24,749+20]..[24,749+26])
                            []
                          core_type (fGramDef.ml[24,749+30]..[24,749+36])
                            Ptyp_constr "lident" (fGramDef.ml[24,749+30]..[24,749+36])
                            []
                class_field (fGramDef.ml[28,905+4]..[56,2071+54])
                  Pcf_method Public
                    "simple_pat" (fGramDef.ml[28,905+11]..[28,905+21])
                    Concrete Fresh
                    expression (fGramDef.ml[28,905+11]..[56,2071+54]) ghost
                      Pexp_poly
                      expression (fGramDef.ml[29,955+6]..[56,2071+54])
                        Pexp_function
                        [
                          <case>
                            pattern (fGramDef.ml[30,970+8]..[30,970+22])
                              Ppat_variant "Vrn"
                              Some
                                pattern (fGramDef.ml[30,970+13]..[30,970+22])
                                  Ppat_tuple
                                  [
                                    pattern (fGramDef.ml[30,970+14]..[30,970+17])
                                      Ppat_var "_a0" (fGramDef.ml[30,970+14]..[30,970+17])
                                    pattern (fGramDef.ml[30,970+18]..[30,970+21])
                                      Ppat_var "_a1" (fGramDef.ml[30,970+18]..[30,970+21])
                                  ]
                            expression (fGramDef.ml[31,996+10]..[32,1032+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (fGramDef.ml[31,996+14]..[31,996+17])
                                    Ppat_var "_a0" (fGramDef.ml[31,996+14]..[31,996+17])
                                  expression (fGramDef.ml[31,996+20]..[31,996+32])
                                    Pexp_apply
                                    expression (fGramDef.ml[31,996+20]..[31,996+28])
                                      Pexp_send "loc"
                                      expression (fGramDef.ml[31,996+20]..[31,996+24])
                                        Pexp_ident "self" (fGramDef.ml[31,996+20]..[31,996+24])
                                    [
                                      <label> ""
                                        expression (fGramDef.ml[31,996+29]..[31,996+32])
                                          Pexp_ident "_a0" (fGramDef.ml[31,996+29]..[31,996+32])
                                    ]
                              ]
                              expression (fGramDef.ml[32,1032+10]..[32,1032+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (fGramDef.ml[32,1032+14]..[32,1032+17])
                                      Ppat_var "_a1" (fGramDef.ml[32,1032+14]..[32,1032+17])
                                    expression (fGramDef.ml[32,1032+20]..[32,1032+35])
                                      Pexp_apply
                                      expression (fGramDef.ml[32,1032+20]..[32,1032+31])
                                        Pexp_send "string"
                                        expression (fGramDef.ml[32,1032+20]..[32,1032+24])
                                          Pexp_ident "self" (fGramDef.ml[32,1032+20]..[32,1032+24])
                                      [
                                        <label> ""
                                          expression (fGramDef.ml[32,1032+32]..[32,1032+35])
                                            Pexp_ident "_a1" (fGramDef.ml[32,1032+32]..[32,1032+35])
                                      ]
                                ]
                                expression (fGramDef.ml[32,1032+39]..[32,1032+54])
                                  Pexp_variant "Vrn"
                                  Some
                                    expression (fGramDef.ml[32,1032+44]..[32,1032+54])
                                      Pexp_tuple
                                      [
                                        expression (fGramDef.ml[32,1032+45]..[32,1032+48])
                                          Pexp_ident "_a0" (fGramDef.ml[32,1032+45]..[32,1032+48])
                                        expression (fGramDef.ml[32,1032+50]..[32,1032+53])
                                          Pexp_ident "_a1" (fGramDef.ml[32,1032+50]..[32,1032+53])
                                      ]
                          <case>
                            pattern (fGramDef.ml[33,1087+8]..[33,1087+26])
                              Ppat_variant "App"
                              Some
                                pattern (fGramDef.ml[33,1087+13]..[33,1087+26])
                                  Ppat_tuple
                                  [
                                    pattern (fGramDef.ml[33,1087+14]..[33,1087+17])
                                      Ppat_var "_a0" (fGramDef.ml[33,1087+14]..[33,1087+17])
                                    pattern (fGramDef.ml[33,1087+18]..[33,1087+21])
                                      Ppat_var "_a1" (fGramDef.ml[33,1087+18]..[33,1087+21])
                                    pattern (fGramDef.ml[33,1087+22]..[33,1087+25])
                                      Ppat_var "_a2" (fGramDef.ml[33,1087+22]..[33,1087+25])
                                  ]
                            expression (fGramDef.ml[34,1117+10]..[36,1196+63])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (fGramDef.ml[34,1117+14]..[34,1117+17])
                                    Ppat_var "_a0" (fGramDef.ml[34,1117+14]..[34,1117+17])
                                  expression (fGramDef.ml[34,1117+20]..[34,1117+32])
                                    Pexp_apply
                                    expression (fGramDef.ml[34,1117+20]..[34,1117+28])
                                      Pexp_send "loc"
                                      expression (fGramDef.ml[34,1117+20]..[34,1117+24])
                                        Pexp_ident "self" (fGramDef.ml[34,1117+20]..[34,1117+24])
                                    [
                                      <label> ""
                                        expression (fGramDef.ml[34,1117+29]..[34,1117+32])
                                          Pexp_ident "_a0" (fGramDef.ml[34,1117+29]..[34,1117+32])
                                    ]
                              ]
                              expression (fGramDef.ml[35,1153+10]..[36,1196+63])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (fGramDef.ml[35,1153+14]..[35,1153+17])
                                      Ppat_var "_a1" (fGramDef.ml[35,1153+14]..[35,1153+17])
                                    expression (fGramDef.ml[35,1153+20]..[35,1153+39])
                                      Pexp_apply
                                      expression (fGramDef.ml[35,1153+20]..[35,1153+35])
                                        Pexp_send "simple_pat"
                                        expression (fGramDef.ml[35,1153+20]..[35,1153+24])
                                          Pexp_ident "self" (fGramDef.ml[35,1153+20]..[35,1153+24])
                                      [
                                        <label> ""
                                          expression (fGramDef.ml[35,1153+36]..[35,1153+39])
                                            Pexp_ident "_a1" (fGramDef.ml[35,1153+36]..[35,1153+39])
                                      ]
                                ]
                                expression (fGramDef.ml[36,1196+10]..[36,1196+63])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (fGramDef.ml[36,1196+14]..[36,1196+17])
                                        Ppat_var "_a2" (fGramDef.ml[36,1196+14]..[36,1196+17])
                                      expression (fGramDef.ml[36,1196+20]..[36,1196+39])
                                        Pexp_apply
                                        expression (fGramDef.ml[36,1196+20]..[36,1196+35])
                                          Pexp_send "simple_pat"
                                          expression (fGramDef.ml[36,1196+20]..[36,1196+24])
                                            Pexp_ident "self" (fGramDef.ml[36,1196+20]..[36,1196+24])
                                        [
                                          <label> ""
                                            expression (fGramDef.ml[36,1196+36]..[36,1196+39])
                                              Pexp_ident "_a2" (fGramDef.ml[36,1196+36]..[36,1196+39])
                                        ]
                                  ]
                                  expression (fGramDef.ml[36,1196+43]..[36,1196+63])
                                    Pexp_variant "App"
                                    Some
                                      expression (fGramDef.ml[36,1196+48]..[36,1196+63])
                                        Pexp_tuple
                                        [
                                          expression (fGramDef.ml[36,1196+49]..[36,1196+52])
                                            Pexp_ident "_a0" (fGramDef.ml[36,1196+49]..[36,1196+52])
                                          expression (fGramDef.ml[36,1196+54]..[36,1196+57])
                                            Pexp_ident "_a1" (fGramDef.ml[36,1196+54]..[36,1196+57])
                                          expression (fGramDef.ml[36,1196+59]..[36,1196+62])
                                            Pexp_ident "_a2" (fGramDef.ml[36,1196+59]..[36,1196+62])
                                        ]
                          <case>
                            pattern (fGramDef.ml[37,1260+8]..[37,1260+22])
                              Ppat_variant "Lid"
                              Some
                                pattern (fGramDef.ml[37,1260+13]..[37,1260+22])
                                  Ppat_tuple
                                  [
                                    pattern (fGramDef.ml[37,1260+14]..[37,1260+17])
                                      Ppat_var "_a0" (fGramDef.ml[37,1260+14]..[37,1260+17])
                                    pattern (fGramDef.ml[37,1260+18]..[37,1260+21])
                                      Ppat_var "_a1" (fGramDef.ml[37,1260+18]..[37,1260+21])
                                  ]
                            expression (fGramDef.ml[38,1286+10]..[39,1322+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (fGramDef.ml[38,1286+14]..[38,1286+17])
                                    Ppat_var "_a0" (fGramDef.ml[38,1286+14]..[38,1286+17])
                                  expression (fGramDef.ml[38,1286+20]..[38,1286+32])
                                    Pexp_apply
                                    expression (fGramDef.ml[38,1286+20]..[38,1286+28])
                                      Pexp_send "loc"
                                      expression (fGramDef.ml[38,1286+20]..[38,1286+24])
                                        Pexp_ident "self" (fGramDef.ml[38,1286+20]..[38,1286+24])
                                    [
                                      <label> ""
                                        expression (fGramDef.ml[38,1286+29]..[38,1286+32])
                                          Pexp_ident "_a0" (fGramDef.ml[38,1286+29]..[38,1286+32])
                                    ]
                              ]
                              expression (fGramDef.ml[39,1322+10]..[39,1322+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (fGramDef.ml[39,1322+14]..[39,1322+17])
                                      Ppat_var "_a1" (fGramDef.ml[39,1322+14]..[39,1322+17])
                                    expression (fGramDef.ml[39,1322+20]..[39,1322+35])
                                      Pexp_apply
                                      expression (fGramDef.ml[39,1322+20]..[39,1322+31])
                                        Pexp_send "string"
                                        expression (fGramDef.ml[39,1322+20]..[39,1322+24])
                                          Pexp_ident "self" (fGramDef.ml[39,1322+20]..[39,1322+24])
                                      [
                                        <label> ""
                                          expression (fGramDef.ml[39,1322+32]..[39,1322+35])
                                            Pexp_ident "_a1" (fGramDef.ml[39,1322+32]..[39,1322+35])
                                      ]
                                ]
                                expression (fGramDef.ml[39,1322+39]..[39,1322+54])
                                  Pexp_variant "Lid"
                                  Some
                                    expression (fGramDef.ml[39,1322+44]..[39,1322+54])
                                      Pexp_tuple
                                      [
                                        expression (fGramDef.ml[39,1322+45]..[39,1322+48])
                                          Pexp_ident "_a0" (fGramDef.ml[39,1322+45]..[39,1322+48])
                                        expression (fGramDef.ml[39,1322+50]..[39,1322+53])
                                          Pexp_ident "_a1" (fGramDef.ml[39,1322+50]..[39,1322+53])
                                      ]
                          <case>
                            pattern (fGramDef.ml[40,1377+8]..[40,1377+19])
                              Ppat_alias "_a0" (fGramDef.ml[40,1377+16]..[40,1377+19])
                              pattern (fGramDef.ml[40,1377+8]..[40,1377+12])
                                Ppat_type
                                "ant" (fGramDef.ml[40,1377+9]..[40,1377+12])
                            expression (fGramDef.ml[40,1377+23]..[40,1377+57]) ghost
                              Pexp_coerce
                              expression (fGramDef.ml[40,1377+24]..[40,1377+36])
                                Pexp_apply
                                expression (fGramDef.ml[40,1377+24]..[40,1377+32])
                                  Pexp_send "ant"
                                  expression (fGramDef.ml[40,1377+24]..[40,1377+28])
                                    Pexp_ident "self" (fGramDef.ml[40,1377+24]..[40,1377+28])
                                [
                                  <label> ""
                                    expression (fGramDef.ml[40,1377+33]..[40,1377+36])
                                      Pexp_ident "_a0" (fGramDef.ml[40,1377+33]..[40,1377+36])
                                ]
                              Some
                                core_type (fGramDef.ml[40,1377+39]..[40,1377+42])
                                  Ptyp_constr "ant" (fGramDef.ml[40,1377+39]..[40,1377+42])
                                  []
                              core_type (fGramDef.ml[40,1377+46]..[40,1377+56])
                                Ptyp_constr "simple_pat" (fGramDef.ml[40,1377+46]..[40,1377+56])
                                []
                          <case>
                            pattern (fGramDef.ml[41,1435+8]..[41,1435+26])
                              Ppat_variant "Com"
                              Some
                                pattern (fGramDef.ml[41,1435+13]..[41,1435+26])
                                  Ppat_tuple
                                  [
                                    pattern (fGramDef.ml[41,1435+14]..[41,1435+17])
                                      Ppat_var "_a0" (fGramDef.ml[41,1435+14]..[41,1435+17])
                                    pattern (fGramDef.ml[41,1435+18]..[41,1435+21])
                                      Ppat_var "_a1" (fGramDef.ml[41,1435+18]..[41,1435+21])
                                    pattern (fGramDef.ml[41,1435+22]..[41,1435+25])
                                      Ppat_var "_a2" (fGramDef.ml[41,1435+22]..[41,1435+25])
                                  ]
                            expression (fGramDef.ml[42,1465+10]..[44,1544+63])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (fGramDef.ml[42,1465+14]..[42,1465+17])
                                    Ppat_var "_a0" (fGramDef.ml[42,1465+14]..[42,1465+17])
                                  expression (fGramDef.ml[42,1465+20]..[42,1465+32])
                                    Pexp_apply
                                    expression (fGramDef.ml[42,1465+20]..[42,1465+28])
                                      Pexp_send "loc"
                                      expression (fGramDef.ml[42,1465+20]..[42,1465+24])
                                        Pexp_ident "self" (fGramDef.ml[42,1465+20]..[42,1465+24])
                                    [
                                      <label> ""
                                        expression (fGramDef.ml[42,1465+29]..[42,1465+32])
                                          Pexp_ident "_a0" (fGramDef.ml[42,1465+29]..[42,1465+32])
                                    ]
                              ]
                              expression (fGramDef.ml[43,1501+10]..[44,1544+63])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (fGramDef.ml[43,1501+14]..[43,1501+17])
                                      Ppat_var "_a1" (fGramDef.ml[43,1501+14]..[43,1501+17])
                                    expression (fGramDef.ml[43,1501+20]..[43,1501+39])
                                      Pexp_apply
                                      expression (fGramDef.ml[43,1501+20]..[43,1501+35])
                                        Pexp_send "simple_pat"
                                        expression (fGramDef.ml[43,1501+20]..[43,1501+24])
                                          Pexp_ident "self" (fGramDef.ml[43,1501+20]..[43,1501+24])
                                      [
                                        <label> ""
                                          expression (fGramDef.ml[43,1501+36]..[43,1501+39])
                                            Pexp_ident "_a1" (fGramDef.ml[43,1501+36]..[43,1501+39])
                                      ]
                                ]
                                expression (fGramDef.ml[44,1544+10]..[44,1544+63])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (fGramDef.ml[44,1544+14]..[44,1544+17])
                                        Ppat_var "_a2" (fGramDef.ml[44,1544+14]..[44,1544+17])
                                      expression (fGramDef.ml[44,1544+20]..[44,1544+39])
                                        Pexp_apply
                                        expression (fGramDef.ml[44,1544+20]..[44,1544+35])
                                          Pexp_send "simple_pat"
                                          expression (fGramDef.ml[44,1544+20]..[44,1544+24])
                                            Pexp_ident "self" (fGramDef.ml[44,1544+20]..[44,1544+24])
                                        [
                                          <label> ""
                                            expression (fGramDef.ml[44,1544+36]..[44,1544+39])
                                              Pexp_ident "_a2" (fGramDef.ml[44,1544+36]..[44,1544+39])
                                        ]
                                  ]
                                  expression (fGramDef.ml[44,1544+43]..[44,1544+63])
                                    Pexp_variant "Com"
                                    Some
                                      expression (fGramDef.ml[44,1544+48]..[44,1544+63])
                                        Pexp_tuple
                                        [
                                          expression (fGramDef.ml[44,1544+49]..[44,1544+52])
                                            Pexp_ident "_a0" (fGramDef.ml[44,1544+49]..[44,1544+52])
                                          expression (fGramDef.ml[44,1544+54]..[44,1544+57])
                                            Pexp_ident "_a1" (fGramDef.ml[44,1544+54]..[44,1544+57])
                                          expression (fGramDef.ml[44,1544+59]..[44,1544+62])
                                            Pexp_ident "_a2" (fGramDef.ml[44,1544+59]..[44,1544+62])
                                        ]
                          <case>
                            pattern (fGramDef.ml[45,1608+8]..[45,1608+28])
                              Ppat_variant "Alias"
                              Some
                                pattern (fGramDef.ml[45,1608+15]..[45,1608+28])
                                  Ppat_tuple
                                  [
                                    pattern (fGramDef.ml[45,1608+16]..[45,1608+19])
                                      Ppat_var "_a0" (fGramDef.ml[45,1608+16]..[45,1608+19])
                                    pattern (fGramDef.ml[45,1608+20]..[45,1608+23])
                                      Ppat_var "_a1" (fGramDef.ml[45,1608+20]..[45,1608+23])
                                    pattern (fGramDef.ml[45,1608+24]..[45,1608+27])
                                      Ppat_var "_a2" (fGramDef.ml[45,1608+24]..[45,1608+27])
                                  ]
                            expression (fGramDef.ml[46,1640+10]..[48,1719+61])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (fGramDef.ml[46,1640+14]..[46,1640+17])
                                    Ppat_var "_a0" (fGramDef.ml[46,1640+14]..[46,1640+17])
                                  expression (fGramDef.ml[46,1640+20]..[46,1640+32])
                                    Pexp_apply
                                    expression (fGramDef.ml[46,1640+20]..[46,1640+28])
                                      Pexp_send "loc"
                                      expression (fGramDef.ml[46,1640+20]..[46,1640+24])
                                        Pexp_ident "self" (fGramDef.ml[46,1640+20]..[46,1640+24])
                                    [
                                      <label> ""
                                        expression (fGramDef.ml[46,1640+29]..[46,1640+32])
                                          Pexp_ident "_a0" (fGramDef.ml[46,1640+29]..[46,1640+32])
                                    ]
                              ]
                              expression (fGramDef.ml[47,1676+10]..[48,1719+61])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (fGramDef.ml[47,1676+14]..[47,1676+17])
                                      Ppat_var "_a1" (fGramDef.ml[47,1676+14]..[47,1676+17])
                                    expression (fGramDef.ml[47,1676+20]..[47,1676+39])
                                      Pexp_apply
                                      expression (fGramDef.ml[47,1676+20]..[47,1676+35])
                                        Pexp_send "simple_pat"
                                        expression (fGramDef.ml[47,1676+20]..[47,1676+24])
                                          Pexp_ident "self" (fGramDef.ml[47,1676+20]..[47,1676+24])
                                      [
                                        <label> ""
                                          expression (fGramDef.ml[47,1676+36]..[47,1676+39])
                                            Pexp_ident "_a1" (fGramDef.ml[47,1676+36]..[47,1676+39])
                                      ]
                                ]
                                expression (fGramDef.ml[48,1719+10]..[48,1719+61])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (fGramDef.ml[48,1719+14]..[48,1719+17])
                                        Ppat_var "_a2" (fGramDef.ml[48,1719+14]..[48,1719+17])
                                      expression (fGramDef.ml[48,1719+20]..[48,1719+35])
                                        Pexp_apply
                                        expression (fGramDef.ml[48,1719+20]..[48,1719+31])
                                          Pexp_send "lident"
                                          expression (fGramDef.ml[48,1719+20]..[48,1719+24])
                                            Pexp_ident "self" (fGramDef.ml[48,1719+20]..[48,1719+24])
                                        [
                                          <label> ""
                                            expression (fGramDef.ml[48,1719+32]..[48,1719+35])
                                              Pexp_ident "_a2" (fGramDef.ml[48,1719+32]..[48,1719+35])
                                        ]
                                  ]
                                  expression (fGramDef.ml[48,1719+39]..[48,1719+61])
                                    Pexp_variant "Alias"
                                    Some
                                      expression (fGramDef.ml[48,1719+46]..[48,1719+61])
                                        Pexp_tuple
                                        [
                                          expression (fGramDef.ml[48,1719+47]..[48,1719+50])
                                            Pexp_ident "_a0" (fGramDef.ml[48,1719+47]..[48,1719+50])
                                          expression (fGramDef.ml[48,1719+52]..[48,1719+55])
                                            Pexp_ident "_a1" (fGramDef.ml[48,1719+52]..[48,1719+55])
                                          expression (fGramDef.ml[48,1719+57]..[48,1719+60])
                                            Pexp_ident "_a2" (fGramDef.ml[48,1719+57]..[48,1719+60])
                                        ]
                          <case>
                            pattern (fGramDef.ml[49,1781+8]..[49,1781+26])
                              Ppat_variant "Bar"
                              Some
                                pattern (fGramDef.ml[49,1781+13]..[49,1781+26])
                                  Ppat_tuple
                                  [
                                    pattern (fGramDef.ml[49,1781+14]..[49,1781+17])
                                      Ppat_var "_a0" (fGramDef.ml[49,1781+14]..[49,1781+17])
                                    pattern (fGramDef.ml[49,1781+18]..[49,1781+21])
                                      Ppat_var "_a1" (fGramDef.ml[49,1781+18]..[49,1781+21])
                                    pattern (fGramDef.ml[49,1781+22]..[49,1781+25])
                                      Ppat_var "_a2" (fGramDef.ml[49,1781+22]..[49,1781+25])
                                  ]
                            expression (fGramDef.ml[50,1811+10]..[52,1890+63])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (fGramDef.ml[50,1811+14]..[50,1811+17])
                                    Ppat_var "_a0" (fGramDef.ml[50,1811+14]..[50,1811+17])
                                  expression (fGramDef.ml[50,1811+20]..[50,1811+32])
                                    Pexp_apply
                                    expression (fGramDef.ml[50,1811+20]..[50,1811+28])
                                      Pexp_send "loc"
                                      expression (fGramDef.ml[50,1811+20]..[50,1811+24])
                                        Pexp_ident "self" (fGramDef.ml[50,1811+20]..[50,1811+24])
                                    [
                                      <label> ""
                                        expression (fGramDef.ml[50,1811+29]..[50,1811+32])
                                          Pexp_ident "_a0" (fGramDef.ml[50,1811+29]..[50,1811+32])
                                    ]
                              ]
                              expression (fGramDef.ml[51,1847+10]..[52,1890+63])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (fGramDef.ml[51,1847+14]..[51,1847+17])
                                      Ppat_var "_a1" (fGramDef.ml[51,1847+14]..[51,1847+17])
                                    expression (fGramDef.ml[51,1847+20]..[51,1847+39])
                                      Pexp_apply
                                      expression (fGramDef.ml[51,1847+20]..[51,1847+35])
                                        Pexp_send "simple_pat"
                                        expression (fGramDef.ml[51,1847+20]..[51,1847+24])
                                          Pexp_ident "self" (fGramDef.ml[51,1847+20]..[51,1847+24])
                                      [
                                        <label> ""
                                          expression (fGramDef.ml[51,1847+36]..[51,1847+39])
                                            Pexp_ident "_a1" (fGramDef.ml[51,1847+36]..[51,1847+39])
                                      ]
                                ]
                                expression (fGramDef.ml[52,1890+10]..[52,1890+63])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (fGramDef.ml[52,1890+14]..[52,1890+17])
                                        Ppat_var "_a2" (fGramDef.ml[52,1890+14]..[52,1890+17])
                                      expression (fGramDef.ml[52,1890+20]..[52,1890+39])
                                        Pexp_apply
                                        expression (fGramDef.ml[52,1890+20]..[52,1890+35])
                                          Pexp_send "simple_pat"
                                          expression (fGramDef.ml[52,1890+20]..[52,1890+24])
                                            Pexp_ident "self" (fGramDef.ml[52,1890+20]..[52,1890+24])
                                        [
                                          <label> ""
                                            expression (fGramDef.ml[52,1890+36]..[52,1890+39])
                                              Pexp_ident "_a2" (fGramDef.ml[52,1890+36]..[52,1890+39])
                                        ]
                                  ]
                                  expression (fGramDef.ml[52,1890+43]..[52,1890+63])
                                    Pexp_variant "Bar"
                                    Some
                                      expression (fGramDef.ml[52,1890+48]..[52,1890+63])
                                        Pexp_tuple
                                        [
                                          expression (fGramDef.ml[52,1890+49]..[52,1890+52])
                                            Pexp_ident "_a0" (fGramDef.ml[52,1890+49]..[52,1890+52])
                                          expression (fGramDef.ml[52,1890+54]..[52,1890+57])
                                            Pexp_ident "_a1" (fGramDef.ml[52,1890+54]..[52,1890+57])
                                          expression (fGramDef.ml[52,1890+59]..[52,1890+62])
                                            Pexp_ident "_a2" (fGramDef.ml[52,1890+59]..[52,1890+62])
                                        ]
                          <case>
                            pattern (fGramDef.ml[53,1954+8]..[53,1954+22])
                              Ppat_variant "Str"
                              Some
                                pattern (fGramDef.ml[53,1954+13]..[53,1954+22])
                                  Ppat_tuple
                                  [
                                    pattern (fGramDef.ml[53,1954+14]..[53,1954+17])
                                      Ppat_var "_a0" (fGramDef.ml[53,1954+14]..[53,1954+17])
                                    pattern (fGramDef.ml[53,1954+18]..[53,1954+21])
                                      Ppat_var "_a1" (fGramDef.ml[53,1954+18]..[53,1954+21])
                                  ]
                            expression (fGramDef.ml[54,1980+10]..[55,2016+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (fGramDef.ml[54,1980+14]..[54,1980+17])
                                    Ppat_var "_a0" (fGramDef.ml[54,1980+14]..[54,1980+17])
                                  expression (fGramDef.ml[54,1980+20]..[54,1980+32])
                                    Pexp_apply
                                    expression (fGramDef.ml[54,1980+20]..[54,1980+28])
                                      Pexp_send "loc"
                                      expression (fGramDef.ml[54,1980+20]..[54,1980+24])
                                        Pexp_ident "self" (fGramDef.ml[54,1980+20]..[54,1980+24])
                                    [
                                      <label> ""
                                        expression (fGramDef.ml[54,1980+29]..[54,1980+32])
                                          Pexp_ident "_a0" (fGramDef.ml[54,1980+29]..[54,1980+32])
                                    ]
                              ]
                              expression (fGramDef.ml[55,2016+10]..[55,2016+54])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (fGramDef.ml[55,2016+14]..[55,2016+17])
                                      Ppat_var "_a1" (fGramDef.ml[55,2016+14]..[55,2016+17])
                                    expression (fGramDef.ml[55,2016+20]..[55,2016+35])
                                      Pexp_apply
                                      expression (fGramDef.ml[55,2016+20]..[55,2016+31])
                                        Pexp_send "string"
                                        expression (fGramDef.ml[55,2016+20]..[55,2016+24])
                                          Pexp_ident "self" (fGramDef.ml[55,2016+20]..[55,2016+24])
                                      [
                                        <label> ""
                                          expression (fGramDef.ml[55,2016+32]..[55,2016+35])
                                            Pexp_ident "_a1" (fGramDef.ml[55,2016+32]..[55,2016+35])
                                      ]
                                ]
                                expression (fGramDef.ml[55,2016+39]..[55,2016+54])
                                  Pexp_variant "Str"
                                  Some
                                    expression (fGramDef.ml[55,2016+44]..[55,2016+54])
                                      Pexp_tuple
                                      [
                                        expression (fGramDef.ml[55,2016+45]..[55,2016+48])
                                          Pexp_ident "_a0" (fGramDef.ml[55,2016+45]..[55,2016+48])
                                        expression (fGramDef.ml[55,2016+50]..[55,2016+53])
                                          Pexp_ident "_a1" (fGramDef.ml[55,2016+50]..[55,2016+53])
                                      ]
                          <case>
                            pattern (fGramDef.ml[56,2071+8]..[56,2071+16])
                              Ppat_variant "Any"
                              Some
                                pattern (fGramDef.ml[56,2071+13]..[56,2071+16])
                                  Ppat_var "_a0" (fGramDef.ml[56,2071+13]..[56,2071+16])
                            expression (fGramDef.ml[56,2071+20]..[56,2071+54])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (fGramDef.ml[56,2071+24]..[56,2071+27])
                                    Ppat_var "_a0" (fGramDef.ml[56,2071+24]..[56,2071+27])
                                  expression (fGramDef.ml[56,2071+30]..[56,2071+42])
                                    Pexp_apply
                                    expression (fGramDef.ml[56,2071+30]..[56,2071+38])
                                      Pexp_send "loc"
                                      expression (fGramDef.ml[56,2071+30]..[56,2071+34])
                                        Pexp_ident "self" (fGramDef.ml[56,2071+30]..[56,2071+34])
                                    [
                                      <label> ""
                                        expression (fGramDef.ml[56,2071+39]..[56,2071+42])
                                          Pexp_ident "_a0" (fGramDef.ml[56,2071+39]..[56,2071+42])
                                    ]
                              ]
                              expression (fGramDef.ml[56,2071+46]..[56,2071+54])
                                Pexp_variant "Any"
                                Some
                                  expression (fGramDef.ml[56,2071+51]..[56,2071+54])
                                    Pexp_ident "_a0" (fGramDef.ml[56,2071+51]..[56,2071+54])
                        ]
                      Some
                        core_type (fGramDef.ml[28,905+24]..[28,905+48])
                          Ptyp_arrow
                          ""
                          core_type (fGramDef.ml[28,905+24]..[28,905+34])
                            Ptyp_constr "simple_pat" (fGramDef.ml[28,905+24]..[28,905+34])
                            []
                          core_type (fGramDef.ml[28,905+38]..[28,905+48])
                            Ptyp_constr "simple_pat" (fGramDef.ml[28,905+38]..[28,905+48])
                            []
              ]
    ]
  structure_item (fGramDef.ml[58,2132+0]..[87,3458+73])
    Pstr_value Rec
    [
      <def>
        pattern (fGramDef.ml[58,2132+8]..[58,2132+23])
          Ppat_var "pp_print_lident" (fGramDef.ml[58,2132+8]..[58,2132+23])
        expression (fGramDef.ml[58,2132+23]..[61,2290+25]) ghost
          Pexp_constraint
          expression (fGramDef.ml[59,2194+2]..[61,2290+25])
            Pexp_fun ""
            None
            pattern (fGramDef.ml[59,2194+6]..[59,2194+9])
              Ppat_var "fmt" (fGramDef.ml[59,2194+6]..[59,2194+9])
            expression (fGramDef.ml[59,2194+11]..[61,2290+25]) ghost
              Pexp_fun ""
              None
              pattern (fGramDef.ml[59,2194+11]..[59,2194+27])
                Ppat_variant "Lid"
                Some
                  pattern (fGramDef.ml[59,2194+17]..[59,2194+26])
                    Ppat_tuple
                    [
                      pattern (fGramDef.ml[59,2194+18]..[59,2194+21])
                        Ppat_var "_a0" (fGramDef.ml[59,2194+18]..[59,2194+21])
                      pattern (fGramDef.ml[59,2194+22]..[59,2194+25])
                        Ppat_var "_a1" (fGramDef.ml[59,2194+22]..[59,2194+25])
                    ]
              expression (fGramDef.ml[60,2226+4]..[61,2290+25])
                Pexp_apply
                expression (fGramDef.ml[60,2226+4]..[60,2226+18])
                  Pexp_ident "Format.fprintf" (fGramDef.ml[60,2226+4]..[60,2226+18])
                [
                  <label> ""
                    expression (fGramDef.ml[60,2226+19]..[60,2226+22])
                      Pexp_ident "fmt" (fGramDef.ml[60,2226+19]..[60,2226+22])
                  <label> ""
                    expression (fGramDef.ml[60,2226+23]..[60,2226+46])
                      Pexp_constant Const_string("@[<1>(`Lid@ %a@ %a)@]",None)
                  <label> ""
                    expression (fGramDef.ml[60,2226+47]..[60,2226+59])
                      Pexp_ident "pp_print_loc" (fGramDef.ml[60,2226+47]..[60,2226+59])
                  <label> ""
                    expression (fGramDef.ml[60,2226+60]..[60,2226+63])
                      Pexp_ident "_a0" (fGramDef.ml[60,2226+60]..[60,2226+63])
                  <label> ""
                    expression (fGramDef.ml[61,2290+6]..[61,2290+21])
                      Pexp_ident "pp_print_string" (fGramDef.ml[61,2290+6]..[61,2290+21])
                  <label> ""
                    expression (fGramDef.ml[61,2290+22]..[61,2290+25])
                      Pexp_ident "_a1" (fGramDef.ml[61,2290+22]..[61,2290+25])
                ]
          core_type (fGramDef.ml[58,2132+25]..[58,2132+59])
            Ptyp_arrow
            ""
            core_type (fGramDef.ml[58,2132+25]..[58,2132+41])
              Ptyp_constr "Format.formatter" (fGramDef.ml[58,2132+25]..[58,2132+41])
              []
            core_type (fGramDef.ml[58,2132+45]..[58,2132+59])
              Ptyp_arrow
              ""
              core_type (fGramDef.ml[58,2132+45]..[58,2132+51])
                Ptyp_constr "lident" (fGramDef.ml[58,2132+45]..[58,2132+51])
                []
              core_type (fGramDef.ml[58,2132+55]..[58,2132+59])
                Ptyp_constr "unit" (fGramDef.ml[58,2132+55]..[58,2132+59])
                []
      <def>
        pattern (fGramDef.ml[62,2316+4]..[62,2316+23])
          Ppat_var "pp_print_simple_pat" (fGramDef.ml[62,2316+4]..[62,2316+23])
        expression (fGramDef.ml[62,2316+23]..[87,3458+73]) ghost
          Pexp_constraint
          expression (fGramDef.ml[63,2382+2]..[87,3458+73])
            Pexp_fun ""
            None
            pattern (fGramDef.ml[63,2382+6]..[63,2382+9])
              Ppat_var "fmt" (fGramDef.ml[63,2382+6]..[63,2382+9])
            expression (fGramDef.ml[64,2396+4]..[87,3458+73])
              Pexp_function
              [
                <case>
                  pattern (fGramDef.ml[65,2409+6]..[65,2409+20])
                    Ppat_variant "Vrn"
                    Some
                      pattern (fGramDef.ml[65,2409+11]..[65,2409+20])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[65,2409+12]..[65,2409+15])
                            Ppat_var "_a0" (fGramDef.ml[65,2409+12]..[65,2409+15])
                          pattern (fGramDef.ml[65,2409+16]..[65,2409+19])
                            Ppat_var "_a1" (fGramDef.ml[65,2409+16]..[65,2409+19])
                        ]
                  expression (fGramDef.ml[66,2433+8]..[67,2501+29])
                    Pexp_apply
                    expression (fGramDef.ml[66,2433+8]..[66,2433+22])
                      Pexp_ident "Format.fprintf" (fGramDef.ml[66,2433+8]..[66,2433+22])
                    [
                      <label> ""
                        expression (fGramDef.ml[66,2433+23]..[66,2433+26])
                          Pexp_ident "fmt" (fGramDef.ml[66,2433+23]..[66,2433+26])
                      <label> ""
                        expression (fGramDef.ml[66,2433+27]..[66,2433+50])
                          Pexp_constant Const_string("@[<1>(`Vrn@ %a@ %a)@]",None)
                      <label> ""
                        expression (fGramDef.ml[66,2433+51]..[66,2433+63])
                          Pexp_ident "pp_print_loc" (fGramDef.ml[66,2433+51]..[66,2433+63])
                      <label> ""
                        expression (fGramDef.ml[66,2433+64]..[66,2433+67])
                          Pexp_ident "_a0" (fGramDef.ml[66,2433+64]..[66,2433+67])
                      <label> ""
                        expression (fGramDef.ml[67,2501+10]..[67,2501+25])
                          Pexp_ident "pp_print_string" (fGramDef.ml[67,2501+10]..[67,2501+25])
                      <label> ""
                        expression (fGramDef.ml[67,2501+26]..[67,2501+29])
                          Pexp_ident "_a1" (fGramDef.ml[67,2501+26]..[67,2501+29])
                    ]
                <case>
                  pattern (fGramDef.ml[68,2531+6]..[68,2531+24])
                    Ppat_variant "App"
                    Some
                      pattern (fGramDef.ml[68,2531+11]..[68,2531+24])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[68,2531+12]..[68,2531+15])
                            Ppat_var "_a0" (fGramDef.ml[68,2531+12]..[68,2531+15])
                          pattern (fGramDef.ml[68,2531+16]..[68,2531+19])
                            Ppat_var "_a1" (fGramDef.ml[68,2531+16]..[68,2531+19])
                          pattern (fGramDef.ml[68,2531+20]..[68,2531+23])
                            Ppat_var "_a2" (fGramDef.ml[68,2531+20]..[68,2531+23])
                        ]
                  expression (fGramDef.ml[69,2559+8]..[70,2631+57])
                    Pexp_apply
                    expression (fGramDef.ml[69,2559+8]..[69,2559+22])
                      Pexp_ident "Format.fprintf" (fGramDef.ml[69,2559+8]..[69,2559+22])
                    [
                      <label> ""
                        expression (fGramDef.ml[69,2559+23]..[69,2559+26])
                          Pexp_ident "fmt" (fGramDef.ml[69,2559+23]..[69,2559+26])
                      <label> ""
                        expression (fGramDef.ml[69,2559+27]..[69,2559+54])
                          Pexp_constant Const_string("@[<1>(`App@ %a@ %a@ %a)@]",None)
                      <label> ""
                        expression (fGramDef.ml[69,2559+55]..[69,2559+67])
                          Pexp_ident "pp_print_loc" (fGramDef.ml[69,2559+55]..[69,2559+67])
                      <label> ""
                        expression (fGramDef.ml[69,2559+68]..[69,2559+71])
                          Pexp_ident "_a0" (fGramDef.ml[69,2559+68]..[69,2559+71])
                      <label> ""
                        expression (fGramDef.ml[70,2631+10]..[70,2631+29])
                          Pexp_ident "pp_print_simple_pat" (fGramDef.ml[70,2631+10]..[70,2631+29])
                      <label> ""
                        expression (fGramDef.ml[70,2631+30]..[70,2631+33])
                          Pexp_ident "_a1" (fGramDef.ml[70,2631+30]..[70,2631+33])
                      <label> ""
                        expression (fGramDef.ml[70,2631+34]..[70,2631+53])
                          Pexp_ident "pp_print_simple_pat" (fGramDef.ml[70,2631+34]..[70,2631+53])
                      <label> ""
                        expression (fGramDef.ml[70,2631+54]..[70,2631+57])
                          Pexp_ident "_a2" (fGramDef.ml[70,2631+54]..[70,2631+57])
                    ]
                <case>
                  pattern (fGramDef.ml[71,2689+6]..[71,2689+20])
                    Ppat_variant "Lid"
                    Some
                      pattern (fGramDef.ml[71,2689+11]..[71,2689+20])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[71,2689+12]..[71,2689+15])
                            Ppat_var "_a0" (fGramDef.ml[71,2689+12]..[71,2689+15])
                          pattern (fGramDef.ml[71,2689+16]..[71,2689+19])
                            Ppat_var "_a1" (fGramDef.ml[71,2689+16]..[71,2689+19])
                        ]
                  expression (fGramDef.ml[72,2713+8]..[73,2781+29])
                    Pexp_apply
                    expression (fGramDef.ml[72,2713+8]..[72,2713+22])
                      Pexp_ident "Format.fprintf" (fGramDef.ml[72,2713+8]..[72,2713+22])
                    [
                      <label> ""
                        expression (fGramDef.ml[72,2713+23]..[72,2713+26])
                          Pexp_ident "fmt" (fGramDef.ml[72,2713+23]..[72,2713+26])
                      <label> ""
                        expression (fGramDef.ml[72,2713+27]..[72,2713+50])
                          Pexp_constant Const_string("@[<1>(`Lid@ %a@ %a)@]",None)
                      <label> ""
                        expression (fGramDef.ml[72,2713+51]..[72,2713+63])
                          Pexp_ident "pp_print_loc" (fGramDef.ml[72,2713+51]..[72,2713+63])
                      <label> ""
                        expression (fGramDef.ml[72,2713+64]..[72,2713+67])
                          Pexp_ident "_a0" (fGramDef.ml[72,2713+64]..[72,2713+67])
                      <label> ""
                        expression (fGramDef.ml[73,2781+10]..[73,2781+25])
                          Pexp_ident "pp_print_string" (fGramDef.ml[73,2781+10]..[73,2781+25])
                      <label> ""
                        expression (fGramDef.ml[73,2781+26]..[73,2781+29])
                          Pexp_ident "_a1" (fGramDef.ml[73,2781+26]..[73,2781+29])
                    ]
                <case>
                  pattern (fGramDef.ml[74,2811+6]..[74,2811+17])
                    Ppat_alias "_a0" (fGramDef.ml[74,2811+14]..[74,2811+17])
                    pattern (fGramDef.ml[74,2811+6]..[74,2811+10])
                      Ppat_type
                      "ant" (fGramDef.ml[74,2811+7]..[74,2811+10])
                  expression (fGramDef.ml[74,2811+21]..[74,2811+50]) ghost
                    Pexp_coerce
                    expression (fGramDef.ml[74,2811+22]..[74,2811+42])
                      Pexp_apply
                      expression (fGramDef.ml[74,2811+22]..[74,2811+34])
                        Pexp_ident "pp_print_ant" (fGramDef.ml[74,2811+22]..[74,2811+34])
                      [
                        <label> ""
                          expression (fGramDef.ml[74,2811+35]..[74,2811+38])
                            Pexp_ident "fmt" (fGramDef.ml[74,2811+35]..[74,2811+38])
                        <label> ""
                          expression (fGramDef.ml[74,2811+39]..[74,2811+42])
                            Pexp_ident "_a0" (fGramDef.ml[74,2811+39]..[74,2811+42])
                      ]
                    None
                    core_type (fGramDef.ml[74,2811+45]..[74,2811+49])
                      Ptyp_constr "unit" (fGramDef.ml[74,2811+45]..[74,2811+49])
                      []
                <case>
                  pattern (fGramDef.ml[75,2862+6]..[75,2862+24])
                    Ppat_variant "Com"
                    Some
                      pattern (fGramDef.ml[75,2862+11]..[75,2862+24])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[75,2862+12]..[75,2862+15])
                            Ppat_var "_a0" (fGramDef.ml[75,2862+12]..[75,2862+15])
                          pattern (fGramDef.ml[75,2862+16]..[75,2862+19])
                            Ppat_var "_a1" (fGramDef.ml[75,2862+16]..[75,2862+19])
                          pattern (fGramDef.ml[75,2862+20]..[75,2862+23])
                            Ppat_var "_a2" (fGramDef.ml[75,2862+20]..[75,2862+23])
                        ]
                  expression (fGramDef.ml[76,2890+8]..[77,2962+57])
                    Pexp_apply
                    expression (fGramDef.ml[76,2890+8]..[76,2890+22])
                      Pexp_ident "Format.fprintf" (fGramDef.ml[76,2890+8]..[76,2890+22])
                    [
                      <label> ""
                        expression (fGramDef.ml[76,2890+23]..[76,2890+26])
                          Pexp_ident "fmt" (fGramDef.ml[76,2890+23]..[76,2890+26])
                      <label> ""
                        expression (fGramDef.ml[76,2890+27]..[76,2890+54])
                          Pexp_constant Const_string("@[<1>(`Com@ %a@ %a@ %a)@]",None)
                      <label> ""
                        expression (fGramDef.ml[76,2890+55]..[76,2890+67])
                          Pexp_ident "pp_print_loc" (fGramDef.ml[76,2890+55]..[76,2890+67])
                      <label> ""
                        expression (fGramDef.ml[76,2890+68]..[76,2890+71])
                          Pexp_ident "_a0" (fGramDef.ml[76,2890+68]..[76,2890+71])
                      <label> ""
                        expression (fGramDef.ml[77,2962+10]..[77,2962+29])
                          Pexp_ident "pp_print_simple_pat" (fGramDef.ml[77,2962+10]..[77,2962+29])
                      <label> ""
                        expression (fGramDef.ml[77,2962+30]..[77,2962+33])
                          Pexp_ident "_a1" (fGramDef.ml[77,2962+30]..[77,2962+33])
                      <label> ""
                        expression (fGramDef.ml[77,2962+34]..[77,2962+53])
                          Pexp_ident "pp_print_simple_pat" (fGramDef.ml[77,2962+34]..[77,2962+53])
                      <label> ""
                        expression (fGramDef.ml[77,2962+54]..[77,2962+57])
                          Pexp_ident "_a2" (fGramDef.ml[77,2962+54]..[77,2962+57])
                    ]
                <case>
                  pattern (fGramDef.ml[78,3020+6]..[78,3020+26])
                    Ppat_variant "Alias"
                    Some
                      pattern (fGramDef.ml[78,3020+13]..[78,3020+26])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[78,3020+14]..[78,3020+17])
                            Ppat_var "_a0" (fGramDef.ml[78,3020+14]..[78,3020+17])
                          pattern (fGramDef.ml[78,3020+18]..[78,3020+21])
                            Ppat_var "_a1" (fGramDef.ml[78,3020+18]..[78,3020+21])
                          pattern (fGramDef.ml[78,3020+22]..[78,3020+25])
                            Ppat_var "_a2" (fGramDef.ml[78,3020+22]..[78,3020+25])
                        ]
                  expression (fGramDef.ml[79,3050+8]..[80,3124+53])
                    Pexp_apply
                    expression (fGramDef.ml[79,3050+8]..[79,3050+22])
                      Pexp_ident "Format.fprintf" (fGramDef.ml[79,3050+8]..[79,3050+22])
                    [
                      <label> ""
                        expression (fGramDef.ml[79,3050+23]..[79,3050+26])
                          Pexp_ident "fmt" (fGramDef.ml[79,3050+23]..[79,3050+26])
                      <label> ""
                        expression (fGramDef.ml[79,3050+27]..[79,3050+56])
                          Pexp_constant Const_string("@[<1>(`Alias@ %a@ %a@ %a)@]",None)
                      <label> ""
                        expression (fGramDef.ml[79,3050+57]..[79,3050+69])
                          Pexp_ident "pp_print_loc" (fGramDef.ml[79,3050+57]..[79,3050+69])
                      <label> ""
                        expression (fGramDef.ml[79,3050+70]..[79,3050+73])
                          Pexp_ident "_a0" (fGramDef.ml[79,3050+70]..[79,3050+73])
                      <label> ""
                        expression (fGramDef.ml[80,3124+10]..[80,3124+29])
                          Pexp_ident "pp_print_simple_pat" (fGramDef.ml[80,3124+10]..[80,3124+29])
                      <label> ""
                        expression (fGramDef.ml[80,3124+30]..[80,3124+33])
                          Pexp_ident "_a1" (fGramDef.ml[80,3124+30]..[80,3124+33])
                      <label> ""
                        expression (fGramDef.ml[80,3124+34]..[80,3124+49])
                          Pexp_ident "pp_print_lident" (fGramDef.ml[80,3124+34]..[80,3124+49])
                      <label> ""
                        expression (fGramDef.ml[80,3124+50]..[80,3124+53])
                          Pexp_ident "_a2" (fGramDef.ml[80,3124+50]..[80,3124+53])
                    ]
                <case>
                  pattern (fGramDef.ml[81,3178+6]..[81,3178+24])
                    Ppat_variant "Bar"
                    Some
                      pattern (fGramDef.ml[81,3178+11]..[81,3178+24])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[81,3178+12]..[81,3178+15])
                            Ppat_var "_a0" (fGramDef.ml[81,3178+12]..[81,3178+15])
                          pattern (fGramDef.ml[81,3178+16]..[81,3178+19])
                            Ppat_var "_a1" (fGramDef.ml[81,3178+16]..[81,3178+19])
                          pattern (fGramDef.ml[81,3178+20]..[81,3178+23])
                            Ppat_var "_a2" (fGramDef.ml[81,3178+20]..[81,3178+23])
                        ]
                  expression (fGramDef.ml[82,3206+8]..[83,3278+57])
                    Pexp_apply
                    expression (fGramDef.ml[82,3206+8]..[82,3206+22])
                      Pexp_ident "Format.fprintf" (fGramDef.ml[82,3206+8]..[82,3206+22])
                    [
                      <label> ""
                        expression (fGramDef.ml[82,3206+23]..[82,3206+26])
                          Pexp_ident "fmt" (fGramDef.ml[82,3206+23]..[82,3206+26])
                      <label> ""
                        expression (fGramDef.ml[82,3206+27]..[82,3206+54])
                          Pexp_constant Const_string("@[<1>(`Bar@ %a@ %a@ %a)@]",None)
                      <label> ""
                        expression (fGramDef.ml[82,3206+55]..[82,3206+67])
                          Pexp_ident "pp_print_loc" (fGramDef.ml[82,3206+55]..[82,3206+67])
                      <label> ""
                        expression (fGramDef.ml[82,3206+68]..[82,3206+71])
                          Pexp_ident "_a0" (fGramDef.ml[82,3206+68]..[82,3206+71])
                      <label> ""
                        expression (fGramDef.ml[83,3278+10]..[83,3278+29])
                          Pexp_ident "pp_print_simple_pat" (fGramDef.ml[83,3278+10]..[83,3278+29])
                      <label> ""
                        expression (fGramDef.ml[83,3278+30]..[83,3278+33])
                          Pexp_ident "_a1" (fGramDef.ml[83,3278+30]..[83,3278+33])
                      <label> ""
                        expression (fGramDef.ml[83,3278+34]..[83,3278+53])
                          Pexp_ident "pp_print_simple_pat" (fGramDef.ml[83,3278+34]..[83,3278+53])
                      <label> ""
                        expression (fGramDef.ml[83,3278+54]..[83,3278+57])
                          Pexp_ident "_a2" (fGramDef.ml[83,3278+54]..[83,3278+57])
                    ]
                <case>
                  pattern (fGramDef.ml[84,3336+6]..[84,3336+20])
                    Ppat_variant "Str"
                    Some
                      pattern (fGramDef.ml[84,3336+11]..[84,3336+20])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[84,3336+12]..[84,3336+15])
                            Ppat_var "_a0" (fGramDef.ml[84,3336+12]..[84,3336+15])
                          pattern (fGramDef.ml[84,3336+16]..[84,3336+19])
                            Ppat_var "_a1" (fGramDef.ml[84,3336+16]..[84,3336+19])
                        ]
                  expression (fGramDef.ml[85,3360+8]..[86,3428+29])
                    Pexp_apply
                    expression (fGramDef.ml[85,3360+8]..[85,3360+22])
                      Pexp_ident "Format.fprintf" (fGramDef.ml[85,3360+8]..[85,3360+22])
                    [
                      <label> ""
                        expression (fGramDef.ml[85,3360+23]..[85,3360+26])
                          Pexp_ident "fmt" (fGramDef.ml[85,3360+23]..[85,3360+26])
                      <label> ""
                        expression (fGramDef.ml[85,3360+27]..[85,3360+50])
                          Pexp_constant Const_string("@[<1>(`Str@ %a@ %a)@]",None)
                      <label> ""
                        expression (fGramDef.ml[85,3360+51]..[85,3360+63])
                          Pexp_ident "pp_print_loc" (fGramDef.ml[85,3360+51]..[85,3360+63])
                      <label> ""
                        expression (fGramDef.ml[85,3360+64]..[85,3360+67])
                          Pexp_ident "_a0" (fGramDef.ml[85,3360+64]..[85,3360+67])
                      <label> ""
                        expression (fGramDef.ml[86,3428+10]..[86,3428+25])
                          Pexp_ident "pp_print_string" (fGramDef.ml[86,3428+10]..[86,3428+25])
                      <label> ""
                        expression (fGramDef.ml[86,3428+26]..[86,3428+29])
                          Pexp_ident "_a1" (fGramDef.ml[86,3428+26]..[86,3428+29])
                    ]
                <case>
                  pattern (fGramDef.ml[87,3458+6]..[87,3458+14])
                    Ppat_variant "Any"
                    Some
                      pattern (fGramDef.ml[87,3458+11]..[87,3458+14])
                        Ppat_var "_a0" (fGramDef.ml[87,3458+11]..[87,3458+14])
                  expression (fGramDef.ml[87,3458+18]..[87,3458+73])
                    Pexp_apply
                    expression (fGramDef.ml[87,3458+18]..[87,3458+32])
                      Pexp_ident "Format.fprintf" (fGramDef.ml[87,3458+18]..[87,3458+32])
                    [
                      <label> ""
                        expression (fGramDef.ml[87,3458+33]..[87,3458+36])
                          Pexp_ident "fmt" (fGramDef.ml[87,3458+33]..[87,3458+36])
                      <label> ""
                        expression (fGramDef.ml[87,3458+37]..[87,3458+56])
                          Pexp_constant Const_string("@[<1>(`Any@ %a)@]",None)
                      <label> ""
                        expression (fGramDef.ml[87,3458+57]..[87,3458+69])
                          Pexp_ident "pp_print_loc" (fGramDef.ml[87,3458+57]..[87,3458+69])
                      <label> ""
                        expression (fGramDef.ml[87,3458+70]..[87,3458+73])
                          Pexp_ident "_a0" (fGramDef.ml[87,3458+70]..[87,3458+73])
                    ]
              ]
          core_type (fGramDef.ml[62,2316+25]..[62,2316+63])
            Ptyp_arrow
            ""
            core_type (fGramDef.ml[62,2316+25]..[62,2316+41])
              Ptyp_constr "Format.formatter" (fGramDef.ml[62,2316+25]..[62,2316+41])
              []
            core_type (fGramDef.ml[62,2316+45]..[62,2316+63])
              Ptyp_arrow
              ""
              core_type (fGramDef.ml[62,2316+45]..[62,2316+55])
                Ptyp_constr "simple_pat" (fGramDef.ml[62,2316+45]..[62,2316+55])
                []
              core_type (fGramDef.ml[62,2316+59]..[62,2316+63])
                Ptyp_constr "unit" (fGramDef.ml[62,2316+59]..[62,2316+63])
                []
    ]
  structure_item (fGramDef.ml[88,3532+0]..[96,3745+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[88,3532+4]..[88,3532+14])
          Ppat_var "wildcarder" (fGramDef.ml[88,3532+4]..[88,3532+14])
        expression (fGramDef.ml[89,3549+2]..[96,3745+5])
          Pexp_object
          class_structure
            pattern (fGramDef.ml[89,3549+9]..[89,3549+15])
              Ppat_var "self" (fGramDef.ml[89,3549+10]..[89,3549+14])
            [
              class_field (fGramDef.ml[90,3565+4]..[90,3565+25])
                Pcf_inherit Fresh
                  class_expr (fGramDef.ml[90,3565+13]..[90,3565+16])
                    Pcl_constr "map" (fGramDef.ml[90,3565+13]..[90,3565+16])
                    []
                  Some
                    "super"
              class_field (fGramDef.ml[91,3591+4]..[95,3713+31])
                Pcf_method Public
                  "simple_pat" (fGramDef.ml[91,3591+12]..[91,3591+22])
                  Concrete Override
                  expression (fGramDef.ml[91,3591+10]..[95,3713+31]) ghost
                    Pexp_poly
                    expression (fGramDef.ml[92,3616+6]..[95,3713+31])
                      Pexp_function
                      [
                        <case>
                          pattern (fGramDef.ml[93,3631+8]..[93,3631+21])
                            Ppat_variant "Lid"
                            Some
                              pattern (fGramDef.ml[93,3631+13]..[93,3631+21])
                                Ppat_tuple
                                [
                                  pattern (fGramDef.ml[93,3631+14]..[93,3631+18])
                                    Ppat_var "_loc" (fGramDef.ml[93,3631+14]..[93,3631+18])
                                  pattern (fGramDef.ml[93,3631+19]..[93,3631+20])
                                    Ppat_any
                                ]
                          expression (fGramDef.ml[93,3631+25]..[93,3631+34])
                            Pexp_variant "Any"
                            Some
                              expression (fGramDef.ml[93,3631+30]..[93,3631+34])
                                Pexp_ident "_loc" (fGramDef.ml[93,3631+30]..[93,3631+34])
                        <case>
                          pattern (fGramDef.ml[94,3666+8]..[94,3666+25])
                            Ppat_variant "Alias"
                            Some
                              pattern (fGramDef.ml[94,3666+15]..[94,3666+25])
                                Ppat_tuple
                                [
                                  pattern (fGramDef.ml[94,3666+16]..[94,3666+20])
                                    Ppat_var "_loc" (fGramDef.ml[94,3666+16]..[94,3666+20])
                                  pattern (fGramDef.ml[94,3666+21]..[94,3666+22])
                                    Ppat_var "p" (fGramDef.ml[94,3666+21]..[94,3666+22])
                                  pattern (fGramDef.ml[94,3666+23]..[94,3666+24])
                                    Ppat_any
                                ]
                          expression (fGramDef.ml[94,3666+29]..[94,3666+46])
                            Pexp_apply
                            expression (fGramDef.ml[94,3666+29]..[94,3666+44])
                              Pexp_send "simple_pat"
                              expression (fGramDef.ml[94,3666+29]..[94,3666+33])
                                Pexp_ident "self" (fGramDef.ml[94,3666+29]..[94,3666+33])
                            [
                              <label> ""
                                expression (fGramDef.ml[94,3666+45]..[94,3666+46])
                                  Pexp_ident "p" (fGramDef.ml[94,3666+45]..[94,3666+46])
                            ]
                        <case>
                          pattern (fGramDef.ml[95,3713+8]..[95,3713+9])
                            Ppat_var "p" (fGramDef.ml[95,3713+8]..[95,3713+9])
                          expression (fGramDef.ml[95,3713+13]..[95,3713+31])
                            Pexp_apply
                            expression (fGramDef.ml[95,3713+13]..[95,3713+29])
                              Pexp_send "simple_pat"
                              expression (fGramDef.ml[95,3713+13]..[95,3713+18])
                                Pexp_ident "super" (fGramDef.ml[95,3713+13]..[95,3713+18])
                            [
                              <label> ""
                                expression (fGramDef.ml[95,3713+30]..[95,3713+31])
                                  Pexp_ident "p" (fGramDef.ml[95,3713+30]..[95,3713+31])
                            ]
                      ]
                    None
            ]
    ]
  structure_item (fGramDef.ml[97,3751+0]..[100,3794+11])
    Pstr_type
    [
      type_declaration "name" (fGramDef.ml[97,3751+5]..[97,3751+9]) (fGramDef.ml[97,3751+0]..[100,3794+11])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (fGramDef.ml[98,3766+2]..[98,3766+11])
                Immutable
                "exp" (fGramDef.ml[98,3766+2]..[98,3766+5])                core_type (fGramDef.ml[98,3766+7]..[98,3766+10])
                  Ptyp_constr "exp" (fGramDef.ml[98,3766+7]..[98,3766+10])
                  []
              (fGramDef.ml[99,3778+2]..[99,3778+15])
                Immutable
                "tvar" (fGramDef.ml[99,3778+2]..[99,3778+6])                core_type (fGramDef.ml[99,3778+8]..[99,3778+14])
                  Ptyp_constr "string" (fGramDef.ml[99,3778+8]..[99,3778+14])
                  []
              (fGramDef.ml[100,3794+2]..[100,3794+10])
                Immutable
                "loc" (fGramDef.ml[100,3794+2]..[100,3794+5])                core_type (fGramDef.ml[100,3794+7]..[100,3794+10])
                  Ptyp_constr "loc" (fGramDef.ml[100,3794+7]..[100,3794+10])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (fGramDef.ml[101,3807+0]..[104,3929+18])
    Pstr_type
    [
      type_declaration "styp" (fGramDef.ml[101,3807+5]..[101,3807+9]) (fGramDef.ml[101,3807+0]..[104,3929+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (fGramDef.ml[102,3819+2]..[104,3929+18])
              Ptyp_variant closed=Closed
              [
                Rinherit
                  core_type (fGramDef.ml[102,3819+4]..[102,3819+8])
                    Ptyp_constr "vid'" (fGramDef.ml[102,3819+4]..[102,3819+8])
                    []
                Rtag "App" false
                  [
                    core_type (fGramDef.ml[102,3819+20]..[102,3819+35])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[102,3819+20]..[102,3819+23])
                          Ptyp_constr "loc" (fGramDef.ml[102,3819+20]..[102,3819+23])
                          []
                        core_type (fGramDef.ml[102,3819+25]..[102,3819+29])
                          Ptyp_constr "styp" (fGramDef.ml[102,3819+25]..[102,3819+29])
                          []
                        core_type (fGramDef.ml[102,3819+31]..[102,3819+35])
                          Ptyp_constr "styp" (fGramDef.ml[102,3819+31]..[102,3819+35])
                          []
                      ]
                  ]
                Rtag "Quote" false
                  [
                    core_type (fGramDef.ml[103,3856+15]..[103,3856+42])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[103,3856+15]..[103,3856+18])
                          Ptyp_constr "loc" (fGramDef.ml[103,3856+15]..[103,3856+18])
                          []
                        core_type (fGramDef.ml[103,3856+20]..[103,3856+33])
                          Ptyp_constr "position_flag" (fGramDef.ml[103,3856+20]..[103,3856+33])
                          []
                        core_type (fGramDef.ml[103,3856+35]..[103,3856+42])
                          Ptyp_constr "alident" (fGramDef.ml[103,3856+35]..[103,3856+42])
                          []
                      ]
                  ]
                Rtag "Self" false
                  [
                    core_type (fGramDef.ml[103,3856+55]..[103,3856+58])
                      Ptyp_constr "loc" (fGramDef.ml[103,3856+55]..[103,3856+58])
                      []
                  ]
                Rtag "Tok" false
                  [
                    core_type (fGramDef.ml[103,3856+69]..[103,3856+72])
                      Ptyp_constr "loc" (fGramDef.ml[103,3856+69]..[103,3856+72])
                      []
                  ]
                Rtag "Type" false
                  [
                    core_type (fGramDef.ml[104,3929+13]..[104,3929+17])
                      Ptyp_constr "ctyp" (fGramDef.ml[104,3929+13]..[104,3929+17])
                      []
                  ]
              ]
              None
    ]
  structure_item (fGramDef.ml[105,3949+0]..[126,4486+65])
    Pstr_type
    [
      type_declaration "entry" (fGramDef.ml[105,3949+5]..[105,3949+10]) (fGramDef.ml[105,3949+0]..[109,4013+17])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (fGramDef.ml[106,3965+2]..[106,3965+13])
                Immutable
                "name" (fGramDef.ml[106,3965+2]..[106,3965+6])                core_type (fGramDef.ml[106,3965+8]..[106,3965+12])
                  Ptyp_constr "name" (fGramDef.ml[106,3965+8]..[106,3965+12])
                  []
              (fGramDef.ml[107,3979+2]..[107,3979+18])
                Immutable
                "pos" (fGramDef.ml[107,3979+2]..[107,3979+5])                core_type (fGramDef.ml[107,3979+7]..[107,3979+17])
                  Ptyp_constr "option" (fGramDef.ml[107,3979+11]..[107,3979+17])
                  [
                    core_type (fGramDef.ml[107,3979+7]..[107,3979+10])
                      Ptyp_constr "exp" (fGramDef.ml[107,3979+7]..[107,3979+10])
                      []
                  ]
              (fGramDef.ml[108,3998+2]..[108,3998+14])
                Immutable
                "local" (fGramDef.ml[108,3998+2]..[108,3998+7])                core_type (fGramDef.ml[108,3998+9]..[108,3998+13])
                  Ptyp_constr "bool" (fGramDef.ml[108,3998+9]..[108,3998+13])
                  []
              (fGramDef.ml[109,4013+2]..[109,4013+16])
                Immutable
                "levels" (fGramDef.ml[109,4013+2]..[109,4013+8])                core_type (fGramDef.ml[109,4013+10]..[109,4013+16])
                  Ptyp_constr "levels" (fGramDef.ml[109,4013+10]..[109,4013+16])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "levels" (fGramDef.ml[110,4032+4]..[110,4032+10]) (fGramDef.ml[110,4032+0]..[110,4032+55])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (fGramDef.ml[110,4032+13]..[110,4032+55])
              Ptyp_variant closed=Closed
              [
                Rtag "Group" false
                  [
                    core_type (fGramDef.ml[110,4032+25]..[110,4032+35])
                      Ptyp_constr "list" (fGramDef.ml[110,4032+31]..[110,4032+35])
                      [
                        core_type (fGramDef.ml[110,4032+25]..[110,4032+30])
                          Ptyp_constr "level" (fGramDef.ml[110,4032+25]..[110,4032+30])
                          []
                      ]
                  ]
                Rtag "Single" false
                  [
                    core_type (fGramDef.ml[110,4032+49]..[110,4032+54])
                      Ptyp_constr "level" (fGramDef.ml[110,4032+49]..[110,4032+54])
                      []
                  ]
              ]
              None
      type_declaration "level" (fGramDef.ml[111,4089+4]..[111,4089+9]) (fGramDef.ml[111,4089+0]..[114,4149+19])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (fGramDef.ml[112,4104+2]..[112,4104+23])
                Immutable
                "label" (fGramDef.ml[112,4104+2]..[112,4104+7])                core_type (fGramDef.ml[112,4104+9]..[112,4104+22])
                  Ptyp_constr "option" (fGramDef.ml[112,4104+16]..[112,4104+22])
                  [
                    core_type (fGramDef.ml[112,4104+9]..[112,4104+15])
                      Ptyp_constr "string" (fGramDef.ml[112,4104+9]..[112,4104+15])
                      []
                  ]
              (fGramDef.ml[113,4128+2]..[113,4128+20])
                Immutable
                "assoc" (fGramDef.ml[113,4128+2]..[113,4128+7])                core_type (fGramDef.ml[113,4128+9]..[113,4128+19])
                  Ptyp_constr "option" (fGramDef.ml[113,4128+13]..[113,4128+19])
                  [
                    core_type (fGramDef.ml[113,4128+9]..[113,4128+12])
                      Ptyp_constr "exp" (fGramDef.ml[113,4128+9]..[113,4128+12])
                      []
                  ]
              (fGramDef.ml[114,4149+2]..[114,4149+18])
                Immutable
                "rules" (fGramDef.ml[114,4149+2]..[114,4149+7])                core_type (fGramDef.ml[114,4149+9]..[114,4149+18])
                  Ptyp_constr "list" (fGramDef.ml[114,4149+14]..[114,4149+18])
                  [
                    core_type (fGramDef.ml[114,4149+9]..[114,4149+13])
                      Ptyp_constr "rule" (fGramDef.ml[114,4149+9]..[114,4149+13])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "rule" (fGramDef.ml[115,4170+4]..[115,4170+8]) (fGramDef.ml[115,4170+0]..[117,4205+21])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (fGramDef.ml[116,4184+2]..[116,4184+20])
                Immutable
                "prod" (fGramDef.ml[116,4184+2]..[116,4184+6])                core_type (fGramDef.ml[116,4184+8]..[116,4184+19])
                  Ptyp_constr "list" (fGramDef.ml[116,4184+15]..[116,4184+19])
                  [
                    core_type (fGramDef.ml[116,4184+8]..[116,4184+14])
                      Ptyp_constr "symbol" (fGramDef.ml[116,4184+8]..[116,4184+14])
                      []
                  ]
              (fGramDef.ml[117,4205+2]..[117,4205+20])
                Immutable
                "action" (fGramDef.ml[117,4205+2]..[117,4205+8])                core_type (fGramDef.ml[117,4205+10]..[117,4205+20])
                  Ptyp_constr "option" (fGramDef.ml[117,4205+14]..[117,4205+20])
                  [
                    core_type (fGramDef.ml[117,4205+10]..[117,4205+13])
                      Ptyp_constr "exp" (fGramDef.ml[117,4205+10]..[117,4205+13])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "symbol" (fGramDef.ml[118,4228+4]..[118,4228+10]) (fGramDef.ml[118,4228+0]..[121,4272+22])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (fGramDef.ml[119,4244+2]..[119,4244+13])
                Immutable
                "text" (fGramDef.ml[119,4244+2]..[119,4244+6])                core_type (fGramDef.ml[119,4244+8]..[119,4244+12])
                  Ptyp_constr "text" (fGramDef.ml[119,4244+8]..[119,4244+12])
                  []
              (fGramDef.ml[120,4258+2]..[120,4258+13])
                Immutable
                "styp" (fGramDef.ml[120,4258+2]..[120,4258+6])                core_type (fGramDef.ml[120,4258+8]..[120,4258+12])
                  Ptyp_constr "styp" (fGramDef.ml[120,4258+8]..[120,4258+12])
                  []
              (fGramDef.ml[121,4272+2]..[121,4272+21])
                Immutable
                "pattern" (fGramDef.ml[121,4272+2]..[121,4272+9])                core_type (fGramDef.ml[121,4272+11]..[121,4272+21])
                  Ptyp_constr "option" (fGramDef.ml[121,4272+15]..[121,4272+21])
                  [
                    core_type (fGramDef.ml[121,4272+11]..[121,4272+14])
                      Ptyp_constr "pat" (fGramDef.ml[121,4272+11]..[121,4272+14])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "text" (fGramDef.ml[122,4296+4]..[122,4296+8]) (fGramDef.ml[122,4296+0]..[126,4486+65])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (fGramDef.ml[123,4307+2]..[126,4486+65])
              Ptyp_variant closed=Closed
              [
                Rtag "Slist" false
                  [
                    core_type (fGramDef.ml[123,4307+15]..[123,4307+47])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[123,4307+15]..[123,4307+18])
                          Ptyp_constr "loc" (fGramDef.ml[123,4307+15]..[123,4307+18])
                          []
                        core_type (fGramDef.ml[123,4307+20]..[123,4307+24])
                          Ptyp_constr "bool" (fGramDef.ml[123,4307+20]..[123,4307+24])
                          []
                        core_type (fGramDef.ml[123,4307+26]..[123,4307+32])
                          Ptyp_constr "symbol" (fGramDef.ml[123,4307+26]..[123,4307+32])
                          []
                        core_type (fGramDef.ml[123,4307+34]..[123,4307+47])
                          Ptyp_constr "option" (fGramDef.ml[123,4307+41]..[123,4307+47])
                          [
                            core_type (fGramDef.ml[123,4307+34]..[123,4307+40])
                              Ptyp_constr "symbol" (fGramDef.ml[123,4307+34]..[123,4307+40])
                              []
                          ]
                      ]
                  ]
                Rtag "Snterm" false
                  [
                    core_type (fGramDef.ml[124,4356+16]..[124,4356+40])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[124,4356+16]..[124,4356+19])
                          Ptyp_constr "loc" (fGramDef.ml[124,4356+16]..[124,4356+19])
                          []
                        core_type (fGramDef.ml[124,4356+21]..[124,4356+25])
                          Ptyp_constr "name" (fGramDef.ml[124,4356+21]..[124,4356+25])
                          []
                        core_type (fGramDef.ml[124,4356+27]..[124,4356+40])
                          Ptyp_constr "option" (fGramDef.ml[124,4356+34]..[124,4356+40])
                          [
                            core_type (fGramDef.ml[124,4356+27]..[124,4356+33])
                              Ptyp_constr "string" (fGramDef.ml[124,4356+27]..[124,4356+33])
                              []
                          ]
                      ]
                  ]
                Rtag "Sopt" false
                  [
                    core_type (fGramDef.ml[124,4356+54]..[124,4356+63])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[124,4356+54]..[124,4356+57])
                          Ptyp_constr "loc" (fGramDef.ml[124,4356+54]..[124,4356+57])
                          []
                        core_type (fGramDef.ml[124,4356+59]..[124,4356+63])
                          Ptyp_constr "text" (fGramDef.ml[124,4356+59]..[124,4356+63])
                          []
                      ]
                  ]
                Rtag "Stry" false
                  [
                    core_type (fGramDef.ml[125,4421+14]..[125,4421+23])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[125,4421+14]..[125,4421+17])
                          Ptyp_constr "loc" (fGramDef.ml[125,4421+14]..[125,4421+17])
                          []
                        core_type (fGramDef.ml[125,4421+19]..[125,4421+23])
                          Ptyp_constr "text" (fGramDef.ml[125,4421+19]..[125,4421+23])
                          []
                      ]
                  ]
                Rtag "Speek" false
                  [
                    core_type (fGramDef.ml[125,4421+38]..[125,4421+47])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[125,4421+38]..[125,4421+41])
                          Ptyp_constr "loc" (fGramDef.ml[125,4421+38]..[125,4421+41])
                          []
                        core_type (fGramDef.ml[125,4421+43]..[125,4421+47])
                          Ptyp_constr "text" (fGramDef.ml[125,4421+43]..[125,4421+47])
                          []
                      ]
                  ]
                Rtag "Sself" false
                  [
                    core_type (fGramDef.ml[125,4421+61]..[125,4421+64])
                      Ptyp_constr "loc" (fGramDef.ml[125,4421+61]..[125,4421+64])
                      []
                  ]
                Rtag "Skeyword" false
                  [
                    core_type (fGramDef.ml[126,4486+18]..[126,4486+29])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[126,4486+18]..[126,4486+21])
                          Ptyp_constr "loc" (fGramDef.ml[126,4486+18]..[126,4486+21])
                          []
                        core_type (fGramDef.ml[126,4486+23]..[126,4486+29])
                          Ptyp_constr "string" (fGramDef.ml[126,4486+23]..[126,4486+29])
                          []
                      ]
                  ]
                Rtag "Stok" false
                  [
                    core_type (fGramDef.ml[126,4486+43]..[126,4486+63])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[126,4486+43]..[126,4486+46])
                          Ptyp_constr "loc" (fGramDef.ml[126,4486+43]..[126,4486+46])
                          []
                        core_type (fGramDef.ml[126,4486+48]..[126,4486+51])
                          Ptyp_constr "exp" (fGramDef.ml[126,4486+48]..[126,4486+51])
                          []
                        core_type (fGramDef.ml[126,4486+53]..[126,4486+63])
                          Ptyp_constr "simple_pat" (fGramDef.ml[126,4486+53]..[126,4486+63])
                          []
                      ]
                  ]
              ]
              None
    ]
  structure_item (fGramDef.ml[127,4553+0]..[129,4631+48])
    Pstr_type
    [
      type_declaration "action_pattern" (fGramDef.ml[127,4553+5]..[127,4553+19]) (fGramDef.ml[127,4553+0]..[129,4631+48])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (fGramDef.ml[128,4575+2]..[129,4631+48])
              Ptyp_variant closed=Closed
              [
                Rinherit
                  core_type (fGramDef.ml[128,4575+4]..[128,4575+7])
                    Ptyp_constr "vid" (fGramDef.ml[128,4575+4]..[128,4575+7])
                    []
                Rtag "Com" false
                  [
                    core_type (fGramDef.ml[128,4575+19]..[128,4575+54])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[128,4575+19]..[128,4575+22])
                          Ptyp_constr "loc" (fGramDef.ml[128,4575+19]..[128,4575+22])
                          []
                        core_type (fGramDef.ml[128,4575+24]..[128,4575+38])
                          Ptyp_constr "action_pattern" (fGramDef.ml[128,4575+24]..[128,4575+38])
                          []
                        core_type (fGramDef.ml[128,4575+40]..[128,4575+54])
                          Ptyp_constr "action_pattern" (fGramDef.ml[128,4575+40]..[128,4575+54])
                          []
                      ]
                  ]
                Rtag "Par" false
                  [
                    core_type (fGramDef.ml[129,4631+13]..[129,4631+32])
                      Ptyp_tuple
                      [
                        core_type (fGramDef.ml[129,4631+13]..[129,4631+16])
                          Ptyp_constr "loc" (fGramDef.ml[129,4631+13]..[129,4631+16])
                          []
                        core_type (fGramDef.ml[129,4631+18]..[129,4631+32])
                          Ptyp_constr "action_pattern" (fGramDef.ml[129,4631+18]..[129,4631+32])
                          []
                      ]
                  ]
                Rtag "Any" false
                  [
                    core_type (fGramDef.ml[129,4631+44]..[129,4631+47])
                      Ptyp_constr "loc" (fGramDef.ml[129,4631+44]..[129,4631+47])
                      []
                  ]
              ]
              None
    ]
  structure_item (fGramDef.ml[130,4681+0]..[130,4681+38])
    Pstr_eval
    expression (fGramDef.ml[130,4681+8]..[130,4681+38])
      Pexp_apply
      expression (fGramDef.ml[130,4681+31]..[130,4681+33])
        Pexp_ident ":=" (fGramDef.ml[130,4681+31]..[130,4681+33])
      [
        <label> ""
          expression (fGramDef.ml[130,4681+8]..[130,4681+30])
            Pexp_ident "FConfig.antiquotations" (fGramDef.ml[130,4681+8]..[130,4681+30])
        <label> ""
          expression (fGramDef.ml[130,4681+34]..[130,4681+38])
            Pexp_construct "true" (fGramDef.ml[130,4681+34]..[130,4681+38])
            None
      ]
  structure_item (fGramDef.ml[131,4720+0]..[131,4720+12])
    Pstr_open Fresh "Syntaxf" (fGramDef.ml[131,4720+5]..[131,4720+12])
  structure_item (fGramDef.ml[132,4733+0]..[132,4733+58])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[132,4733+4]..[132,4733+14])
          Ppat_var "simple_pat" (fGramDef.ml[132,4733+4]..[132,4733+14])
        expression (fGramDef.ml[132,4733+14]..[132,4733+58]) ghost
          Pexp_constraint
          expression (fGramDef.ml[132,4733+37]..[132,4733+58])
            Pexp_apply
            expression (fGramDef.ml[132,4733+37]..[132,4733+45])
              Pexp_ident "Gramf.mk" (fGramDef.ml[132,4733+37]..[132,4733+45])
            [
              <label> ""
                expression (fGramDef.ml[132,4733+46]..[132,4733+58])
                  Pexp_constant Const_string("simple_pat",None)
            ]
          core_type (fGramDef.ml[132,4733+16]..[132,4733+34])
            Ptyp_constr "Gramf.t" (fGramDef.ml[132,4733+27]..[132,4733+34])
            [
              core_type (fGramDef.ml[132,4733+16]..[132,4733+26])
                Ptyp_constr "simple_pat" (fGramDef.ml[132,4733+16]..[132,4733+26])
                []
            ]
    ]
  structure_item (fGramDef.ml[133,4792+0]..[264,10732+46])
    Pstr_eval
    expression (fGramDef.ml[134,4800+2]..[264,10732+46])
      Pexp_let Nonrec
      [
        <def>
          pattern (fGramDef.ml[134,4800+6]..[134,4800+26])
            Ppat_var "grammar_entry_create" (fGramDef.ml[134,4800+6]..[134,4800+26])
          expression (fGramDef.ml[134,4800+27]..[134,4800+41]) ghost
            Pexp_fun ""
            None
            pattern (fGramDef.ml[134,4800+27]..[134,4800+28])
              Ppat_var "x" (fGramDef.ml[134,4800+27]..[134,4800+28])
            expression (fGramDef.ml[134,4800+31]..[134,4800+41])
              Pexp_apply
              expression (fGramDef.ml[134,4800+31]..[134,4800+39])
                Pexp_ident "Gramf.mk" (fGramDef.ml[134,4800+31]..[134,4800+39])
              [
                <label> ""
                  expression (fGramDef.ml[134,4800+40]..[134,4800+41])
                    Pexp_ident "x" (fGramDef.ml[134,4800+40]..[134,4800+41])
              ]
      ]
      expression (fGramDef.ml[135,4845+2]..[264,10732+46])
        Pexp_let Nonrec
        [
          <def>
            pattern (fGramDef.ml[135,4845+6]..[135,4845+18])
              Ppat_var "internal_pat" (fGramDef.ml[135,4845+6]..[135,4845+18])
            expression (fGramDef.ml[135,4845+18]..[136,4889+39]) ghost
              Pexp_constraint
              expression (fGramDef.ml[136,4889+4]..[136,4889+39])
                Pexp_apply
                expression (fGramDef.ml[136,4889+4]..[136,4889+24])
                  Pexp_ident "grammar_entry_create" (fGramDef.ml[136,4889+4]..[136,4889+24])
                [
                  <label> ""
                    expression (fGramDef.ml[136,4889+25]..[136,4889+39])
                      Pexp_constant Const_string("internal_pat",None)
                ]
              core_type (fGramDef.ml[135,4845+20]..[135,4845+41])
                Ptyp_constr "Gramf.t" (fGramDef.ml[135,4845+34]..[135,4845+41])
                [
                  core_type (fGramDef.ml[135,4845+20]..[135,4845+33])
                    Ptyp_var internal_pat
                ]
        ]
        expression (fGramDef.ml[137,4932+2]..[264,10732+46])
          Pexp_sequence
          expression (fGramDef.ml[137,4932+2]..[214,8462+86])
            Pexp_apply
            expression (fGramDef.ml[137,4932+2]..[137,4932+21])
              Pexp_ident "Gramf.extend_single" (fGramDef.ml[137,4932+2]..[137,4932+21])
            [
              <label> ""
                expression (fGramDef.ml[137,4932+22]..[137,4932+57]) ghost
                  Pexp_constraint
                  expression (fGramDef.ml[137,4932+23]..[137,4932+33])
                    Pexp_ident "simple_pat" (fGramDef.ml[137,4932+23]..[137,4932+33])
                  core_type (fGramDef.ml[137,4932+36]..[137,4932+55])
                    Ptyp_constr "Gramf.t" (fGramDef.ml[137,4932+48]..[137,4932+55])
                    [
                      core_type (fGramDef.ml[137,4932+36]..[137,4932+47])
                        Ptyp_var simple_pat
                    ]
              <label> ""
                expression (fGramDef.ml[138,4990+4]..[214,8462+86])
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[138,4990+5]..[138,4990+9])
                      Pexp_construct "None" (fGramDef.ml[138,4990+5]..[138,4990+9])
                      None
                    expression (fGramDef.ml[139,5001+6]..[214,8462+85])
                      Pexp_tuple
                      [
                        expression (fGramDef.ml[139,5001+7]..[139,5001+11])
                          Pexp_construct "None" (fGramDef.ml[139,5001+7]..[139,5001+11])
                          None
                        expression (fGramDef.ml[139,5001+13]..[139,5001+17])
                          Pexp_construct "None" (fGramDef.ml[139,5001+13]..[139,5001+17])
                          None
                        expression (fGramDef.ml[140,5020+8]..[214,8462+84])
                          Pexp_construct "::" (fGramDef.ml[140,5020+9]..[214,8462+84]) ghost
                          Some
                            expression (fGramDef.ml[140,5020+9]..[214,8462+84]) ghost
                              Pexp_tuple
                              [
                                expression (fGramDef.ml[140,5020+9]..[144,5220+54])
                                  Pexp_tuple
                                  [
                                    expression (fGramDef.ml[140,5020+10]..[140,5020+76])
                                      Pexp_construct "::" (fGramDef.ml[140,5020+11]..[140,5020+76]) ghost
                                      Some
                                        expression (fGramDef.ml[140,5020+11]..[140,5020+76]) ghost
                                          Pexp_tuple
                                          [
                                            expression (fGramDef.ml[140,5020+11]..[140,5020+24])
                                              Pexp_variant "Skeyword"
                                              Some
                                                expression (fGramDef.ml[140,5020+21]..[140,5020+24])
                                                  Pexp_constant Const_string("`",None)
                                            expression (fGramDef.ml[140,5020+26]..[140,5020+76]) ghost
                                              Pexp_construct "::" (fGramDef.ml[140,5020+26]..[140,5020+76]) ghost
                                              Some
                                                expression (fGramDef.ml[140,5020+26]..[140,5020+76]) ghost
                                                  Pexp_tuple
                                                  [
                                                    expression (fGramDef.ml[140,5020+26]..[140,5020+75])
                                                      Pexp_variant "Snterm"
                                                      Some
                                                        expression (fGramDef.ml[140,5020+34]..[140,5020+75])
                                                          Pexp_apply
                                                          expression (fGramDef.ml[140,5020+35]..[140,5020+44])
                                                            Pexp_ident "Gramf.obj" (fGramDef.ml[140,5020+35]..[140,5020+44])
                                                          [
                                                            <label> ""
                                                              expression (fGramDef.ml[140,5020+45]..[140,5020+74]) ghost
                                                                Pexp_constraint
                                                                expression (fGramDef.ml[140,5020+46]..[140,5020+53])
                                                                  Pexp_ident "luident" (fGramDef.ml[140,5020+46]..[140,5020+53])
                                                                core_type (fGramDef.ml[140,5020+56]..[140,5020+72])
                                                                  Ptyp_constr "Gramf.t" (fGramDef.ml[140,5020+65]..[140,5020+72])
                                                                  [
                                                                    core_type (fGramDef.ml[140,5020+56]..[140,5020+64])
                                                                      Ptyp_var luident
                                                                  ]
                                                          ]
                                                    expression (fGramDef.ml[140,5020+75]..[140,5020+76]) ghost
                                                      Pexp_construct "[]" (fGramDef.ml[140,5020+75]..[140,5020+76]) ghost
                                                      None
                                                  ]
                                          ]
                                    expression (fGramDef.ml[141,5098+11]..[144,5220+53])
                                      Pexp_tuple
                                      [
                                        expression (fGramDef.ml[141,5098+12]..[141,5098+30])
                                          Pexp_constant Const_string("`Vrn (_loc, s)\n",None)
                                        expression (fGramDef.ml[142,5130+13]..[144,5220+52])
                                          Pexp_apply
                                          expression (fGramDef.ml[142,5130+14]..[142,5130+29])
                                            Pexp_ident "Gramf.mk_action" (fGramDef.ml[142,5130+14]..[142,5130+29])
                                          [
                                            <label> ""
                                              expression (fGramDef.ml[143,5160+16]..[144,5220+51])
                                                Pexp_fun ""
                                                None
                                                pattern (fGramDef.ml[143,5160+21]..[143,5160+35])
                                                  Ppat_constraint
                                                  pattern (fGramDef.ml[143,5160+22]..[143,5160+23])
                                                    Ppat_var "s" (fGramDef.ml[143,5160+22]..[143,5160+23])
                                                  core_type (fGramDef.ml[143,5160+26]..[143,5160+34])
                                                    Ptyp_var luident
                                                expression (fGramDef.ml[143,5160+37]..[144,5220+50]) ghost
                                                  Pexp_fun ""
                                                  None
                                                  pattern (fGramDef.ml[143,5160+37]..[143,5160+38])
                                                    Ppat_any
                                                  expression (fGramDef.ml[143,5160+40]..[144,5220+50]) ghost
                                                    Pexp_fun ""
                                                    None
                                                    pattern (fGramDef.ml[143,5160+40]..[143,5160+55])
                                                      Ppat_constraint
                                                      pattern (fGramDef.ml[143,5160+41]..[143,5160+45])
                                                        Ppat_var "_loc" (fGramDef.ml[143,5160+41]..[143,5160+45])
                                                      core_type (fGramDef.ml[143,5160+48]..[143,5160+54])
                                                        Ptyp_constr "Locf.t" (fGramDef.ml[143,5160+48]..[143,5160+54])
                                                        []
                                                    expression (fGramDef.ml[144,5220+19]..[144,5220+50]) ghost
                                                      Pexp_constraint
                                                      expression (fGramDef.ml[144,5220+20]..[144,5220+34])
                                                        Pexp_variant "Vrn"
                                                        Some
                                                          expression (fGramDef.ml[144,5220+25]..[144,5220+34])
                                                            Pexp_tuple
                                                            [
                                                              expression (fGramDef.ml[144,5220+26]..[144,5220+30])
                                                                Pexp_ident "_loc" (fGramDef.ml[144,5220+26]..[144,5220+30])
                                                              expression (fGramDef.ml[144,5220+32]..[144,5220+33])
                                                                Pexp_ident "s" (fGramDef.ml[144,5220+32]..[144,5220+33])
                                                            ]
                                                      core_type (fGramDef.ml[144,5220+37]..[144,5220+48])
                                                        Ptyp_var simple_pat
                                          ]
                                      ]
                                  ]
                                expression (fGramDef.ml[145,5276+8]..[214,8462+84]) ghost
                                  Pexp_construct "::" (fGramDef.ml[145,5276+8]..[214,8462+84]) ghost
                                  Some
                                    expression (fGramDef.ml[145,5276+8]..[214,8462+84]) ghost
                                      Pexp_tuple
                                      [
                                        expression (fGramDef.ml[145,5276+8]..[163,6114+100])
                                          Pexp_tuple
                                          [
                                            expression (fGramDef.ml[145,5276+9]..[151,5542+53])
                                              Pexp_construct "::" (fGramDef.ml[145,5276+10]..[151,5542+53]) ghost
                                              Some
                                                expression (fGramDef.ml[145,5276+10]..[151,5542+53]) ghost
                                                  Pexp_tuple
                                                  [
                                                    expression (fGramDef.ml[145,5276+10]..[145,5276+23])
                                                      Pexp_variant "Skeyword"
                                                      Some
                                                        expression (fGramDef.ml[145,5276+20]..[145,5276+23])
                                                          Pexp_constant Const_string("`",None)
                                                    expression (fGramDef.ml[146,5301+9]..[151,5542+53]) ghost
                                                      Pexp_construct "::" (fGramDef.ml[146,5301+9]..[151,5542+53]) ghost
                                                      Some
                                                        expression (fGramDef.ml[146,5301+9]..[151,5542+53]) ghost
                                                          Pexp_tuple
                                                          [
                                                            expression (fGramDef.ml[146,5301+9]..[146,5301+58])
                                                              Pexp_variant "Snterm"
                                                              Some
                                                                expression (fGramDef.ml[146,5301+17]..[146,5301+58])
                                                                  Pexp_apply
                                                                  expression (fGramDef.ml[146,5301+18]..[146,5301+27])
                                                                    Pexp_ident "Gramf.obj" (fGramDef.ml[146,5301+18]..[146,5301+27])
                                                                  [
                                                                    <label> ""
                                                                      expression (fGramDef.ml[146,5301+28]..[146,5301+57]) ghost
Pexp_constraint
expression (fGramDef.ml[146,5301+29]..[146,5301+36])
  Pexp_ident "luident" (fGramDef.ml[146,5301+29]..[146,5301+36])
core_type (fGramDef.ml[146,5301+39]..[146,5301+55])
  Ptyp_constr "Gramf.t" (fGramDef.ml[146,5301+48]..[146,5301+55])
  [
    core_type (fGramDef.ml[146,5301+39]..[146,5301+47])
      Ptyp_var luident
  ]
                                                                  ]
                                                            expression (fGramDef.ml[147,5361+9]..[151,5542+53]) ghost
                                                              Pexp_construct "::" (fGramDef.ml[147,5361+9]..[151,5542+53]) ghost
                                                              Some
                                                                expression (fGramDef.ml[147,5361+9]..[151,5542+53]) ghost
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fGramDef.ml[147,5361+9]..[151,5542+52])
                                                                      Pexp_variant "Stoken"
                                                                      Some
expression (fGramDef.ml[148,5378+11]..[151,5542+52])
  Pexp_tuple
  [
    expression (fGramDef.ml[148,5378+12]..[148,5378+68])
      Pexp_function
      [
        <case>
          pattern (fGramDef.ml[148,5378+25]..[148,5378+45])
            Ppat_variant "Ant"
            Some
              pattern (fGramDef.ml[148,5378+30]..[148,5378+45])
                Ppat_tuple
                [
                  pattern (fGramDef.ml[148,5378+31]..[148,5378+42])
                    Ppat_or
                    pattern (fGramDef.ml[148,5378+32]..[148,5378+34])
                      Ppat_constant Const_string("",None)
                    pattern (fGramDef.ml[148,5378+35]..[148,5378+41])
                      Ppat_constant Const_string("anti",None)
                  pattern (fGramDef.ml[148,5378+43]..[148,5378+44])
                    Ppat_any
                ]
          expression (fGramDef.ml[148,5378+49]..[148,5378+53])
            Pexp_construct "true" (fGramDef.ml[148,5378+49]..[148,5378+53])
            None
        <case>
          pattern (fGramDef.ml[148,5378+56]..[148,5378+57])
            Ppat_any
          expression (fGramDef.ml[148,5378+61]..[148,5378+66])
            Pexp_construct "false" (fGramDef.ml[148,5378+61]..[148,5378+66])
            None
      ]
    expression (fGramDef.ml[149,5448+13]..[151,5542+24])
      Pexp_variant "App"
      Some
        expression (fGramDef.ml[150,5467+16]..[151,5542+23])
          Pexp_tuple
          [
            expression (fGramDef.ml[150,5467+17]..[150,5467+73])
              Pexp_variant "App"
              Some
                expression (fGramDef.ml[150,5467+23]..[150,5467+72])
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[150,5467+24]..[150,5467+36])
                      Pexp_variant "Vrn"
                      Some
                        expression (fGramDef.ml[150,5467+30]..[150,5467+35])
                          Pexp_constant Const_string("Ant",None)
                    expression (fGramDef.ml[150,5467+38]..[150,5467+71])
                      Pexp_variant "Bar"
                      Some
                        expression (fGramDef.ml[150,5467+44]..[150,5467+70])
                          Pexp_tuple
                          [
                            expression (fGramDef.ml[150,5467+45]..[150,5467+54])
                              Pexp_variant "Str"
                              Some
                                expression (fGramDef.ml[150,5467+51]..[150,5467+53])
                                  Pexp_constant Const_string("",None)
                            expression (fGramDef.ml[150,5467+56]..[150,5467+69])
                              Pexp_variant "Str"
                              Some
                                expression (fGramDef.ml[150,5467+62]..[150,5467+68])
                                  Pexp_constant Const_string("anti",None)
                          ]
                  ]
            expression (fGramDef.ml[151,5542+18]..[151,5542+22])
              Pexp_variant "Any"
              None
          ]
    expression (fGramDef.ml[151,5542+26]..[151,5542+51])
      Pexp_constant Const_string("`Ant (\"\"| \"anti\",_)",None)
  ]
                                                                    expression (fGramDef.ml[151,5542+52]..[151,5542+53]) ghost
                                                                      Pexp_construct "[]" (fGramDef.ml[151,5542+52]..[151,5542+53]) ghost
                                                                      None
                                                                  ]
                                                          ]
                                                  ]
                                            expression (fGramDef.ml[152,5597+10]..[163,6114+99])
                                              Pexp_tuple
                                              [
                                                expression (fGramDef.ml[152,5597+11]..[152,5597+83])
                                                  Pexp_constant Const_string("`App (_loc, (`Vrn (_loc, v)), (FanUtil.mk_anti _loc ~c:\"pat\" n s))\n",None)
                                                expression (fGramDef.ml[153,5682+12]..[163,6114+98])
                                                  Pexp_apply
                                                  expression (fGramDef.ml[153,5682+13]..[153,5682+28])
                                                    Pexp_ident "Gramf.mk_action" (fGramDef.ml[153,5682+13]..[153,5682+28])
                                                  [
                                                    <label> ""
                                                      expression (fGramDef.ml[154,5711+15]..[163,6114+97])
                                                        Pexp_fun ""
                                                        None
                                                        pattern (fGramDef.ml[154,5711+20]..[154,5711+44])
                                                          Ppat_constraint
                                                          pattern (fGramDef.ml[154,5711+21]..[154,5711+28])
                                                            Ppat_var "__fan_2" (fGramDef.ml[154,5711+21]..[154,5711+28])
                                                          core_type (fGramDef.ml[154,5711+31]..[154,5711+43])
                                                            Ptyp_variant closed=Open
                                                            [
                                                              Rinherit
                                                                core_type (fGramDef.ml[154,5711+34]..[154,5711+42])
                                                                  Ptyp_constr "Tokenf.t" (fGramDef.ml[154,5711+34]..[154,5711+42])
                                                                  []
                                                            ]
                                                            None
                                                        expression (fGramDef.ml[154,5711+46]..[163,6114+96]) ghost
                                                          Pexp_fun ""
                                                          None
                                                          pattern (fGramDef.ml[154,5711+46]..[154,5711+60])
                                                            Ppat_constraint
                                                            pattern (fGramDef.ml[154,5711+47]..[154,5711+48])
                                                              Ppat_var "v" (fGramDef.ml[154,5711+47]..[154,5711+48])
                                                            core_type (fGramDef.ml[154,5711+51]..[154,5711+59])
                                                              Ptyp_var luident
                                                          expression (fGramDef.ml[154,5711+62]..[163,6114+96]) ghost
                                                            Pexp_fun ""
                                                            None
                                                            pattern (fGramDef.ml[154,5711+62]..[154,5711+63])
                                                              Ppat_any
                                                            expression (fGramDef.ml[155,5776+18]..[163,6114+96]) ghost
                                                              Pexp_fun ""
                                                              None
                                                              pattern (fGramDef.ml[155,5776+18]..[155,5776+33])
                                                                Ppat_constraint
                                                                pattern (fGramDef.ml[155,5776+19]..[155,5776+23])
                                                                  Ppat_var "_loc" (fGramDef.ml[155,5776+19]..[155,5776+23])
                                                                core_type (fGramDef.ml[155,5776+26]..[155,5776+32])
                                                                  Ptyp_constr "Locf.t" (fGramDef.ml[155,5776+26]..[155,5776+32])
                                                                  []
                                                              expression (fGramDef.ml[156,5814+18]..[163,6114+96])
                                                                Pexp_match
                                                                expression (fGramDef.ml[156,5814+24]..[156,5814+31])
                                                                  Pexp_ident "__fan_2" (fGramDef.ml[156,5814+24]..[156,5814+31])
                                                                [
                                                                  <case>
                                                                    pattern (fGramDef.ml[157,5851+20]..[157,5851+45])
                                                                      Ppat_variant "Ant"
                                                                      Some
pattern (fGramDef.ml[157,5851+25]..[157,5851+45])
  Ppat_tuple
  [
    pattern (fGramDef.ml[157,5851+26]..[157,5851+42])
      Ppat_alias "n" (fGramDef.ml[157,5851+40]..[157,5851+41])
      pattern (fGramDef.ml[157,5851+27]..[157,5851+36])
        Ppat_or
        pattern (fGramDef.ml[157,5851+27]..[157,5851+29])
          Ppat_constant Const_string("",None)
        pattern (fGramDef.ml[157,5851+30]..[157,5851+36])
          Ppat_constant Const_string("anti",None)
    pattern (fGramDef.ml[157,5851+43]..[157,5851+44])
      Ppat_var "s" (fGramDef.ml[157,5851+43]..[157,5851+44])
  ]
                                                                    expression (fGramDef.ml[158,5900+22]..[160,5978+79]) ghost
                                                                      Pexp_constraint
                                                                      expression (fGramDef.ml[158,5900+23]..[160,5978+63])
Pexp_variant "App"
Some
  expression (fGramDef.ml[159,5928+25]..[160,5978+63])
    Pexp_tuple
    [
      expression (fGramDef.ml[159,5928+26]..[159,5928+30])
        Pexp_ident "_loc" (fGramDef.ml[159,5928+26]..[159,5928+30])
      expression (fGramDef.ml[159,5928+32]..[159,5928+48])
        Pexp_variant "Vrn"
        Some
          expression (fGramDef.ml[159,5928+38]..[159,5928+47])
            Pexp_tuple
            [
              expression (fGramDef.ml[159,5928+39]..[159,5928+43])
                Pexp_ident "_loc" (fGramDef.ml[159,5928+39]..[159,5928+43])
              expression (fGramDef.ml[159,5928+45]..[159,5928+46])
                Pexp_ident "v" (fGramDef.ml[159,5928+45]..[159,5928+46])
            ]
      expression (fGramDef.ml[160,5978+27]..[160,5978+62])
        Pexp_apply
        expression (fGramDef.ml[160,5978+28]..[160,5978+43])
          Pexp_ident "FanUtil.mk_anti" (fGramDef.ml[160,5978+28]..[160,5978+43])
        [
          <label> ""
            expression (fGramDef.ml[160,5978+44]..[160,5978+48])
              Pexp_ident "_loc" (fGramDef.ml[160,5978+44]..[160,5978+48])
          <label> "c"
            expression (fGramDef.ml[160,5978+52]..[160,5978+57])
              Pexp_constant Const_string("pat",None)
          <label> ""
            expression (fGramDef.ml[160,5978+58]..[160,5978+59])
              Pexp_ident "n" (fGramDef.ml[160,5978+58]..[160,5978+59])
          <label> ""
            expression (fGramDef.ml[160,5978+60]..[160,5978+61])
              Pexp_ident "s" (fGramDef.ml[160,5978+60]..[160,5978+61])
        ]
    ]
                                                                      core_type (fGramDef.ml[160,5978+66]..[160,5978+77])
Ptyp_var simple_pat
                                                                  <case>
                                                                    pattern (fGramDef.ml[161,6058+20]..[161,6058+21])
                                                                      Ppat_any
                                                                    expression (fGramDef.ml[162,6083+22]..[163,6114+96])
                                                                      Pexp_apply
                                                                      expression (fGramDef.ml[162,6083+22]..[162,6083+30])
Pexp_ident "failwith" (fGramDef.ml[162,6083+22]..[162,6083+30])
                                                                      [
<label> ""
  expression (fGramDef.ml[163,6114+24]..[163,6114+96])
    Pexp_constant Const_string("`App (_loc, (`Vrn (_loc, v)), (FanUtil.mk_anti _loc ~c:\"pat\" n s))\n",None)
                                                                      ]
                                                                ]
                                                  ]
                                              ]
                                          ]
                                        expression (fGramDef.ml[164,6216+8]..[214,8462+84]) ghost
                                          Pexp_construct "::" (fGramDef.ml[164,6216+8]..[214,8462+84]) ghost
                                          Some
                                            expression (fGramDef.ml[164,6216+8]..[214,8462+84]) ghost
                                              Pexp_tuple
                                              [
                                                expression (fGramDef.ml[164,6216+8]..[179,6857+79])
                                                  Pexp_tuple
                                                  [
                                                    expression (fGramDef.ml[164,6216+9]..[168,6374+52])
                                                      Pexp_construct "::" (fGramDef.ml[164,6216+10]..[168,6374+52]) ghost
                                                      Some
                                                        expression (fGramDef.ml[164,6216+10]..[168,6374+52]) ghost
                                                          Pexp_tuple
                                                          [
                                                            expression (fGramDef.ml[164,6216+10]..[164,6216+23])
                                                              Pexp_variant "Skeyword"
                                                              Some
                                                                expression (fGramDef.ml[164,6216+20]..[164,6216+23])
                                                                  Pexp_constant Const_string("`",None)
                                                            expression (fGramDef.ml[165,6241+9]..[168,6374+52]) ghost
                                                              Pexp_construct "::" (fGramDef.ml[165,6241+9]..[168,6374+52]) ghost
                                                              Some
                                                                expression (fGramDef.ml[165,6241+9]..[168,6374+52]) ghost
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fGramDef.ml[165,6241+9]..[165,6241+58])
                                                                      Pexp_variant "Snterm"
                                                                      Some
expression (fGramDef.ml[165,6241+17]..[165,6241+58])
  Pexp_apply
  expression (fGramDef.ml[165,6241+18]..[165,6241+27])
    Pexp_ident "Gramf.obj" (fGramDef.ml[165,6241+18]..[165,6241+27])
  [
    <label> ""
      expression (fGramDef.ml[165,6241+28]..[165,6241+57]) ghost
        Pexp_constraint
        expression (fGramDef.ml[165,6241+29]..[165,6241+36])
          Pexp_ident "luident" (fGramDef.ml[165,6241+29]..[165,6241+36])
        core_type (fGramDef.ml[165,6241+39]..[165,6241+55])
          Ptyp_constr "Gramf.t" (fGramDef.ml[165,6241+48]..[165,6241+55])
          [
            core_type (fGramDef.ml[165,6241+39]..[165,6241+47])
              Ptyp_var luident
          ]
  ]
                                                                    expression (fGramDef.ml[166,6301+9]..[168,6374+52]) ghost
                                                                      Pexp_construct "::" (fGramDef.ml[166,6301+9]..[168,6374+52]) ghost
                                                                      Some
expression (fGramDef.ml[166,6301+9]..[168,6374+52]) ghost
  Pexp_tuple
  [
    expression (fGramDef.ml[166,6301+9]..[168,6374+51])
      Pexp_variant "Stoken"
      Some
        expression (fGramDef.ml[167,6318+11]..[168,6374+51])
          Pexp_tuple
          [
            expression (fGramDef.ml[167,6318+12]..[167,6318+54])
              Pexp_function
              [
                <case>
                  pattern (fGramDef.ml[167,6318+25]..[167,6318+31])
                    Ppat_variant "Str"
                    Some
                      pattern (fGramDef.ml[167,6318+30]..[167,6318+31])
                        Ppat_any
                  expression (fGramDef.ml[167,6318+35]..[167,6318+39])
                    Pexp_construct "true" (fGramDef.ml[167,6318+35]..[167,6318+39])
                    None
                <case>
                  pattern (fGramDef.ml[167,6318+42]..[167,6318+43])
                    Ppat_any
                  expression (fGramDef.ml[167,6318+47]..[167,6318+52])
                    Pexp_construct "false" (fGramDef.ml[167,6318+47]..[167,6318+52])
                    None
              ]
            expression (fGramDef.ml[168,6374+13]..[168,6374+40])
              Pexp_variant "App"
              Some
                expression (fGramDef.ml[168,6374+19]..[168,6374+39])
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[168,6374+20]..[168,6374+32])
                      Pexp_variant "Vrn"
                      Some
                        expression (fGramDef.ml[168,6374+26]..[168,6374+31])
                          Pexp_constant Const_string("Str",None)
                    expression (fGramDef.ml[168,6374+34]..[168,6374+38])
                      Pexp_variant "Any"
                      None
                  ]
            expression (fGramDef.ml[168,6374+42]..[168,6374+50])
              Pexp_constant Const_string("`Str _",None)
          ]
    expression (fGramDef.ml[168,6374+51]..[168,6374+52]) ghost
      Pexp_construct "[]" (fGramDef.ml[168,6374+51]..[168,6374+52]) ghost
      None
  ]
                                                                  ]
                                                          ]
                                                    expression (fGramDef.ml[169,6428+10]..[179,6857+78])
                                                      Pexp_tuple
                                                      [
                                                        expression (fGramDef.ml[169,6428+11]..[169,6428+62])
                                                          Pexp_constant Const_string("`App (_loc, (`Vrn (_loc, s)), (`Str (_loc, v)))\n",None)
                                                        expression (fGramDef.ml[170,6492+12]..[179,6857+77])
                                                          Pexp_apply
                                                          expression (fGramDef.ml[170,6492+13]..[170,6492+28])
                                                            Pexp_ident "Gramf.mk_action" (fGramDef.ml[170,6492+13]..[170,6492+28])
                                                          [
                                                            <label> ""
                                                              expression (fGramDef.ml[171,6521+15]..[179,6857+76])
                                                                Pexp_fun ""
                                                                None
                                                                pattern (fGramDef.ml[171,6521+20]..[171,6521+44])
                                                                  Ppat_constraint
                                                                  pattern (fGramDef.ml[171,6521+21]..[171,6521+28])
                                                                    Ppat_var "__fan_2" (fGramDef.ml[171,6521+21]..[171,6521+28])
                                                                  core_type (fGramDef.ml[171,6521+31]..[171,6521+43])
                                                                    Ptyp_variant closed=Open
                                                                    [
                                                                      Rinherit
core_type (fGramDef.ml[171,6521+34]..[171,6521+42])
  Ptyp_constr "Tokenf.t" (fGramDef.ml[171,6521+34]..[171,6521+42])
  []
                                                                    ]
                                                                    None
                                                                expression (fGramDef.ml[171,6521+46]..[179,6857+75]) ghost
                                                                  Pexp_fun ""
                                                                  None
                                                                  pattern (fGramDef.ml[171,6521+46]..[171,6521+60])
                                                                    Ppat_constraint
                                                                    pattern (fGramDef.ml[171,6521+47]..[171,6521+48])
                                                                      Ppat_var "s" (fGramDef.ml[171,6521+47]..[171,6521+48])
                                                                    core_type (fGramDef.ml[171,6521+51]..[171,6521+59])
                                                                      Ptyp_var luident
                                                                  expression (fGramDef.ml[171,6521+62]..[179,6857+75]) ghost
                                                                    Pexp_fun ""
                                                                    None
                                                                    pattern (fGramDef.ml[171,6521+62]..[171,6521+63])
                                                                      Ppat_any
                                                                    expression (fGramDef.ml[172,6586+18]..[179,6857+75]) ghost
                                                                      Pexp_fun ""
                                                                      None
                                                                      pattern (fGramDef.ml[172,6586+18]..[172,6586+33])
Ppat_constraint
pattern (fGramDef.ml[172,6586+19]..[172,6586+23])
  Ppat_var "_loc" (fGramDef.ml[172,6586+19]..[172,6586+23])
core_type (fGramDef.ml[172,6586+26]..[172,6586+32])
  Ptyp_constr "Locf.t" (fGramDef.ml[172,6586+26]..[172,6586+32])
  []
                                                                      expression (fGramDef.ml[173,6624+18]..[179,6857+75])
Pexp_match
expression (fGramDef.ml[173,6624+24]..[173,6624+31])
  Pexp_ident "__fan_2" (fGramDef.ml[173,6624+24]..[173,6624+31])
[
  <case>
    pattern (fGramDef.ml[174,6661+20]..[174,6661+26])
      Ppat_variant "Str"
      Some
        pattern (fGramDef.ml[174,6661+25]..[174,6661+26])
          Ppat_var "v" (fGramDef.ml[174,6661+25]..[174,6661+26])
    expression (fGramDef.ml[175,6691+22]..[176,6765+35]) ghost
      Pexp_constraint
      expression (fGramDef.ml[175,6691+23]..[175,6691+70])
        Pexp_variant "App"
        Some
          expression (fGramDef.ml[175,6691+28]..[175,6691+70])
            Pexp_tuple
            [
              expression (fGramDef.ml[175,6691+29]..[175,6691+33])
                Pexp_ident "_loc" (fGramDef.ml[175,6691+29]..[175,6691+33])
              expression (fGramDef.ml[175,6691+35]..[175,6691+51])
                Pexp_variant "Vrn"
                Some
                  expression (fGramDef.ml[175,6691+41]..[175,6691+50])
                    Pexp_tuple
                    [
                      expression (fGramDef.ml[175,6691+42]..[175,6691+46])
                        Pexp_ident "_loc" (fGramDef.ml[175,6691+42]..[175,6691+46])
                      expression (fGramDef.ml[175,6691+48]..[175,6691+49])
                        Pexp_ident "s" (fGramDef.ml[175,6691+48]..[175,6691+49])
                    ]
              expression (fGramDef.ml[175,6691+53]..[175,6691+69])
                Pexp_variant "Str"
                Some
                  expression (fGramDef.ml[175,6691+59]..[175,6691+68])
                    Pexp_tuple
                    [
                      expression (fGramDef.ml[175,6691+60]..[175,6691+64])
                        Pexp_ident "_loc" (fGramDef.ml[175,6691+60]..[175,6691+64])
                      expression (fGramDef.ml[175,6691+66]..[175,6691+67])
                        Pexp_ident "v" (fGramDef.ml[175,6691+66]..[175,6691+67])
                    ]
            ]
      core_type (fGramDef.ml[176,6765+22]..[176,6765+33])
        Ptyp_var simple_pat
  <case>
    pattern (fGramDef.ml[177,6801+20]..[177,6801+21])
      Ppat_any
    expression (fGramDef.ml[178,6826+22]..[179,6857+75])
      Pexp_apply
      expression (fGramDef.ml[178,6826+22]..[178,6826+30])
        Pexp_ident "failwith" (fGramDef.ml[178,6826+22]..[178,6826+30])
      [
        <label> ""
          expression (fGramDef.ml[179,6857+24]..[179,6857+75])
            Pexp_constant Const_string("`App (_loc, (`Vrn (_loc, s)), (`Str (_loc, v)))\n",None)
      ]
]
                                                          ]
                                                      ]
                                                  ]
                                                expression (fGramDef.ml[180,6938+8]..[214,8462+84]) ghost
                                                  Pexp_construct "::" (fGramDef.ml[180,6938+8]..[214,8462+84]) ghost
                                                  Some
                                                    expression (fGramDef.ml[180,6938+8]..[214,8462+84]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (fGramDef.ml[180,6938+8]..[195,7579+79])
                                                          Pexp_tuple
                                                          [
                                                            expression (fGramDef.ml[180,6938+9]..[184,7096+52])
                                                              Pexp_construct "::" (fGramDef.ml[180,6938+10]..[184,7096+52]) ghost
                                                              Some
                                                                expression (fGramDef.ml[180,6938+10]..[184,7096+52]) ghost
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fGramDef.ml[180,6938+10]..[180,6938+23])
                                                                      Pexp_variant "Skeyword"
                                                                      Some
expression (fGramDef.ml[180,6938+20]..[180,6938+23])
  Pexp_constant Const_string("`",None)
                                                                    expression (fGramDef.ml[181,6963+9]..[184,7096+52]) ghost
                                                                      Pexp_construct "::" (fGramDef.ml[181,6963+9]..[184,7096+52]) ghost
                                                                      Some
expression (fGramDef.ml[181,6963+9]..[184,7096+52]) ghost
  Pexp_tuple
  [
    expression (fGramDef.ml[181,6963+9]..[181,6963+58])
      Pexp_variant "Snterm"
      Some
        expression (fGramDef.ml[181,6963+17]..[181,6963+58])
          Pexp_apply
          expression (fGramDef.ml[181,6963+18]..[181,6963+27])
            Pexp_ident "Gramf.obj" (fGramDef.ml[181,6963+18]..[181,6963+27])
          [
            <label> ""
              expression (fGramDef.ml[181,6963+28]..[181,6963+57]) ghost
                Pexp_constraint
                expression (fGramDef.ml[181,6963+29]..[181,6963+36])
                  Pexp_ident "luident" (fGramDef.ml[181,6963+29]..[181,6963+36])
                core_type (fGramDef.ml[181,6963+39]..[181,6963+55])
                  Ptyp_constr "Gramf.t" (fGramDef.ml[181,6963+48]..[181,6963+55])
                  [
                    core_type (fGramDef.ml[181,6963+39]..[181,6963+47])
                      Ptyp_var luident
                  ]
          ]
    expression (fGramDef.ml[182,7023+9]..[184,7096+52]) ghost
      Pexp_construct "::" (fGramDef.ml[182,7023+9]..[184,7096+52]) ghost
      Some
        expression (fGramDef.ml[182,7023+9]..[184,7096+52]) ghost
          Pexp_tuple
          [
            expression (fGramDef.ml[182,7023+9]..[184,7096+51])
              Pexp_variant "Stoken"
              Some
                expression (fGramDef.ml[183,7040+11]..[184,7096+51])
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[183,7040+12]..[183,7040+54])
                      Pexp_function
                      [
                        <case>
                          pattern (fGramDef.ml[183,7040+25]..[183,7040+31])
                            Ppat_variant "Lid"
                            Some
                              pattern (fGramDef.ml[183,7040+30]..[183,7040+31])
                                Ppat_any
                          expression (fGramDef.ml[183,7040+35]..[183,7040+39])
                            Pexp_construct "true" (fGramDef.ml[183,7040+35]..[183,7040+39])
                            None
                        <case>
                          pattern (fGramDef.ml[183,7040+42]..[183,7040+43])
                            Ppat_any
                          expression (fGramDef.ml[183,7040+47]..[183,7040+52])
                            Pexp_construct "false" (fGramDef.ml[183,7040+47]..[183,7040+52])
                            None
                      ]
                    expression (fGramDef.ml[184,7096+13]..[184,7096+40])
                      Pexp_variant "App"
                      Some
                        expression (fGramDef.ml[184,7096+19]..[184,7096+39])
                          Pexp_tuple
                          [
                            expression (fGramDef.ml[184,7096+20]..[184,7096+32])
                              Pexp_variant "Vrn"
                              Some
                                expression (fGramDef.ml[184,7096+26]..[184,7096+31])
                                  Pexp_constant Const_string("Lid",None)
                            expression (fGramDef.ml[184,7096+34]..[184,7096+38])
                              Pexp_variant "Any"
                              None
                          ]
                    expression (fGramDef.ml[184,7096+42]..[184,7096+50])
                      Pexp_constant Const_string("`Lid _",None)
                  ]
            expression (fGramDef.ml[184,7096+51]..[184,7096+52]) ghost
              Pexp_construct "[]" (fGramDef.ml[184,7096+51]..[184,7096+52]) ghost
              None
          ]
  ]
                                                                  ]
                                                            expression (fGramDef.ml[185,7150+10]..[195,7579+78])
                                                              Pexp_tuple
                                                              [
                                                                expression (fGramDef.ml[185,7150+11]..[185,7150+62])
                                                                  Pexp_constant Const_string("`App (_loc, (`Vrn (_loc, s)), (`Lid (_loc, x)))\n",None)
                                                                expression (fGramDef.ml[186,7214+12]..[195,7579+77])
                                                                  Pexp_apply
                                                                  expression (fGramDef.ml[186,7214+13]..[186,7214+28])
                                                                    Pexp_ident "Gramf.mk_action" (fGramDef.ml[186,7214+13]..[186,7214+28])
                                                                  [
                                                                    <label> ""
                                                                      expression (fGramDef.ml[187,7243+15]..[195,7579+76])
Pexp_fun ""
None
pattern (fGramDef.ml[187,7243+20]..[187,7243+44])
  Ppat_constraint
  pattern (fGramDef.ml[187,7243+21]..[187,7243+28])
    Ppat_var "__fan_2" (fGramDef.ml[187,7243+21]..[187,7243+28])
  core_type (fGramDef.ml[187,7243+31]..[187,7243+43])
    Ptyp_variant closed=Open
    [
      Rinherit
        core_type (fGramDef.ml[187,7243+34]..[187,7243+42])
          Ptyp_constr "Tokenf.t" (fGramDef.ml[187,7243+34]..[187,7243+42])
          []
    ]
    None
expression (fGramDef.ml[187,7243+46]..[195,7579+75]) ghost
  Pexp_fun ""
  None
  pattern (fGramDef.ml[187,7243+46]..[187,7243+60])
    Ppat_constraint
    pattern (fGramDef.ml[187,7243+47]..[187,7243+48])
      Ppat_var "s" (fGramDef.ml[187,7243+47]..[187,7243+48])
    core_type (fGramDef.ml[187,7243+51]..[187,7243+59])
      Ptyp_var luident
  expression (fGramDef.ml[187,7243+62]..[195,7579+75]) ghost
    Pexp_fun ""
    None
    pattern (fGramDef.ml[187,7243+62]..[187,7243+63])
      Ppat_any
    expression (fGramDef.ml[188,7308+18]..[195,7579+75]) ghost
      Pexp_fun ""
      None
      pattern (fGramDef.ml[188,7308+18]..[188,7308+33])
        Ppat_constraint
        pattern (fGramDef.ml[188,7308+19]..[188,7308+23])
          Ppat_var "_loc" (fGramDef.ml[188,7308+19]..[188,7308+23])
        core_type (fGramDef.ml[188,7308+26]..[188,7308+32])
          Ptyp_constr "Locf.t" (fGramDef.ml[188,7308+26]..[188,7308+32])
          []
      expression (fGramDef.ml[189,7346+18]..[195,7579+75])
        Pexp_match
        expression (fGramDef.ml[189,7346+24]..[189,7346+31])
          Pexp_ident "__fan_2" (fGramDef.ml[189,7346+24]..[189,7346+31])
        [
          <case>
            pattern (fGramDef.ml[190,7383+20]..[190,7383+26])
              Ppat_variant "Lid"
              Some
                pattern (fGramDef.ml[190,7383+25]..[190,7383+26])
                  Ppat_var "x" (fGramDef.ml[190,7383+25]..[190,7383+26])
            expression (fGramDef.ml[191,7413+22]..[192,7487+35]) ghost
              Pexp_constraint
              expression (fGramDef.ml[191,7413+23]..[191,7413+70])
                Pexp_variant "App"
                Some
                  expression (fGramDef.ml[191,7413+28]..[191,7413+70])
                    Pexp_tuple
                    [
                      expression (fGramDef.ml[191,7413+29]..[191,7413+33])
                        Pexp_ident "_loc" (fGramDef.ml[191,7413+29]..[191,7413+33])
                      expression (fGramDef.ml[191,7413+35]..[191,7413+51])
                        Pexp_variant "Vrn"
                        Some
                          expression (fGramDef.ml[191,7413+41]..[191,7413+50])
                            Pexp_tuple
                            [
                              expression (fGramDef.ml[191,7413+42]..[191,7413+46])
                                Pexp_ident "_loc" (fGramDef.ml[191,7413+42]..[191,7413+46])
                              expression (fGramDef.ml[191,7413+48]..[191,7413+49])
                                Pexp_ident "s" (fGramDef.ml[191,7413+48]..[191,7413+49])
                            ]
                      expression (fGramDef.ml[191,7413+53]..[191,7413+69])
                        Pexp_variant "Lid"
                        Some
                          expression (fGramDef.ml[191,7413+59]..[191,7413+68])
                            Pexp_tuple
                            [
                              expression (fGramDef.ml[191,7413+60]..[191,7413+64])
                                Pexp_ident "_loc" (fGramDef.ml[191,7413+60]..[191,7413+64])
                              expression (fGramDef.ml[191,7413+66]..[191,7413+67])
                                Pexp_ident "x" (fGramDef.ml[191,7413+66]..[191,7413+67])
                            ]
                    ]
              core_type (fGramDef.ml[192,7487+22]..[192,7487+33])
                Ptyp_var simple_pat
          <case>
            pattern (fGramDef.ml[193,7523+20]..[193,7523+21])
              Ppat_any
            expression (fGramDef.ml[194,7548+22]..[195,7579+75])
              Pexp_apply
              expression (fGramDef.ml[194,7548+22]..[194,7548+30])
                Pexp_ident "failwith" (fGramDef.ml[194,7548+22]..[194,7548+30])
              [
                <label> ""
                  expression (fGramDef.ml[195,7579+24]..[195,7579+75])
                    Pexp_constant Const_string("`App (_loc, (`Vrn (_loc, s)), (`Lid (_loc, x)))\n",None)
              ]
        ]
                                                                  ]
                                                              ]
                                                          ]
                                                        expression (fGramDef.ml[196,7660+8]..[214,8462+84]) ghost
                                                          Pexp_construct "::" (fGramDef.ml[196,7660+8]..[214,8462+84]) ghost
                                                          Some
                                                            expression (fGramDef.ml[196,7660+8]..[214,8462+84]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (fGramDef.ml[196,7660+8]..[202,7920+81])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fGramDef.ml[196,7660+9]..[198,7745+23])
                                                                      Pexp_construct "::" (fGramDef.ml[196,7660+10]..[198,7745+23]) ghost
                                                                      Some
expression (fGramDef.ml[196,7660+10]..[198,7745+23]) ghost
  Pexp_tuple
  [
    expression (fGramDef.ml[196,7660+10]..[196,7660+23])
      Pexp_variant "Skeyword"
      Some
        expression (fGramDef.ml[196,7660+20]..[196,7660+23])
          Pexp_constant Const_string("`",None)
    expression (fGramDef.ml[197,7685+9]..[198,7745+23]) ghost
      Pexp_construct "::" (fGramDef.ml[197,7685+9]..[198,7745+23]) ghost
      Some
        expression (fGramDef.ml[197,7685+9]..[198,7745+23]) ghost
          Pexp_tuple
          [
            expression (fGramDef.ml[197,7685+9]..[197,7685+58])
              Pexp_variant "Snterm"
              Some
                expression (fGramDef.ml[197,7685+17]..[197,7685+58])
                  Pexp_apply
                  expression (fGramDef.ml[197,7685+18]..[197,7685+27])
                    Pexp_ident "Gramf.obj" (fGramDef.ml[197,7685+18]..[197,7685+27])
                  [
                    <label> ""
                      expression (fGramDef.ml[197,7685+28]..[197,7685+57]) ghost
                        Pexp_constraint
                        expression (fGramDef.ml[197,7685+29]..[197,7685+36])
                          Pexp_ident "luident" (fGramDef.ml[197,7685+29]..[197,7685+36])
                        core_type (fGramDef.ml[197,7685+39]..[197,7685+55])
                          Ptyp_constr "Gramf.t" (fGramDef.ml[197,7685+48]..[197,7685+55])
                          [
                            core_type (fGramDef.ml[197,7685+39]..[197,7685+47])
                              Ptyp_var luident
                          ]
                  ]
            expression (fGramDef.ml[198,7745+9]..[198,7745+23]) ghost
              Pexp_construct "::" (fGramDef.ml[198,7745+9]..[198,7745+23]) ghost
              Some
                expression (fGramDef.ml[198,7745+9]..[198,7745+23]) ghost
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[198,7745+9]..[198,7745+22])
                      Pexp_variant "Skeyword"
                      Some
                        expression (fGramDef.ml[198,7745+19]..[198,7745+22])
                          Pexp_constant Const_string("_",None)
                    expression (fGramDef.ml[198,7745+22]..[198,7745+23]) ghost
                      Pexp_construct "[]" (fGramDef.ml[198,7745+22]..[198,7745+23]) ghost
                      None
                  ]
          ]
  ]
                                                                    expression (fGramDef.ml[199,7770+10]..[202,7920+80])
                                                                      Pexp_tuple
                                                                      [
expression (fGramDef.ml[199,7770+11]..[199,7770+57])
  Pexp_constant Const_string("`App (_loc, (`Vrn (_loc, s)), (`Any _loc))\n",None)
expression (fGramDef.ml[200,7829+12]..[202,7920+79])
  Pexp_apply
  expression (fGramDef.ml[200,7829+13]..[200,7829+28])
    Pexp_ident "Gramf.mk_action" (fGramDef.ml[200,7829+13]..[200,7829+28])
  [
    <label> ""
      expression (fGramDef.ml[201,7858+15]..[202,7920+78])
        Pexp_fun ""
        None
        pattern (fGramDef.ml[201,7858+20]..[201,7858+21])
          Ppat_any
        expression (fGramDef.ml[201,7858+23]..[202,7920+77]) ghost
          Pexp_fun ""
          None
          pattern (fGramDef.ml[201,7858+23]..[201,7858+37])
            Ppat_constraint
            pattern (fGramDef.ml[201,7858+24]..[201,7858+25])
              Ppat_var "s" (fGramDef.ml[201,7858+24]..[201,7858+25])
            core_type (fGramDef.ml[201,7858+28]..[201,7858+36])
              Ptyp_var luident
          expression (fGramDef.ml[201,7858+39]..[202,7920+77]) ghost
            Pexp_fun ""
            None
            pattern (fGramDef.ml[201,7858+39]..[201,7858+40])
              Ppat_any
            expression (fGramDef.ml[201,7858+42]..[202,7920+77]) ghost
              Pexp_fun ""
              None
              pattern (fGramDef.ml[201,7858+42]..[201,7858+57])
                Ppat_constraint
                pattern (fGramDef.ml[201,7858+43]..[201,7858+47])
                  Ppat_var "_loc" (fGramDef.ml[201,7858+43]..[201,7858+47])
                core_type (fGramDef.ml[201,7858+50]..[201,7858+56])
                  Ptyp_constr "Locf.t" (fGramDef.ml[201,7858+50]..[201,7858+56])
                  []
              expression (fGramDef.ml[202,7920+18]..[202,7920+77]) ghost
                Pexp_constraint
                expression (fGramDef.ml[202,7920+19]..[202,7920+61])
                  Pexp_variant "App"
                  Some
                    expression (fGramDef.ml[202,7920+24]..[202,7920+61])
                      Pexp_tuple
                      [
                        expression (fGramDef.ml[202,7920+25]..[202,7920+29])
                          Pexp_ident "_loc" (fGramDef.ml[202,7920+25]..[202,7920+29])
                        expression (fGramDef.ml[202,7920+31]..[202,7920+47])
                          Pexp_variant "Vrn"
                          Some
                            expression (fGramDef.ml[202,7920+37]..[202,7920+46])
                              Pexp_tuple
                              [
                                expression (fGramDef.ml[202,7920+38]..[202,7920+42])
                                  Pexp_ident "_loc" (fGramDef.ml[202,7920+38]..[202,7920+42])
                                expression (fGramDef.ml[202,7920+44]..[202,7920+45])
                                  Pexp_ident "s" (fGramDef.ml[202,7920+44]..[202,7920+45])
                              ]
                        expression (fGramDef.ml[202,7920+49]..[202,7920+60])
                          Pexp_variant "Any"
                          Some
                            expression (fGramDef.ml[202,7920+55]..[202,7920+59])
                              Pexp_ident "_loc" (fGramDef.ml[202,7920+55]..[202,7920+59])
                      ]
                core_type (fGramDef.ml[202,7920+64]..[202,7920+75])
                  Ptyp_var simple_pat
  ]
                                                                      ]
                                                                  ]
                                                                expression (fGramDef.ml[203,8003+8]..[214,8462+84]) ghost
                                                                  Pexp_construct "::" (fGramDef.ml[203,8003+8]..[214,8462+84]) ghost
                                                                  Some
                                                                    expression (fGramDef.ml[203,8003+8]..[214,8462+84]) ghost
                                                                      Pexp_tuple
                                                                      [
expression (fGramDef.ml[203,8003+8]..[214,8462+83])
  Pexp_tuple
  [
    expression (fGramDef.ml[203,8003+9]..[209,8238+23])
      Pexp_construct "::" (fGramDef.ml[203,8003+10]..[209,8238+23]) ghost
      Some
        expression (fGramDef.ml[203,8003+10]..[209,8238+23]) ghost
          Pexp_tuple
          [
            expression (fGramDef.ml[203,8003+10]..[203,8003+23])
              Pexp_variant "Skeyword"
              Some
                expression (fGramDef.ml[203,8003+20]..[203,8003+23])
                  Pexp_constant Const_string("`",None)
            expression (fGramDef.ml[204,8028+9]..[209,8238+23]) ghost
              Pexp_construct "::" (fGramDef.ml[204,8028+9]..[209,8238+23]) ghost
              Some
                expression (fGramDef.ml[204,8028+9]..[209,8238+23]) ghost
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[204,8028+9]..[204,8028+58])
                      Pexp_variant "Snterm"
                      Some
                        expression (fGramDef.ml[204,8028+17]..[204,8028+58])
                          Pexp_apply
                          expression (fGramDef.ml[204,8028+18]..[204,8028+27])
                            Pexp_ident "Gramf.obj" (fGramDef.ml[204,8028+18]..[204,8028+27])
                          [
                            <label> ""
                              expression (fGramDef.ml[204,8028+28]..[204,8028+57]) ghost
                                Pexp_constraint
                                expression (fGramDef.ml[204,8028+29]..[204,8028+36])
                                  Pexp_ident "luident" (fGramDef.ml[204,8028+29]..[204,8028+36])
                                core_type (fGramDef.ml[204,8028+39]..[204,8028+55])
                                  Ptyp_constr "Gramf.t" (fGramDef.ml[204,8028+48]..[204,8028+55])
                                  [
                                    core_type (fGramDef.ml[204,8028+39]..[204,8028+47])
                                      Ptyp_var luident
                                  ]
                          ]
                    expression (fGramDef.ml[205,8088+9]..[209,8238+23]) ghost
                      Pexp_construct "::" (fGramDef.ml[205,8088+9]..[209,8238+23]) ghost
                      Some
                        expression (fGramDef.ml[205,8088+9]..[209,8238+23]) ghost
                          Pexp_tuple
                          [
                            expression (fGramDef.ml[205,8088+9]..[205,8088+22])
                              Pexp_variant "Skeyword"
                              Some
                                expression (fGramDef.ml[205,8088+19]..[205,8088+22])
                                  Pexp_constant Const_string("(",None)
                            expression (fGramDef.ml[206,8112+9]..[209,8238+23]) ghost
                              Pexp_construct "::" (fGramDef.ml[206,8112+9]..[209,8238+23]) ghost
                              Some
                                expression (fGramDef.ml[206,8112+9]..[209,8238+23]) ghost
                                  Pexp_tuple
                                  [
                                    expression (fGramDef.ml[206,8112+9]..[208,8207+29])
                                      Pexp_variant "Slist1sep"
                                      Some
                                        expression (fGramDef.ml[207,8132+11]..[208,8207+29])
                                          Pexp_tuple
                                          [
                                            expression (fGramDef.ml[207,8132+12]..[207,8132+73])
                                              Pexp_variant "Snterm"
                                              Some
                                                expression (fGramDef.ml[207,8132+21]..[207,8132+72])
                                                  Pexp_apply
                                                  expression (fGramDef.ml[207,8132+22]..[207,8132+31])
                                                    Pexp_ident "Gramf.obj" (fGramDef.ml[207,8132+22]..[207,8132+31])
                                                  [
                                                    <label> ""
                                                      expression (fGramDef.ml[207,8132+32]..[207,8132+71]) ghost
                                                        Pexp_constraint
                                                        expression (fGramDef.ml[207,8132+33]..[207,8132+45])
                                                          Pexp_ident "internal_pat" (fGramDef.ml[207,8132+33]..[207,8132+45])
                                                        core_type (fGramDef.ml[207,8132+48]..[207,8132+69])
                                                          Ptyp_constr "Gramf.t" (fGramDef.ml[207,8132+62]..[207,8132+69])
                                                          [
                                                            core_type (fGramDef.ml[207,8132+48]..[207,8132+61])
                                                              Ptyp_var internal_pat
                                                          ]
                                                  ]
                                            expression (fGramDef.ml[208,8207+13]..[208,8207+28])
                                              Pexp_variant "Skeyword"
                                              Some
                                                expression (fGramDef.ml[208,8207+24]..[208,8207+27])
                                                  Pexp_constant Const_string(",",None)
                                          ]
                                    expression (fGramDef.ml[209,8238+9]..[209,8238+23]) ghost
                                      Pexp_construct "::" (fGramDef.ml[209,8238+9]..[209,8238+23]) ghost
                                      Some
                                        expression (fGramDef.ml[209,8238+9]..[209,8238+23]) ghost
                                          Pexp_tuple
                                          [
                                            expression (fGramDef.ml[209,8238+9]..[209,8238+22])
                                              Pexp_variant "Skeyword"
                                              Some
                                                expression (fGramDef.ml[209,8238+19]..[209,8238+22])
                                                  Pexp_constant Const_string(")",None)
                                            expression (fGramDef.ml[209,8238+22]..[209,8238+23]) ghost
                                              Pexp_construct "[]" (fGramDef.ml[209,8238+22]..[209,8238+23]) ghost
                                              None
                                          ]
                                  ]
                          ]
                  ]
          ]
    expression (fGramDef.ml[210,8263+10]..[214,8462+82])
      Pexp_tuple
      [
        expression (fGramDef.ml[210,8263+11]..[210,8263+59])
          Pexp_constant Const_string("Ast_gen.appl_of_list ((`Vrn (_loc, s)) :: v)\n",None)
        expression (fGramDef.ml[211,8324+12]..[214,8462+81])
          Pexp_apply
          expression (fGramDef.ml[211,8324+13]..[211,8324+28])
            Pexp_ident "Gramf.mk_action" (fGramDef.ml[211,8324+13]..[211,8324+28])
          [
            <label> ""
              expression (fGramDef.ml[212,8353+15]..[214,8462+80])
                Pexp_fun ""
                None
                pattern (fGramDef.ml[212,8353+20]..[212,8353+21])
                  Ppat_any
                expression (fGramDef.ml[212,8353+23]..[214,8462+79]) ghost
                  Pexp_fun ""
                  None
                  pattern (fGramDef.ml[212,8353+23]..[212,8353+47])
                    Ppat_constraint
                    pattern (fGramDef.ml[212,8353+24]..[212,8353+25])
                      Ppat_var "v" (fGramDef.ml[212,8353+24]..[212,8353+25])
                    core_type (fGramDef.ml[212,8353+28]..[212,8353+46])
                      Ptyp_constr "list" (fGramDef.ml[212,8353+42]..[212,8353+46])
                      [
                        core_type (fGramDef.ml[212,8353+28]..[212,8353+41])
                          Ptyp_var internal_pat
                      ]
                  expression (fGramDef.ml[212,8353+49]..[214,8462+79]) ghost
                    Pexp_fun ""
                    None
                    pattern (fGramDef.ml[212,8353+49]..[212,8353+50])
                      Ppat_any
                    expression (fGramDef.ml[212,8353+52]..[214,8462+79]) ghost
                      Pexp_fun ""
                      None
                      pattern (fGramDef.ml[212,8353+52]..[212,8353+66])
                        Ppat_constraint
                        pattern (fGramDef.ml[212,8353+53]..[212,8353+54])
                          Ppat_var "s" (fGramDef.ml[212,8353+53]..[212,8353+54])
                        core_type (fGramDef.ml[212,8353+57]..[212,8353+65])
                          Ptyp_var luident
                      expression (fGramDef.ml[212,8353+68]..[214,8462+79]) ghost
                        Pexp_fun ""
                        None
                        pattern (fGramDef.ml[212,8353+68]..[212,8353+69])
                          Ppat_any
                        expression (fGramDef.ml[213,8424+18]..[214,8462+79]) ghost
                          Pexp_fun ""
                          None
                          pattern (fGramDef.ml[213,8424+18]..[213,8424+33])
                            Ppat_constraint
                            pattern (fGramDef.ml[213,8424+19]..[213,8424+23])
                              Ppat_var "_loc" (fGramDef.ml[213,8424+19]..[213,8424+23])
                            core_type (fGramDef.ml[213,8424+26]..[213,8424+32])
                              Ptyp_constr "Locf.t" (fGramDef.ml[213,8424+26]..[213,8424+32])
                              []
                          expression (fGramDef.ml[214,8462+18]..[214,8462+79]) ghost
                            Pexp_constraint
                            expression (fGramDef.ml[214,8462+19]..[214,8462+63])
                              Pexp_apply
                              expression (fGramDef.ml[214,8462+19]..[214,8462+39])
                                Pexp_ident "Ast_gen.appl_of_list" (fGramDef.ml[214,8462+19]..[214,8462+39])
                              [
                                <label> ""
                                  expression (fGramDef.ml[214,8462+40]..[214,8462+63])
                                    Pexp_construct "::" (fGramDef.ml[214,8462+58]..[214,8462+60])
                                    Some
                                      expression (fGramDef.ml[214,8462+41]..[214,8462+62]) ghost
                                        Pexp_tuple
                                        [
                                          expression (fGramDef.ml[214,8462+41]..[214,8462+57])
                                            Pexp_variant "Vrn"
                                            Some
                                              expression (fGramDef.ml[214,8462+47]..[214,8462+56])
                                                Pexp_tuple
                                                [
                                                  expression (fGramDef.ml[214,8462+48]..[214,8462+52])
                                                    Pexp_ident "_loc" (fGramDef.ml[214,8462+48]..[214,8462+52])
                                                  expression (fGramDef.ml[214,8462+54]..[214,8462+55])
                                                    Pexp_ident "s" (fGramDef.ml[214,8462+54]..[214,8462+55])
                                                ]
                                          expression (fGramDef.ml[214,8462+61]..[214,8462+62])
                                            Pexp_ident "v" (fGramDef.ml[214,8462+61]..[214,8462+62])
                                        ]
                              ]
                            core_type (fGramDef.ml[214,8462+66]..[214,8462+77])
                              Ptyp_var simple_pat
          ]
      ]
  ]
expression (fGramDef.ml[214,8462+83]..[214,8462+84]) ghost
  Pexp_construct "[]" (fGramDef.ml[214,8462+83]..[214,8462+84]) ghost
  None
                                                                      ]
                                                              ]
                                                      ]
                                              ]
                                      ]
                              ]
                      ]
                  ]
            ]
          expression (fGramDef.ml[215,8550+2]..[264,10732+46])
            Pexp_apply
            expression (fGramDef.ml[215,8550+2]..[215,8550+14])
              Pexp_ident "Gramf.extend" (fGramDef.ml[215,8550+2]..[215,8550+14])
            [
              <label> ""
                expression (fGramDef.ml[215,8550+15]..[215,8550+54]) ghost
                  Pexp_constraint
                  expression (fGramDef.ml[215,8550+16]..[215,8550+28])
                    Pexp_ident "internal_pat" (fGramDef.ml[215,8550+16]..[215,8550+28])
                  core_type (fGramDef.ml[215,8550+31]..[215,8550+52])
                    Ptyp_constr "Gramf.t" (fGramDef.ml[215,8550+45]..[215,8550+52])
                    [
                      core_type (fGramDef.ml[215,8550+31]..[215,8550+44])
                        Ptyp_var internal_pat
                    ]
              <label> ""
                expression (fGramDef.ml[216,8605+4]..[264,10732+46])
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[216,8605+5]..[216,8605+9])
                      Pexp_construct "None" (fGramDef.ml[216,8605+5]..[216,8605+9])
                      None
                    expression (fGramDef.ml[217,8616+6]..[264,10732+45])
                      Pexp_construct "::" (fGramDef.ml[217,8616+7]..[264,10732+45]) ghost
                      Some
                        expression (fGramDef.ml[217,8616+7]..[264,10732+45]) ghost
                          Pexp_tuple
                          [
                            expression (fGramDef.ml[217,8616+7]..[230,9171+81])
                              Pexp_tuple
                              [
                                expression (fGramDef.ml[217,8616+8]..[217,8616+19])
                                  Pexp_construct "Some" (fGramDef.ml[217,8616+9]..[217,8616+13])
                                  Some
                                    expression (fGramDef.ml[217,8616+14]..[217,8616+18])
                                      Pexp_constant Const_string("as",None)
                                expression (fGramDef.ml[217,8616+21]..[217,8616+25])
                                  Pexp_construct "None" (fGramDef.ml[217,8616+21]..[217,8616+25])
                                  None
                                expression (fGramDef.ml[218,8643+9]..[230,9171+80])
                                  Pexp_construct "::" (fGramDef.ml[218,8643+10]..[230,9171+80]) ghost
                                  Some
                                    expression (fGramDef.ml[218,8643+10]..[230,9171+80]) ghost
                                      Pexp_tuple
                                      [
                                        expression (fGramDef.ml[218,8643+10]..[230,9171+79])
                                          Pexp_tuple
                                          [
                                            expression (fGramDef.ml[218,8643+11]..[222,8767+54])
                                              Pexp_construct "::" (fGramDef.ml[218,8643+12]..[222,8767+54]) ghost
                                              Some
                                                expression (fGramDef.ml[218,8643+12]..[222,8767+54]) ghost
                                                  Pexp_tuple
                                                  [
                                                    expression (fGramDef.ml[218,8643+12]..[218,8643+18])
                                                      Pexp_variant "Sself"
                                                      None
                                                    expression (fGramDef.ml[219,8663+11]..[222,8767+54]) ghost
                                                      Pexp_construct "::" (fGramDef.ml[219,8663+11]..[222,8767+54]) ghost
                                                      Some
                                                        expression (fGramDef.ml[219,8663+11]..[222,8767+54]) ghost
                                                          Pexp_tuple
                                                          [
                                                            expression (fGramDef.ml[219,8663+11]..[219,8663+25])
                                                              Pexp_variant "Skeyword"
                                                              Some
                                                                expression (fGramDef.ml[219,8663+21]..[219,8663+25])
                                                                  Pexp_constant Const_string("as",None)
                                                            expression (fGramDef.ml[220,8690+11]..[222,8767+54]) ghost
                                                              Pexp_construct "::" (fGramDef.ml[220,8690+11]..[222,8767+54]) ghost
                                                              Some
                                                                expression (fGramDef.ml[220,8690+11]..[222,8767+54]) ghost
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fGramDef.ml[220,8690+11]..[222,8767+53])
                                                                      Pexp_variant "Stoken"
                                                                      Some
expression (fGramDef.ml[221,8709+13]..[222,8767+53])
  Pexp_tuple
  [
    expression (fGramDef.ml[221,8709+14]..[221,8709+56])
      Pexp_function
      [
        <case>
          pattern (fGramDef.ml[221,8709+27]..[221,8709+33])
            Ppat_variant "Lid"
            Some
              pattern (fGramDef.ml[221,8709+32]..[221,8709+33])
                Ppat_any
          expression (fGramDef.ml[221,8709+37]..[221,8709+41])
            Pexp_construct "true" (fGramDef.ml[221,8709+37]..[221,8709+41])
            None
        <case>
          pattern (fGramDef.ml[221,8709+44]..[221,8709+45])
            Ppat_any
          expression (fGramDef.ml[221,8709+49]..[221,8709+54])
            Pexp_construct "false" (fGramDef.ml[221,8709+49]..[221,8709+54])
            None
      ]
    expression (fGramDef.ml[222,8767+15]..[222,8767+42])
      Pexp_variant "App"
      Some
        expression (fGramDef.ml[222,8767+21]..[222,8767+41])
          Pexp_tuple
          [
            expression (fGramDef.ml[222,8767+22]..[222,8767+34])
              Pexp_variant "Vrn"
              Some
                expression (fGramDef.ml[222,8767+28]..[222,8767+33])
                  Pexp_constant Const_string("Lid",None)
            expression (fGramDef.ml[222,8767+36]..[222,8767+40])
              Pexp_variant "Any"
              None
          ]
    expression (fGramDef.ml[222,8767+44]..[222,8767+52])
      Pexp_constant Const_string("`Lid _",None)
  ]
                                                                    expression (fGramDef.ml[222,8767+53]..[222,8767+54]) ghost
                                                                      Pexp_construct "[]" (fGramDef.ml[222,8767+53]..[222,8767+54]) ghost
                                                                      None
                                                                  ]
                                                          ]
                                                  ]
                                            expression (fGramDef.ml[223,8823+12]..[230,9171+78])
                                              Pexp_tuple
                                              [
                                                expression (fGramDef.ml[223,8823+13]..[223,8823+52])
                                                  Pexp_constant Const_string("`Alias (_loc, p1, (`Lid (_loc, s)))\n",None)
                                                expression (fGramDef.ml[224,8877+14]..[230,9171+77])
                                                  Pexp_apply
                                                  expression (fGramDef.ml[224,8877+15]..[224,8877+30])
                                                    Pexp_ident "Gramf.mk_action" (fGramDef.ml[224,8877+15]..[224,8877+30])
                                                  [
                                                    <label> ""
                                                      expression (fGramDef.ml[225,8908+17]..[230,9171+76])
                                                        Pexp_fun ""
                                                        None
                                                        pattern (fGramDef.ml[225,8908+22]..[225,8908+46])
                                                          Ppat_constraint
                                                          pattern (fGramDef.ml[225,8908+23]..[225,8908+30])
                                                            Ppat_var "__fan_2" (fGramDef.ml[225,8908+23]..[225,8908+30])
                                                          core_type (fGramDef.ml[225,8908+33]..[225,8908+45])
                                                            Ptyp_variant closed=Open
                                                            [
                                                              Rinherit
                                                                core_type (fGramDef.ml[225,8908+36]..[225,8908+44])
                                                                  Ptyp_constr "Tokenf.t" (fGramDef.ml[225,8908+36]..[225,8908+44])
                                                                  []
                                                            ]
                                                            None
                                                        expression (fGramDef.ml[225,8908+48]..[230,9171+75]) ghost
                                                          Pexp_fun ""
                                                          None
                                                          pattern (fGramDef.ml[225,8908+48]..[225,8908+49])
                                                            Ppat_any
                                                          expression (fGramDef.ml[225,8908+51]..[230,9171+75]) ghost
                                                            Pexp_fun ""
                                                            None
                                                            pattern (fGramDef.ml[225,8908+51]..[225,8908+71])
                                                              Ppat_constraint
                                                              pattern (fGramDef.ml[225,8908+52]..[225,8908+54])
                                                                Ppat_var "p1" (fGramDef.ml[225,8908+52]..[225,8908+54])
                                                              core_type (fGramDef.ml[225,8908+57]..[225,8908+70])
                                                                Ptyp_var internal_pat
                                                            expression (fGramDef.ml[226,8981+20]..[230,9171+75]) ghost
                                                              Pexp_fun ""
                                                              None
                                                              pattern (fGramDef.ml[226,8981+20]..[226,8981+35])
                                                                Ppat_constraint
                                                                pattern (fGramDef.ml[226,8981+21]..[226,8981+25])
                                                                  Ppat_var "_loc" (fGramDef.ml[226,8981+21]..[226,8981+25])
                                                                core_type (fGramDef.ml[226,8981+28]..[226,8981+34])
                                                                  Ptyp_constr "Locf.t" (fGramDef.ml[226,8981+28]..[226,8981+34])
                                                                  []
                                                              expression (fGramDef.ml[227,9021+20]..[230,9171+75])
                                                                Pexp_match
                                                                expression (fGramDef.ml[227,9021+26]..[227,9021+33])
                                                                  Pexp_ident "__fan_2" (fGramDef.ml[227,9021+26]..[227,9021+33])
                                                                [
                                                                  <case>
                                                                    pattern (fGramDef.ml[228,9060+22]..[228,9060+28])
                                                                      Ppat_variant "Lid"
                                                                      Some
pattern (fGramDef.ml[228,9060+27]..[228,9060+28])
  Ppat_var "s" (fGramDef.ml[228,9060+27]..[228,9060+28])
                                                                    expression (fGramDef.ml[229,9092+24]..[229,9092+78]) ghost
                                                                      Pexp_constraint
                                                                      expression (fGramDef.ml[229,9092+25]..[229,9092+60])
Pexp_variant "Alias"
Some
  expression (fGramDef.ml[229,9092+32]..[229,9092+60])
    Pexp_tuple
    [
      expression (fGramDef.ml[229,9092+33]..[229,9092+37])
        Pexp_ident "_loc" (fGramDef.ml[229,9092+33]..[229,9092+37])
      expression (fGramDef.ml[229,9092+39]..[229,9092+41])
        Pexp_ident "p1" (fGramDef.ml[229,9092+39]..[229,9092+41])
      expression (fGramDef.ml[229,9092+43]..[229,9092+59])
        Pexp_variant "Lid"
        Some
          expression (fGramDef.ml[229,9092+49]..[229,9092+58])
            Pexp_tuple
            [
              expression (fGramDef.ml[229,9092+50]..[229,9092+54])
                Pexp_ident "_loc" (fGramDef.ml[229,9092+50]..[229,9092+54])
              expression (fGramDef.ml[229,9092+56]..[229,9092+57])
                Pexp_ident "s" (fGramDef.ml[229,9092+56]..[229,9092+57])
            ]
    ]
                                                                      core_type (fGramDef.ml[229,9092+63]..[229,9092+76])
Ptyp_var internal_pat
                                                                  <case>
                                                                    pattern (fGramDef.ml[230,9171+22]..[230,9171+23])
                                                                      Ppat_any
                                                                    expression (fGramDef.ml[230,9171+27]..[230,9171+75])
                                                                      Pexp_apply
                                                                      expression (fGramDef.ml[230,9171+27]..[230,9171+35])
Pexp_ident "failwith" (fGramDef.ml[230,9171+27]..[230,9171+35])
                                                                      [
<label> ""
  expression (fGramDef.ml[230,9171+36]..[230,9171+75])
    Pexp_constant Const_string("`Alias (_loc, p1, (`Lid (_loc, s)))\n",None)
                                                                      ]
                                                                ]
                                                  ]
                                              ]
                                          ]
                                        expression (fGramDef.ml[230,9171+79]..[230,9171+80]) ghost
                                          Pexp_construct "[]" (fGramDef.ml[230,9171+79]..[230,9171+80]) ghost
                                          None
                                      ]
                              ]
                            expression (fGramDef.ml[231,9254+6]..[264,10732+45]) ghost
                              Pexp_construct "::" (fGramDef.ml[231,9254+6]..[264,10732+45]) ghost
                              Some
                                expression (fGramDef.ml[231,9254+6]..[264,10732+45]) ghost
                                  Pexp_tuple
                                  [
                                    expression (fGramDef.ml[231,9254+6]..[236,9457+83])
                                      Pexp_tuple
                                      [
                                        expression (fGramDef.ml[231,9254+7]..[231,9254+17])
                                          Pexp_construct "Some" (fGramDef.ml[231,9254+8]..[231,9254+12])
                                          Some
                                            expression (fGramDef.ml[231,9254+13]..[231,9254+16])
                                              Pexp_constant Const_string("|",None)
                                        expression (fGramDef.ml[231,9254+19]..[231,9254+23])
                                          Pexp_construct "None" (fGramDef.ml[231,9254+19]..[231,9254+23])
                                          None
                                        expression (fGramDef.ml[232,9279+8]..[236,9457+82])
                                          Pexp_construct "::" (fGramDef.ml[232,9279+9]..[236,9457+82]) ghost
                                          Some
                                            expression (fGramDef.ml[232,9279+9]..[236,9457+82]) ghost
                                              Pexp_tuple
                                              [
                                                expression (fGramDef.ml[232,9279+9]..[236,9457+81])
                                                  Pexp_tuple
                                                  [
                                                    expression (fGramDef.ml[232,9279+10]..[232,9279+41])
                                                      Pexp_construct "::" (fGramDef.ml[232,9279+11]..[232,9279+41]) ghost
                                                      Some
                                                        expression (fGramDef.ml[232,9279+11]..[232,9279+41]) ghost
                                                          Pexp_tuple
                                                          [
                                                            expression (fGramDef.ml[232,9279+11]..[232,9279+17])
                                                              Pexp_variant "Sself"
                                                              None
                                                            expression (fGramDef.ml[232,9279+19]..[232,9279+41]) ghost
                                                              Pexp_construct "::" (fGramDef.ml[232,9279+19]..[232,9279+41]) ghost
                                                              Some
                                                                expression (fGramDef.ml[232,9279+19]..[232,9279+41]) ghost
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fGramDef.ml[232,9279+19]..[232,9279+32])
                                                                      Pexp_variant "Skeyword"
                                                                      Some
expression (fGramDef.ml[232,9279+29]..[232,9279+32])
  Pexp_constant Const_string("|",None)
                                                                    expression (fGramDef.ml[232,9279+34]..[232,9279+41]) ghost
                                                                      Pexp_construct "::" (fGramDef.ml[232,9279+34]..[232,9279+41]) ghost
                                                                      Some
expression (fGramDef.ml[232,9279+34]..[232,9279+41]) ghost
  Pexp_tuple
  [
    expression (fGramDef.ml[232,9279+34]..[232,9279+40])
      Pexp_variant "Sself"
      None
    expression (fGramDef.ml[232,9279+40]..[232,9279+41]) ghost
      Pexp_construct "[]" (fGramDef.ml[232,9279+40]..[232,9279+41]) ghost
      None
  ]
                                                                  ]
                                                          ]
                                                    expression (fGramDef.ml[233,9322+11]..[236,9457+80])
                                                      Pexp_tuple
                                                      [
                                                        expression (fGramDef.ml[233,9322+12]..[233,9322+35])
                                                          Pexp_constant Const_string("`Bar (_loc, p1, p2)\n",None)
                                                        expression (fGramDef.ml[234,9359+13]..[236,9457+79])
                                                          Pexp_apply
                                                          expression (fGramDef.ml[234,9359+14]..[234,9359+29])
                                                            Pexp_ident "Gramf.mk_action" (fGramDef.ml[234,9359+14]..[234,9359+29])
                                                          [
                                                            <label> ""
                                                              expression (fGramDef.ml[235,9389+16]..[236,9457+78])
                                                                Pexp_fun ""
                                                                None
                                                                pattern (fGramDef.ml[235,9389+21]..[235,9389+41])
                                                                  Ppat_constraint
                                                                  pattern (fGramDef.ml[235,9389+22]..[235,9389+24])
                                                                    Ppat_var "p2" (fGramDef.ml[235,9389+22]..[235,9389+24])
                                                                  core_type (fGramDef.ml[235,9389+27]..[235,9389+40])
                                                                    Ptyp_var internal_pat
                                                                expression (fGramDef.ml[235,9389+43]..[236,9457+77]) ghost
                                                                  Pexp_fun ""
                                                                  None
                                                                  pattern (fGramDef.ml[235,9389+43]..[235,9389+44])
                                                                    Ppat_any
                                                                  expression (fGramDef.ml[235,9389+46]..[236,9457+77]) ghost
                                                                    Pexp_fun ""
                                                                    None
                                                                    pattern (fGramDef.ml[235,9389+46]..[235,9389+66])
                                                                      Ppat_constraint
                                                                      pattern (fGramDef.ml[235,9389+47]..[235,9389+49])
Ppat_var "p1" (fGramDef.ml[235,9389+47]..[235,9389+49])
                                                                      core_type (fGramDef.ml[235,9389+52]..[235,9389+65])
Ptyp_var internal_pat
                                                                    expression (fGramDef.ml[236,9457+19]..[236,9457+77]) ghost
                                                                      Pexp_fun ""
                                                                      None
                                                                      pattern (fGramDef.ml[236,9457+19]..[236,9457+34])
Ppat_constraint
pattern (fGramDef.ml[236,9457+20]..[236,9457+24])
  Ppat_var "_loc" (fGramDef.ml[236,9457+20]..[236,9457+24])
core_type (fGramDef.ml[236,9457+27]..[236,9457+33])
  Ptyp_constr "Locf.t" (fGramDef.ml[236,9457+27]..[236,9457+33])
  []
                                                                      expression (fGramDef.ml[236,9457+39]..[236,9457+77]) ghost
Pexp_constraint
expression (fGramDef.ml[236,9457+40]..[236,9457+59])
  Pexp_variant "Bar"
  Some
    expression (fGramDef.ml[236,9457+45]..[236,9457+59])
      Pexp_tuple
      [
        expression (fGramDef.ml[236,9457+46]..[236,9457+50])
          Pexp_ident "_loc" (fGramDef.ml[236,9457+46]..[236,9457+50])
        expression (fGramDef.ml[236,9457+52]..[236,9457+54])
          Pexp_ident "p1" (fGramDef.ml[236,9457+52]..[236,9457+54])
        expression (fGramDef.ml[236,9457+56]..[236,9457+58])
          Pexp_ident "p2" (fGramDef.ml[236,9457+56]..[236,9457+58])
      ]
core_type (fGramDef.ml[236,9457+62]..[236,9457+75])
  Ptyp_var internal_pat
                                                          ]
                                                      ]
                                                  ]
                                                expression (fGramDef.ml[236,9457+81]..[236,9457+82]) ghost
                                                  Pexp_construct "[]" (fGramDef.ml[236,9457+81]..[236,9457+82]) ghost
                                                  None
                                              ]
                                      ]
                                    expression (fGramDef.ml[237,9542+6]..[264,10732+45]) ghost
                                      Pexp_construct "::" (fGramDef.ml[237,9542+6]..[264,10732+45]) ghost
                                      Some
                                        expression (fGramDef.ml[237,9542+6]..[264,10732+45]) ghost
                                          Pexp_tuple
                                          [
                                            expression (fGramDef.ml[237,9542+6]..[264,10732+44])
                                              Pexp_tuple
                                              [
                                                expression (fGramDef.ml[237,9542+7]..[237,9542+22])
                                                  Pexp_construct "Some" (fGramDef.ml[237,9542+8]..[237,9542+12])
                                                  Some
                                                    expression (fGramDef.ml[237,9542+13]..[237,9542+21])
                                                      Pexp_constant Const_string("simple",None)
                                                expression (fGramDef.ml[237,9542+24]..[237,9542+28])
                                                  Pexp_construct "None" (fGramDef.ml[237,9542+24]..[237,9542+28])
                                                  None
                                                expression (fGramDef.ml[238,9572+8]..[264,10732+43])
                                                  Pexp_construct "::" (fGramDef.ml[238,9572+9]..[264,10732+43]) ghost
                                                  Some
                                                    expression (fGramDef.ml[238,9572+9]..[264,10732+43]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (fGramDef.ml[238,9572+9]..[246,9937+57])
                                                          Pexp_tuple
                                                          [
                                                            expression (fGramDef.ml[238,9572+10]..[240,9649+54])
                                                              Pexp_construct "::" (fGramDef.ml[238,9572+11]..[240,9649+54]) ghost
                                                              Some
                                                                expression (fGramDef.ml[238,9572+11]..[240,9649+54]) ghost
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fGramDef.ml[238,9572+11]..[240,9649+53])
                                                                      Pexp_variant "Stoken"
                                                                      Some
expression (fGramDef.ml[239,9591+13]..[240,9649+53])
  Pexp_tuple
  [
    expression (fGramDef.ml[239,9591+14]..[239,9591+56])
      Pexp_function
      [
        <case>
          pattern (fGramDef.ml[239,9591+27]..[239,9591+33])
            Ppat_variant "Str"
            Some
              pattern (fGramDef.ml[239,9591+32]..[239,9591+33])
                Ppat_any
          expression (fGramDef.ml[239,9591+37]..[239,9591+41])
            Pexp_construct "true" (fGramDef.ml[239,9591+37]..[239,9591+41])
            None
        <case>
          pattern (fGramDef.ml[239,9591+44]..[239,9591+45])
            Ppat_any
          expression (fGramDef.ml[239,9591+49]..[239,9591+54])
            Pexp_construct "false" (fGramDef.ml[239,9591+49]..[239,9591+54])
            None
      ]
    expression (fGramDef.ml[240,9649+15]..[240,9649+42])
      Pexp_variant "App"
      Some
        expression (fGramDef.ml[240,9649+21]..[240,9649+41])
          Pexp_tuple
          [
            expression (fGramDef.ml[240,9649+22]..[240,9649+34])
              Pexp_variant "Vrn"
              Some
                expression (fGramDef.ml[240,9649+28]..[240,9649+33])
                  Pexp_constant Const_string("Str",None)
            expression (fGramDef.ml[240,9649+36]..[240,9649+40])
              Pexp_variant "Any"
              None
          ]
    expression (fGramDef.ml[240,9649+44]..[240,9649+52])
      Pexp_constant Const_string("`Str _",None)
  ]
                                                                    expression (fGramDef.ml[240,9649+53]..[240,9649+54]) ghost
                                                                      Pexp_construct "[]" (fGramDef.ml[240,9649+53]..[240,9649+54]) ghost
                                                                      None
                                                                  ]
                                                            expression (fGramDef.ml[241,9705+11]..[246,9937+56])
                                                              Pexp_tuple
                                                              [
                                                                expression (fGramDef.ml[241,9705+12]..[241,9705+30])
                                                                  Pexp_constant Const_string("`Str (_loc, s)\n",None)
                                                                expression (fGramDef.ml[242,9737+13]..[246,9937+55])
                                                                  Pexp_apply
                                                                  expression (fGramDef.ml[242,9737+14]..[242,9737+29])
                                                                    Pexp_ident "Gramf.mk_action" (fGramDef.ml[242,9737+14]..[242,9737+29])
                                                                  [
                                                                    <label> ""
                                                                      expression (fGramDef.ml[243,9767+16]..[246,9937+54])
Pexp_fun ""
None
pattern (fGramDef.ml[243,9767+21]..[243,9767+45])
  Ppat_constraint
  pattern (fGramDef.ml[243,9767+22]..[243,9767+29])
    Ppat_var "__fan_0" (fGramDef.ml[243,9767+22]..[243,9767+29])
  core_type (fGramDef.ml[243,9767+32]..[243,9767+44])
    Ptyp_variant closed=Open
    [
      Rinherit
        core_type (fGramDef.ml[243,9767+35]..[243,9767+43])
          Ptyp_constr "Tokenf.t" (fGramDef.ml[243,9767+35]..[243,9767+43])
          []
    ]
    None
expression (fGramDef.ml[243,9767+47]..[246,9937+53]) ghost
  Pexp_fun ""
  None
  pattern (fGramDef.ml[243,9767+47]..[243,9767+62])
    Ppat_constraint
    pattern (fGramDef.ml[243,9767+48]..[243,9767+52])
      Ppat_var "_loc" (fGramDef.ml[243,9767+48]..[243,9767+52])
    core_type (fGramDef.ml[243,9767+55]..[243,9767+61])
      Ptyp_constr "Locf.t" (fGramDef.ml[243,9767+55]..[243,9767+61])
      []
  expression (fGramDef.ml[244,9834+19]..[246,9937+53])
    Pexp_match
    expression (fGramDef.ml[244,9834+25]..[244,9834+32])
      Pexp_ident "__fan_0" (fGramDef.ml[244,9834+25]..[244,9834+32])
    [
      <case>
        pattern (fGramDef.ml[245,9872+21]..[245,9872+27])
          Ppat_variant "Str"
          Some
            pattern (fGramDef.ml[245,9872+26]..[245,9872+27])
              Ppat_var "s" (fGramDef.ml[245,9872+26]..[245,9872+27])
        expression (fGramDef.ml[245,9872+31]..[245,9872+64]) ghost
          Pexp_constraint
          expression (fGramDef.ml[245,9872+32]..[245,9872+46])
            Pexp_variant "Str"
            Some
              expression (fGramDef.ml[245,9872+37]..[245,9872+46])
                Pexp_tuple
                [
                  expression (fGramDef.ml[245,9872+38]..[245,9872+42])
                    Pexp_ident "_loc" (fGramDef.ml[245,9872+38]..[245,9872+42])
                  expression (fGramDef.ml[245,9872+44]..[245,9872+45])
                    Pexp_ident "s" (fGramDef.ml[245,9872+44]..[245,9872+45])
                ]
          core_type (fGramDef.ml[245,9872+49]..[245,9872+62])
            Ptyp_var internal_pat
      <case>
        pattern (fGramDef.ml[246,9937+21]..[246,9937+22])
          Ppat_any
        expression (fGramDef.ml[246,9937+26]..[246,9937+53])
          Pexp_apply
          expression (fGramDef.ml[246,9937+26]..[246,9937+34])
            Pexp_ident "failwith" (fGramDef.ml[246,9937+26]..[246,9937+34])
          [
            <label> ""
              expression (fGramDef.ml[246,9937+35]..[246,9937+53])
                Pexp_constant Const_string("`Str (_loc, s)\n",None)
          ]
    ]
                                                                  ]
                                                              ]
                                                          ]
                                                        expression (fGramDef.ml[247,9996+8]..[264,10732+43]) ghost
                                                          Pexp_construct "::" (fGramDef.ml[247,9996+8]..[264,10732+43]) ghost
                                                          Some
                                                            expression (fGramDef.ml[247,9996+8]..[264,10732+43]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (fGramDef.ml[247,9996+8]..[250,10077+75])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (fGramDef.ml[247,9996+9]..[247,9996+24])
                                                                      Pexp_construct "::" (fGramDef.ml[247,9996+10]..[247,9996+24]) ghost
                                                                      Some
expression (fGramDef.ml[247,9996+10]..[247,9996+24]) ghost
  Pexp_tuple
  [
    expression (fGramDef.ml[247,9996+10]..[247,9996+23])
      Pexp_variant "Skeyword"
      Some
        expression (fGramDef.ml[247,9996+20]..[247,9996+23])
          Pexp_constant Const_string("_",None)
    expression (fGramDef.ml[247,9996+23]..[247,9996+24]) ghost
      Pexp_construct "[]" (fGramDef.ml[247,9996+23]..[247,9996+24]) ghost
      None
  ]
                                                                    expression (fGramDef.ml[248,10022+10]..[250,10077+74])
                                                                      Pexp_tuple
                                                                      [
expression (fGramDef.ml[248,10022+11]..[248,10022+24])
  Pexp_constant Const_string("`Any _loc\n",None)
expression (fGramDef.ml[249,10048+12]..[250,10077+73])
  Pexp_apply
  expression (fGramDef.ml[249,10048+13]..[249,10048+28])
    Pexp_ident "Gramf.mk_action" (fGramDef.ml[249,10048+13]..[249,10048+28])
  [
    <label> ""
      expression (fGramDef.ml[250,10077+15]..[250,10077+72])
        Pexp_fun ""
        None
        pattern (fGramDef.ml[250,10077+20]..[250,10077+21])
          Ppat_any
        expression (fGramDef.ml[250,10077+23]..[250,10077+71]) ghost
          Pexp_fun ""
          None
          pattern (fGramDef.ml[250,10077+23]..[250,10077+38])
            Ppat_constraint
            pattern (fGramDef.ml[250,10077+24]..[250,10077+28])
              Ppat_var "_loc" (fGramDef.ml[250,10077+24]..[250,10077+28])
            core_type (fGramDef.ml[250,10077+31]..[250,10077+37])
              Ptyp_constr "Locf.t" (fGramDef.ml[250,10077+31]..[250,10077+37])
              []
          expression (fGramDef.ml[250,10077+43]..[250,10077+71]) ghost
            Pexp_constraint
            expression (fGramDef.ml[250,10077+44]..[250,10077+53])
              Pexp_variant "Any"
              Some
                expression (fGramDef.ml[250,10077+49]..[250,10077+53])
                  Pexp_ident "_loc" (fGramDef.ml[250,10077+49]..[250,10077+53])
            core_type (fGramDef.ml[250,10077+56]..[250,10077+69])
              Ptyp_var internal_pat
  ]
                                                                      ]
                                                                  ]
                                                                expression (fGramDef.ml[251,10154+8]..[264,10732+43]) ghost
                                                                  Pexp_construct "::" (fGramDef.ml[251,10154+8]..[264,10732+43]) ghost
                                                                  Some
                                                                    expression (fGramDef.ml[251,10154+8]..[264,10732+43]) ghost
                                                                      Pexp_tuple
                                                                      [
expression (fGramDef.ml[251,10154+8]..[259,10511+56])
  Pexp_tuple
  [
    expression (fGramDef.ml[251,10154+9]..[253,10229+53])
      Pexp_construct "::" (fGramDef.ml[251,10154+10]..[253,10229+53]) ghost
      Some
        expression (fGramDef.ml[251,10154+10]..[253,10229+53]) ghost
          Pexp_tuple
          [
            expression (fGramDef.ml[251,10154+10]..[253,10229+52])
              Pexp_variant "Stoken"
              Some
                expression (fGramDef.ml[252,10172+12]..[253,10229+52])
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[252,10172+13]..[252,10172+55])
                      Pexp_function
                      [
                        <case>
                          pattern (fGramDef.ml[252,10172+26]..[252,10172+32])
                            Ppat_variant "Lid"
                            Some
                              pattern (fGramDef.ml[252,10172+31]..[252,10172+32])
                                Ppat_any
                          expression (fGramDef.ml[252,10172+36]..[252,10172+40])
                            Pexp_construct "true" (fGramDef.ml[252,10172+36]..[252,10172+40])
                            None
                        <case>
                          pattern (fGramDef.ml[252,10172+43]..[252,10172+44])
                            Ppat_any
                          expression (fGramDef.ml[252,10172+48]..[252,10172+53])
                            Pexp_construct "false" (fGramDef.ml[252,10172+48]..[252,10172+53])
                            None
                      ]
                    expression (fGramDef.ml[253,10229+14]..[253,10229+41])
                      Pexp_variant "App"
                      Some
                        expression (fGramDef.ml[253,10229+20]..[253,10229+40])
                          Pexp_tuple
                          [
                            expression (fGramDef.ml[253,10229+21]..[253,10229+33])
                              Pexp_variant "Vrn"
                              Some
                                expression (fGramDef.ml[253,10229+27]..[253,10229+32])
                                  Pexp_constant Const_string("Lid",None)
                            expression (fGramDef.ml[253,10229+35]..[253,10229+39])
                              Pexp_variant "Any"
                              None
                          ]
                    expression (fGramDef.ml[253,10229+43]..[253,10229+51])
                      Pexp_constant Const_string("`Lid _",None)
                  ]
            expression (fGramDef.ml[253,10229+52]..[253,10229+53]) ghost
              Pexp_construct "[]" (fGramDef.ml[253,10229+52]..[253,10229+53]) ghost
              None
          ]
    expression (fGramDef.ml[254,10284+10]..[259,10511+55])
      Pexp_tuple
      [
        expression (fGramDef.ml[254,10284+11]..[254,10284+29])
          Pexp_constant Const_string("`Lid (_loc, x)\n",None)
        expression (fGramDef.ml[255,10315+12]..[259,10511+54])
          Pexp_apply
          expression (fGramDef.ml[255,10315+13]..[255,10315+28])
            Pexp_ident "Gramf.mk_action" (fGramDef.ml[255,10315+13]..[255,10315+28])
          [
            <label> ""
              expression (fGramDef.ml[256,10344+15]..[259,10511+53])
                Pexp_fun ""
                None
                pattern (fGramDef.ml[256,10344+20]..[256,10344+44])
                  Ppat_constraint
                  pattern (fGramDef.ml[256,10344+21]..[256,10344+28])
                    Ppat_var "__fan_0" (fGramDef.ml[256,10344+21]..[256,10344+28])
                  core_type (fGramDef.ml[256,10344+31]..[256,10344+43])
                    Ptyp_variant closed=Open
                    [
                      Rinherit
                        core_type (fGramDef.ml[256,10344+34]..[256,10344+42])
                          Ptyp_constr "Tokenf.t" (fGramDef.ml[256,10344+34]..[256,10344+42])
                          []
                    ]
                    None
                expression (fGramDef.ml[256,10344+46]..[259,10511+52]) ghost
                  Pexp_fun ""
                  None
                  pattern (fGramDef.ml[256,10344+46]..[256,10344+61])
                    Ppat_constraint
                    pattern (fGramDef.ml[256,10344+47]..[256,10344+51])
                      Ppat_var "_loc" (fGramDef.ml[256,10344+47]..[256,10344+51])
                    core_type (fGramDef.ml[256,10344+54]..[256,10344+60])
                      Ptyp_constr "Locf.t" (fGramDef.ml[256,10344+54]..[256,10344+60])
                      []
                  expression (fGramDef.ml[257,10410+18]..[259,10511+52])
                    Pexp_match
                    expression (fGramDef.ml[257,10410+24]..[257,10410+31])
                      Pexp_ident "__fan_0" (fGramDef.ml[257,10410+24]..[257,10410+31])
                    [
                      <case>
                        pattern (fGramDef.ml[258,10447+20]..[258,10447+26])
                          Ppat_variant "Lid"
                          Some
                            pattern (fGramDef.ml[258,10447+25]..[258,10447+26])
                              Ppat_var "x" (fGramDef.ml[258,10447+25]..[258,10447+26])
                        expression (fGramDef.ml[258,10447+30]..[258,10447+63]) ghost
                          Pexp_constraint
                          expression (fGramDef.ml[258,10447+31]..[258,10447+45])
                            Pexp_variant "Lid"
                            Some
                              expression (fGramDef.ml[258,10447+36]..[258,10447+45])
                                Pexp_tuple
                                [
                                  expression (fGramDef.ml[258,10447+37]..[258,10447+41])
                                    Pexp_ident "_loc" (fGramDef.ml[258,10447+37]..[258,10447+41])
                                  expression (fGramDef.ml[258,10447+43]..[258,10447+44])
                                    Pexp_ident "x" (fGramDef.ml[258,10447+43]..[258,10447+44])
                                ]
                          core_type (fGramDef.ml[258,10447+48]..[258,10447+61])
                            Ptyp_var internal_pat
                      <case>
                        pattern (fGramDef.ml[259,10511+20]..[259,10511+21])
                          Ppat_any
                        expression (fGramDef.ml[259,10511+25]..[259,10511+52])
                          Pexp_apply
                          expression (fGramDef.ml[259,10511+25]..[259,10511+33])
                            Pexp_ident "failwith" (fGramDef.ml[259,10511+25]..[259,10511+33])
                          [
                            <label> ""
                              expression (fGramDef.ml[259,10511+34]..[259,10511+52])
                                Pexp_constant Const_string("`Lid (_loc, x)\n",None)
                          ]
                    ]
          ]
      ]
  ]
expression (fGramDef.ml[260,10569+8]..[264,10732+43]) ghost
  Pexp_construct "::" (fGramDef.ml[260,10569+8]..[264,10732+43]) ghost
  Some
    expression (fGramDef.ml[260,10569+8]..[264,10732+43]) ghost
      Pexp_tuple
      [
        expression (fGramDef.ml[260,10569+8]..[264,10732+42])
          Pexp_tuple
          [
            expression (fGramDef.ml[260,10569+9]..[260,10569+47])
              Pexp_construct "::" (fGramDef.ml[260,10569+10]..[260,10569+47]) ghost
              Some
                expression (fGramDef.ml[260,10569+10]..[260,10569+47]) ghost
                  Pexp_tuple
                  [
                    expression (fGramDef.ml[260,10569+10]..[260,10569+23])
                      Pexp_variant "Skeyword"
                      Some
                        expression (fGramDef.ml[260,10569+20]..[260,10569+23])
                          Pexp_constant Const_string("(",None)
                    expression (fGramDef.ml[260,10569+25]..[260,10569+47]) ghost
                      Pexp_construct "::" (fGramDef.ml[260,10569+25]..[260,10569+47]) ghost
                      Some
                        expression (fGramDef.ml[260,10569+25]..[260,10569+47]) ghost
                          Pexp_tuple
                          [
                            expression (fGramDef.ml[260,10569+25]..[260,10569+31])
                              Pexp_variant "Sself"
                              None
                            expression (fGramDef.ml[260,10569+33]..[260,10569+47]) ghost
                              Pexp_construct "::" (fGramDef.ml[260,10569+33]..[260,10569+47]) ghost
                              Some
                                expression (fGramDef.ml[260,10569+33]..[260,10569+47]) ghost
                                  Pexp_tuple
                                  [
                                    expression (fGramDef.ml[260,10569+33]..[260,10569+46])
                                      Pexp_variant "Skeyword"
                                      Some
                                        expression (fGramDef.ml[260,10569+43]..[260,10569+46])
                                          Pexp_constant Const_string(")",None)
                                    expression (fGramDef.ml[260,10569+46]..[260,10569+47]) ghost
                                      Pexp_construct "[]" (fGramDef.ml[260,10569+46]..[260,10569+47]) ghost
                                      None
                                  ]
                          ]
                  ]
            expression (fGramDef.ml[261,10618+10]..[264,10732+41])
              Pexp_tuple
              [
                expression (fGramDef.ml[261,10618+11]..[261,10618+16])
                  Pexp_constant Const_string("p\n",None)
                expression (fGramDef.ml[262,10636+12]..[264,10732+40])
                  Pexp_apply
                  expression (fGramDef.ml[262,10636+13]..[262,10636+28])
                    Pexp_ident "Gramf.mk_action" (fGramDef.ml[262,10636+13]..[262,10636+28])
                  [
                    <label> ""
                      expression (fGramDef.ml[263,10665+15]..[264,10732+39])
                        Pexp_fun ""
                        None
                        pattern (fGramDef.ml[263,10665+20]..[263,10665+21])
                          Ppat_any
                        expression (fGramDef.ml[263,10665+23]..[264,10732+38]) ghost
                          Pexp_fun ""
                          None
                          pattern (fGramDef.ml[263,10665+23]..[263,10665+42])
                            Ppat_constraint
                            pattern (fGramDef.ml[263,10665+24]..[263,10665+25])
                              Ppat_var "p" (fGramDef.ml[263,10665+24]..[263,10665+25])
                            core_type (fGramDef.ml[263,10665+28]..[263,10665+41])
                              Ptyp_var internal_pat
                          expression (fGramDef.ml[263,10665+44]..[264,10732+38]) ghost
                            Pexp_fun ""
                            None
                            pattern (fGramDef.ml[263,10665+44]..[263,10665+45])
                              Ppat_any
                            expression (fGramDef.ml[263,10665+47]..[264,10732+38]) ghost
                              Pexp_fun ""
                              None
                              pattern (fGramDef.ml[263,10665+47]..[263,10665+62])
                                Ppat_constraint
                                pattern (fGramDef.ml[263,10665+48]..[263,10665+52])
                                  Ppat_var "_loc" (fGramDef.ml[263,10665+48]..[263,10665+52])
                                core_type (fGramDef.ml[263,10665+55]..[263,10665+61])
                                  Ptyp_constr "Locf.t" (fGramDef.ml[263,10665+55]..[263,10665+61])
                                  []
                              expression (fGramDef.ml[264,10732+18]..[264,10732+38]) ghost
                                Pexp_constraint
                                expression (fGramDef.ml[264,10732+19]..[264,10732+20])
                                  Pexp_ident "p" (fGramDef.ml[264,10732+19]..[264,10732+20])
                                core_type (fGramDef.ml[264,10732+23]..[264,10732+36])
                                  Ptyp_var internal_pat
                  ]
              ]
          ]
        expression (fGramDef.ml[264,10732+42]..[264,10732+43]) ghost
          Pexp_construct "[]" (fGramDef.ml[264,10732+42]..[264,10732+43]) ghost
          None
      ]
                                                                      ]
                                                              ]
                                                      ]
                                              ]
                                            expression (fGramDef.ml[264,10732+44]..[264,10732+45]) ghost
                                              Pexp_construct "[]" (fGramDef.ml[264,10732+44]..[264,10732+45]) ghost
                                              None
                                          ]
                                  ]
                          ]
                  ]
            ]
  structure_item (fGramDef.ml[265,10779+0]..[265,10779+11])
    Pstr_open Fresh "Format" (fGramDef.ml[265,10779+5]..[265,10779+11])
  structure_item (fGramDef.ml[266,10791+0]..[266,10791+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[266,10791+4]..[266,10791+5])
          Ppat_var "p" (fGramDef.ml[266,10791+4]..[266,10791+5])
        expression (fGramDef.ml[266,10791+8]..[266,10791+15])
          Pexp_ident "fprintf" (fGramDef.ml[266,10791+8]..[266,10791+15])
    ]
  structure_item (fGramDef.ml[267,10807+0]..[289,11705+52])
    Pstr_value Rec
    [
      <def>
        pattern (fGramDef.ml[267,10807+8]..[267,10807+26])
          Ppat_var "unparse_simple_pat" (fGramDef.ml[267,10807+8]..[267,10807+26])
        expression (fGramDef.ml[267,10807+27]..[289,11705+52]) ghost
          Pexp_fun ""
          None
          pattern (fGramDef.ml[267,10807+27]..[267,10807+28])
            Ppat_var "f" (fGramDef.ml[267,10807+27]..[267,10807+28])
          expression (fGramDef.ml[267,10807+29]..[289,11705+52]) ghost
            Pexp_fun ""
            None
            pattern (fGramDef.ml[267,10807+29]..[267,10807+45])
              Ppat_constraint
              pattern (fGramDef.ml[267,10807+30]..[267,10807+31])
                Ppat_var "x" (fGramDef.ml[267,10807+30]..[267,10807+31])
              core_type (fGramDef.ml[267,10807+34]..[267,10807+44])
                Ptyp_constr "simple_pat" (fGramDef.ml[267,10807+34]..[267,10807+44])
                []
            expression (fGramDef.ml[268,10855+2]..[289,11705+52])
              Pexp_match
              expression (fGramDef.ml[268,10855+8]..[268,10855+9])
                Pexp_ident "x" (fGramDef.ml[268,10855+8]..[268,10855+9])
              [
                <case>
                  pattern (fGramDef.ml[269,10870+4]..[269,10870+14])
                    Ppat_variant "Vrn"
                    Some
                      pattern (fGramDef.ml[269,10870+9]..[269,10870+14])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[269,10870+10]..[269,10870+11])
                            Ppat_any
                          pattern (fGramDef.ml[269,10870+12]..[269,10870+13])
                            Ppat_var "s" (fGramDef.ml[269,10870+12]..[269,10870+13])
                        ]
                  expression (fGramDef.ml[269,10870+18]..[269,10870+29])
                    Pexp_apply
                    expression (fGramDef.ml[269,10870+18]..[269,10870+19])
                      Pexp_ident "p" (fGramDef.ml[269,10870+18]..[269,10870+19])
                    [
                      <label> ""
                        expression (fGramDef.ml[269,10870+20]..[269,10870+21])
                          Pexp_ident "f" (fGramDef.ml[269,10870+20]..[269,10870+21])
                      <label> ""
                        expression (fGramDef.ml[269,10870+22]..[269,10870+27])
                          Pexp_constant Const_string("`%s",None)
                      <label> ""
                        expression (fGramDef.ml[269,10870+28]..[269,10870+29])
                          Pexp_ident "s" (fGramDef.ml[269,10870+28]..[269,10870+29])
                    ]
                <case>
                  pattern (fGramDef.ml[270,10900+4]..[270,10900+10])
                    Ppat_variant "App"
                    Some
                      pattern (fGramDef.ml[270,10900+9]..[270,10900+10])
                        Ppat_any
                  expression (fGramDef.ml[271,10914+6]..[282,11383+46])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (fGramDef.ml[271,10914+10]..[271,10914+11])
                          Ppat_var "l" (fGramDef.ml[271,10914+10]..[271,10914+11])
                        expression (fGramDef.ml[271,10914+14]..[271,10914+40])
                          Pexp_apply
                          expression (fGramDef.ml[271,10914+14]..[271,10914+35])
                            Pexp_ident "Ast_basic.list_of_app" (fGramDef.ml[271,10914+14]..[271,10914+35])
                          [
                            <label> ""
                              expression (fGramDef.ml[271,10914+36]..[271,10914+37])
                                Pexp_ident "x" (fGramDef.ml[271,10914+36]..[271,10914+37])
                            <label> ""
                              expression (fGramDef.ml[271,10914+38]..[271,10914+40])
                                Pexp_construct "[]" (fGramDef.ml[271,10914+38]..[271,10914+40])
                                None
                          ]
                    ]
                    expression (fGramDef.ml[272,10958+6]..[282,11383+46])
                      Pexp_match
                      expression (fGramDef.ml[272,10958+13]..[272,10958+14])
                        Pexp_ident "l" (fGramDef.ml[272,10958+13]..[272,10958+14])
                      [
                        <case>
                          pattern (fGramDef.ml[273,10978+9]..[273,10978+26])
                            Ppat_construct "::" (fGramDef.ml[273,10978+22]..[273,10978+24])
                            Some
                              pattern (fGramDef.ml[273,10978+9]..[273,10978+26]) ghost
                                Ppat_tuple
                                [
                                  pattern (fGramDef.ml[273,10978+9]..[273,10978+22])
                                    Ppat_alias "x" (fGramDef.ml[273,10978+20]..[273,10978+21])
                                    pattern (fGramDef.ml[273,10978+10]..[273,10978+16])
                                      Ppat_variant "Vrn"
                                      Some
                                        pattern (fGramDef.ml[273,10978+15]..[273,10978+16])
                                          Ppat_any
                                  pattern (fGramDef.ml[273,10978+24]..[273,10978+26])
                                    Ppat_construct "[]" (fGramDef.ml[273,10978+24]..[273,10978+26])
                                    None
                                ]
                          expression (fGramDef.ml[273,10978+30]..[273,10978+52])
                            Pexp_apply
                            expression (fGramDef.ml[273,10978+30]..[273,10978+48])
                              Pexp_ident "unparse_simple_pat" (fGramDef.ml[273,10978+30]..[273,10978+48])
                            [
                              <label> ""
                                expression (fGramDef.ml[273,10978+49]..[273,10978+50])
                                  Pexp_ident "f" (fGramDef.ml[273,10978+49]..[273,10978+50])
                              <label> ""
                                expression (fGramDef.ml[273,10978+51]..[273,10978+52])
                                  Pexp_ident "x" (fGramDef.ml[273,10978+51]..[273,10978+52])
                            ]
                        <case>
                          pattern (fGramDef.ml[274,11031+9]..[274,11031+29])
                            Ppat_construct "::" (fGramDef.ml[274,11031+22]..[274,11031+24])
                            Some
                              pattern (fGramDef.ml[274,11031+9]..[274,11031+29]) ghost
                                Ppat_tuple
                                [
                                  pattern (fGramDef.ml[274,11031+9]..[274,11031+22])
                                    Ppat_alias "x" (fGramDef.ml[274,11031+20]..[274,11031+21])
                                    pattern (fGramDef.ml[274,11031+10]..[274,11031+16])
                                      Ppat_variant "Vrn"
                                      Some
                                        pattern (fGramDef.ml[274,11031+15]..[274,11031+16])
                                          Ppat_any
                                  pattern (fGramDef.ml[274,11031+24]..[274,11031+29])
                                    Ppat_construct "::" (fGramDef.ml[274,11031+25]..[274,11031+27])
                                    Some
                                      pattern (fGramDef.ml[274,11031+24]..[274,11031+29]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (fGramDef.ml[274,11031+24]..[274,11031+25])
                                            Ppat_var "v" (fGramDef.ml[274,11031+24]..[274,11031+25])
                                          pattern (fGramDef.ml[274,11031+27]..[274,11031+29])
                                            Ppat_construct "[]" (fGramDef.ml[274,11031+27]..[274,11031+29])
                                            None
                                        ]
                                ]
                          expression (fGramDef.ml[275,11064+11]..[275,11064+64])
                            Pexp_apply
                            expression (fGramDef.ml[275,11064+11]..[275,11064+12])
                              Pexp_ident "p" (fGramDef.ml[275,11064+11]..[275,11064+12])
                            [
                              <label> ""
                                expression (fGramDef.ml[275,11064+13]..[275,11064+14])
                                  Pexp_ident "f" (fGramDef.ml[275,11064+13]..[275,11064+14])
                              <label> ""
                                expression (fGramDef.ml[275,11064+15]..[275,11064+22])
                                  Pexp_constant Const_string("%a %a",None)
                              <label> ""
                                expression (fGramDef.ml[275,11064+23]..[275,11064+41])
                                  Pexp_ident "unparse_simple_pat" (fGramDef.ml[275,11064+23]..[275,11064+41])
                              <label> ""
                                expression (fGramDef.ml[275,11064+42]..[275,11064+43])
                                  Pexp_ident "x" (fGramDef.ml[275,11064+42]..[275,11064+43])
                              <label> ""
                                expression (fGramDef.ml[275,11064+44]..[275,11064+62])
                                  Pexp_ident "unparse_simple_pat" (fGramDef.ml[275,11064+44]..[275,11064+62])
                              <label> ""
                                expression (fGramDef.ml[275,11064+63]..[275,11064+64])
                                  Pexp_ident "v" (fGramDef.ml[275,11064+63]..[275,11064+64])
                            ]
                        <case>
                          pattern (fGramDef.ml[276,11129+9]..[276,11129+28])
                            Ppat_construct "::" (fGramDef.ml[276,11129+22]..[276,11129+24])
                            Some
                              pattern (fGramDef.ml[276,11129+9]..[276,11129+28]) ghost
                                Ppat_tuple
                                [
                                  pattern (fGramDef.ml[276,11129+9]..[276,11129+22])
                                    Ppat_alias "x" (fGramDef.ml[276,11129+20]..[276,11129+21])
                                    pattern (fGramDef.ml[276,11129+10]..[276,11129+16])
                                      Ppat_variant "Vrn"
                                      Some
                                        pattern (fGramDef.ml[276,11129+15]..[276,11129+16])
                                          Ppat_any
                                  pattern (fGramDef.ml[276,11129+24]..[276,11129+28])
                                    Ppat_var "rest" (fGramDef.ml[276,11129+24]..[276,11129+28])
                                ]
                          expression (fGramDef.ml[277,11161+11]..[278,11207+63])
                            Pexp_apply
                            expression (fGramDef.ml[277,11161+11]..[277,11161+12])
                              Pexp_ident "p" (fGramDef.ml[277,11161+11]..[277,11161+12])
                            [
                              <label> ""
                                expression (fGramDef.ml[277,11161+13]..[277,11161+14])
                                  Pexp_ident "f" (fGramDef.ml[277,11161+13]..[277,11161+14])
                              <label> ""
                                expression (fGramDef.ml[277,11161+15]..[277,11161+24])
                                  Pexp_constant Const_string("%a (%a)",None)
                              <label> ""
                                expression (fGramDef.ml[277,11161+25]..[277,11161+43])
                                  Pexp_ident "unparse_simple_pat" (fGramDef.ml[277,11161+25]..[277,11161+43])
                              <label> ""
                                expression (fGramDef.ml[277,11161+44]..[277,11161+45])
                                  Pexp_ident "x" (fGramDef.ml[277,11161+44]..[277,11161+45])
                              <label> ""
                                expression (fGramDef.ml[278,11207+13]..[278,11207+58])
                                  Pexp_apply
                                  expression (fGramDef.ml[278,11207+14]..[278,11207+29])
                                    Pexp_ident "Formatf.pp_list" (fGramDef.ml[278,11207+14]..[278,11207+29])
                                  [
                                    <label> ""
                                      expression (fGramDef.ml[278,11207+30]..[278,11207+48])
                                        Pexp_ident "unparse_simple_pat" (fGramDef.ml[278,11207+30]..[278,11207+48])
                                    <label> "sep"
                                      expression (fGramDef.ml[278,11207+54]..[278,11207+57])
                                        Pexp_constant Const_string(",",None)
                                  ]
                              <label> ""
                                expression (fGramDef.ml[278,11207+59]..[278,11207+63])
                                  Pexp_ident "rest" (fGramDef.ml[278,11207+59]..[278,11207+63])
                            ]
                        <case>
                          pattern (fGramDef.ml[279,11271+9]..[279,11271+10])
                            Ppat_any
                          expression (fGramDef.ml[280,11285+11]..[282,11383+45])
                            Pexp_sequence
                            expression (fGramDef.ml[280,11285+12]..[281,11346+35])
                              Pexp_apply
                              expression (fGramDef.ml[280,11285+12]..[280,11285+13])
                                Pexp_ident "p" (fGramDef.ml[280,11285+12]..[280,11285+13])
                              [
                                <label> ""
                                  expression (fGramDef.ml[280,11285+14]..[280,11285+34])
                                    Pexp_ident "Format.err_formatter" (fGramDef.ml[280,11285+14]..[280,11285+34])
                                <label> ""
                                  expression (fGramDef.ml[280,11285+35]..[280,11285+60])
                                    Pexp_constant Const_string("impossible pattern %a@.",None)
                                <label> ""
                                  expression (fGramDef.ml[281,11346+14]..[281,11346+33])
                                    Pexp_ident "pp_print_simple_pat" (fGramDef.ml[281,11346+14]..[281,11346+33])
                                <label> ""
                                  expression (fGramDef.ml[281,11346+34]..[281,11346+35])
                                    Pexp_ident "x" (fGramDef.ml[281,11346+34]..[281,11346+35])
                              ]
                            expression (fGramDef.ml[282,11383+12]..[282,11383+44])
                              Pexp_apply
                              expression (fGramDef.ml[282,11383+12]..[282,11383+23])
                                Pexp_ident "invalid_arg" (fGramDef.ml[282,11383+12]..[282,11383+23])
                              [
                                <label> ""
                                  expression (fGramDef.ml[282,11383+24]..[282,11383+44])
                                    Pexp_constant Const_string("unparse_simple_pat",None)
                              ]
                      ]
                <case>
                  pattern (fGramDef.ml[283,11430+4]..[283,11430+16])
                    Ppat_variant "Com"
                    Some
                      pattern (fGramDef.ml[283,11430+9]..[283,11430+16])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[283,11430+10]..[283,11430+11])
                            Ppat_any
                          pattern (fGramDef.ml[283,11430+12]..[283,11430+13])
                            Ppat_var "a" (fGramDef.ml[283,11430+12]..[283,11430+13])
                          pattern (fGramDef.ml[283,11430+14]..[283,11430+15])
                            Ppat_var "b" (fGramDef.ml[283,11430+14]..[283,11430+15])
                        ]
                  expression (fGramDef.ml[283,11430+20]..[283,11430+74])
                    Pexp_apply
                    expression (fGramDef.ml[283,11430+20]..[283,11430+21])
                      Pexp_ident "p" (fGramDef.ml[283,11430+20]..[283,11430+21])
                    [
                      <label> ""
                        expression (fGramDef.ml[283,11430+22]..[283,11430+23])
                          Pexp_ident "f" (fGramDef.ml[283,11430+22]..[283,11430+23])
                      <label> ""
                        expression (fGramDef.ml[283,11430+24]..[283,11430+32])
                          Pexp_constant Const_string("%a, %a",None)
                      <label> ""
                        expression (fGramDef.ml[283,11430+33]..[283,11430+51])
                          Pexp_ident "unparse_simple_pat" (fGramDef.ml[283,11430+33]..[283,11430+51])
                      <label> ""
                        expression (fGramDef.ml[283,11430+52]..[283,11430+53])
                          Pexp_ident "a" (fGramDef.ml[283,11430+52]..[283,11430+53])
                      <label> ""
                        expression (fGramDef.ml[283,11430+54]..[283,11430+72])
                          Pexp_ident "unparse_simple_pat" (fGramDef.ml[283,11430+54]..[283,11430+72])
                      <label> ""
                        expression (fGramDef.ml[283,11430+73]..[283,11430+74])
                          Pexp_ident "b" (fGramDef.ml[283,11430+73]..[283,11430+74])
                    ]
                <case>
                  pattern (fGramDef.ml[284,11505+4]..[284,11505+18])
                    Ppat_variant "Alias"
                    Some
                      pattern (fGramDef.ml[284,11505+11]..[284,11505+18])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[284,11505+12]..[284,11505+13])
                            Ppat_any
                          pattern (fGramDef.ml[284,11505+14]..[284,11505+15])
                            Ppat_var "p" (fGramDef.ml[284,11505+14]..[284,11505+15])
                          pattern (fGramDef.ml[284,11505+16]..[284,11505+17])
                            Ppat_any
                        ]
                  expression (fGramDef.ml[284,11505+22]..[284,11505+44])
                    Pexp_apply
                    expression (fGramDef.ml[284,11505+22]..[284,11505+40])
                      Pexp_ident "unparse_simple_pat" (fGramDef.ml[284,11505+22]..[284,11505+40])
                    [
                      <label> ""
                        expression (fGramDef.ml[284,11505+41]..[284,11505+42])
                          Pexp_ident "f" (fGramDef.ml[284,11505+41]..[284,11505+42])
                      <label> ""
                        expression (fGramDef.ml[284,11505+43]..[284,11505+44])
                          Pexp_ident "p" (fGramDef.ml[284,11505+43]..[284,11505+44])
                    ]
                <case>
                  pattern (fGramDef.ml[285,11550+4]..[285,11550+16])
                    Ppat_variant "Bar"
                    Some
                      pattern (fGramDef.ml[285,11550+9]..[285,11550+16])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[285,11550+10]..[285,11550+11])
                            Ppat_any
                          pattern (fGramDef.ml[285,11550+12]..[285,11550+13])
                            Ppat_var "a" (fGramDef.ml[285,11550+12]..[285,11550+13])
                          pattern (fGramDef.ml[285,11550+14]..[285,11550+15])
                            Ppat_var "b" (fGramDef.ml[285,11550+14]..[285,11550+15])
                        ]
                  expression (fGramDef.ml[285,11550+20]..[285,11550+74])
                    Pexp_apply
                    expression (fGramDef.ml[285,11550+20]..[285,11550+21])
                      Pexp_ident "p" (fGramDef.ml[285,11550+20]..[285,11550+21])
                    [
                      <label> ""
                        expression (fGramDef.ml[285,11550+22]..[285,11550+23])
                          Pexp_ident "f" (fGramDef.ml[285,11550+22]..[285,11550+23])
                      <label> ""
                        expression (fGramDef.ml[285,11550+24]..[285,11550+32])
                          Pexp_constant Const_string("%a| %a",None)
                      <label> ""
                        expression (fGramDef.ml[285,11550+33]..[285,11550+51])
                          Pexp_ident "unparse_simple_pat" (fGramDef.ml[285,11550+33]..[285,11550+51])
                      <label> ""
                        expression (fGramDef.ml[285,11550+52]..[285,11550+53])
                          Pexp_ident "a" (fGramDef.ml[285,11550+52]..[285,11550+53])
                      <label> ""
                        expression (fGramDef.ml[285,11550+54]..[285,11550+72])
                          Pexp_ident "unparse_simple_pat" (fGramDef.ml[285,11550+54]..[285,11550+72])
                      <label> ""
                        expression (fGramDef.ml[285,11550+73]..[285,11550+74])
                          Pexp_ident "b" (fGramDef.ml[285,11550+73]..[285,11550+74])
                    ]
                <case>
                  pattern (fGramDef.ml[286,11625+4]..[286,11625+14])
                    Ppat_variant "Str"
                    Some
                      pattern (fGramDef.ml[286,11625+9]..[286,11625+14])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[286,11625+10]..[286,11625+11])
                            Ppat_any
                          pattern (fGramDef.ml[286,11625+12]..[286,11625+13])
                            Ppat_var "s" (fGramDef.ml[286,11625+12]..[286,11625+13])
                        ]
                  expression (fGramDef.ml[286,11625+18]..[286,11625+28])
                    Pexp_apply
                    expression (fGramDef.ml[286,11625+18]..[286,11625+19])
                      Pexp_ident "p" (fGramDef.ml[286,11625+18]..[286,11625+19])
                    [
                      <label> ""
                        expression (fGramDef.ml[286,11625+20]..[286,11625+21])
                          Pexp_ident "f" (fGramDef.ml[286,11625+20]..[286,11625+21])
                      <label> ""
                        expression (fGramDef.ml[286,11625+22]..[286,11625+26])
                          Pexp_constant Const_string("%S",None)
                      <label> ""
                        expression (fGramDef.ml[286,11625+27]..[286,11625+28])
                          Pexp_ident "s" (fGramDef.ml[286,11625+27]..[286,11625+28])
                    ]
                <case>
                  pattern (fGramDef.ml[287,11654+4]..[287,11654+10])
                    Ppat_variant "Any"
                    Some
                      pattern (fGramDef.ml[287,11654+9]..[287,11654+10])
                        Ppat_any
                  expression (fGramDef.ml[287,11654+14]..[287,11654+21])
                    Pexp_apply
                    expression (fGramDef.ml[287,11654+14]..[287,11654+15])
                      Pexp_ident "p" (fGramDef.ml[287,11654+14]..[287,11654+15])
                    [
                      <label> ""
                        expression (fGramDef.ml[287,11654+16]..[287,11654+17])
                          Pexp_ident "f" (fGramDef.ml[287,11654+16]..[287,11654+17])
                      <label> ""
                        expression (fGramDef.ml[287,11654+18]..[287,11654+21])
                          Pexp_constant Const_string("_",None)
                    ]
                <case>
                  pattern (fGramDef.ml[288,11676+4]..[288,11676+14])
                    Ppat_variant "Lid"
                    Some
                      pattern (fGramDef.ml[288,11676+9]..[288,11676+14])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[288,11676+10]..[288,11676+11])
                            Ppat_any
                          pattern (fGramDef.ml[288,11676+12]..[288,11676+13])
                            Ppat_var "s" (fGramDef.ml[288,11676+12]..[288,11676+13])
                        ]
                  expression (fGramDef.ml[288,11676+18]..[288,11676+28])
                    Pexp_apply
                    expression (fGramDef.ml[288,11676+18]..[288,11676+19])
                      Pexp_ident "p" (fGramDef.ml[288,11676+18]..[288,11676+19])
                    [
                      <label> ""
                        expression (fGramDef.ml[288,11676+20]..[288,11676+21])
                          Pexp_ident "f" (fGramDef.ml[288,11676+20]..[288,11676+21])
                      <label> ""
                        expression (fGramDef.ml[288,11676+22]..[288,11676+26])
                          Pexp_constant Const_string("%s",None)
                      <label> ""
                        expression (fGramDef.ml[288,11676+27]..[288,11676+28])
                          Pexp_ident "s" (fGramDef.ml[288,11676+27]..[288,11676+28])
                    ]
                <case>
                  pattern (fGramDef.ml[289,11705+4]..[289,11705+37])
                    Ppat_variant "Ant"
                    Some
                      pattern (fGramDef.ml[289,11705+9]..[289,11705+37])
                        Ppat_tuple
                        [
                          pattern (fGramDef.ml[289,11705+10]..[289,11705+11])
                            Ppat_any
                          pattern (fGramDef.ml[289,11705+12]..[289,11705+36])
                            Ppat_record Open
                            [
                              "FanUtil.content" (fGramDef.ml[289,11705+14]..[289,11705+29])
                                pattern (fGramDef.ml[289,11705+32]..[289,11705+33])
                                  Ppat_var "s" (fGramDef.ml[289,11705+32]..[289,11705+33])
                            ]
                        ]
                  expression (fGramDef.ml[289,11705+41]..[289,11705+52])
                    Pexp_apply
                    expression (fGramDef.ml[289,11705+41]..[289,11705+42])
                      Pexp_ident "p" (fGramDef.ml[289,11705+41]..[289,11705+42])
                    [
                      <label> ""
                        expression (fGramDef.ml[289,11705+43]..[289,11705+44])
                          Pexp_ident "f" (fGramDef.ml[289,11705+43]..[289,11705+44])
                      <label> ""
                        expression (fGramDef.ml[289,11705+45]..[289,11705+50])
                          Pexp_constant Const_string("$%s",None)
                      <label> ""
                        expression (fGramDef.ml[289,11705+51]..[289,11705+52])
                          Pexp_ident "s" (fGramDef.ml[289,11705+51]..[289,11705+52])
                    ]
              ]
    ]
  structure_item (fGramDef.ml[290,11758+0]..[290,11758+63])
    Pstr_value Nonrec
    [
      <def>
        pattern (fGramDef.ml[290,11758+4]..[290,11758+24])
          Ppat_var "string_of_simple_pat" (fGramDef.ml[290,11758+4]..[290,11758+24])
        expression (fGramDef.ml[290,11758+27]..[290,11758+63])
          Pexp_apply
          expression (fGramDef.ml[290,11758+27]..[290,11758+44])
            Pexp_ident "Formatf.to_string" (fGramDef.ml[290,11758+27]..[290,11758+44])
          [
            <label> ""
              expression (fGramDef.ml[290,11758+45]..[290,11758+63])
                Pexp_ident "unparse_simple_pat" (fGramDef.ml[290,11758+45]..[290,11758+63])
          ]
    ]
]
